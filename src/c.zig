pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(16),
};
pub const gint8 = i8;
pub const guint8 = u8;
pub const gint16 = c_short;
pub const guint16 = c_ushort;
pub const gint32 = c_int;
pub const guint32 = c_uint;
pub const gint64 = c_long;
pub const guint64 = c_ulong;
pub const gssize = c_long;
pub const gsize = c_ulong;
pub const goffset = gint64;
pub const gintptr = c_long;
pub const guintptr = c_ulong;
pub const GPid = c_int;
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int,
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const clock_t = __clock_t;
pub const time_t = __time_t;
pub const struct_tm = extern struct {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: [*c]const u8,
};
pub const struct_timespec = extern struct {
    tv_sec: __time_t,
    tv_nsec: __syscall_slong_t,
};
pub const clockid_t = __clockid_t;
pub const timer_t = __timer_t;
pub const struct_itimerspec = extern struct {
    it_interval: struct_timespec,
    it_value: struct_timespec,
};
pub const union_sigval = extern union {
    sival_int: c_int,
    sival_ptr: ?*anyopaque,
};
pub const __sigval_t = union_sigval;
pub const union_pthread_attr_t = extern union {
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_attr_t = union_pthread_attr_t;
const struct_unnamed_2 = extern struct {
    _function: ?*const fn (__sigval_t) callconv(.C) void,
    _attribute: [*c]pthread_attr_t,
};
const union_unnamed_1 = extern union {
    _pad: [12]c_int,
    _tid: __pid_t,
    _sigev_thread: struct_unnamed_2,
};
pub const struct_sigevent = extern struct {
    sigev_value: __sigval_t,
    sigev_signo: c_int,
    sigev_notify: c_int,
    _sigev_un: union_unnamed_1,
};
pub const pid_t = __pid_t;
pub const struct___locale_data = opaque {};
pub const struct___locale_struct = extern struct {
    __locales: [13]?*struct___locale_data,
    __ctype_b: [*c]const c_ushort,
    __ctype_tolower: [*c]const c_int,
    __ctype_toupper: [*c]const c_int,
    __names: [13][*c]const u8,
};
pub const __locale_t = [*c]struct___locale_struct;
pub const locale_t = __locale_t;
pub extern fn clock() clock_t;
pub extern fn time(__timer: [*c]time_t) time_t;
pub extern fn difftime(__time1: time_t, __time0: time_t) f64;
pub extern fn mktime(__tp: [*c]struct_tm) time_t;
pub extern fn strftime(noalias __s: [*c]u8, __maxsize: usize, noalias __format: [*c]const u8, noalias __tp: [*c]const struct_tm) usize;
pub extern fn strftime_l(noalias __s: [*c]u8, __maxsize: usize, noalias __format: [*c]const u8, noalias __tp: [*c]const struct_tm, __loc: locale_t) usize;
pub extern fn gmtime(__timer: [*c]const time_t) [*c]struct_tm;
pub extern fn localtime(__timer: [*c]const time_t) [*c]struct_tm;
pub extern fn gmtime_r(noalias __timer: [*c]const time_t, noalias __tp: [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias __timer: [*c]const time_t, noalias __tp: [*c]struct_tm) [*c]struct_tm;
pub extern fn asctime(__tp: [*c]const struct_tm) [*c]u8;
pub extern fn ctime(__timer: [*c]const time_t) [*c]u8;
pub extern fn asctime_r(noalias __tp: [*c]const struct_tm, noalias __buf: [*c]u8) [*c]u8;
pub extern fn ctime_r(noalias __timer: [*c]const time_t, noalias __buf: [*c]u8) [*c]u8;
pub extern var __tzname: [2][*c]u8;
pub extern var __daylight: c_int;
pub extern var __timezone: c_long;
pub extern var tzname: [2][*c]u8;
pub extern fn tzset() void;
pub extern var daylight: c_int;
pub extern var timezone: c_long;
pub extern fn timegm(__tp: [*c]struct_tm) time_t;
pub extern fn timelocal(__tp: [*c]struct_tm) time_t;
pub extern fn dysize(__year: c_int) c_int;
pub extern fn nanosleep(__requested_time: [*c]const struct_timespec, __remaining: [*c]struct_timespec) c_int;
pub extern fn clock_getres(__clock_id: clockid_t, __res: [*c]struct_timespec) c_int;
pub extern fn clock_gettime(__clock_id: clockid_t, __tp: [*c]struct_timespec) c_int;
pub extern fn clock_settime(__clock_id: clockid_t, __tp: [*c]const struct_timespec) c_int;
pub extern fn clock_nanosleep(__clock_id: clockid_t, __flags: c_int, __req: [*c]const struct_timespec, __rem: [*c]struct_timespec) c_int;
pub extern fn clock_getcpuclockid(__pid: pid_t, __clock_id: [*c]clockid_t) c_int;
pub extern fn timer_create(__clock_id: clockid_t, noalias __evp: [*c]struct_sigevent, noalias __timerid: [*c]timer_t) c_int;
pub extern fn timer_delete(__timerid: timer_t) c_int;
pub extern fn timer_settime(__timerid: timer_t, __flags: c_int, noalias __value: [*c]const struct_itimerspec, noalias __ovalue: [*c]struct_itimerspec) c_int;
pub extern fn timer_gettime(__timerid: timer_t, __value: [*c]struct_itimerspec) c_int;
pub extern fn timer_getoverrun(__timerid: timer_t) c_int;
pub extern fn timespec_get(__ts: [*c]struct_timespec, __base: c_int) c_int;
pub const gchar = u8;
pub const gshort = c_short;
pub const glong = c_long;
pub const gint = c_int;
pub const gboolean = gint;
pub const guchar = u8;
pub const gushort = c_ushort;
pub const gulong = c_ulong;
pub const guint = c_uint;
pub const gfloat = f32;
pub const gdouble = f64;
pub const gpointer = ?*anyopaque;
pub const gconstpointer = ?*const anyopaque;
pub const GCompareFunc = ?*const fn (gconstpointer, gconstpointer) callconv(.C) gint;
pub const GCompareDataFunc = ?*const fn (gconstpointer, gconstpointer, gpointer) callconv(.C) gint;
pub const GEqualFunc = ?*const fn (gconstpointer, gconstpointer) callconv(.C) gboolean;
pub const GEqualFuncFull = ?*const fn (gconstpointer, gconstpointer, gpointer) callconv(.C) gboolean;
pub const GDestroyNotify = ?*const fn (gpointer) callconv(.C) void;
pub const GFunc = ?*const fn (gpointer, gpointer) callconv(.C) void;
pub const GHashFunc = ?*const fn (gconstpointer) callconv(.C) guint;
pub const GHFunc = ?*const fn (gpointer, gpointer, gpointer) callconv(.C) void;
pub const GCopyFunc = ?*const fn (gconstpointer, gpointer) callconv(.C) gpointer;
pub const GFreeFunc = ?*const fn (gpointer) callconv(.C) void;
pub const GTranslateFunc = ?*const fn ([*c]const gchar, gpointer) callconv(.C) [*c]const gchar; // lib/frida-core/frida-core.h:9270:11: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_3 = opaque {};
pub const union__GDoubleIEEE754 = extern union {
    v_double: gdouble,
    mpn: struct_unnamed_3,
};
pub const GDoubleIEEE754 = union__GDoubleIEEE754; // lib/frida-core/frida-core.h:9261:11: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_4 = opaque {};
pub const union__GFloatIEEE754 = extern union {
    v_float: gfloat,
    mpn: struct_unnamed_4,
};
pub const GFloatIEEE754 = union__GFloatIEEE754;
pub const struct__GTimeVal = extern struct {
    tv_sec: glong,
    tv_usec: glong,
};
pub const GTimeVal = struct__GTimeVal;
pub const grefcount = gint;
pub const gatomicrefcount = gint;
pub extern fn memcpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memmove(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memccpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memset(__s: ?*anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn __memcmpeq(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: usize) c_int;
pub extern fn memchr(__s: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn strcpy(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strncpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strcat(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strncat(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strcmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strncmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strcoll(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strxfrm(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) c_ulong;
pub extern fn strcoll_l(__s1: [*c]const u8, __s2: [*c]const u8, __l: locale_t) c_int;
pub extern fn strxfrm_l(__dest: [*c]u8, __src: [*c]const u8, __n: usize, __l: locale_t) usize;
pub extern fn strdup(__s: [*c]const u8) [*c]u8;
pub extern fn strndup(__string: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strrchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strcspn(__s: [*c]const u8, __reject: [*c]const u8) c_ulong;
pub extern fn strspn(__s: [*c]const u8, __accept: [*c]const u8) c_ulong;
pub extern fn strpbrk(__s: [*c]const u8, __accept: [*c]const u8) [*c]u8;
pub extern fn strstr(__haystack: [*c]const u8, __needle: [*c]const u8) [*c]u8;
pub extern fn strtok(__s: [*c]u8, __delim: [*c]const u8) [*c]u8;
pub extern fn __strtok_r(noalias __s: [*c]u8, noalias __delim: [*c]const u8, noalias __save_ptr: [*c][*c]u8) [*c]u8;
pub extern fn strtok_r(noalias __s: [*c]u8, noalias __delim: [*c]const u8, noalias __save_ptr: [*c][*c]u8) [*c]u8;
pub extern fn strlen(__s: [*c]const u8) c_ulong;
pub extern fn strnlen(__string: [*c]const u8, __maxlen: usize) usize;
pub extern fn strerror(__errnum: c_int) [*c]u8;
pub extern fn strerror_r(__errnum: c_int, __buf: [*c]u8, __buflen: usize) c_int;
pub extern fn strerror_l(__errnum: c_int, __l: locale_t) [*c]u8;
pub extern fn bcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn bcopy(__src: ?*const anyopaque, __dest: ?*anyopaque, __n: usize) void;
pub extern fn bzero(__s: ?*anyopaque, __n: c_ulong) void;
pub extern fn index(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn rindex(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn ffs(__i: c_int) c_int;
pub extern fn ffsl(__l: c_long) c_int;
pub extern fn ffsll(__ll: c_longlong) c_int;
pub extern fn strcasecmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strncasecmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strcasecmp_l(__s1: [*c]const u8, __s2: [*c]const u8, __loc: locale_t) c_int;
pub extern fn strncasecmp_l(__s1: [*c]const u8, __s2: [*c]const u8, __n: usize, __loc: locale_t) c_int;
pub extern fn explicit_bzero(__s: ?*anyopaque, __n: usize) void;
pub extern fn strsep(noalias __stringp: [*c][*c]u8, noalias __delim: [*c]const u8) [*c]u8;
pub extern fn strsignal(__sig: c_int) [*c]u8;
pub extern fn __stpcpy(noalias __dest: [*c]u8, noalias __src: [*c]const u8) [*c]u8;
pub extern fn stpcpy(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn __stpncpy(noalias __dest: [*c]u8, noalias __src: [*c]const u8, __n: usize) [*c]u8;
pub extern fn stpncpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub const struct__GBytes = opaque {};
pub const GBytes = struct__GBytes;
pub const struct__GArray = extern struct {
    data: [*c]gchar,
    len: guint,
};
pub const GArray = struct__GArray;
pub const struct__GByteArray = extern struct {
    data: [*c]guint8,
    len: guint,
};
pub const GByteArray = struct__GByteArray;
pub const struct__GPtrArray = extern struct {
    pdata: [*c]gpointer,
    len: guint,
};
pub const GPtrArray = struct__GPtrArray;
pub extern fn _frida_g_array_new(zero_terminated: gboolean, clear_: gboolean, element_size: guint) [*c]GArray;
pub extern fn _frida_g_array_steal(array: [*c]GArray, len: [*c]gsize) gpointer;
pub extern fn _frida_g_array_sized_new(zero_terminated: gboolean, clear_: gboolean, element_size: guint, reserved_size: guint) [*c]GArray;
pub extern fn _frida_g_array_copy(array: [*c]GArray) [*c]GArray;
pub extern fn _frida_g_array_free(array: [*c]GArray, free_segment: gboolean) [*c]gchar;
pub extern fn _frida_g_array_ref(array: [*c]GArray) [*c]GArray;
pub extern fn _frida_g_array_unref(array: [*c]GArray) void;
pub extern fn _frida_g_array_get_element_size(array: [*c]GArray) guint;
pub extern fn _frida_g_array_append_vals(array: [*c]GArray, data: gconstpointer, len: guint) [*c]GArray;
pub extern fn _frida_g_array_prepend_vals(array: [*c]GArray, data: gconstpointer, len: guint) [*c]GArray;
pub extern fn _frida_g_array_insert_vals(array: [*c]GArray, index_: guint, data: gconstpointer, len: guint) [*c]GArray;
pub extern fn _frida_g_array_set_size(array: [*c]GArray, length: guint) [*c]GArray;
pub extern fn _frida_g_array_remove_index(array: [*c]GArray, index_: guint) [*c]GArray;
pub extern fn _frida_g_array_remove_index_fast(array: [*c]GArray, index_: guint) [*c]GArray;
pub extern fn _frida_g_array_remove_range(array: [*c]GArray, index_: guint, length: guint) [*c]GArray;
pub extern fn _frida_g_array_sort(array: [*c]GArray, compare_func: GCompareFunc) void;
pub extern fn _frida_g_array_sort_with_data(array: [*c]GArray, compare_func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_array_binary_search(array: [*c]GArray, target: gconstpointer, compare_func: GCompareFunc, out_match_index: [*c]guint) gboolean;
pub extern fn _frida_g_array_set_clear_func(array: [*c]GArray, clear_func: GDestroyNotify) void;
pub extern fn _frida_g_ptr_array_new() [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_new_with_free_func(element_free_func: GDestroyNotify) [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_steal(array: [*c]GPtrArray, len: [*c]gsize) [*c]gpointer;
pub extern fn _frida_g_ptr_array_copy(array: [*c]GPtrArray, func: GCopyFunc, user_data: gpointer) [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_sized_new(reserved_size: guint) [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_new_full(reserved_size: guint, element_free_func: GDestroyNotify) [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_new_null_terminated(reserved_size: guint, element_free_func: GDestroyNotify, null_terminated: gboolean) [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_free(array: [*c]GPtrArray, free_seg: gboolean) [*c]gpointer;
pub extern fn _frida_g_ptr_array_ref(array: [*c]GPtrArray) [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_unref(array: [*c]GPtrArray) void;
pub extern fn _frida_g_ptr_array_set_free_func(array: [*c]GPtrArray, element_free_func: GDestroyNotify) void;
pub extern fn _frida_g_ptr_array_set_size(array: [*c]GPtrArray, length: gint) void;
pub extern fn _frida_g_ptr_array_remove_index(array: [*c]GPtrArray, index_: guint) gpointer;
pub extern fn _frida_g_ptr_array_remove_index_fast(array: [*c]GPtrArray, index_: guint) gpointer;
pub extern fn _frida_g_ptr_array_steal_index(array: [*c]GPtrArray, index_: guint) gpointer;
pub extern fn _frida_g_ptr_array_steal_index_fast(array: [*c]GPtrArray, index_: guint) gpointer;
pub extern fn _frida_g_ptr_array_remove(array: [*c]GPtrArray, data: gpointer) gboolean;
pub extern fn _frida_g_ptr_array_remove_fast(array: [*c]GPtrArray, data: gpointer) gboolean;
pub extern fn _frida_g_ptr_array_remove_range(array: [*c]GPtrArray, index_: guint, length: guint) [*c]GPtrArray;
pub extern fn _frida_g_ptr_array_add(array: [*c]GPtrArray, data: gpointer) void;
pub extern fn _frida_g_ptr_array_extend(array_to_extend: [*c]GPtrArray, array: [*c]GPtrArray, func: GCopyFunc, user_data: gpointer) void;
pub extern fn _frida_g_ptr_array_extend_and_steal(array_to_extend: [*c]GPtrArray, array: [*c]GPtrArray) void;
pub extern fn _frida_g_ptr_array_insert(array: [*c]GPtrArray, index_: gint, data: gpointer) void;
pub extern fn _frida_g_ptr_array_sort(array: [*c]GPtrArray, compare_func: GCompareFunc) void;
pub extern fn _frida_g_ptr_array_sort_with_data(array: [*c]GPtrArray, compare_func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_ptr_array_foreach(array: [*c]GPtrArray, func: GFunc, user_data: gpointer) void;
pub extern fn _frida_g_ptr_array_find(haystack: [*c]GPtrArray, needle: gconstpointer, index_: [*c]guint) gboolean;
pub extern fn _frida_g_ptr_array_find_with_equal_func(haystack: [*c]GPtrArray, needle: gconstpointer, equal_func: GEqualFunc, index_: [*c]guint) gboolean;
pub extern fn _frida_g_ptr_array_is_null_terminated(array: [*c]GPtrArray) gboolean;
pub extern fn _frida_g_byte_array_new() [*c]GByteArray;
pub extern fn _frida_g_byte_array_new_take(data: [*c]guint8, len: gsize) [*c]GByteArray;
pub extern fn _frida_g_byte_array_steal(array: [*c]GByteArray, len: [*c]gsize) [*c]guint8;
pub extern fn _frida_g_byte_array_sized_new(reserved_size: guint) [*c]GByteArray;
pub extern fn _frida_g_byte_array_free(array: [*c]GByteArray, free_segment: gboolean) [*c]guint8;
pub extern fn _frida_g_byte_array_free_to_bytes(array: [*c]GByteArray) ?*GBytes;
pub extern fn _frida_g_byte_array_ref(array: [*c]GByteArray) [*c]GByteArray;
pub extern fn _frida_g_byte_array_unref(array: [*c]GByteArray) void;
pub extern fn _frida_g_byte_array_append(array: [*c]GByteArray, data: [*c]const guint8, len: guint) [*c]GByteArray;
pub extern fn _frida_g_byte_array_prepend(array: [*c]GByteArray, data: [*c]const guint8, len: guint) [*c]GByteArray;
pub extern fn _frida_g_byte_array_set_size(array: [*c]GByteArray, length: guint) [*c]GByteArray;
pub extern fn _frida_g_byte_array_remove_index(array: [*c]GByteArray, index_: guint) [*c]GByteArray;
pub extern fn _frida_g_byte_array_remove_index_fast(array: [*c]GByteArray, index_: guint) [*c]GByteArray;
pub extern fn _frida_g_byte_array_remove_range(array: [*c]GByteArray, index_: guint, length: guint) [*c]GByteArray;
pub extern fn _frida_g_byte_array_sort(array: [*c]GByteArray, compare_func: GCompareFunc) void;
pub extern fn _frida_g_byte_array_sort_with_data(array: [*c]GByteArray, compare_func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_atomic_int_get(atomic: [*c]const volatile gint) gint;
pub extern fn _frida_g_atomic_int_set(atomic: [*c]volatile gint, newval: gint) void;
pub extern fn _frida_g_atomic_int_inc(atomic: [*c]volatile gint) void;
pub extern fn _frida_g_atomic_int_dec_and_test(atomic: [*c]volatile gint) gboolean;
pub extern fn _frida_g_atomic_int_compare_and_exchange(atomic: [*c]volatile gint, oldval: gint, newval: gint) gboolean;
pub extern fn _frida_g_atomic_int_compare_and_exchange_full(atomic: [*c]gint, oldval: gint, newval: gint, preval: [*c]gint) gboolean;
pub extern fn _frida_g_atomic_int_exchange(atomic: [*c]gint, newval: gint) gint;
pub extern fn _frida_g_atomic_int_add(atomic: [*c]volatile gint, val: gint) gint;
pub extern fn _frida_g_atomic_int_and(atomic: [*c]volatile guint, val: guint) guint;
pub extern fn _frida_g_atomic_int_or(atomic: [*c]volatile guint, val: guint) guint;
pub extern fn _frida_g_atomic_int_xor(atomic: [*c]volatile guint, val: guint) guint;
pub extern fn _frida_g_atomic_pointer_get(atomic: ?*const volatile anyopaque) gpointer;
pub extern fn _frida_g_atomic_pointer_set(atomic: ?*volatile anyopaque, newval: gpointer) void;
pub extern fn _frida_g_atomic_pointer_compare_and_exchange(atomic: ?*volatile anyopaque, oldval: gpointer, newval: gpointer) gboolean;
pub extern fn _frida_g_atomic_pointer_compare_and_exchange_full(atomic: ?*anyopaque, oldval: gpointer, newval: gpointer, preval: ?*anyopaque) gboolean;
pub extern fn _frida_g_atomic_pointer_exchange(atomic: ?*anyopaque, newval: gpointer) gpointer;
pub extern fn _frida_g_atomic_pointer_add(atomic: ?*volatile anyopaque, val: gssize) gssize;
pub extern fn _frida_g_atomic_pointer_and(atomic: ?*volatile anyopaque, val: gsize) gsize;
pub extern fn _frida_g_atomic_pointer_or(atomic: ?*volatile anyopaque, val: gsize) gsize;
pub extern fn _frida_g_atomic_pointer_xor(atomic: ?*volatile anyopaque, val: gsize) gsize;
pub extern fn _frida_g_atomic_int_exchange_and_add(atomic: [*c]volatile gint, val: gint) gint;
pub const struct___va_list_tag = extern struct {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: ?*anyopaque,
    reg_save_area: ?*anyopaque,
};
pub const __builtin_va_list = [1]struct___va_list_tag;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __builtin_va_list;
pub const GQuark = guint32;
pub extern fn _frida_g_quark_try_string(string: [*c]const gchar) GQuark;
pub extern fn _frida_g_quark_from_static_string(string: [*c]const gchar) GQuark;
pub extern fn _frida_g_quark_from_string(string: [*c]const gchar) GQuark;
pub extern fn _frida_g_quark_to_string(quark: GQuark) [*c]const gchar;
pub extern fn _frida_g_intern_string(string: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_intern_static_string(string: [*c]const gchar) [*c]const gchar;
pub const struct__GError = extern struct {
    domain: GQuark,
    code: gint,
    message: [*c]gchar,
};
pub const GError = struct__GError;
pub const GErrorInitFunc = ?*const fn ([*c]GError) callconv(.C) void;
pub const GErrorCopyFunc = ?*const fn ([*c]const GError, [*c]GError) callconv(.C) void;
pub const GErrorClearFunc = ?*const fn ([*c]GError) callconv(.C) void;
pub extern fn _frida_g_error_domain_register_static(error_type_name: [*c]const u8, error_type_private_size: gsize, error_type_init: GErrorInitFunc, error_type_copy: GErrorCopyFunc, error_type_clear: GErrorClearFunc) GQuark;
pub extern fn _frida_g_error_domain_register(error_type_name: [*c]const u8, error_type_private_size: gsize, error_type_init: GErrorInitFunc, error_type_copy: GErrorCopyFunc, error_type_clear: GErrorClearFunc) GQuark;
pub extern fn _frida_g_error_new(domain: GQuark, code: gint, format: [*c]const gchar, ...) [*c]GError;
pub extern fn _frida_g_error_new_literal(domain: GQuark, code: gint, message: [*c]const gchar) [*c]GError;
pub extern fn _frida_g_error_new_valist(domain: GQuark, code: gint, format: [*c]const gchar, args: [*c]struct___va_list_tag) [*c]GError;
pub extern fn _frida_g_error_free(@"error": [*c]GError) void;
pub extern fn _frida_g_error_copy(@"error": [*c]const GError) [*c]GError;
pub extern fn _frida_g_error_matches(@"error": [*c]const GError, domain: GQuark, code: gint) gboolean;
pub extern fn _frida_g_set_error(err: [*c][*c]GError, domain: GQuark, code: gint, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_set_error_literal(err: [*c][*c]GError, domain: GQuark, code: gint, message: [*c]const gchar) void;
pub extern fn _frida_g_propagate_error(dest: [*c][*c]GError, src: [*c]GError) void;
pub extern fn _frida_g_clear_error(err: [*c][*c]GError) void;
pub extern fn _frida_g_prefix_error(err: [*c][*c]GError, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_prefix_error_literal(err: [*c][*c]GError, prefix: [*c]const gchar) void;
pub extern fn _frida_g_propagate_prefixed_error(dest: [*c][*c]GError, src: [*c]GError, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_get_user_name() [*c]const gchar;
pub extern fn _frida_g_get_real_name() [*c]const gchar;
pub extern fn _frida_g_get_home_dir() [*c]const gchar;
pub extern fn _frida_g_get_tmp_dir() [*c]const gchar;
pub extern fn _frida_g_get_host_name() [*c]const gchar;
pub extern fn _frida_g_get_prgname() [*c]const gchar;
pub extern fn _frida_g_set_prgname(prgname: [*c]const gchar) void;
pub extern fn _frida_g_get_application_name() [*c]const gchar;
pub extern fn _frida_g_set_application_name(application_name: [*c]const gchar) void;
pub extern fn _frida_g_get_os_info(key_name: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_reload_user_special_dirs_cache() void;
pub extern fn _frida_g_get_user_data_dir() [*c]const gchar;
pub extern fn _frida_g_get_user_config_dir() [*c]const gchar;
pub extern fn _frida_g_get_user_cache_dir() [*c]const gchar;
pub extern fn _frida_g_get_user_state_dir() [*c]const gchar;
pub extern fn _frida_g_get_system_data_dirs() [*c]const [*c]const gchar;
pub extern fn _frida_g_get_system_config_dirs() [*c]const [*c]const gchar;
pub extern fn _frida_g_get_user_runtime_dir() [*c]const gchar;
pub const G_USER_DIRECTORY_DESKTOP: c_int = 0;
pub const G_USER_DIRECTORY_DOCUMENTS: c_int = 1;
pub const G_USER_DIRECTORY_DOWNLOAD: c_int = 2;
pub const G_USER_DIRECTORY_MUSIC: c_int = 3;
pub const G_USER_DIRECTORY_PICTURES: c_int = 4;
pub const G_USER_DIRECTORY_PUBLIC_SHARE: c_int = 5;
pub const G_USER_DIRECTORY_TEMPLATES: c_int = 6;
pub const G_USER_DIRECTORY_VIDEOS: c_int = 7;
pub const G_USER_N_DIRECTORIES: c_int = 8;
pub const GUserDirectory = c_uint;
pub extern fn _frida_g_get_user_special_dir(directory: GUserDirectory) [*c]const gchar;
pub const struct__GDebugKey = extern struct {
    key: [*c]const gchar,
    value: guint,
};
pub const GDebugKey = struct__GDebugKey;
pub extern fn _frida_g_parse_debug_string(string: [*c]const gchar, keys: [*c]const GDebugKey, nkeys: guint) guint;
pub extern fn _frida_g_snprintf(string: [*c]gchar, n: gulong, format: [*c]const gchar, ...) gint;
pub extern fn _frida_g_vsnprintf(string: [*c]gchar, n: gulong, format: [*c]const gchar, args: [*c]struct___va_list_tag) gint;
pub extern fn _frida_g_nullify_pointer(nullify_location: [*c]gpointer) void;
pub const G_FORMAT_SIZE_DEFAULT: c_int = 0;
pub const G_FORMAT_SIZE_LONG_FORMAT: c_int = 1;
pub const G_FORMAT_SIZE_IEC_UNITS: c_int = 2;
pub const G_FORMAT_SIZE_BITS: c_int = 4;
pub const G_FORMAT_SIZE_ONLY_VALUE: c_int = 8;
pub const G_FORMAT_SIZE_ONLY_UNIT: c_int = 16;
pub const GFormatSizeFlags = c_uint;
pub extern fn _frida_g_format_size_full(size: guint64, flags: GFormatSizeFlags) [*c]gchar;
pub extern fn _frida_g_format_size(size: guint64) [*c]gchar;
pub extern fn _frida_g_format_size_for_display(size: goffset) [*c]gchar;
pub const GVoidFunc = ?*const fn () callconv(.C) void;
pub extern fn _frida_g_atexit(func: GVoidFunc) void;
pub extern fn _frida_g_find_program_in_path(program: [*c]const gchar) [*c]gchar;
pub extern fn g_bit_nth_lsf(mask: gulong, nth_bit: gint) gint;
pub extern fn g_bit_nth_msf(mask: gulong, nth_bit: gint) gint;
pub extern fn g_bit_storage(number: gulong) guint;
pub fn g_bit_nth_lsf_impl(arg_mask: gulong, arg_nth_bit: gint) callconv(.C) gint {
    var mask = arg_mask;
    var nth_bit = arg_nth_bit;
    if (nth_bit < -@as(c_int, 1)) {
        nth_bit = -@as(c_int, 1);
    }
    while (nth_bit < ((@as(c_int, 8) * @as(c_int, 8)) - @as(c_int, 1))) {
        nth_bit += 1;
        if ((mask & (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), nth_bit))) != 0) return nth_bit;
    }
    return -@as(c_int, 1);
}
pub fn g_bit_nth_msf_impl(arg_mask: gulong, arg_nth_bit: gint) callconv(.C) gint {
    var mask = arg_mask;
    var nth_bit = arg_nth_bit;
    if ((nth_bit < @as(c_int, 0)) or (nth_bit > (@as(c_int, 8) * @as(c_int, 8)))) {
        nth_bit = @as(c_int, 8) * @as(c_int, 8);
    }
    while (nth_bit > @as(c_int, 0)) {
        nth_bit -= 1;
        if ((mask & (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), nth_bit))) != 0) return nth_bit;
    }
    return -@as(c_int, 1);
}
pub fn g_bit_storage_impl(arg_number: gulong) callconv(.C) guint {
    var number = arg_number;
    var n_bits: guint = 0;
    while (true) {
        n_bits +%= 1;
        number >>= @intCast(@import("std").math.Log2Int(c_int), @as(c_int, 1));
        if (!(number != 0)) break;
    }
    return n_bits;
}
pub const _Float32 = f32;
pub const _Float64 = f64;
pub const _Float32x = f64;
pub const _Float64x = c_longdouble;
pub const div_t = extern struct {
    quot: c_int,
    rem: c_int,
};
pub const ldiv_t = extern struct {
    quot: c_long,
    rem: c_long,
};
pub const lldiv_t = extern struct {
    quot: c_longlong,
    rem: c_longlong,
};
pub extern fn __ctype_get_mb_cur_max() usize;
pub extern fn atof(__nptr: [*c]const u8) f64;
pub extern fn atoi(__nptr: [*c]const u8) c_int;
pub extern fn atol(__nptr: [*c]const u8) c_long;
pub extern fn atoll(__nptr: [*c]const u8) c_longlong;
pub extern fn strtod(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f64;
pub extern fn strtof(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f32;
pub extern fn strtold(__nptr: [*c]const u8, __endptr: [*c][*c]u8) c_longdouble;
pub extern fn strtol(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtoul(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn strtoll(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoull(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn l64a(__n: c_long) [*c]u8;
pub extern fn a64l(__s: [*c]const u8) c_long;
pub const u_char = __u_char;
pub const u_short = __u_short;
pub const u_int = __u_int;
pub const u_long = __u_long;
pub const quad_t = __quad_t;
pub const u_quad_t = __u_quad_t;
pub const fsid_t = __fsid_t;
pub const loff_t = __loff_t;
pub const ino_t = __ino_t;
pub const dev_t = __dev_t;
pub const gid_t = __gid_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const uid_t = __uid_t;
pub const off_t = __off_t;
pub const id_t = __id_t;
pub const daddr_t = __daddr_t;
pub const caddr_t = __caddr_t;
pub const key_t = __key_t;
pub const ulong = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = c_long;
pub fn __bswap_16(arg___bsx: __uint16_t) callconv(.C) __uint16_t {
    var __bsx = arg___bsx;
    return @bitCast(__uint16_t, @truncate(c_short, ((@bitCast(c_int, @as(c_uint, __bsx)) >> @intCast(@import("std").math.Log2Int(c_int), 8)) & @as(c_int, 255)) | ((@bitCast(c_int, @as(c_uint, __bsx)) & @as(c_int, 255)) << @intCast(@import("std").math.Log2Int(c_int), 8))));
}
pub fn __bswap_32(arg___bsx: __uint32_t) callconv(.C) __uint32_t {
    var __bsx = arg___bsx;
    return ((((__bsx & @as(c_uint, 4278190080)) >> @intCast(@import("std").math.Log2Int(c_uint), 24)) | ((__bsx & @as(c_uint, 16711680)) >> @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((__bsx & @as(c_uint, 65280)) << @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((__bsx & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 24));
}
pub fn __bswap_64(arg___bsx: __uint64_t) callconv(.C) __uint64_t {
    var __bsx = arg___bsx;
    return @bitCast(__uint64_t, @truncate(c_ulong, ((((((((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 56)) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 280375465082880)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 1095216660480)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 4278190080)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 16711680)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 65280)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 255)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 56))));
}
pub fn __uint16_identity(arg___x: __uint16_t) callconv(.C) __uint16_t {
    var __x = arg___x;
    return __x;
}
pub fn __uint32_identity(arg___x: __uint32_t) callconv(.C) __uint32_t {
    var __x = arg___x;
    return __x;
}
pub fn __uint64_identity(arg___x: __uint64_t) callconv(.C) __uint64_t {
    var __x = arg___x;
    return __x;
}
pub const __sigset_t = extern struct {
    __val: [16]c_ulong,
};
pub const sigset_t = __sigset_t;
pub const struct_timeval = extern struct {
    tv_sec: __time_t,
    tv_usec: __suseconds_t,
};
pub const suseconds_t = __suseconds_t;
pub const __fd_mask = c_long;
pub const fd_set = extern struct {
    __fds_bits: [16]__fd_mask,
};
pub const fd_mask = __fd_mask;
pub extern fn select(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]const struct_timespec, noalias __sigmask: [*c]const __sigset_t) c_int;
pub const blksize_t = __blksize_t;
pub const blkcnt_t = __blkcnt_t;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
const struct_unnamed_5 = extern struct {
    __low: c_uint,
    __high: c_uint,
};
pub const __atomic_wide_counter = extern union {
    __value64: c_ulonglong,
    __value32: struct_unnamed_5,
};
pub const struct___pthread_internal_list = extern struct {
    __prev: [*c]struct___pthread_internal_list,
    __next: [*c]struct___pthread_internal_list,
};
pub const __pthread_list_t = struct___pthread_internal_list;
pub const struct___pthread_internal_slist = extern struct {
    __next: [*c]struct___pthread_internal_slist,
};
pub const __pthread_slist_t = struct___pthread_internal_slist;
pub const struct___pthread_mutex_s = extern struct {
    __lock: c_int,
    __count: c_uint,
    __owner: c_int,
    __nusers: c_uint,
    __kind: c_int,
    __spins: c_short,
    __elision: c_short,
    __list: __pthread_list_t,
};
pub const struct___pthread_rwlock_arch_t = extern struct {
    __readers: c_uint,
    __writers: c_uint,
    __wrphase_futex: c_uint,
    __writers_futex: c_uint,
    __pad3: c_uint,
    __pad4: c_uint,
    __cur_writer: c_int,
    __shared: c_int,
    __rwelision: i8,
    __pad1: [7]u8,
    __pad2: c_ulong,
    __flags: c_uint,
};
pub const struct___pthread_cond_s = extern struct {
    __wseq: __atomic_wide_counter,
    __g1_start: __atomic_wide_counter,
    __g_refs: [2]c_uint,
    __g_size: [2]c_uint,
    __g1_orig_size: c_uint,
    __wrefs: c_uint,
    __g_signals: [2]c_uint,
};
pub const __tss_t = c_uint;
pub const __thrd_t = c_ulong;
pub const __once_flag = extern struct {
    __data: c_int,
};
pub const pthread_t = c_ulong;
pub const pthread_mutexattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_condattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_key_t = c_uint;
pub const pthread_once_t = c_int;
pub const pthread_mutex_t = extern union {
    __data: struct___pthread_mutex_s,
    __size: [40]u8,
    __align: c_long,
};
pub const pthread_cond_t = extern union {
    __data: struct___pthread_cond_s,
    __size: [48]u8,
    __align: c_longlong,
};
pub const pthread_rwlock_t = extern union {
    __data: struct___pthread_rwlock_arch_t,
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_rwlockattr_t = extern union {
    __size: [8]u8,
    __align: c_long,
};
pub const pthread_spinlock_t = c_int;
pub const pthread_barrier_t = extern union {
    __size: [32]u8,
    __align: c_long,
};
pub const pthread_barrierattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub extern fn random() c_long;
pub extern fn srandom(__seed: c_uint) void;
pub extern fn initstate(__seed: c_uint, __statebuf: [*c]u8, __statelen: usize) [*c]u8;
pub extern fn setstate(__statebuf: [*c]u8) [*c]u8;
pub const struct_random_data = extern struct {
    fptr: [*c]i32,
    rptr: [*c]i32,
    state: [*c]i32,
    rand_type: c_int,
    rand_deg: c_int,
    rand_sep: c_int,
    end_ptr: [*c]i32,
};
pub extern fn random_r(noalias __buf: [*c]struct_random_data, noalias __result: [*c]i32) c_int;
pub extern fn srandom_r(__seed: c_uint, __buf: [*c]struct_random_data) c_int;
pub extern fn initstate_r(__seed: c_uint, noalias __statebuf: [*c]u8, __statelen: usize, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn setstate_r(noalias __statebuf: [*c]u8, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn rand() c_int;
pub extern fn srand(__seed: c_uint) void;
pub extern fn rand_r(__seed: [*c]c_uint) c_int;
pub extern fn drand48() f64;
pub extern fn erand48(__xsubi: [*c]c_ushort) f64;
pub extern fn lrand48() c_long;
pub extern fn nrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn mrand48() c_long;
pub extern fn jrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn srand48(__seedval: c_long) void;
pub extern fn seed48(__seed16v: [*c]c_ushort) [*c]c_ushort;
pub extern fn lcong48(__param: [*c]c_ushort) void;
pub const struct_drand48_data = extern struct {
    __x: [3]c_ushort,
    __old_x: [3]c_ushort,
    __c: c_ushort,
    __init: c_ushort,
    __a: c_ulonglong,
};
pub extern fn drand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn erand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn lrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn nrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn mrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn jrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn srand48_r(__seedval: c_long, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn seed48_r(__seed16v: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn lcong48_r(__param: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn arc4random() __uint32_t;
pub extern fn arc4random_buf(__buf: ?*anyopaque, __size: usize) void;
pub extern fn arc4random_uniform(__upper_bound: __uint32_t) __uint32_t;
pub extern fn malloc(__size: c_ulong) ?*anyopaque;
pub extern fn calloc(__nmemb: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn realloc(__ptr: ?*anyopaque, __size: c_ulong) ?*anyopaque;
pub extern fn free(__ptr: ?*anyopaque) void;
pub extern fn reallocarray(__ptr: ?*anyopaque, __nmemb: usize, __size: usize) ?*anyopaque;
pub extern fn alloca(__size: c_ulong) ?*anyopaque;
pub extern fn valloc(__size: usize) ?*anyopaque;
pub extern fn posix_memalign(__memptr: [*c]?*anyopaque, __alignment: usize, __size: usize) c_int;
pub extern fn aligned_alloc(__alignment: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn abort() noreturn;
pub extern fn atexit(__func: ?*const fn () callconv(.C) void) c_int;
pub extern fn at_quick_exit(__func: ?*const fn () callconv(.C) void) c_int;
pub extern fn on_exit(__func: ?*const fn (c_int, ?*anyopaque) callconv(.C) void, __arg: ?*anyopaque) c_int;
pub extern fn exit(__status: c_int) noreturn;
pub extern fn quick_exit(__status: c_int) noreturn;
pub extern fn _Exit(__status: c_int) noreturn;
pub extern fn getenv(__name: [*c]const u8) [*c]u8;
pub extern fn putenv(__string: [*c]u8) c_int;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __replace: c_int) c_int;
pub extern fn unsetenv(__name: [*c]const u8) c_int;
pub extern fn clearenv() c_int;
pub extern fn mktemp(__template: [*c]u8) [*c]u8;
pub extern fn mkstemp(__template: [*c]u8) c_int;
pub extern fn mkstemps(__template: [*c]u8, __suffixlen: c_int) c_int;
pub extern fn mkdtemp(__template: [*c]u8) [*c]u8;
pub extern fn system(__command: [*c]const u8) c_int;
pub extern fn realpath(noalias __name: [*c]const u8, noalias __resolved: [*c]u8) [*c]u8;
pub const __compar_fn_t = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int;
pub extern fn bsearch(__key: ?*const anyopaque, __base: ?*const anyopaque, __nmemb: usize, __size: usize, __compar: __compar_fn_t) ?*anyopaque;
pub extern fn qsort(__base: ?*anyopaque, __nmemb: usize, __size: usize, __compar: __compar_fn_t) void;
pub extern fn abs(__x: c_int) c_int;
pub extern fn labs(__x: c_long) c_long;
pub extern fn llabs(__x: c_longlong) c_longlong;
pub extern fn div(__numer: c_int, __denom: c_int) div_t;
pub extern fn ldiv(__numer: c_long, __denom: c_long) ldiv_t;
pub extern fn lldiv(__numer: c_longlong, __denom: c_longlong) lldiv_t;
pub extern fn ecvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn fcvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn gcvt(__value: f64, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn qecvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qfcvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qgcvt(__value: c_longdouble, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn ecvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn fcvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qecvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qfcvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbtowc(noalias __pwc: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) c_int;
pub extern fn wctomb(__s: [*c]u8, __wchar: wchar_t) c_int;
pub extern fn mbstowcs(noalias __pwcs: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) usize;
pub extern fn wcstombs(noalias __s: [*c]u8, noalias __pwcs: [*c]const wchar_t, __n: usize) usize;
pub extern fn rpmatch(__response: [*c]const u8) c_int;
pub extern fn getsubopt(noalias __optionp: [*c][*c]u8, noalias __tokens: [*c]const [*c]u8, noalias __valuep: [*c][*c]u8) c_int;
pub extern fn getloadavg(__loadavg: [*c]f64, __nelem: c_int) c_int;
pub extern fn _frida_g_thread_error_quark() GQuark;
pub const G_THREAD_ERROR_AGAIN: c_int = 0;
pub const GThreadError = c_uint;
pub const GThreadFunc = ?*const fn (gpointer) callconv(.C) gpointer;
pub const GThreadGarbageHandler = ?*const fn (gpointer) callconv(.C) void;
pub const struct__GThreadCallbacks = extern struct {
    on_thread_init: ?*const fn () callconv(.C) void,
    on_thread_realize: ?*const fn () callconv(.C) void,
    on_thread_dispose: ?*const fn () callconv(.C) void,
    on_thread_finalize: ?*const fn () callconv(.C) void,
};
pub const GThreadCallbacks = struct__GThreadCallbacks;
pub const struct__GThread = extern struct {
    func: GThreadFunc,
    data: gpointer,
    joinable: gboolean,
    priority: GThreadPriority,
};
pub const GThread = struct__GThread;
pub const union__GMutex = extern union {
    p: gpointer,
    i: [2]guint,
};
pub const GMutex = union__GMutex;
pub const struct__GRecMutex = extern struct {
    p: gpointer,
    i: [2]guint,
};
pub const GRecMutex = struct__GRecMutex;
pub const struct__GRWLock = extern struct {
    p: gpointer,
    i: [2]guint,
};
pub const GRWLock = struct__GRWLock;
pub const struct__GCond = extern struct {
    p: gpointer,
    i: [2]guint,
};
pub const GCond = struct__GCond;
pub const struct__GPrivate = extern struct {
    p: gpointer,
    notify: GDestroyNotify,
    flags: GPrivateFlags,
    future: [1]gpointer,
};
pub const GPrivate = struct__GPrivate;
pub const struct__GOnce = extern struct {
    status: GOnceStatus,
    retval: gpointer,
};
pub const GOnce = struct__GOnce;
pub const G_PRIVATE_DESTROY_LATE: c_int = 1;
pub const G_PRIVATE_DESTROY_LAST: c_int = 2;
pub const GPrivateFlags = c_uint;
pub const G_ONCE_STATUS_NOTCALLED: c_int = 0;
pub const G_ONCE_STATUS_PROGRESS: c_int = 1;
pub const G_ONCE_STATUS_READY: c_int = 2;
pub const GOnceStatus = c_uint;
pub extern var _frida_glib_thread_callbacks: [*c]GThreadCallbacks;
pub extern fn _frida_g_thread_set_callbacks(callbacks: [*c]GThreadCallbacks) void;
pub extern fn _frida_g_thread_set_garbage_handler(handler: GThreadGarbageHandler, user_data: gpointer) void;
pub extern fn _frida_g_thread_garbage_collect() gboolean;
pub extern fn _frida_g_thread_ref(thread: [*c]GThread) [*c]GThread;
pub extern fn _frida_g_thread_unref(thread: [*c]GThread) void;
pub extern fn _frida_g_thread_new(name: [*c]const gchar, func: GThreadFunc, data: gpointer) [*c]GThread;
pub extern fn _frida_g_thread_try_new(name: [*c]const gchar, func: GThreadFunc, data: gpointer, @"error": [*c][*c]GError) [*c]GThread;
pub extern fn _frida_g_thread_self() [*c]GThread;
pub extern fn _frida_g_thread_exit(retval: gpointer) void;
pub extern fn _frida_g_thread_join(thread: [*c]GThread) gpointer;
pub extern fn _frida_g_thread_yield() void;
pub extern fn _frida_g_mutex_init(mutex: [*c]GMutex) void;
pub extern fn _frida_g_mutex_clear(mutex: [*c]GMutex) void;
pub extern fn _frida_g_mutex_lock(mutex: [*c]GMutex) void;
pub extern fn _frida_g_mutex_trylock(mutex: [*c]GMutex) gboolean;
pub extern fn _frida_g_mutex_unlock(mutex: [*c]GMutex) void;
pub extern fn _frida_g_rw_lock_init(rw_lock: [*c]GRWLock) void;
pub extern fn _frida_g_rw_lock_clear(rw_lock: [*c]GRWLock) void;
pub extern fn _frida_g_rw_lock_writer_lock(rw_lock: [*c]GRWLock) void;
pub extern fn _frida_g_rw_lock_writer_trylock(rw_lock: [*c]GRWLock) gboolean;
pub extern fn _frida_g_rw_lock_writer_unlock(rw_lock: [*c]GRWLock) void;
pub extern fn _frida_g_rw_lock_reader_lock(rw_lock: [*c]GRWLock) void;
pub extern fn _frida_g_rw_lock_reader_trylock(rw_lock: [*c]GRWLock) gboolean;
pub extern fn _frida_g_rw_lock_reader_unlock(rw_lock: [*c]GRWLock) void;
pub extern fn _frida_g_rec_mutex_init(rec_mutex: [*c]GRecMutex) void;
pub extern fn _frida_g_rec_mutex_clear(rec_mutex: [*c]GRecMutex) void;
pub extern fn _frida_g_rec_mutex_lock(rec_mutex: [*c]GRecMutex) void;
pub extern fn _frida_g_rec_mutex_trylock(rec_mutex: [*c]GRecMutex) gboolean;
pub extern fn _frida_g_rec_mutex_unlock(rec_mutex: [*c]GRecMutex) void;
pub extern fn _frida_g_cond_init(cond: [*c]GCond) void;
pub extern fn _frida_g_cond_clear(cond: [*c]GCond) void;
pub extern fn _frida_g_cond_wait(cond: [*c]GCond, mutex: [*c]GMutex) void;
pub extern fn _frida_g_cond_signal(cond: [*c]GCond) void;
pub extern fn _frida_g_cond_broadcast(cond: [*c]GCond) void;
pub extern fn _frida_g_cond_wait_until(cond: [*c]GCond, mutex: [*c]GMutex, end_time: gint64) gboolean;
pub extern fn _frida_g_private_get(key: [*c]GPrivate) gpointer;
pub extern fn _frida_g_private_set(key: [*c]GPrivate, value: gpointer) void;
pub extern fn _frida_g_private_replace(key: [*c]GPrivate, value: gpointer) void;
pub extern fn _frida_g_once_impl(once: [*c]GOnce, func: GThreadFunc, arg: gpointer) gpointer;
pub extern fn _frida_g_once_init_enter(location: ?*volatile anyopaque) gboolean;
pub extern fn _frida_g_once_init_leave(location: ?*volatile anyopaque, result: gsize) void;
pub extern fn _frida_g_get_num_processors() guint;
pub const GMutexLocker = anyopaque;
pub fn g_mutex_locker_new(arg_mutex: [*c]GMutex) callconv(.C) ?*GMutexLocker {
    var mutex = arg_mutex;
    _frida_g_mutex_lock(mutex);
    return @ptrCast(?*GMutexLocker, mutex);
}
pub fn g_mutex_locker_free(arg_locker: ?*GMutexLocker) callconv(.C) void {
    var locker = arg_locker;
    _frida_g_mutex_unlock(@ptrCast([*c]GMutex, @alignCast(@import("std").meta.alignment([*c]GMutex), locker)));
}
pub const GRecMutexLocker = anyopaque;
pub fn g_rec_mutex_locker_new(arg_rec_mutex: [*c]GRecMutex) callconv(.C) ?*GRecMutexLocker {
    var rec_mutex = arg_rec_mutex;
    _frida_g_rec_mutex_lock(rec_mutex);
    return @ptrCast(?*GRecMutexLocker, rec_mutex);
}
pub fn g_rec_mutex_locker_free(arg_locker: ?*GRecMutexLocker) callconv(.C) void {
    var locker = arg_locker;
    _frida_g_rec_mutex_unlock(@ptrCast([*c]GRecMutex, @alignCast(@import("std").meta.alignment([*c]GRecMutex), locker)));
}
pub const GRWLockWriterLocker = anyopaque;
pub fn g_rw_lock_writer_locker_new(arg_rw_lock: [*c]GRWLock) callconv(.C) ?*GRWLockWriterLocker {
    var rw_lock = arg_rw_lock;
    _frida_g_rw_lock_writer_lock(rw_lock);
    return @ptrCast(?*GRWLockWriterLocker, rw_lock);
}
pub fn g_rw_lock_writer_locker_free(arg_locker: ?*GRWLockWriterLocker) callconv(.C) void {
    var locker = arg_locker;
    _frida_g_rw_lock_writer_unlock(@ptrCast([*c]GRWLock, @alignCast(@import("std").meta.alignment([*c]GRWLock), locker)));
}
pub const GRWLockReaderLocker = anyopaque;
pub fn g_rw_lock_reader_locker_new(arg_rw_lock: [*c]GRWLock) callconv(.C) ?*GRWLockReaderLocker {
    var rw_lock = arg_rw_lock;
    _frida_g_rw_lock_reader_lock(rw_lock);
    return @ptrCast(?*GRWLockReaderLocker, rw_lock);
}
pub fn g_rw_lock_reader_locker_free(arg_locker: ?*GRWLockReaderLocker) callconv(.C) void {
    var locker = arg_locker;
    _frida_g_rw_lock_reader_unlock(@ptrCast([*c]GRWLock, @alignCast(@import("std").meta.alignment([*c]GRWLock), locker)));
}
pub const struct__GAsyncQueue = opaque {};
pub const GAsyncQueue = struct__GAsyncQueue;
pub extern fn _frida_g_async_queue_new() ?*GAsyncQueue;
pub extern fn _frida_g_async_queue_new_full(item_free_func: GDestroyNotify) ?*GAsyncQueue;
pub extern fn _frida_g_async_queue_lock(queue: ?*GAsyncQueue) void;
pub extern fn _frida_g_async_queue_unlock(queue: ?*GAsyncQueue) void;
pub extern fn _frida_g_async_queue_ref(queue: ?*GAsyncQueue) ?*GAsyncQueue;
pub extern fn _frida_g_async_queue_unref(queue: ?*GAsyncQueue) void;
pub extern fn _frida_g_async_queue_ref_unlocked(queue: ?*GAsyncQueue) void;
pub extern fn _frida_g_async_queue_unref_and_unlock(queue: ?*GAsyncQueue) void;
pub extern fn _frida_g_async_queue_push(queue: ?*GAsyncQueue, data: gpointer) void;
pub extern fn _frida_g_async_queue_push_unlocked(queue: ?*GAsyncQueue, data: gpointer) void;
pub extern fn _frida_g_async_queue_push_sorted(queue: ?*GAsyncQueue, data: gpointer, func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_async_queue_push_sorted_unlocked(queue: ?*GAsyncQueue, data: gpointer, func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_async_queue_pop(queue: ?*GAsyncQueue) gpointer;
pub extern fn _frida_g_async_queue_pop_unlocked(queue: ?*GAsyncQueue) gpointer;
pub extern fn _frida_g_async_queue_try_pop(queue: ?*GAsyncQueue) gpointer;
pub extern fn _frida_g_async_queue_try_pop_unlocked(queue: ?*GAsyncQueue) gpointer;
pub extern fn _frida_g_async_queue_timeout_pop(queue: ?*GAsyncQueue, timeout: guint64) gpointer;
pub extern fn _frida_g_async_queue_timeout_pop_unlocked(queue: ?*GAsyncQueue, timeout: guint64) gpointer;
pub extern fn _frida_g_async_queue_length(queue: ?*GAsyncQueue) gint;
pub extern fn _frida_g_async_queue_length_unlocked(queue: ?*GAsyncQueue) gint;
pub extern fn _frida_g_async_queue_sort(queue: ?*GAsyncQueue, func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_async_queue_sort_unlocked(queue: ?*GAsyncQueue, func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_async_queue_remove(queue: ?*GAsyncQueue, item: gpointer) gboolean;
pub extern fn _frida_g_async_queue_remove_unlocked(queue: ?*GAsyncQueue, item: gpointer) gboolean;
pub extern fn _frida_g_async_queue_push_front(queue: ?*GAsyncQueue, item: gpointer) void;
pub extern fn _frida_g_async_queue_push_front_unlocked(queue: ?*GAsyncQueue, item: gpointer) void;
pub extern fn _frida_g_async_queue_timed_pop(queue: ?*GAsyncQueue, end_time: [*c]GTimeVal) gpointer;
pub extern fn _frida_g_async_queue_timed_pop_unlocked(queue: ?*GAsyncQueue, end_time: [*c]GTimeVal) gpointer;
pub const sig_atomic_t = __sig_atomic_t;
const struct_unnamed_7 = extern struct {
    si_pid: __pid_t,
    si_uid: __uid_t,
};
const struct_unnamed_8 = extern struct {
    si_tid: c_int,
    si_overrun: c_int,
    si_sigval: __sigval_t,
};
const struct_unnamed_9 = extern struct {
    si_pid: __pid_t,
    si_uid: __uid_t,
    si_sigval: __sigval_t,
};
const struct_unnamed_10 = extern struct {
    si_pid: __pid_t,
    si_uid: __uid_t,
    si_status: c_int,
    si_utime: __clock_t,
    si_stime: __clock_t,
};
const struct_unnamed_13 = extern struct {
    _lower: ?*anyopaque,
    _upper: ?*anyopaque,
};
const union_unnamed_12 = extern union {
    _addr_bnd: struct_unnamed_13,
    _pkey: __uint32_t,
};
const struct_unnamed_11 = extern struct {
    si_addr: ?*anyopaque,
    si_addr_lsb: c_short,
    _bounds: union_unnamed_12,
};
const struct_unnamed_14 = extern struct {
    si_band: c_long,
    si_fd: c_int,
};
const struct_unnamed_15 = extern struct {
    _call_addr: ?*anyopaque,
    _syscall: c_int,
    _arch: c_uint,
};
const union_unnamed_6 = extern union {
    _pad: [28]c_int,
    _kill: struct_unnamed_7,
    _timer: struct_unnamed_8,
    _rt: struct_unnamed_9,
    _sigchld: struct_unnamed_10,
    _sigfault: struct_unnamed_11,
    _sigpoll: struct_unnamed_14,
    _sigsys: struct_unnamed_15,
};
pub const siginfo_t = extern struct {
    si_signo: c_int,
    si_errno: c_int,
    si_code: c_int,
    __pad0: c_int,
    _sifields: union_unnamed_6,
};
pub const SI_ASYNCNL: c_int = -60;
pub const SI_DETHREAD: c_int = -7;
pub const SI_TKILL: c_int = -6;
pub const SI_SIGIO: c_int = -5;
pub const SI_ASYNCIO: c_int = -4;
pub const SI_MESGQ: c_int = -3;
pub const SI_TIMER: c_int = -2;
pub const SI_QUEUE: c_int = -1;
pub const SI_USER: c_int = 0;
pub const SI_KERNEL: c_int = 128;
const enum_unnamed_16 = c_int;
pub const ILL_ILLOPC: c_int = 1;
pub const ILL_ILLOPN: c_int = 2;
pub const ILL_ILLADR: c_int = 3;
pub const ILL_ILLTRP: c_int = 4;
pub const ILL_PRVOPC: c_int = 5;
pub const ILL_PRVREG: c_int = 6;
pub const ILL_COPROC: c_int = 7;
pub const ILL_BADSTK: c_int = 8;
pub const ILL_BADIADDR: c_int = 9;
const enum_unnamed_17 = c_uint;
pub const FPE_INTDIV: c_int = 1;
pub const FPE_INTOVF: c_int = 2;
pub const FPE_FLTDIV: c_int = 3;
pub const FPE_FLTOVF: c_int = 4;
pub const FPE_FLTUND: c_int = 5;
pub const FPE_FLTRES: c_int = 6;
pub const FPE_FLTINV: c_int = 7;
pub const FPE_FLTSUB: c_int = 8;
pub const FPE_FLTUNK: c_int = 14;
pub const FPE_CONDTRAP: c_int = 15;
const enum_unnamed_18 = c_uint;
pub const SEGV_MAPERR: c_int = 1;
pub const SEGV_ACCERR: c_int = 2;
pub const SEGV_BNDERR: c_int = 3;
pub const SEGV_PKUERR: c_int = 4;
pub const SEGV_ACCADI: c_int = 5;
pub const SEGV_ADIDERR: c_int = 6;
pub const SEGV_ADIPERR: c_int = 7;
pub const SEGV_MTEAERR: c_int = 8;
pub const SEGV_MTESERR: c_int = 9;
const enum_unnamed_19 = c_uint;
pub const BUS_ADRALN: c_int = 1;
pub const BUS_ADRERR: c_int = 2;
pub const BUS_OBJERR: c_int = 3;
pub const BUS_MCEERR_AR: c_int = 4;
pub const BUS_MCEERR_AO: c_int = 5;
const enum_unnamed_20 = c_uint;
pub const CLD_EXITED: c_int = 1;
pub const CLD_KILLED: c_int = 2;
pub const CLD_DUMPED: c_int = 3;
pub const CLD_TRAPPED: c_int = 4;
pub const CLD_STOPPED: c_int = 5;
pub const CLD_CONTINUED: c_int = 6;
const enum_unnamed_21 = c_uint;
pub const POLL_IN: c_int = 1;
pub const POLL_OUT: c_int = 2;
pub const POLL_MSG: c_int = 3;
pub const POLL_ERR: c_int = 4;
pub const POLL_PRI: c_int = 5;
pub const POLL_HUP: c_int = 6;
const enum_unnamed_22 = c_uint;
pub const sigval_t = __sigval_t;
pub const sigevent_t = struct_sigevent;
pub const SIGEV_SIGNAL: c_int = 0;
pub const SIGEV_NONE: c_int = 1;
pub const SIGEV_THREAD: c_int = 2;
pub const SIGEV_THREAD_ID: c_int = 4;
const enum_unnamed_23 = c_uint;
pub const __sighandler_t = ?*const fn (c_int) callconv(.C) void;
pub extern fn __sysv_signal(__sig: c_int, __handler: __sighandler_t) __sighandler_t;
pub extern fn signal(__sig: c_int, __handler: __sighandler_t) __sighandler_t;
pub extern fn kill(__pid: __pid_t, __sig: c_int) c_int;
pub extern fn killpg(__pgrp: __pid_t, __sig: c_int) c_int;
pub extern fn raise(__sig: c_int) c_int;
pub extern fn ssignal(__sig: c_int, __handler: __sighandler_t) __sighandler_t;
pub extern fn gsignal(__sig: c_int) c_int;
pub extern fn psignal(__sig: c_int, __s: [*c]const u8) void;
pub extern fn psiginfo(__pinfo: [*c]const siginfo_t, __s: [*c]const u8) void;
pub extern fn sigblock(__mask: c_int) c_int;
pub extern fn sigsetmask(__mask: c_int) c_int;
pub extern fn siggetmask() c_int;
pub const sig_t = __sighandler_t;
pub extern fn sigemptyset(__set: [*c]sigset_t) c_int;
pub extern fn sigfillset(__set: [*c]sigset_t) c_int;
pub extern fn sigaddset(__set: [*c]sigset_t, __signo: c_int) c_int;
pub extern fn sigdelset(__set: [*c]sigset_t, __signo: c_int) c_int;
pub extern fn sigismember(__set: [*c]const sigset_t, __signo: c_int) c_int;
const union_unnamed_24 = extern union {
    sa_handler: __sighandler_t,
    sa_sigaction: ?*const fn (c_int, [*c]siginfo_t, ?*anyopaque) callconv(.C) void,
};
pub const struct_sigaction = extern struct {
    __sigaction_handler: union_unnamed_24,
    sa_mask: __sigset_t,
    sa_flags: c_int,
    sa_restorer: ?*const fn () callconv(.C) void,
};
pub extern fn sigprocmask(__how: c_int, noalias __set: [*c]const sigset_t, noalias __oset: [*c]sigset_t) c_int;
pub extern fn sigsuspend(__set: [*c]const sigset_t) c_int;
pub extern fn sigaction(__sig: c_int, noalias __act: [*c]const struct_sigaction, noalias __oact: [*c]struct_sigaction) c_int;
pub extern fn sigpending(__set: [*c]sigset_t) c_int;
pub extern fn sigwait(noalias __set: [*c]const sigset_t, noalias __sig: [*c]c_int) c_int;
pub extern fn sigwaitinfo(noalias __set: [*c]const sigset_t, noalias __info: [*c]siginfo_t) c_int;
pub extern fn sigtimedwait(noalias __set: [*c]const sigset_t, noalias __info: [*c]siginfo_t, noalias __timeout: [*c]const struct_timespec) c_int;
pub extern fn sigqueue(__pid: __pid_t, __sig: c_int, __val: union_sigval) c_int;
pub const struct__fpx_sw_bytes = extern struct {
    magic1: __uint32_t,
    extended_size: __uint32_t,
    xstate_bv: __uint64_t,
    xstate_size: __uint32_t,
    __glibc_reserved1: [7]__uint32_t,
};
pub const struct__fpreg = extern struct {
    significand: [4]c_ushort,
    exponent: c_ushort,
};
pub const struct__fpxreg = extern struct {
    significand: [4]c_ushort,
    exponent: c_ushort,
    __glibc_reserved1: [3]c_ushort,
};
pub const struct__xmmreg = extern struct {
    element: [4]__uint32_t,
};
pub const struct__fpstate = extern struct {
    cwd: __uint16_t,
    swd: __uint16_t,
    ftw: __uint16_t,
    fop: __uint16_t,
    rip: __uint64_t,
    rdp: __uint64_t,
    mxcsr: __uint32_t,
    mxcr_mask: __uint32_t,
    _st: [8]struct__fpxreg,
    _xmm: [16]struct__xmmreg,
    __glibc_reserved1: [24]__uint32_t,
};
const union_unnamed_25 = extern union {
    fpstate: [*c]struct__fpstate,
    __fpstate_word: __uint64_t,
};
pub const struct_sigcontext = extern struct {
    r8: __uint64_t,
    r9: __uint64_t,
    r10: __uint64_t,
    r11: __uint64_t,
    r12: __uint64_t,
    r13: __uint64_t,
    r14: __uint64_t,
    r15: __uint64_t,
    rdi: __uint64_t,
    rsi: __uint64_t,
    rbp: __uint64_t,
    rbx: __uint64_t,
    rdx: __uint64_t,
    rax: __uint64_t,
    rcx: __uint64_t,
    rsp: __uint64_t,
    rip: __uint64_t,
    eflags: __uint64_t,
    cs: c_ushort,
    gs: c_ushort,
    fs: c_ushort,
    __pad0: c_ushort,
    err: __uint64_t,
    trapno: __uint64_t,
    oldmask: __uint64_t,
    cr2: __uint64_t,
    unnamed_0: union_unnamed_25,
    __reserved1: [8]__uint64_t,
};
pub const struct__xsave_hdr = extern struct {
    xstate_bv: __uint64_t,
    __glibc_reserved1: [2]__uint64_t,
    __glibc_reserved2: [5]__uint64_t,
};
pub const struct__ymmh_state = extern struct {
    ymmh_space: [64]__uint32_t,
};
pub const struct__xstate = extern struct {
    fpstate: struct__fpstate,
    xstate_hdr: struct__xsave_hdr,
    ymmh: struct__ymmh_state,
};
pub extern fn sigreturn(__scp: [*c]struct_sigcontext) c_int;
pub const stack_t = extern struct {
    ss_sp: ?*anyopaque,
    ss_flags: c_int,
    ss_size: usize,
};
pub const greg_t = c_longlong;
pub const gregset_t = [23]greg_t;
pub const struct__libc_fpxreg = extern struct {
    significand: [4]c_ushort,
    exponent: c_ushort,
    __glibc_reserved1: [3]c_ushort,
};
pub const struct__libc_xmmreg = extern struct {
    element: [4]__uint32_t,
};
pub const struct__libc_fpstate = extern struct {
    cwd: __uint16_t,
    swd: __uint16_t,
    ftw: __uint16_t,
    fop: __uint16_t,
    rip: __uint64_t,
    rdp: __uint64_t,
    mxcsr: __uint32_t,
    mxcr_mask: __uint32_t,
    _st: [8]struct__libc_fpxreg,
    _xmm: [16]struct__libc_xmmreg,
    __glibc_reserved1: [24]__uint32_t,
};
pub const fpregset_t = [*c]struct__libc_fpstate;
pub const mcontext_t = extern struct {
    gregs: gregset_t,
    fpregs: fpregset_t,
    __reserved1: [8]c_ulonglong,
};
pub const struct_ucontext_t = extern struct {
    uc_flags: c_ulong,
    uc_link: [*c]struct_ucontext_t,
    uc_stack: stack_t,
    uc_mcontext: mcontext_t,
    uc_sigmask: sigset_t,
    __fpregs_mem: struct__libc_fpstate,
    __ssp: [4]c_ulonglong,
};
pub const ucontext_t = struct_ucontext_t;
pub extern fn siginterrupt(__sig: c_int, __interrupt: c_int) c_int;
pub const SS_ONSTACK: c_int = 1;
pub const SS_DISABLE: c_int = 2;
const enum_unnamed_26 = c_uint;
pub extern fn sigaltstack(noalias __ss: [*c]const stack_t, noalias __oss: [*c]stack_t) c_int;
pub const struct_sigstack = extern struct {
    ss_sp: ?*anyopaque,
    ss_onstack: c_int,
};
pub extern fn sigstack(__ss: [*c]struct_sigstack, __oss: [*c]struct_sigstack) c_int;
pub extern fn pthread_sigmask(__how: c_int, noalias __newmask: [*c]const __sigset_t, noalias __oldmask: [*c]__sigset_t) c_int;
pub extern fn pthread_kill(__threadid: pthread_t, __signo: c_int) c_int;
pub extern fn __libc_current_sigrtmin() c_int;
pub extern fn __libc_current_sigrtmax() c_int;
pub extern fn _frida_g_on_error_query(prg_name: [*c]const gchar) void;
pub extern fn _frida_g_on_error_stack_trace(prg_name: [*c]const gchar) void;
pub extern fn _frida_g_base64_encode_step(in: [*c]const guchar, len: gsize, break_lines: gboolean, out: [*c]gchar, state: [*c]gint, save: [*c]gint) gsize;
pub extern fn _frida_g_base64_encode_close(break_lines: gboolean, out: [*c]gchar, state: [*c]gint, save: [*c]gint) gsize;
pub extern fn _frida_g_base64_encode(data: [*c]const guchar, len: gsize) [*c]gchar;
pub extern fn _frida_g_base64_decode_step(in: [*c]const gchar, len: gsize, out: [*c]guchar, state: [*c]gint, save: [*c]guint) gsize;
pub extern fn _frida_g_base64_decode(text: [*c]const gchar, out_len: [*c]gsize) [*c]guchar;
pub extern fn _frida_g_base64_decode_inplace(text: [*c]gchar, out_len: [*c]gsize) [*c]guchar;
pub extern fn _frida_g_bit_lock(address: [*c]volatile gint, lock_bit: gint) void;
pub extern fn _frida_g_bit_trylock(address: [*c]volatile gint, lock_bit: gint) gboolean;
pub extern fn _frida_g_bit_unlock(address: [*c]volatile gint, lock_bit: gint) void;
pub extern fn _frida_g_pointer_bit_lock(address: ?*volatile anyopaque, lock_bit: gint) void;
pub extern fn _frida_g_pointer_bit_trylock(address: ?*volatile anyopaque, lock_bit: gint) gboolean;
pub extern fn _frida_g_pointer_bit_unlock(address: ?*volatile anyopaque, lock_bit: gint) void;
pub const struct__GTimeZone = opaque {};
pub const GTimeZone = struct__GTimeZone;
pub const G_TIME_TYPE_STANDARD: c_int = 0;
pub const G_TIME_TYPE_DAYLIGHT: c_int = 1;
pub const G_TIME_TYPE_UNIVERSAL: c_int = 2;
pub const GTimeType = c_uint;
pub extern fn _frida_g_time_zone_new(identifier: [*c]const gchar) ?*GTimeZone;
pub extern fn _frida_g_time_zone_new_identifier(identifier: [*c]const gchar) ?*GTimeZone;
pub extern fn _frida_g_time_zone_new_utc() ?*GTimeZone;
pub extern fn _frida_g_time_zone_new_local() ?*GTimeZone;
pub extern fn _frida_g_time_zone_new_offset(seconds: gint32) ?*GTimeZone;
pub extern fn _frida_g_time_zone_ref(tz: ?*GTimeZone) ?*GTimeZone;
pub extern fn _frida_g_time_zone_unref(tz: ?*GTimeZone) void;
pub extern fn _frida_g_time_zone_find_interval(tz: ?*GTimeZone, @"type": GTimeType, time_: gint64) gint;
pub extern fn _frida_g_time_zone_adjust_time(tz: ?*GTimeZone, @"type": GTimeType, time_: [*c]gint64) gint;
pub extern fn _frida_g_time_zone_get_abbreviation(tz: ?*GTimeZone, interval: gint) [*c]const gchar;
pub extern fn _frida_g_time_zone_get_offset(tz: ?*GTimeZone, interval: gint) gint32;
pub extern fn _frida_g_time_zone_is_dst(tz: ?*GTimeZone, interval: gint) gboolean;
pub extern fn _frida_g_time_zone_get_identifier(tz: ?*GTimeZone) [*c]const gchar;
pub const GTimeSpan = gint64;
pub const struct__GDateTime = opaque {};
pub const GDateTime = struct__GDateTime;
pub extern fn _frida_g_date_time_unref(datetime: ?*GDateTime) void;
pub extern fn _frida_g_date_time_ref(datetime: ?*GDateTime) ?*GDateTime;
pub extern fn _frida_g_date_time_new_now(tz: ?*GTimeZone) ?*GDateTime;
pub extern fn _frida_g_date_time_new_now_local() ?*GDateTime;
pub extern fn _frida_g_date_time_new_now_utc() ?*GDateTime;
pub extern fn _frida_g_date_time_new_from_unix_local(t: gint64) ?*GDateTime;
pub extern fn _frida_g_date_time_new_from_unix_utc(t: gint64) ?*GDateTime;
pub extern fn _frida_g_date_time_new_from_timeval_local(tv: [*c]const GTimeVal) ?*GDateTime;
pub extern fn _frida_g_date_time_new_from_timeval_utc(tv: [*c]const GTimeVal) ?*GDateTime;
pub extern fn _frida_g_date_time_new_from_iso8601(text: [*c]const gchar, default_tz: ?*GTimeZone) ?*GDateTime;
pub extern fn _frida_g_date_time_new(tz: ?*GTimeZone, year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble) ?*GDateTime;
pub extern fn _frida_g_date_time_new_local(year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble) ?*GDateTime;
pub extern fn _frida_g_date_time_new_utc(year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble) ?*GDateTime;
pub extern fn _frida_g_date_time_add(datetime: ?*GDateTime, timespan: GTimeSpan) ?*GDateTime;
pub extern fn _frida_g_date_time_add_years(datetime: ?*GDateTime, years: gint) ?*GDateTime;
pub extern fn _frida_g_date_time_add_months(datetime: ?*GDateTime, months: gint) ?*GDateTime;
pub extern fn _frida_g_date_time_add_weeks(datetime: ?*GDateTime, weeks: gint) ?*GDateTime;
pub extern fn _frida_g_date_time_add_days(datetime: ?*GDateTime, days: gint) ?*GDateTime;
pub extern fn _frida_g_date_time_add_hours(datetime: ?*GDateTime, hours: gint) ?*GDateTime;
pub extern fn _frida_g_date_time_add_minutes(datetime: ?*GDateTime, minutes: gint) ?*GDateTime;
pub extern fn _frida_g_date_time_add_seconds(datetime: ?*GDateTime, seconds: gdouble) ?*GDateTime;
pub extern fn _frida_g_date_time_add_full(datetime: ?*GDateTime, years: gint, months: gint, days: gint, hours: gint, minutes: gint, seconds: gdouble) ?*GDateTime;
pub extern fn _frida_g_date_time_compare(dt1: gconstpointer, dt2: gconstpointer) gint;
pub extern fn _frida_g_date_time_difference(end: ?*GDateTime, begin: ?*GDateTime) GTimeSpan;
pub extern fn _frida_g_date_time_hash(datetime: gconstpointer) guint;
pub extern fn _frida_g_date_time_equal(dt1: gconstpointer, dt2: gconstpointer) gboolean;
pub extern fn _frida_g_date_time_get_ymd(datetime: ?*GDateTime, year: [*c]gint, month: [*c]gint, day: [*c]gint) void;
pub extern fn _frida_g_date_time_get_year(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_month(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_day_of_month(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_week_numbering_year(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_week_of_year(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_day_of_week(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_day_of_year(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_hour(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_minute(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_second(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_microsecond(datetime: ?*GDateTime) gint;
pub extern fn _frida_g_date_time_get_seconds(datetime: ?*GDateTime) gdouble;
pub extern fn _frida_g_date_time_to_unix(datetime: ?*GDateTime) gint64;
pub extern fn _frida_g_date_time_to_timeval(datetime: ?*GDateTime, tv: [*c]GTimeVal) gboolean;
pub extern fn _frida_g_date_time_get_utc_offset(datetime: ?*GDateTime) GTimeSpan;
pub extern fn _frida_g_date_time_get_timezone(datetime: ?*GDateTime) ?*GTimeZone;
pub extern fn _frida_g_date_time_get_timezone_abbreviation(datetime: ?*GDateTime) [*c]const gchar;
pub extern fn _frida_g_date_time_is_daylight_savings(datetime: ?*GDateTime) gboolean;
pub extern fn _frida_g_date_time_to_timezone(datetime: ?*GDateTime, tz: ?*GTimeZone) ?*GDateTime;
pub extern fn _frida_g_date_time_to_local(datetime: ?*GDateTime) ?*GDateTime;
pub extern fn _frida_g_date_time_to_utc(datetime: ?*GDateTime) ?*GDateTime;
pub extern fn _frida_g_date_time_format(datetime: ?*GDateTime, format: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_date_time_format_iso8601(datetime: ?*GDateTime) [*c]gchar;
pub const G_BOOKMARK_FILE_ERROR_INVALID_URI: c_int = 0;
pub const G_BOOKMARK_FILE_ERROR_INVALID_VALUE: c_int = 1;
pub const G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED: c_int = 2;
pub const G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND: c_int = 3;
pub const G_BOOKMARK_FILE_ERROR_READ: c_int = 4;
pub const G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING: c_int = 5;
pub const G_BOOKMARK_FILE_ERROR_WRITE: c_int = 6;
pub const G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND: c_int = 7;
pub const GBookmarkFileError = c_uint;
pub extern fn _frida_g_bookmark_file_error_quark() GQuark;
pub const struct__GBookmarkFile = opaque {};
pub const GBookmarkFile = struct__GBookmarkFile;
pub extern fn _frida_g_bookmark_file_new() ?*GBookmarkFile;
pub extern fn _frida_g_bookmark_file_free(bookmark: ?*GBookmarkFile) void;
pub extern fn _frida_g_bookmark_file_copy(bookmark: ?*GBookmarkFile) ?*GBookmarkFile;
pub extern fn _frida_g_bookmark_file_load_from_file(bookmark: ?*GBookmarkFile, filename: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_load_from_data(bookmark: ?*GBookmarkFile, data: [*c]const gchar, length: gsize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_load_from_data_dirs(bookmark: ?*GBookmarkFile, file: [*c]const gchar, full_path: [*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_to_data(bookmark: ?*GBookmarkFile, length: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_bookmark_file_to_file(bookmark: ?*GBookmarkFile, filename: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_set_title(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, title: [*c]const gchar) void;
pub extern fn _frida_g_bookmark_file_get_title(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_bookmark_file_set_description(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, description: [*c]const gchar) void;
pub extern fn _frida_g_bookmark_file_get_description(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_bookmark_file_set_mime_type(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, mime_type: [*c]const gchar) void;
pub extern fn _frida_g_bookmark_file_get_mime_type(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_bookmark_file_set_groups(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, groups: [*c][*c]const gchar, length: gsize) void;
pub extern fn _frida_g_bookmark_file_add_group(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, group: [*c]const gchar) void;
pub extern fn _frida_g_bookmark_file_has_group(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, group: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_get_groups(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_bookmark_file_add_application(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, name: [*c]const gchar, exec: [*c]const gchar) void;
pub extern fn _frida_g_bookmark_file_has_application(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, name: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_get_applications(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_bookmark_file_set_app_info(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, name: [*c]const gchar, exec: [*c]const gchar, count: gint, stamp: time_t, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_set_application_info(bookmark: ?*GBookmarkFile, uri: [*c]const u8, name: [*c]const u8, exec: [*c]const u8, count: c_int, stamp: ?*GDateTime, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_get_app_info(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, name: [*c]const gchar, exec: [*c][*c]gchar, count: [*c]guint, stamp: [*c]time_t, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_get_application_info(bookmark: ?*GBookmarkFile, uri: [*c]const u8, name: [*c]const u8, exec: [*c][*c]u8, count: [*c]c_uint, stamp: [*c]?*GDateTime, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_set_is_private(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, is_private: gboolean) void;
pub extern fn _frida_g_bookmark_file_get_is_private(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_set_icon(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, href: [*c]const gchar, mime_type: [*c]const gchar) void;
pub extern fn _frida_g_bookmark_file_get_icon(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, href: [*c][*c]gchar, mime_type: [*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_set_added(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, added: time_t) void;
pub extern fn _frida_g_bookmark_file_set_added_date_time(bookmark: ?*GBookmarkFile, uri: [*c]const u8, added: ?*GDateTime) void;
pub extern fn _frida_g_bookmark_file_get_added(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) time_t;
pub extern fn _frida_g_bookmark_file_get_added_date_time(bookmark: ?*GBookmarkFile, uri: [*c]const u8, @"error": [*c][*c]GError) ?*GDateTime;
pub extern fn _frida_g_bookmark_file_set_modified(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, modified: time_t) void;
pub extern fn _frida_g_bookmark_file_set_modified_date_time(bookmark: ?*GBookmarkFile, uri: [*c]const u8, modified: ?*GDateTime) void;
pub extern fn _frida_g_bookmark_file_get_modified(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) time_t;
pub extern fn _frida_g_bookmark_file_get_modified_date_time(bookmark: ?*GBookmarkFile, uri: [*c]const u8, @"error": [*c][*c]GError) ?*GDateTime;
pub extern fn _frida_g_bookmark_file_set_visited(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, visited: time_t) void;
pub extern fn _frida_g_bookmark_file_set_visited_date_time(bookmark: ?*GBookmarkFile, uri: [*c]const u8, visited: ?*GDateTime) void;
pub extern fn _frida_g_bookmark_file_get_visited(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) time_t;
pub extern fn _frida_g_bookmark_file_get_visited_date_time(bookmark: ?*GBookmarkFile, uri: [*c]const u8, @"error": [*c][*c]GError) ?*GDateTime;
pub extern fn _frida_g_bookmark_file_has_item(bookmark: ?*GBookmarkFile, uri: [*c]const gchar) gboolean;
pub extern fn _frida_g_bookmark_file_get_size(bookmark: ?*GBookmarkFile) gint;
pub extern fn _frida_g_bookmark_file_get_uris(bookmark: ?*GBookmarkFile, length: [*c]gsize) [*c][*c]gchar;
pub extern fn _frida_g_bookmark_file_remove_group(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, group: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_remove_application(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, name: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_remove_item(bookmark: ?*GBookmarkFile, uri: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bookmark_file_move_item(bookmark: ?*GBookmarkFile, old_uri: [*c]const gchar, new_uri: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_bytes_new(data: gconstpointer, size: gsize) ?*GBytes;
pub extern fn _frida_g_bytes_new_take(data: gpointer, size: gsize) ?*GBytes;
pub extern fn _frida_g_bytes_new_static(data: gconstpointer, size: gsize) ?*GBytes;
pub extern fn _frida_g_bytes_new_with_free_func(data: gconstpointer, size: gsize, free_func: GDestroyNotify, user_data: gpointer) ?*GBytes;
pub extern fn _frida_g_bytes_new_from_bytes(bytes: ?*GBytes, offset: gsize, length: gsize) ?*GBytes;
pub extern fn _frida_g_bytes_get_data(bytes: ?*GBytes, size: [*c]gsize) gconstpointer;
pub extern fn _frida_g_bytes_get_size(bytes: ?*GBytes) gsize;
pub extern fn _frida_g_bytes_ref(bytes: ?*GBytes) ?*GBytes;
pub extern fn _frida_g_bytes_unref(bytes: ?*GBytes) void;
pub extern fn _frida_g_bytes_unref_to_data(bytes: ?*GBytes, size: [*c]gsize) gpointer;
pub extern fn _frida_g_bytes_unref_to_array(bytes: ?*GBytes) [*c]GByteArray;
pub extern fn _frida_g_bytes_hash(bytes: gconstpointer) guint;
pub extern fn _frida_g_bytes_equal(bytes1: gconstpointer, bytes2: gconstpointer) gboolean;
pub extern fn _frida_g_bytes_compare(bytes1: gconstpointer, bytes2: gconstpointer) gint;
pub extern fn _frida_g_bytes_get_region(bytes: ?*GBytes, element_size: gsize, offset: gsize, n_elements: gsize) gconstpointer;
pub extern fn _frida_g_get_charset(charset: [*c][*c]const u8) gboolean;
pub extern fn _frida_g_get_codeset() [*c]gchar;
pub extern fn _frida_g_get_console_charset(charset: [*c][*c]const u8) gboolean;
pub extern fn _frida_g_get_language_names() [*c]const [*c]const gchar;
pub extern fn _frida_g_get_language_names_with_category(category_name: [*c]const gchar) [*c]const [*c]const gchar;
pub extern fn _frida_g_get_locale_variants(locale: [*c]const gchar) [*c][*c]gchar;
pub const G_CHECKSUM_MD5: c_int = 0;
pub const G_CHECKSUM_SHA1: c_int = 1;
pub const G_CHECKSUM_SHA256: c_int = 2;
pub const G_CHECKSUM_SHA512: c_int = 3;
pub const G_CHECKSUM_SHA384: c_int = 4;
pub const GChecksumType = c_uint;
pub const struct__GChecksum = opaque {};
pub const GChecksum = struct__GChecksum;
pub extern fn _frida_g_checksum_type_get_length(checksum_type: GChecksumType) gssize;
pub extern fn _frida_g_checksum_new(checksum_type: GChecksumType) ?*GChecksum;
pub extern fn _frida_g_checksum_reset(checksum: ?*GChecksum) void;
pub extern fn _frida_g_checksum_copy(checksum: ?*const GChecksum) ?*GChecksum;
pub extern fn _frida_g_checksum_free(checksum: ?*GChecksum) void;
pub extern fn _frida_g_checksum_update(checksum: ?*GChecksum, data: [*c]const guchar, length: gssize) void;
pub extern fn _frida_g_checksum_get_string(checksum: ?*GChecksum) [*c]const gchar;
pub extern fn _frida_g_checksum_get_digest(checksum: ?*GChecksum, buffer: [*c]guint8, digest_len: [*c]gsize) void;
pub extern fn _frida_g_compute_checksum_for_data(checksum_type: GChecksumType, data: [*c]const guchar, length: gsize) [*c]gchar;
pub extern fn _frida_g_compute_checksum_for_string(checksum_type: GChecksumType, str: [*c]const gchar, length: gssize) [*c]gchar;
pub extern fn _frida_g_compute_checksum_for_bytes(checksum_type: GChecksumType, data: ?*GBytes) [*c]gchar;
pub const G_CONVERT_ERROR_NO_CONVERSION: c_int = 0;
pub const G_CONVERT_ERROR_ILLEGAL_SEQUENCE: c_int = 1;
pub const G_CONVERT_ERROR_FAILED: c_int = 2;
pub const G_CONVERT_ERROR_PARTIAL_INPUT: c_int = 3;
pub const G_CONVERT_ERROR_BAD_URI: c_int = 4;
pub const G_CONVERT_ERROR_NOT_ABSOLUTE_PATH: c_int = 5;
pub const G_CONVERT_ERROR_NO_MEMORY: c_int = 6;
pub const G_CONVERT_ERROR_EMBEDDED_NUL: c_int = 7;
pub const GConvertError = c_uint;
pub extern fn _frida_g_convert_error_quark() GQuark;
pub const struct__GIConv = opaque {};
pub const GIConv = ?*struct__GIConv;
pub extern fn _frida_g_iconv_open(to_codeset: [*c]const gchar, from_codeset: [*c]const gchar) GIConv;
pub extern fn _frida_g_iconv(converter: GIConv, inbuf: [*c][*c]gchar, inbytes_left: [*c]gsize, outbuf: [*c][*c]gchar, outbytes_left: [*c]gsize) gsize;
pub extern fn _frida_g_iconv_close(converter: GIConv) gint;
pub extern fn _frida_g_convert(str: [*c]const gchar, len: gssize, to_codeset: [*c]const gchar, from_codeset: [*c]const gchar, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_convert_with_iconv(str: [*c]const gchar, len: gssize, converter: GIConv, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_convert_with_fallback(str: [*c]const gchar, len: gssize, to_codeset: [*c]const gchar, from_codeset: [*c]const gchar, fallback: [*c]const gchar, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_locale_to_utf8(opsysstring: [*c]const gchar, len: gssize, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_locale_from_utf8(utf8string: [*c]const gchar, len: gssize, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_filename_to_utf8(opsysstring: [*c]const gchar, len: gssize, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_filename_from_utf8(utf8string: [*c]const gchar, len: gssize, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_filename_from_uri(uri: [*c]const gchar, hostname: [*c][*c]gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_filename_to_uri(filename: [*c]const gchar, hostname: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_filename_display_name(filename: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_get_filename_charsets(filename_charsets: [*c][*c][*c]const gchar) gboolean;
pub extern fn _frida_g_filename_display_basename(filename: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_uri_list_extract_uris(uri_list: [*c]const gchar) [*c][*c]gchar;
pub const struct__GData = opaque {};
pub const GData = struct__GData;
pub const GDataForeachFunc = ?*const fn (GQuark, gpointer, gpointer) callconv(.C) void;
pub extern fn _frida_g_datalist_init(datalist: [*c]?*GData) void;
pub extern fn _frida_g_datalist_clear(datalist: [*c]?*GData) void;
pub extern fn _frida_g_datalist_id_get_data(datalist: [*c]?*GData, key_id: GQuark) gpointer;
pub extern fn _frida_g_datalist_id_set_data_full(datalist: [*c]?*GData, key_id: GQuark, data: gpointer, destroy_func: GDestroyNotify) void;
pub extern fn _frida_g_datalist_id_remove_multiple(datalist: [*c]?*GData, keys: [*c]GQuark, n_keys: gsize) void;
pub const GDuplicateFunc = ?*const fn (gpointer, gpointer) callconv(.C) gpointer;
pub extern fn _frida_g_datalist_id_dup_data(datalist: [*c]?*GData, key_id: GQuark, dup_func: GDuplicateFunc, user_data: gpointer) gpointer;
pub extern fn _frida_g_datalist_id_replace_data(datalist: [*c]?*GData, key_id: GQuark, oldval: gpointer, newval: gpointer, destroy: GDestroyNotify, old_destroy: [*c]GDestroyNotify) gboolean;
pub extern fn _frida_g_datalist_id_remove_no_notify(datalist: [*c]?*GData, key_id: GQuark) gpointer;
pub extern fn _frida_g_datalist_foreach(datalist: [*c]?*GData, func: GDataForeachFunc, user_data: gpointer) void;
pub extern fn _frida_g_datalist_set_flags(datalist: [*c]?*GData, flags: guint) void;
pub extern fn _frida_g_datalist_unset_flags(datalist: [*c]?*GData, flags: guint) void;
pub extern fn _frida_g_datalist_get_flags(datalist: [*c]?*GData) guint;
pub extern fn _frida_g_dataset_destroy(dataset_location: gconstpointer) void;
pub extern fn _frida_g_dataset_id_get_data(dataset_location: gconstpointer, key_id: GQuark) gpointer;
pub extern fn _frida_g_datalist_get_data(datalist: [*c]?*GData, key: [*c]const gchar) gpointer;
pub extern fn _frida_g_dataset_id_set_data_full(dataset_location: gconstpointer, key_id: GQuark, data: gpointer, destroy_func: GDestroyNotify) void;
pub extern fn _frida_g_dataset_id_remove_no_notify(dataset_location: gconstpointer, key_id: GQuark) gpointer;
pub extern fn _frida_g_dataset_foreach(dataset_location: gconstpointer, func: GDataForeachFunc, user_data: gpointer) void;
pub const GTime = gint32;
pub const GDateYear = guint16;
pub const GDateDay = guint8; // lib/frida-core/frida-core.h:13553:9: warning: struct demoted to opaque type - has bitfield
pub const struct__GDate = opaque {};
pub const GDate = struct__GDate;
pub const G_DATE_DAY: c_int = 0;
pub const G_DATE_MONTH: c_int = 1;
pub const G_DATE_YEAR: c_int = 2;
pub const GDateDMY = c_uint;
pub const G_DATE_BAD_WEEKDAY: c_int = 0;
pub const G_DATE_MONDAY: c_int = 1;
pub const G_DATE_TUESDAY: c_int = 2;
pub const G_DATE_WEDNESDAY: c_int = 3;
pub const G_DATE_THURSDAY: c_int = 4;
pub const G_DATE_FRIDAY: c_int = 5;
pub const G_DATE_SATURDAY: c_int = 6;
pub const G_DATE_SUNDAY: c_int = 7;
pub const GDateWeekday = c_uint;
pub const G_DATE_BAD_MONTH: c_int = 0;
pub const G_DATE_JANUARY: c_int = 1;
pub const G_DATE_FEBRUARY: c_int = 2;
pub const G_DATE_MARCH: c_int = 3;
pub const G_DATE_APRIL: c_int = 4;
pub const G_DATE_MAY: c_int = 5;
pub const G_DATE_JUNE: c_int = 6;
pub const G_DATE_JULY: c_int = 7;
pub const G_DATE_AUGUST: c_int = 8;
pub const G_DATE_SEPTEMBER: c_int = 9;
pub const G_DATE_OCTOBER: c_int = 10;
pub const G_DATE_NOVEMBER: c_int = 11;
pub const G_DATE_DECEMBER: c_int = 12;
pub const GDateMonth = c_uint;
pub extern fn _frida_g_date_new() ?*GDate;
pub extern fn _frida_g_date_new_dmy(day: GDateDay, month: GDateMonth, year: GDateYear) ?*GDate;
pub extern fn _frida_g_date_new_julian(julian_day: guint32) ?*GDate;
pub extern fn _frida_g_date_free(date: ?*GDate) void;
pub extern fn _frida_g_date_copy(date: ?*const GDate) ?*GDate;
pub extern fn _frida_g_date_valid(date: ?*const GDate) gboolean;
pub extern fn _frida_g_date_valid_day(day: GDateDay) gboolean;
pub extern fn _frida_g_date_valid_month(month: GDateMonth) gboolean;
pub extern fn _frida_g_date_valid_year(year: GDateYear) gboolean;
pub extern fn _frida_g_date_valid_weekday(weekday: GDateWeekday) gboolean;
pub extern fn _frida_g_date_valid_julian(julian_date: guint32) gboolean;
pub extern fn _frida_g_date_valid_dmy(day: GDateDay, month: GDateMonth, year: GDateYear) gboolean;
pub extern fn _frida_g_date_get_weekday(date: ?*const GDate) GDateWeekday;
pub extern fn _frida_g_date_get_month(date: ?*const GDate) GDateMonth;
pub extern fn _frida_g_date_get_year(date: ?*const GDate) GDateYear;
pub extern fn _frida_g_date_get_day(date: ?*const GDate) GDateDay;
pub extern fn _frida_g_date_get_julian(date: ?*const GDate) guint32;
pub extern fn _frida_g_date_get_day_of_year(date: ?*const GDate) guint;
pub extern fn _frida_g_date_get_monday_week_of_year(date: ?*const GDate) guint;
pub extern fn _frida_g_date_get_sunday_week_of_year(date: ?*const GDate) guint;
pub extern fn _frida_g_date_get_iso8601_week_of_year(date: ?*const GDate) guint;
pub extern fn _frida_g_date_clear(date: ?*GDate, n_dates: guint) void;
pub extern fn _frida_g_date_set_parse(date: ?*GDate, str: [*c]const gchar) void;
pub extern fn _frida_g_date_set_time_t(date: ?*GDate, timet: time_t) void;
pub extern fn _frida_g_date_set_time_val(date: ?*GDate, timeval: [*c]GTimeVal) void;
pub extern fn _frida_g_date_set_time(date: ?*GDate, time_: GTime) void;
pub extern fn _frida_g_date_set_month(date: ?*GDate, month: GDateMonth) void;
pub extern fn _frida_g_date_set_day(date: ?*GDate, day: GDateDay) void;
pub extern fn _frida_g_date_set_year(date: ?*GDate, year: GDateYear) void;
pub extern fn _frida_g_date_set_dmy(date: ?*GDate, day: GDateDay, month: GDateMonth, y: GDateYear) void;
pub extern fn _frida_g_date_set_julian(date: ?*GDate, julian_date: guint32) void;
pub extern fn _frida_g_date_is_first_of_month(date: ?*const GDate) gboolean;
pub extern fn _frida_g_date_is_last_of_month(date: ?*const GDate) gboolean;
pub extern fn _frida_g_date_add_days(date: ?*GDate, n_days: guint) void;
pub extern fn _frida_g_date_subtract_days(date: ?*GDate, n_days: guint) void;
pub extern fn _frida_g_date_add_months(date: ?*GDate, n_months: guint) void;
pub extern fn _frida_g_date_subtract_months(date: ?*GDate, n_months: guint) void;
pub extern fn _frida_g_date_add_years(date: ?*GDate, n_years: guint) void;
pub extern fn _frida_g_date_subtract_years(date: ?*GDate, n_years: guint) void;
pub extern fn _frida_g_date_is_leap_year(year: GDateYear) gboolean;
pub extern fn _frida_g_date_get_days_in_month(month: GDateMonth, year: GDateYear) guint8;
pub extern fn _frida_g_date_get_monday_weeks_in_year(year: GDateYear) guint8;
pub extern fn _frida_g_date_get_sunday_weeks_in_year(year: GDateYear) guint8;
pub extern fn _frida_g_date_days_between(date1: ?*const GDate, date2: ?*const GDate) gint;
pub extern fn _frida_g_date_compare(lhs: ?*const GDate, rhs: ?*const GDate) gint;
pub extern fn _frida_g_date_to_struct_tm(date: ?*const GDate, tm: [*c]struct_tm) void;
pub extern fn _frida_g_date_clamp(date: ?*GDate, min_date: ?*const GDate, max_date: ?*const GDate) void;
pub extern fn _frida_g_date_order(date1: ?*GDate, date2: ?*GDate) void;
pub extern fn _frida_g_date_strftime(s: [*c]gchar, slen: gsize, format: [*c]const gchar, date: ?*const GDate) gsize;
pub const struct_dirent = extern struct {
    d_ino: __ino_t,
    d_off: __off_t,
    d_reclen: c_ushort,
    d_type: u8,
    d_name: [256]u8,
};
pub const DT_UNKNOWN: c_int = 0;
pub const DT_FIFO: c_int = 1;
pub const DT_CHR: c_int = 2;
pub const DT_DIR: c_int = 4;
pub const DT_BLK: c_int = 6;
pub const DT_REG: c_int = 8;
pub const DT_LNK: c_int = 10;
pub const DT_SOCK: c_int = 12;
pub const DT_WHT: c_int = 14;
const enum_unnamed_27 = c_uint;
pub const struct___dirstream = opaque {};
pub const DIR = struct___dirstream;
pub extern fn closedir(__dirp: ?*DIR) c_int;
pub extern fn opendir(__name: [*c]const u8) ?*DIR;
pub extern fn fdopendir(__fd: c_int) ?*DIR;
pub extern fn readdir(__dirp: ?*DIR) [*c]struct_dirent;
pub extern fn readdir_r(noalias __dirp: ?*DIR, noalias __entry: [*c]struct_dirent, noalias __result: [*c][*c]struct_dirent) c_int;
pub extern fn rewinddir(__dirp: ?*DIR) void;
pub extern fn seekdir(__dirp: ?*DIR, __pos: c_long) void;
pub extern fn telldir(__dirp: ?*DIR) c_long;
pub extern fn dirfd(__dirp: ?*DIR) c_int;
pub extern fn scandir(noalias __dir: [*c]const u8, noalias __namelist: [*c][*c][*c]struct_dirent, __selector: ?*const fn ([*c]const struct_dirent) callconv(.C) c_int, __cmp: ?*const fn ([*c][*c]const struct_dirent, [*c][*c]const struct_dirent) callconv(.C) c_int) c_int;
pub extern fn alphasort(__e1: [*c][*c]const struct_dirent, __e2: [*c][*c]const struct_dirent) c_int;
pub extern fn getdirentries(__fd: c_int, noalias __buf: [*c]u8, __nbytes: usize, noalias __basep: [*c]__off_t) __ssize_t;
pub const struct__GDir = opaque {};
pub const GDir = struct__GDir;
pub extern fn _frida_g_dir_open(path: [*c]const gchar, flags: guint, @"error": [*c][*c]GError) ?*GDir;
pub extern fn _frida_g_dir_read_name(dir: ?*GDir) [*c]const gchar;
pub extern fn _frida_g_dir_rewind(dir: ?*GDir) void;
pub extern fn _frida_g_dir_close(dir: ?*GDir) void;
pub extern fn _frida_g_getenv(variable: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_setenv(variable: [*c]const gchar, value: [*c]const gchar, overwrite: gboolean) gboolean;
pub extern fn _frida_g_unsetenv(variable: [*c]const gchar) void;
pub extern fn _frida_g_listenv() [*c][*c]gchar;
pub extern fn _frida_g_get_environ() [*c][*c]gchar;
pub extern fn _frida_g_environ_getenv(envp: [*c][*c]gchar, variable: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_environ_setenv(envp: [*c][*c]gchar, variable: [*c]const gchar, value: [*c]const gchar, overwrite: gboolean) [*c][*c]gchar;
pub extern fn _frida_g_environ_unsetenv(envp: [*c][*c]gchar, variable: [*c]const gchar) [*c][*c]gchar;
pub const G_FILE_ERROR_EXIST: c_int = 0;
pub const G_FILE_ERROR_ISDIR: c_int = 1;
pub const G_FILE_ERROR_ACCES: c_int = 2;
pub const G_FILE_ERROR_NAMETOOLONG: c_int = 3;
pub const G_FILE_ERROR_NOENT: c_int = 4;
pub const G_FILE_ERROR_NOTDIR: c_int = 5;
pub const G_FILE_ERROR_NXIO: c_int = 6;
pub const G_FILE_ERROR_NODEV: c_int = 7;
pub const G_FILE_ERROR_ROFS: c_int = 8;
pub const G_FILE_ERROR_TXTBSY: c_int = 9;
pub const G_FILE_ERROR_FAULT: c_int = 10;
pub const G_FILE_ERROR_LOOP: c_int = 11;
pub const G_FILE_ERROR_NOSPC: c_int = 12;
pub const G_FILE_ERROR_NOMEM: c_int = 13;
pub const G_FILE_ERROR_MFILE: c_int = 14;
pub const G_FILE_ERROR_NFILE: c_int = 15;
pub const G_FILE_ERROR_BADF: c_int = 16;
pub const G_FILE_ERROR_INVAL: c_int = 17;
pub const G_FILE_ERROR_PIPE: c_int = 18;
pub const G_FILE_ERROR_AGAIN: c_int = 19;
pub const G_FILE_ERROR_INTR: c_int = 20;
pub const G_FILE_ERROR_IO: c_int = 21;
pub const G_FILE_ERROR_PERM: c_int = 22;
pub const G_FILE_ERROR_NOSYS: c_int = 23;
pub const G_FILE_ERROR_FAILED: c_int = 24;
pub const GFileError = c_uint;
pub const G_FILE_TEST_IS_REGULAR: c_int = 1;
pub const G_FILE_TEST_IS_SYMLINK: c_int = 2;
pub const G_FILE_TEST_IS_DIR: c_int = 4;
pub const G_FILE_TEST_IS_EXECUTABLE: c_int = 8;
pub const G_FILE_TEST_EXISTS: c_int = 16;
pub const GFileTest = c_uint;
pub const G_FILE_SET_CONTENTS_NONE: c_int = 0;
pub const G_FILE_SET_CONTENTS_CONSISTENT: c_int = 1;
pub const G_FILE_SET_CONTENTS_DURABLE: c_int = 2;
pub const G_FILE_SET_CONTENTS_ONLY_EXISTING: c_int = 4;
pub const GFileSetContentsFlags = c_uint;
pub extern fn _frida_g_file_error_quark() GQuark;
pub extern fn _frida_g_file_error_from_errno(err_no: gint) GFileError;
pub extern fn _frida_g_file_test(filename: [*c]const gchar, @"test": GFileTest) gboolean;
pub extern fn _frida_g_file_get_contents(filename: [*c]const gchar, contents: [*c][*c]gchar, length: [*c]gsize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_contents(filename: [*c]const gchar, contents: [*c]const gchar, length: gssize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_contents_full(filename: [*c]const gchar, contents: [*c]const gchar, length: gssize, flags: GFileSetContentsFlags, mode: c_int, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_read_link(filename: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_mkdtemp(tmpl: [*c]gchar) [*c]gchar;
pub extern fn _frida_g_mkdtemp_full(tmpl: [*c]gchar, mode: gint) [*c]gchar;
pub extern fn _frida_g_mkstemp(tmpl: [*c]gchar) gint;
pub extern fn _frida_g_mkstemp_full(tmpl: [*c]gchar, flags: gint, mode: gint) gint;
pub extern fn _frida_g_file_open_tmp(tmpl: [*c]const gchar, name_used: [*c][*c]gchar, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_dir_make_tmp(tmpl: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_build_path(separator: [*c]const gchar, first_element: [*c]const gchar, ...) [*c]gchar;
pub extern fn _frida_g_build_pathv(separator: [*c]const gchar, args: [*c][*c]gchar) [*c]gchar;
pub extern fn _frida_g_build_filename(first_element: [*c]const gchar, ...) [*c]gchar;
pub extern fn _frida_g_build_filenamev(args: [*c][*c]gchar) [*c]gchar;
pub extern fn _frida_g_build_filename_valist(first_element: [*c]const gchar, args: [*c]va_list) [*c]gchar;
pub extern fn _frida_g_mkdir_with_parents(pathname: [*c]const gchar, mode: gint) gint;
pub extern fn _frida_g_path_is_absolute(file_name: [*c]const gchar) gboolean;
pub extern fn _frida_g_path_skip_root(file_name: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_basename(file_name: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_get_current_dir() [*c]gchar;
pub extern fn _frida_g_path_get_basename(file_name: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_path_get_dirname(file_name: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_canonicalize_filename(filename: [*c]const gchar, relative_to: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_strip_context(msgid: [*c]const gchar, msgval: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_dgettext(domain: [*c]const gchar, msgid: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_dcgettext(domain: [*c]const gchar, msgid: [*c]const gchar, category: gint) [*c]const gchar;
pub extern fn _frida_g_dngettext(domain: [*c]const gchar, msgid: [*c]const gchar, msgid_plural: [*c]const gchar, n: gulong) [*c]const gchar;
pub extern fn _frida_g_dpgettext(domain: [*c]const gchar, msgctxtid: [*c]const gchar, msgidoffset: gsize) [*c]const gchar;
pub extern fn _frida_g_dpgettext2(domain: [*c]const gchar, context: [*c]const gchar, msgid: [*c]const gchar) [*c]const gchar;
pub const struct__GMemVTable = extern struct {
    malloc: ?*const fn (gsize) callconv(.C) gpointer,
    realloc: ?*const fn (gpointer, gsize) callconv(.C) gpointer,
    memalign: ?*const fn (gsize, gsize) callconv(.C) gpointer,
    free: ?*const fn (gpointer) callconv(.C) void,
    calloc: ?*const fn (gsize, gsize) callconv(.C) gpointer,
    try_malloc: ?*const fn (gsize) callconv(.C) gpointer,
    try_realloc: ?*const fn (gpointer, gsize) callconv(.C) gpointer,
};
pub const GMemVTable = struct__GMemVTable;
pub extern fn _frida_g_free(mem: gpointer) void;
pub extern fn _frida_g_clear_pointer(pp: [*c]gpointer, destroy: GDestroyNotify) void;
pub extern fn _frida_g_malloc(n_bytes: gsize) gpointer;
pub extern fn _frida_g_malloc0(n_bytes: gsize) gpointer;
pub extern fn _frida_g_realloc(mem: gpointer, n_bytes: gsize) gpointer;
pub extern fn _frida_g_try_malloc(n_bytes: gsize) gpointer;
pub extern fn _frida_g_try_malloc0(n_bytes: gsize) gpointer;
pub extern fn _frida_g_try_realloc(mem: gpointer, n_bytes: gsize) gpointer;
pub extern fn _frida_g_malloc_n(n_blocks: gsize, n_block_bytes: gsize) gpointer;
pub extern fn _frida_g_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) gpointer;
pub extern fn _frida_g_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize) gpointer;
pub extern fn _frida_g_try_malloc_n(n_blocks: gsize, n_block_bytes: gsize) gpointer;
pub extern fn _frida_g_try_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) gpointer;
pub extern fn _frida_g_try_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize) gpointer;
pub extern fn _frida_g_aligned_alloc(n_blocks: gsize, n_block_bytes: gsize, alignment: gsize) gpointer;
pub extern fn _frida_g_aligned_alloc0(n_blocks: gsize, n_block_bytes: gsize, alignment: gsize) gpointer;
pub extern fn _frida_g_aligned_free(mem: gpointer) void;
pub fn g_steal_pointer(arg_pp: gpointer) callconv(.C) gpointer {
    var pp = arg_pp;
    var ptr: [*c]gpointer = @ptrCast([*c]gpointer, @alignCast(@import("std").meta.alignment([*c]gpointer), pp));
    var ref: gpointer = undefined;
    ref = ptr.*;
    ptr.* = @intToPtr(?*anyopaque, @as(c_int, 0));
    return ref;
}
pub extern var _frida_glib_mem_table: [*c]GMemVTable;
pub extern fn _frida_g_mem_set_vtable(vtable: [*c]GMemVTable) void;
pub extern fn _frida_g_mem_is_system_malloc() gboolean;
pub extern var _frida_g_mem_gc_friendly: gboolean;
pub extern var _frida_glib_mem_profiler_table: [*c]GMemVTable;
pub extern fn _frida_g_mem_profile() void;
pub const GNode = struct__GNode;
pub const struct__GNode = extern struct {
    data: gpointer,
    next: [*c]GNode,
    prev: [*c]GNode,
    parent: [*c]GNode,
    children: [*c]GNode,
};
pub const G_TRAVERSE_LEAVES: c_int = 1;
pub const G_TRAVERSE_NON_LEAVES: c_int = 2;
pub const G_TRAVERSE_ALL: c_int = 3;
pub const G_TRAVERSE_MASK: c_int = 3;
pub const G_TRAVERSE_LEAFS: c_int = 1;
pub const G_TRAVERSE_NON_LEAFS: c_int = 2;
pub const GTraverseFlags = c_uint;
pub const G_IN_ORDER: c_int = 0;
pub const G_PRE_ORDER: c_int = 1;
pub const G_POST_ORDER: c_int = 2;
pub const G_LEVEL_ORDER: c_int = 3;
pub const GTraverseType = c_uint;
pub const GNodeTraverseFunc = ?*const fn ([*c]GNode, gpointer) callconv(.C) gboolean;
pub const GNodeForeachFunc = ?*const fn ([*c]GNode, gpointer) callconv(.C) void;
pub extern fn _frida_g_node_new(data: gpointer) [*c]GNode;
pub extern fn _frida_g_node_destroy(root: [*c]GNode) void;
pub extern fn _frida_g_node_unlink(node: [*c]GNode) void;
pub extern fn _frida_g_node_copy_deep(node: [*c]GNode, copy_func: GCopyFunc, data: gpointer) [*c]GNode;
pub extern fn _frida_g_node_copy(node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_insert(parent: [*c]GNode, position: gint, node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_insert_before(parent: [*c]GNode, sibling: [*c]GNode, node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_insert_after(parent: [*c]GNode, sibling: [*c]GNode, node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_prepend(parent: [*c]GNode, node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_n_nodes(root: [*c]GNode, flags: GTraverseFlags) guint;
pub extern fn _frida_g_node_get_root(node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_is_ancestor(node: [*c]GNode, descendant: [*c]GNode) gboolean;
pub extern fn _frida_g_node_depth(node: [*c]GNode) guint;
pub extern fn _frida_g_node_find(root: [*c]GNode, order: GTraverseType, flags: GTraverseFlags, data: gpointer) [*c]GNode;
pub extern fn _frida_g_node_traverse(root: [*c]GNode, order: GTraverseType, flags: GTraverseFlags, max_depth: gint, func: GNodeTraverseFunc, data: gpointer) void;
pub extern fn _frida_g_node_max_height(root: [*c]GNode) guint;
pub extern fn _frida_g_node_children_foreach(node: [*c]GNode, flags: GTraverseFlags, func: GNodeForeachFunc, data: gpointer) void;
pub extern fn _frida_g_node_reverse_children(node: [*c]GNode) void;
pub extern fn _frida_g_node_n_children(node: [*c]GNode) guint;
pub extern fn _frida_g_node_nth_child(node: [*c]GNode, n: guint) [*c]GNode;
pub extern fn _frida_g_node_last_child(node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_find_child(node: [*c]GNode, flags: GTraverseFlags, data: gpointer) [*c]GNode;
pub extern fn _frida_g_node_child_position(node: [*c]GNode, child: [*c]GNode) gint;
pub extern fn _frida_g_node_child_index(node: [*c]GNode, data: gpointer) gint;
pub extern fn _frida_g_node_first_sibling(node: [*c]GNode) [*c]GNode;
pub extern fn _frida_g_node_last_sibling(node: [*c]GNode) [*c]GNode;
pub const GList = struct__GList;
pub const struct__GList = extern struct {
    data: gpointer,
    next: [*c]GList,
    prev: [*c]GList,
};
pub extern fn _frida_g_list_alloc() [*c]GList;
pub extern fn _frida_g_list_free(list: [*c]GList) void;
pub extern fn _frida_g_list_free_1(list: [*c]GList) void;
pub extern fn _frida_g_list_free_full(list: [*c]GList, free_func: GDestroyNotify) void;
pub extern fn _frida_g_list_append(list: [*c]GList, data: gpointer) [*c]GList;
pub extern fn _frida_g_list_prepend(list: [*c]GList, data: gpointer) [*c]GList;
pub extern fn _frida_g_list_insert(list: [*c]GList, data: gpointer, position: gint) [*c]GList;
pub extern fn _frida_g_list_insert_sorted(list: [*c]GList, data: gpointer, func: GCompareFunc) [*c]GList;
pub extern fn _frida_g_list_insert_sorted_with_data(list: [*c]GList, data: gpointer, func: GCompareDataFunc, user_data: gpointer) [*c]GList;
pub extern fn _frida_g_list_insert_before(list: [*c]GList, sibling: [*c]GList, data: gpointer) [*c]GList;
pub extern fn _frida_g_list_insert_before_link(list: [*c]GList, sibling: [*c]GList, link_: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_concat(list1: [*c]GList, list2: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_remove(list: [*c]GList, data: gconstpointer) [*c]GList;
pub extern fn _frida_g_list_remove_all(list: [*c]GList, data: gconstpointer) [*c]GList;
pub extern fn _frida_g_list_remove_link(list: [*c]GList, llink: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_delete_link(list: [*c]GList, link_: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_reverse(list: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_copy(list: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_copy_deep(list: [*c]GList, func: GCopyFunc, user_data: gpointer) [*c]GList;
pub extern fn _frida_g_list_nth(list: [*c]GList, n: guint) [*c]GList;
pub extern fn _frida_g_list_nth_prev(list: [*c]GList, n: guint) [*c]GList;
pub extern fn _frida_g_list_find(list: [*c]GList, data: gconstpointer) [*c]GList;
pub extern fn _frida_g_list_find_custom(list: [*c]GList, data: gconstpointer, func: GCompareFunc) [*c]GList;
pub extern fn _frida_g_list_position(list: [*c]GList, llink: [*c]GList) gint;
pub extern fn _frida_g_list_index(list: [*c]GList, data: gconstpointer) gint;
pub extern fn _frida_g_list_last(list: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_first(list: [*c]GList) [*c]GList;
pub extern fn _frida_g_list_length(list: [*c]GList) guint;
pub extern fn _frida_g_list_foreach(list: [*c]GList, func: GFunc, user_data: gpointer) void;
pub extern fn _frida_g_list_sort(list: [*c]GList, compare_func: GCompareFunc) [*c]GList;
pub extern fn _frida_g_list_sort_with_data(list: [*c]GList, compare_func: GCompareDataFunc, user_data: gpointer) [*c]GList;
pub extern fn _frida_g_list_nth_data(list: [*c]GList, n: guint) gpointer;
pub extern fn _frida_g_clear_list(list_ptr: [*c][*c]GList, destroy: GDestroyNotify) void;
pub const struct__GHashTable = opaque {};
pub const GHashTable = struct__GHashTable;
pub const GHRFunc = ?*const fn (gpointer, gpointer, gpointer) callconv(.C) gboolean;
pub const struct__GHashTableIter = extern struct {
    dummy1: gpointer,
    dummy2: gpointer,
    dummy3: gpointer,
    dummy4: c_int,
    dummy5: gboolean,
    dummy6: gpointer,
};
pub const GHashTableIter = struct__GHashTableIter;
pub extern fn _frida_g_hash_table_new(hash_func: GHashFunc, key_equal_func: GEqualFunc) ?*GHashTable;
pub extern fn _frida_g_hash_table_new_full(hash_func: GHashFunc, key_equal_func: GEqualFunc, key_destroy_func: GDestroyNotify, value_destroy_func: GDestroyNotify) ?*GHashTable;
pub extern fn _frida_g_hash_table_new_similar(other_hash_table: ?*GHashTable) ?*GHashTable;
pub extern fn _frida_g_hash_table_destroy(hash_table: ?*GHashTable) void;
pub extern fn _frida_g_hash_table_insert(hash_table: ?*GHashTable, key: gpointer, value: gpointer) gboolean;
pub extern fn _frida_g_hash_table_replace(hash_table: ?*GHashTable, key: gpointer, value: gpointer) gboolean;
pub extern fn _frida_g_hash_table_add(hash_table: ?*GHashTable, key: gpointer) gboolean;
pub extern fn _frida_g_hash_table_remove(hash_table: ?*GHashTable, key: gconstpointer) gboolean;
pub extern fn _frida_g_hash_table_remove_all(hash_table: ?*GHashTable) void;
pub extern fn _frida_g_hash_table_steal(hash_table: ?*GHashTable, key: gconstpointer) gboolean;
pub extern fn _frida_g_hash_table_steal_extended(hash_table: ?*GHashTable, lookup_key: gconstpointer, stolen_key: [*c]gpointer, stolen_value: [*c]gpointer) gboolean;
pub extern fn _frida_g_hash_table_steal_all(hash_table: ?*GHashTable) void;
pub extern fn _frida_g_hash_table_lookup(hash_table: ?*GHashTable, key: gconstpointer) gpointer;
pub extern fn _frida_g_hash_table_contains(hash_table: ?*GHashTable, key: gconstpointer) gboolean;
pub extern fn _frida_g_hash_table_lookup_extended(hash_table: ?*GHashTable, lookup_key: gconstpointer, orig_key: [*c]gpointer, value: [*c]gpointer) gboolean;
pub extern fn _frida_g_hash_table_foreach(hash_table: ?*GHashTable, func: GHFunc, user_data: gpointer) void;
pub extern fn _frida_g_hash_table_find(hash_table: ?*GHashTable, predicate: GHRFunc, user_data: gpointer) gpointer;
pub extern fn _frida_g_hash_table_foreach_remove(hash_table: ?*GHashTable, func: GHRFunc, user_data: gpointer) guint;
pub extern fn _frida_g_hash_table_foreach_steal(hash_table: ?*GHashTable, func: GHRFunc, user_data: gpointer) guint;
pub extern fn _frida_g_hash_table_size(hash_table: ?*GHashTable) guint;
pub extern fn _frida_g_hash_table_get_keys(hash_table: ?*GHashTable) [*c]GList;
pub extern fn _frida_g_hash_table_get_values(hash_table: ?*GHashTable) [*c]GList;
pub extern fn _frida_g_hash_table_get_keys_as_array(hash_table: ?*GHashTable, length: [*c]guint) [*c]gpointer;
pub extern fn _frida_g_hash_table_iter_init(iter: [*c]GHashTableIter, hash_table: ?*GHashTable) void;
pub extern fn _frida_g_hash_table_iter_next(iter: [*c]GHashTableIter, key: [*c]gpointer, value: [*c]gpointer) gboolean;
pub extern fn _frida_g_hash_table_iter_get_hash_table(iter: [*c]GHashTableIter) ?*GHashTable;
pub extern fn _frida_g_hash_table_iter_remove(iter: [*c]GHashTableIter) void;
pub extern fn _frida_g_hash_table_iter_replace(iter: [*c]GHashTableIter, value: gpointer) void;
pub extern fn _frida_g_hash_table_iter_steal(iter: [*c]GHashTableIter) void;
pub extern fn _frida_g_hash_table_ref(hash_table: ?*GHashTable) ?*GHashTable;
pub extern fn _frida_g_hash_table_unref(hash_table: ?*GHashTable) void;
pub extern fn _frida_g_str_equal(v1: gconstpointer, v2: gconstpointer) gboolean;
pub extern fn _frida_g_str_hash(v: gconstpointer) guint;
pub extern fn _frida_g_int_equal(v1: gconstpointer, v2: gconstpointer) gboolean;
pub extern fn _frida_g_int_hash(v: gconstpointer) guint;
pub extern fn _frida_g_int64_equal(v1: gconstpointer, v2: gconstpointer) gboolean;
pub extern fn _frida_g_int64_hash(v: gconstpointer) guint;
pub extern fn _frida_g_double_equal(v1: gconstpointer, v2: gconstpointer) gboolean;
pub extern fn _frida_g_double_hash(v: gconstpointer) guint;
pub extern fn _frida_g_direct_hash(v: gconstpointer) guint;
pub extern fn _frida_g_direct_equal(v1: gconstpointer, v2: gconstpointer) gboolean;
pub const struct__GHmac = opaque {};
pub const GHmac = struct__GHmac;
pub extern fn _frida_g_hmac_new(digest_type: GChecksumType, key: [*c]const guchar, key_len: gsize) ?*GHmac;
pub extern fn _frida_g_hmac_copy(hmac: ?*const GHmac) ?*GHmac;
pub extern fn _frida_g_hmac_ref(hmac: ?*GHmac) ?*GHmac;
pub extern fn _frida_g_hmac_unref(hmac: ?*GHmac) void;
pub extern fn _frida_g_hmac_update(hmac: ?*GHmac, data: [*c]const guchar, length: gssize) void;
pub extern fn _frida_g_hmac_get_string(hmac: ?*GHmac) [*c]const gchar;
pub extern fn _frida_g_hmac_get_digest(hmac: ?*GHmac, buffer: [*c]guint8, digest_len: [*c]gsize) void;
pub extern fn _frida_g_compute_hmac_for_data(digest_type: GChecksumType, key: [*c]const guchar, key_len: gsize, data: [*c]const guchar, length: gsize) [*c]gchar;
pub extern fn _frida_g_compute_hmac_for_string(digest_type: GChecksumType, key: [*c]const guchar, key_len: gsize, str: [*c]const gchar, length: gssize) [*c]gchar;
pub extern fn _frida_g_compute_hmac_for_bytes(digest_type: GChecksumType, key: ?*GBytes, data: ?*GBytes) [*c]gchar;
pub const GHook = struct__GHook;
pub const struct__GHook = extern struct {
    data: gpointer,
    next: [*c]GHook,
    prev: [*c]GHook,
    ref_count: guint,
    hook_id: gulong,
    flags: guint,
    func: gpointer,
    destroy: GDestroyNotify,
}; // lib/frida-core/frida-core.h:15403:14: warning: struct demoted to opaque type - has bitfield
pub const struct__GHookList = opaque {};
pub const GHookList = struct__GHookList;
pub const GHookCompareFunc = ?*const fn ([*c]GHook, [*c]GHook) callconv(.C) gint;
pub const GHookFindFunc = ?*const fn ([*c]GHook, gpointer) callconv(.C) gboolean;
pub const GHookMarshaller = ?*const fn ([*c]GHook, gpointer) callconv(.C) void;
pub const GHookCheckMarshaller = ?*const fn ([*c]GHook, gpointer) callconv(.C) gboolean;
pub const GHookFunc = ?*const fn (gpointer) callconv(.C) void;
pub const GHookCheckFunc = ?*const fn (gpointer) callconv(.C) gboolean;
pub const GHookFinalizeFunc = ?*const fn (?*GHookList, [*c]GHook) callconv(.C) void;
pub const G_HOOK_FLAG_ACTIVE: c_int = 1;
pub const G_HOOK_FLAG_IN_CALL: c_int = 2;
pub const G_HOOK_FLAG_MASK: c_int = 15;
pub const GHookFlagMask = c_uint;
pub extern fn _frida_g_hook_list_init(hook_list: ?*GHookList, hook_size: guint) void;
pub extern fn _frida_g_hook_list_clear(hook_list: ?*GHookList) void;
pub extern fn _frida_g_hook_alloc(hook_list: ?*GHookList) [*c]GHook;
pub extern fn _frida_g_hook_free(hook_list: ?*GHookList, hook: [*c]GHook) void;
pub extern fn _frida_g_hook_ref(hook_list: ?*GHookList, hook: [*c]GHook) [*c]GHook;
pub extern fn _frida_g_hook_unref(hook_list: ?*GHookList, hook: [*c]GHook) void;
pub extern fn _frida_g_hook_destroy(hook_list: ?*GHookList, hook_id: gulong) gboolean;
pub extern fn _frida_g_hook_destroy_link(hook_list: ?*GHookList, hook: [*c]GHook) void;
pub extern fn _frida_g_hook_prepend(hook_list: ?*GHookList, hook: [*c]GHook) void;
pub extern fn _frida_g_hook_insert_before(hook_list: ?*GHookList, sibling: [*c]GHook, hook: [*c]GHook) void;
pub extern fn _frida_g_hook_insert_sorted(hook_list: ?*GHookList, hook: [*c]GHook, func: GHookCompareFunc) void;
pub extern fn _frida_g_hook_get(hook_list: ?*GHookList, hook_id: gulong) [*c]GHook;
pub extern fn _frida_g_hook_find(hook_list: ?*GHookList, need_valids: gboolean, func: GHookFindFunc, data: gpointer) [*c]GHook;
pub extern fn _frida_g_hook_find_data(hook_list: ?*GHookList, need_valids: gboolean, data: gpointer) [*c]GHook;
pub extern fn _frida_g_hook_find_func(hook_list: ?*GHookList, need_valids: gboolean, func: gpointer) [*c]GHook;
pub extern fn _frida_g_hook_find_func_data(hook_list: ?*GHookList, need_valids: gboolean, func: gpointer, data: gpointer) [*c]GHook;
pub extern fn _frida_g_hook_first_valid(hook_list: ?*GHookList, may_be_in_call: gboolean) [*c]GHook;
pub extern fn _frida_g_hook_next_valid(hook_list: ?*GHookList, hook: [*c]GHook, may_be_in_call: gboolean) [*c]GHook;
pub extern fn _frida_g_hook_compare_ids(new_hook: [*c]GHook, sibling: [*c]GHook) gint;
pub extern fn _frida_g_hook_list_invoke(hook_list: ?*GHookList, may_recurse: gboolean) void;
pub extern fn _frida_g_hook_list_invoke_check(hook_list: ?*GHookList, may_recurse: gboolean) void;
pub extern fn _frida_g_hook_list_marshal(hook_list: ?*GHookList, may_recurse: gboolean, marshaller: GHookMarshaller, marshal_data: gpointer) void;
pub extern fn _frida_g_hook_list_marshal_check(hook_list: ?*GHookList, may_recurse: gboolean, marshaller: GHookCheckMarshaller, marshal_data: gpointer) void;
pub extern fn _frida_g_hostname_is_non_ascii(hostname: [*c]const gchar) gboolean;
pub extern fn _frida_g_hostname_is_ascii_encoded(hostname: [*c]const gchar) gboolean;
pub extern fn _frida_g_hostname_is_ip_address(hostname: [*c]const gchar) gboolean;
pub extern fn _frida_g_hostname_to_ascii(hostname: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_hostname_to_unicode(hostname: [*c]const gchar) [*c]gchar;
pub const struct__GPollFD = extern struct {
    fd: gint,
    events: gushort,
    revents: gushort,
};
pub const GPollFD = struct__GPollFD;
pub const GPollFunc = ?*const fn ([*c]GPollFD, guint, gint) callconv(.C) gint;
pub extern fn _frida_g_poll(fds: [*c]GPollFD, nfds: guint, timeout: gint) gint;
pub const GSList = struct__GSList;
pub const struct__GSList = extern struct {
    data: gpointer,
    next: [*c]GSList,
};
pub extern fn _frida_g_slist_alloc() [*c]GSList;
pub extern fn _frida_g_slist_free(list: [*c]GSList) void;
pub extern fn _frida_g_slist_free_1(list: [*c]GSList) void;
pub extern fn _frida_g_slist_free_full(list: [*c]GSList, free_func: GDestroyNotify) void;
pub extern fn _frida_g_slist_append(list: [*c]GSList, data: gpointer) [*c]GSList;
pub extern fn _frida_g_slist_prepend(list: [*c]GSList, data: gpointer) [*c]GSList;
pub extern fn _frida_g_slist_insert(list: [*c]GSList, data: gpointer, position: gint) [*c]GSList;
pub extern fn _frida_g_slist_insert_sorted(list: [*c]GSList, data: gpointer, func: GCompareFunc) [*c]GSList;
pub extern fn _frida_g_slist_insert_sorted_with_data(list: [*c]GSList, data: gpointer, func: GCompareDataFunc, user_data: gpointer) [*c]GSList;
pub extern fn _frida_g_slist_insert_before(slist: [*c]GSList, sibling: [*c]GSList, data: gpointer) [*c]GSList;
pub extern fn _frida_g_slist_concat(list1: [*c]GSList, list2: [*c]GSList) [*c]GSList;
pub extern fn _frida_g_slist_remove(list: [*c]GSList, data: gconstpointer) [*c]GSList;
pub extern fn _frida_g_slist_remove_all(list: [*c]GSList, data: gconstpointer) [*c]GSList;
pub extern fn _frida_g_slist_remove_link(list: [*c]GSList, link_: [*c]GSList) [*c]GSList;
pub extern fn _frida_g_slist_delete_link(list: [*c]GSList, link_: [*c]GSList) [*c]GSList;
pub extern fn _frida_g_slist_reverse(list: [*c]GSList) [*c]GSList;
pub extern fn _frida_g_slist_copy(list: [*c]GSList) [*c]GSList;
pub extern fn _frida_g_slist_copy_deep(list: [*c]GSList, func: GCopyFunc, user_data: gpointer) [*c]GSList;
pub extern fn _frida_g_slist_nth(list: [*c]GSList, n: guint) [*c]GSList;
pub extern fn _frida_g_slist_find(list: [*c]GSList, data: gconstpointer) [*c]GSList;
pub extern fn _frida_g_slist_find_custom(list: [*c]GSList, data: gconstpointer, func: GCompareFunc) [*c]GSList;
pub extern fn _frida_g_slist_position(list: [*c]GSList, llink: [*c]GSList) gint;
pub extern fn _frida_g_slist_index(list: [*c]GSList, data: gconstpointer) gint;
pub extern fn _frida_g_slist_last(list: [*c]GSList) [*c]GSList;
pub extern fn _frida_g_slist_length(list: [*c]GSList) guint;
pub extern fn _frida_g_slist_foreach(list: [*c]GSList, func: GFunc, user_data: gpointer) void;
pub extern fn _frida_g_slist_sort(list: [*c]GSList, compare_func: GCompareFunc) [*c]GSList;
pub extern fn _frida_g_slist_sort_with_data(list: [*c]GSList, compare_func: GCompareDataFunc, user_data: gpointer) [*c]GSList;
pub extern fn _frida_g_slist_nth_data(list: [*c]GSList, n: guint) gpointer;
pub extern fn _frida_g_clear_slist(slist_ptr: [*c][*c]GSList, destroy: GDestroyNotify) void;
pub const G_IO_IN: c_int = 1;
pub const G_IO_OUT: c_int = 4;
pub const G_IO_PRI: c_int = 2;
pub const G_IO_ERR: c_int = 8;
pub const G_IO_HUP: c_int = 16;
pub const G_IO_NVAL: c_int = 32;
pub const GIOCondition = c_uint;
pub const G_MAIN_CONTEXT_FLAGS_NONE: c_int = 0;
pub const G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING: c_int = 1;
pub const GMainContextFlags = c_uint;
pub const struct__GMainContext = opaque {};
pub const GMainContext = struct__GMainContext;
pub const struct__GMainLoop = opaque {};
pub const GMainLoop = struct__GMainLoop;
pub const GSource = struct__GSource;
pub const GSourceFunc = ?*const fn (gpointer) callconv(.C) gboolean;
pub const struct__GSourceCallbackFuncs = extern struct {
    ref: ?*const fn (gpointer) callconv(.C) void,
    unref: ?*const fn (gpointer) callconv(.C) void,
    get: ?*const fn (gpointer, [*c]GSource, [*c]GSourceFunc, [*c]gpointer) callconv(.C) void,
};
pub const GSourceCallbackFuncs = struct__GSourceCallbackFuncs;
pub const GSourceDummyMarshal = ?*const fn () callconv(.C) void;
pub const struct__GSourceFuncs = extern struct {
    prepare: ?*const fn ([*c]GSource, [*c]gint) callconv(.C) gboolean,
    check: ?*const fn ([*c]GSource) callconv(.C) gboolean,
    dispatch: ?*const fn ([*c]GSource, GSourceFunc, gpointer) callconv(.C) gboolean,
    finalize: ?*const fn ([*c]GSource) callconv(.C) void,
    closure_callback: GSourceFunc,
    closure_marshal: GSourceDummyMarshal,
};
pub const GSourceFuncs = struct__GSourceFuncs;
pub const struct__GSourcePrivate = opaque {};
pub const GSourcePrivate = struct__GSourcePrivate;
pub const struct__GSource = extern struct {
    callback_data: gpointer,
    callback_funcs: [*c]GSourceCallbackFuncs,
    source_funcs: [*c]const GSourceFuncs,
    ref_count: guint,
    context: ?*GMainContext,
    priority: gint,
    flags: guint,
    source_id: guint,
    poll_fds: [*c]GSList,
    prev: [*c]GSource,
    next: [*c]GSource,
    name: [*c]u8,
    priv: ?*GSourcePrivate,
};
pub const GSourceOnceFunc = ?*const fn (gpointer) callconv(.C) void;
pub const GChildWatchFunc = ?*const fn (GPid, gint, gpointer) callconv(.C) void;
pub const GSourceDisposeFunc = ?*const fn ([*c]GSource) callconv(.C) void;
pub extern fn _frida_g_main_context_new() ?*GMainContext;
pub extern fn _frida_g_main_context_new_with_flags(flags: GMainContextFlags) ?*GMainContext;
pub extern fn _frida_g_main_context_ref(context: ?*GMainContext) ?*GMainContext;
pub extern fn _frida_g_main_context_unref(context: ?*GMainContext) void;
pub extern fn _frida_g_main_context_default() ?*GMainContext;
pub extern fn _frida_g_main_context_iteration(context: ?*GMainContext, may_block: gboolean) gboolean;
pub extern fn _frida_g_main_context_pending(context: ?*GMainContext) gboolean;
pub extern fn _frida_g_main_context_find_source_by_id(context: ?*GMainContext, source_id: guint) [*c]GSource;
pub extern fn _frida_g_main_context_find_source_by_user_data(context: ?*GMainContext, user_data: gpointer) [*c]GSource;
pub extern fn _frida_g_main_context_find_source_by_funcs_user_data(context: ?*GMainContext, funcs: [*c]GSourceFuncs, user_data: gpointer) [*c]GSource;
pub extern fn _frida_g_main_context_wakeup(context: ?*GMainContext) void;
pub extern fn _frida_g_main_context_acquire(context: ?*GMainContext) gboolean;
pub extern fn _frida_g_main_context_release(context: ?*GMainContext) void;
pub extern fn _frida_g_main_context_is_owner(context: ?*GMainContext) gboolean;
pub extern fn _frida_g_main_context_wait(context: ?*GMainContext, cond: [*c]GCond, mutex: [*c]GMutex) gboolean;
pub extern fn _frida_g_main_context_prepare(context: ?*GMainContext, priority: [*c]gint) gboolean;
pub extern fn _frida_g_main_context_query(context: ?*GMainContext, max_priority: gint, timeout_: [*c]gint, fds: [*c]GPollFD, n_fds: gint) gint;
pub extern fn _frida_g_main_context_check(context: ?*GMainContext, max_priority: gint, fds: [*c]GPollFD, n_fds: gint) gboolean;
pub extern fn _frida_g_main_context_dispatch(context: ?*GMainContext) void;
pub extern fn _frida_g_main_context_set_poll_func(context: ?*GMainContext, func: GPollFunc) void;
pub extern fn _frida_g_main_context_get_poll_func(context: ?*GMainContext) GPollFunc;
pub extern fn _frida_g_main_context_add_poll(context: ?*GMainContext, fd: [*c]GPollFD, priority: gint) void;
pub extern fn _frida_g_main_context_remove_poll(context: ?*GMainContext, fd: [*c]GPollFD) void;
pub extern fn _frida_g_main_depth() gint;
pub extern fn _frida_g_main_current_source() [*c]GSource;
pub extern fn _frida_g_main_context_push_thread_default(context: ?*GMainContext) void;
pub extern fn _frida_g_main_context_pop_thread_default(context: ?*GMainContext) void;
pub extern fn _frida_g_main_context_get_thread_default() ?*GMainContext;
pub extern fn _frida_g_main_context_ref_thread_default() ?*GMainContext;
pub const GMainContextPusher = anyopaque;
pub fn g_main_context_pusher_new(arg_main_context: ?*GMainContext) callconv(.C) ?*GMainContextPusher {
    var main_context = arg_main_context;
    _frida_g_main_context_push_thread_default(main_context);
    return @ptrCast(?*GMainContextPusher, main_context);
}
pub fn g_main_context_pusher_free(arg_pusher: ?*GMainContextPusher) callconv(.C) void {
    var pusher = arg_pusher;
    _frida_g_main_context_pop_thread_default(@ptrCast(?*GMainContext, pusher));
}
pub extern fn _frida_g_main_loop_new(context: ?*GMainContext, is_running: gboolean) ?*GMainLoop;
pub extern fn _frida_g_main_loop_run(loop: ?*GMainLoop) void;
pub extern fn _frida_g_main_loop_quit(loop: ?*GMainLoop) void;
pub extern fn _frida_g_main_loop_ref(loop: ?*GMainLoop) ?*GMainLoop;
pub extern fn _frida_g_main_loop_unref(loop: ?*GMainLoop) void;
pub extern fn _frida_g_main_loop_is_running(loop: ?*GMainLoop) gboolean;
pub extern fn _frida_g_main_loop_get_context(loop: ?*GMainLoop) ?*GMainContext;
pub extern fn _frida_g_source_new(source_funcs: [*c]GSourceFuncs, struct_size: guint) [*c]GSource;
pub extern fn _frida_g_source_set_dispose_function(source: [*c]GSource, dispose: GSourceDisposeFunc) void;
pub extern fn _frida_g_source_ref(source: [*c]GSource) [*c]GSource;
pub extern fn _frida_g_source_unref(source: [*c]GSource) void;
pub extern fn _frida_g_source_attach(source: [*c]GSource, context: ?*GMainContext) guint;
pub extern fn _frida_g_source_destroy(source: [*c]GSource) void;
pub extern fn _frida_g_source_set_priority(source: [*c]GSource, priority: gint) void;
pub extern fn _frida_g_source_get_priority(source: [*c]GSource) gint;
pub extern fn _frida_g_source_set_can_recurse(source: [*c]GSource, can_recurse: gboolean) void;
pub extern fn _frida_g_source_get_can_recurse(source: [*c]GSource) gboolean;
pub extern fn _frida_g_source_get_id(source: [*c]GSource) guint;
pub extern fn _frida_g_source_get_context(source: [*c]GSource) ?*GMainContext;
pub extern fn _frida_g_source_set_callback(source: [*c]GSource, func: GSourceFunc, data: gpointer, notify: GDestroyNotify) void;
pub extern fn _frida_g_source_set_funcs(source: [*c]GSource, funcs: [*c]GSourceFuncs) void;
pub extern fn _frida_g_source_is_destroyed(source: [*c]GSource) gboolean;
pub extern fn _frida_g_source_set_name(source: [*c]GSource, name: [*c]const u8) void;
pub extern fn _frida_g_source_set_static_name(source: [*c]GSource, name: [*c]const u8) void;
pub extern fn _frida_g_source_get_name(source: [*c]GSource) [*c]const u8;
pub extern fn _frida_g_source_set_name_by_id(tag: guint, name: [*c]const u8) void;
pub extern fn _frida_g_source_set_ready_time(source: [*c]GSource, ready_time: gint64) void;
pub extern fn _frida_g_source_get_ready_time(source: [*c]GSource) gint64;
pub extern fn _frida_g_source_add_unix_fd(source: [*c]GSource, fd: gint, events: GIOCondition) gpointer;
pub extern fn _frida_g_source_modify_unix_fd(source: [*c]GSource, tag: gpointer, new_events: GIOCondition) void;
pub extern fn _frida_g_source_remove_unix_fd(source: [*c]GSource, tag: gpointer) void;
pub extern fn _frida_g_source_query_unix_fd(source: [*c]GSource, tag: gpointer) GIOCondition;
pub extern fn _frida_g_source_set_callback_indirect(source: [*c]GSource, callback_data: gpointer, callback_funcs: [*c]GSourceCallbackFuncs) void;
pub extern fn _frida_g_source_add_poll(source: [*c]GSource, fd: [*c]GPollFD) void;
pub extern fn _frida_g_source_remove_poll(source: [*c]GSource, fd: [*c]GPollFD) void;
pub extern fn _frida_g_source_add_child_source(source: [*c]GSource, child_source: [*c]GSource) void;
pub extern fn _frida_g_source_remove_child_source(source: [*c]GSource, child_source: [*c]GSource) void;
pub extern fn _frida_g_source_get_current_time(source: [*c]GSource, timeval: [*c]GTimeVal) void;
pub extern fn _frida_g_source_get_time(source: [*c]GSource) gint64;
pub extern fn _frida_g_idle_source_new() [*c]GSource;
pub extern fn _frida_g_child_watch_source_new(pid: GPid) [*c]GSource;
pub extern fn _frida_g_timeout_source_new(interval: guint) [*c]GSource;
pub extern fn _frida_g_timeout_source_new_seconds(interval: guint) [*c]GSource;
pub extern fn _frida_g_get_current_time(result: [*c]GTimeVal) void;
pub extern fn _frida_g_get_monotonic_time() gint64;
pub extern fn _frida_g_get_real_time() gint64;
pub extern fn _frida_g_source_remove(tag: guint) gboolean;
pub extern fn _frida_g_source_remove_by_user_data(user_data: gpointer) gboolean;
pub extern fn _frida_g_source_remove_by_funcs_user_data(funcs: [*c]GSourceFuncs, user_data: gpointer) gboolean;
pub const GClearHandleFunc = ?*const fn (guint) callconv(.C) void;
pub extern fn _frida_g_clear_handle_id(tag_ptr: [*c]guint, clear_func: GClearHandleFunc) void;
pub extern fn _frida_g_timeout_add_full(priority: gint, interval: guint, function: GSourceFunc, data: gpointer, notify: GDestroyNotify) guint;
pub extern fn _frida_g_timeout_add(interval: guint, function: GSourceFunc, data: gpointer) guint;
pub extern fn _frida_g_timeout_add_once(interval: guint, function: GSourceOnceFunc, data: gpointer) guint;
pub extern fn _frida_g_timeout_add_seconds_full(priority: gint, interval: guint, function: GSourceFunc, data: gpointer, notify: GDestroyNotify) guint;
pub extern fn _frida_g_timeout_add_seconds(interval: guint, function: GSourceFunc, data: gpointer) guint;
pub extern fn _frida_g_child_watch_add_full(priority: gint, pid: GPid, function: GChildWatchFunc, data: gpointer, notify: GDestroyNotify) guint;
pub extern fn _frida_g_child_watch_add(pid: GPid, function: GChildWatchFunc, data: gpointer) guint;
pub extern fn _frida_g_idle_add(function: GSourceFunc, data: gpointer) guint;
pub extern fn _frida_g_idle_add_full(priority: gint, function: GSourceFunc, data: gpointer, notify: GDestroyNotify) guint;
pub extern fn _frida_g_idle_add_once(function: GSourceOnceFunc, data: gpointer) guint;
pub extern fn _frida_g_idle_remove_by_data(data: gpointer) gboolean;
pub extern fn _frida_g_main_context_invoke_full(context: ?*GMainContext, priority: gint, function: GSourceFunc, data: gpointer, notify: GDestroyNotify) void;
pub extern fn _frida_g_main_context_invoke(context: ?*GMainContext, function: GSourceFunc, data: gpointer) void;
pub fn g_steal_fd(arg_fd_ptr: [*c]c_int) callconv(.C) c_int {
    var fd_ptr = arg_fd_ptr;
    var fd: c_int = fd_ptr.*;
    fd_ptr.* = -@as(c_int, 1);
    return fd;
}
pub extern var _frida_g_timeout_funcs: GSourceFuncs;
pub extern var _frida_g_child_watch_funcs: GSourceFuncs;
pub extern var _frida_g_idle_funcs: GSourceFuncs;
pub extern var _frida_g_unix_signal_funcs: GSourceFuncs;
pub extern var _frida_g_unix_fd_source_funcs: GSourceFuncs;
pub const gunichar = guint32;
pub const gunichar2 = guint16;
pub const G_UNICODE_CONTROL: c_int = 0;
pub const G_UNICODE_FORMAT: c_int = 1;
pub const G_UNICODE_UNASSIGNED: c_int = 2;
pub const G_UNICODE_PRIVATE_USE: c_int = 3;
pub const G_UNICODE_SURROGATE: c_int = 4;
pub const G_UNICODE_LOWERCASE_LETTER: c_int = 5;
pub const G_UNICODE_MODIFIER_LETTER: c_int = 6;
pub const G_UNICODE_OTHER_LETTER: c_int = 7;
pub const G_UNICODE_TITLECASE_LETTER: c_int = 8;
pub const G_UNICODE_UPPERCASE_LETTER: c_int = 9;
pub const G_UNICODE_SPACING_MARK: c_int = 10;
pub const G_UNICODE_ENCLOSING_MARK: c_int = 11;
pub const G_UNICODE_NON_SPACING_MARK: c_int = 12;
pub const G_UNICODE_DECIMAL_NUMBER: c_int = 13;
pub const G_UNICODE_LETTER_NUMBER: c_int = 14;
pub const G_UNICODE_OTHER_NUMBER: c_int = 15;
pub const G_UNICODE_CONNECT_PUNCTUATION: c_int = 16;
pub const G_UNICODE_DASH_PUNCTUATION: c_int = 17;
pub const G_UNICODE_CLOSE_PUNCTUATION: c_int = 18;
pub const G_UNICODE_FINAL_PUNCTUATION: c_int = 19;
pub const G_UNICODE_INITIAL_PUNCTUATION: c_int = 20;
pub const G_UNICODE_OTHER_PUNCTUATION: c_int = 21;
pub const G_UNICODE_OPEN_PUNCTUATION: c_int = 22;
pub const G_UNICODE_CURRENCY_SYMBOL: c_int = 23;
pub const G_UNICODE_MODIFIER_SYMBOL: c_int = 24;
pub const G_UNICODE_MATH_SYMBOL: c_int = 25;
pub const G_UNICODE_OTHER_SYMBOL: c_int = 26;
pub const G_UNICODE_LINE_SEPARATOR: c_int = 27;
pub const G_UNICODE_PARAGRAPH_SEPARATOR: c_int = 28;
pub const G_UNICODE_SPACE_SEPARATOR: c_int = 29;
pub const GUnicodeType = c_uint;
pub const G_UNICODE_BREAK_MANDATORY: c_int = 0;
pub const G_UNICODE_BREAK_CARRIAGE_RETURN: c_int = 1;
pub const G_UNICODE_BREAK_LINE_FEED: c_int = 2;
pub const G_UNICODE_BREAK_COMBINING_MARK: c_int = 3;
pub const G_UNICODE_BREAK_SURROGATE: c_int = 4;
pub const G_UNICODE_BREAK_ZERO_WIDTH_SPACE: c_int = 5;
pub const G_UNICODE_BREAK_INSEPARABLE: c_int = 6;
pub const G_UNICODE_BREAK_NON_BREAKING_GLUE: c_int = 7;
pub const G_UNICODE_BREAK_CONTINGENT: c_int = 8;
pub const G_UNICODE_BREAK_SPACE: c_int = 9;
pub const G_UNICODE_BREAK_AFTER: c_int = 10;
pub const G_UNICODE_BREAK_BEFORE: c_int = 11;
pub const G_UNICODE_BREAK_BEFORE_AND_AFTER: c_int = 12;
pub const G_UNICODE_BREAK_HYPHEN: c_int = 13;
pub const G_UNICODE_BREAK_NON_STARTER: c_int = 14;
pub const G_UNICODE_BREAK_OPEN_PUNCTUATION: c_int = 15;
pub const G_UNICODE_BREAK_CLOSE_PUNCTUATION: c_int = 16;
pub const G_UNICODE_BREAK_QUOTATION: c_int = 17;
pub const G_UNICODE_BREAK_EXCLAMATION: c_int = 18;
pub const G_UNICODE_BREAK_IDEOGRAPHIC: c_int = 19;
pub const G_UNICODE_BREAK_NUMERIC: c_int = 20;
pub const G_UNICODE_BREAK_INFIX_SEPARATOR: c_int = 21;
pub const G_UNICODE_BREAK_SYMBOL: c_int = 22;
pub const G_UNICODE_BREAK_ALPHABETIC: c_int = 23;
pub const G_UNICODE_BREAK_PREFIX: c_int = 24;
pub const G_UNICODE_BREAK_POSTFIX: c_int = 25;
pub const G_UNICODE_BREAK_COMPLEX_CONTEXT: c_int = 26;
pub const G_UNICODE_BREAK_AMBIGUOUS: c_int = 27;
pub const G_UNICODE_BREAK_UNKNOWN: c_int = 28;
pub const G_UNICODE_BREAK_NEXT_LINE: c_int = 29;
pub const G_UNICODE_BREAK_WORD_JOINER: c_int = 30;
pub const G_UNICODE_BREAK_HANGUL_L_JAMO: c_int = 31;
pub const G_UNICODE_BREAK_HANGUL_V_JAMO: c_int = 32;
pub const G_UNICODE_BREAK_HANGUL_T_JAMO: c_int = 33;
pub const G_UNICODE_BREAK_HANGUL_LV_SYLLABLE: c_int = 34;
pub const G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE: c_int = 35;
pub const G_UNICODE_BREAK_CLOSE_PARANTHESIS: c_int = 36;
pub const G_UNICODE_BREAK_CLOSE_PARENTHESIS: c_int = 36;
pub const G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER: c_int = 37;
pub const G_UNICODE_BREAK_HEBREW_LETTER: c_int = 38;
pub const G_UNICODE_BREAK_REGIONAL_INDICATOR: c_int = 39;
pub const G_UNICODE_BREAK_EMOJI_BASE: c_int = 40;
pub const G_UNICODE_BREAK_EMOJI_MODIFIER: c_int = 41;
pub const G_UNICODE_BREAK_ZERO_WIDTH_JOINER: c_int = 42;
pub const GUnicodeBreakType = c_uint;
pub const G_UNICODE_SCRIPT_INVALID_CODE: c_int = -1;
pub const G_UNICODE_SCRIPT_COMMON: c_int = 0;
pub const G_UNICODE_SCRIPT_INHERITED: c_int = 1;
pub const G_UNICODE_SCRIPT_ARABIC: c_int = 2;
pub const G_UNICODE_SCRIPT_ARMENIAN: c_int = 3;
pub const G_UNICODE_SCRIPT_BENGALI: c_int = 4;
pub const G_UNICODE_SCRIPT_BOPOMOFO: c_int = 5;
pub const G_UNICODE_SCRIPT_CHEROKEE: c_int = 6;
pub const G_UNICODE_SCRIPT_COPTIC: c_int = 7;
pub const G_UNICODE_SCRIPT_CYRILLIC: c_int = 8;
pub const G_UNICODE_SCRIPT_DESERET: c_int = 9;
pub const G_UNICODE_SCRIPT_DEVANAGARI: c_int = 10;
pub const G_UNICODE_SCRIPT_ETHIOPIC: c_int = 11;
pub const G_UNICODE_SCRIPT_GEORGIAN: c_int = 12;
pub const G_UNICODE_SCRIPT_GOTHIC: c_int = 13;
pub const G_UNICODE_SCRIPT_GREEK: c_int = 14;
pub const G_UNICODE_SCRIPT_GUJARATI: c_int = 15;
pub const G_UNICODE_SCRIPT_GURMUKHI: c_int = 16;
pub const G_UNICODE_SCRIPT_HAN: c_int = 17;
pub const G_UNICODE_SCRIPT_HANGUL: c_int = 18;
pub const G_UNICODE_SCRIPT_HEBREW: c_int = 19;
pub const G_UNICODE_SCRIPT_HIRAGANA: c_int = 20;
pub const G_UNICODE_SCRIPT_KANNADA: c_int = 21;
pub const G_UNICODE_SCRIPT_KATAKANA: c_int = 22;
pub const G_UNICODE_SCRIPT_KHMER: c_int = 23;
pub const G_UNICODE_SCRIPT_LAO: c_int = 24;
pub const G_UNICODE_SCRIPT_LATIN: c_int = 25;
pub const G_UNICODE_SCRIPT_MALAYALAM: c_int = 26;
pub const G_UNICODE_SCRIPT_MONGOLIAN: c_int = 27;
pub const G_UNICODE_SCRIPT_MYANMAR: c_int = 28;
pub const G_UNICODE_SCRIPT_OGHAM: c_int = 29;
pub const G_UNICODE_SCRIPT_OLD_ITALIC: c_int = 30;
pub const G_UNICODE_SCRIPT_ORIYA: c_int = 31;
pub const G_UNICODE_SCRIPT_RUNIC: c_int = 32;
pub const G_UNICODE_SCRIPT_SINHALA: c_int = 33;
pub const G_UNICODE_SCRIPT_SYRIAC: c_int = 34;
pub const G_UNICODE_SCRIPT_TAMIL: c_int = 35;
pub const G_UNICODE_SCRIPT_TELUGU: c_int = 36;
pub const G_UNICODE_SCRIPT_THAANA: c_int = 37;
pub const G_UNICODE_SCRIPT_THAI: c_int = 38;
pub const G_UNICODE_SCRIPT_TIBETAN: c_int = 39;
pub const G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL: c_int = 40;
pub const G_UNICODE_SCRIPT_YI: c_int = 41;
pub const G_UNICODE_SCRIPT_TAGALOG: c_int = 42;
pub const G_UNICODE_SCRIPT_HANUNOO: c_int = 43;
pub const G_UNICODE_SCRIPT_BUHID: c_int = 44;
pub const G_UNICODE_SCRIPT_TAGBANWA: c_int = 45;
pub const G_UNICODE_SCRIPT_BRAILLE: c_int = 46;
pub const G_UNICODE_SCRIPT_CYPRIOT: c_int = 47;
pub const G_UNICODE_SCRIPT_LIMBU: c_int = 48;
pub const G_UNICODE_SCRIPT_OSMANYA: c_int = 49;
pub const G_UNICODE_SCRIPT_SHAVIAN: c_int = 50;
pub const G_UNICODE_SCRIPT_LINEAR_B: c_int = 51;
pub const G_UNICODE_SCRIPT_TAI_LE: c_int = 52;
pub const G_UNICODE_SCRIPT_UGARITIC: c_int = 53;
pub const G_UNICODE_SCRIPT_NEW_TAI_LUE: c_int = 54;
pub const G_UNICODE_SCRIPT_BUGINESE: c_int = 55;
pub const G_UNICODE_SCRIPT_GLAGOLITIC: c_int = 56;
pub const G_UNICODE_SCRIPT_TIFINAGH: c_int = 57;
pub const G_UNICODE_SCRIPT_SYLOTI_NAGRI: c_int = 58;
pub const G_UNICODE_SCRIPT_OLD_PERSIAN: c_int = 59;
pub const G_UNICODE_SCRIPT_KHAROSHTHI: c_int = 60;
pub const G_UNICODE_SCRIPT_UNKNOWN: c_int = 61;
pub const G_UNICODE_SCRIPT_BALINESE: c_int = 62;
pub const G_UNICODE_SCRIPT_CUNEIFORM: c_int = 63;
pub const G_UNICODE_SCRIPT_PHOENICIAN: c_int = 64;
pub const G_UNICODE_SCRIPT_PHAGS_PA: c_int = 65;
pub const G_UNICODE_SCRIPT_NKO: c_int = 66;
pub const G_UNICODE_SCRIPT_KAYAH_LI: c_int = 67;
pub const G_UNICODE_SCRIPT_LEPCHA: c_int = 68;
pub const G_UNICODE_SCRIPT_REJANG: c_int = 69;
pub const G_UNICODE_SCRIPT_SUNDANESE: c_int = 70;
pub const G_UNICODE_SCRIPT_SAURASHTRA: c_int = 71;
pub const G_UNICODE_SCRIPT_CHAM: c_int = 72;
pub const G_UNICODE_SCRIPT_OL_CHIKI: c_int = 73;
pub const G_UNICODE_SCRIPT_VAI: c_int = 74;
pub const G_UNICODE_SCRIPT_CARIAN: c_int = 75;
pub const G_UNICODE_SCRIPT_LYCIAN: c_int = 76;
pub const G_UNICODE_SCRIPT_LYDIAN: c_int = 77;
pub const G_UNICODE_SCRIPT_AVESTAN: c_int = 78;
pub const G_UNICODE_SCRIPT_BAMUM: c_int = 79;
pub const G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS: c_int = 80;
pub const G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC: c_int = 81;
pub const G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI: c_int = 82;
pub const G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN: c_int = 83;
pub const G_UNICODE_SCRIPT_JAVANESE: c_int = 84;
pub const G_UNICODE_SCRIPT_KAITHI: c_int = 85;
pub const G_UNICODE_SCRIPT_LISU: c_int = 86;
pub const G_UNICODE_SCRIPT_MEETEI_MAYEK: c_int = 87;
pub const G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN: c_int = 88;
pub const G_UNICODE_SCRIPT_OLD_TURKIC: c_int = 89;
pub const G_UNICODE_SCRIPT_SAMARITAN: c_int = 90;
pub const G_UNICODE_SCRIPT_TAI_THAM: c_int = 91;
pub const G_UNICODE_SCRIPT_TAI_VIET: c_int = 92;
pub const G_UNICODE_SCRIPT_BATAK: c_int = 93;
pub const G_UNICODE_SCRIPT_BRAHMI: c_int = 94;
pub const G_UNICODE_SCRIPT_MANDAIC: c_int = 95;
pub const G_UNICODE_SCRIPT_CHAKMA: c_int = 96;
pub const G_UNICODE_SCRIPT_MEROITIC_CURSIVE: c_int = 97;
pub const G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: c_int = 98;
pub const G_UNICODE_SCRIPT_MIAO: c_int = 99;
pub const G_UNICODE_SCRIPT_SHARADA: c_int = 100;
pub const G_UNICODE_SCRIPT_SORA_SOMPENG: c_int = 101;
pub const G_UNICODE_SCRIPT_TAKRI: c_int = 102;
pub const G_UNICODE_SCRIPT_BASSA_VAH: c_int = 103;
pub const G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN: c_int = 104;
pub const G_UNICODE_SCRIPT_DUPLOYAN: c_int = 105;
pub const G_UNICODE_SCRIPT_ELBASAN: c_int = 106;
pub const G_UNICODE_SCRIPT_GRANTHA: c_int = 107;
pub const G_UNICODE_SCRIPT_KHOJKI: c_int = 108;
pub const G_UNICODE_SCRIPT_KHUDAWADI: c_int = 109;
pub const G_UNICODE_SCRIPT_LINEAR_A: c_int = 110;
pub const G_UNICODE_SCRIPT_MAHAJANI: c_int = 111;
pub const G_UNICODE_SCRIPT_MANICHAEAN: c_int = 112;
pub const G_UNICODE_SCRIPT_MENDE_KIKAKUI: c_int = 113;
pub const G_UNICODE_SCRIPT_MODI: c_int = 114;
pub const G_UNICODE_SCRIPT_MRO: c_int = 115;
pub const G_UNICODE_SCRIPT_NABATAEAN: c_int = 116;
pub const G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN: c_int = 117;
pub const G_UNICODE_SCRIPT_OLD_PERMIC: c_int = 118;
pub const G_UNICODE_SCRIPT_PAHAWH_HMONG: c_int = 119;
pub const G_UNICODE_SCRIPT_PALMYRENE: c_int = 120;
pub const G_UNICODE_SCRIPT_PAU_CIN_HAU: c_int = 121;
pub const G_UNICODE_SCRIPT_PSALTER_PAHLAVI: c_int = 122;
pub const G_UNICODE_SCRIPT_SIDDHAM: c_int = 123;
pub const G_UNICODE_SCRIPT_TIRHUTA: c_int = 124;
pub const G_UNICODE_SCRIPT_WARANG_CITI: c_int = 125;
pub const G_UNICODE_SCRIPT_AHOM: c_int = 126;
pub const G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS: c_int = 127;
pub const G_UNICODE_SCRIPT_HATRAN: c_int = 128;
pub const G_UNICODE_SCRIPT_MULTANI: c_int = 129;
pub const G_UNICODE_SCRIPT_OLD_HUNGARIAN: c_int = 130;
pub const G_UNICODE_SCRIPT_SIGNWRITING: c_int = 131;
pub const G_UNICODE_SCRIPT_ADLAM: c_int = 132;
pub const G_UNICODE_SCRIPT_BHAIKSUKI: c_int = 133;
pub const G_UNICODE_SCRIPT_MARCHEN: c_int = 134;
pub const G_UNICODE_SCRIPT_NEWA: c_int = 135;
pub const G_UNICODE_SCRIPT_OSAGE: c_int = 136;
pub const G_UNICODE_SCRIPT_TANGUT: c_int = 137;
pub const G_UNICODE_SCRIPT_MASARAM_GONDI: c_int = 138;
pub const G_UNICODE_SCRIPT_NUSHU: c_int = 139;
pub const G_UNICODE_SCRIPT_SOYOMBO: c_int = 140;
pub const G_UNICODE_SCRIPT_ZANABAZAR_SQUARE: c_int = 141;
pub const G_UNICODE_SCRIPT_DOGRA: c_int = 142;
pub const G_UNICODE_SCRIPT_GUNJALA_GONDI: c_int = 143;
pub const G_UNICODE_SCRIPT_HANIFI_ROHINGYA: c_int = 144;
pub const G_UNICODE_SCRIPT_MAKASAR: c_int = 145;
pub const G_UNICODE_SCRIPT_MEDEFAIDRIN: c_int = 146;
pub const G_UNICODE_SCRIPT_OLD_SOGDIAN: c_int = 147;
pub const G_UNICODE_SCRIPT_SOGDIAN: c_int = 148;
pub const G_UNICODE_SCRIPT_ELYMAIC: c_int = 149;
pub const G_UNICODE_SCRIPT_NANDINAGARI: c_int = 150;
pub const G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG: c_int = 151;
pub const G_UNICODE_SCRIPT_WANCHO: c_int = 152;
pub const G_UNICODE_SCRIPT_CHORASMIAN: c_int = 153;
pub const G_UNICODE_SCRIPT_DIVES_AKURU: c_int = 154;
pub const G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT: c_int = 155;
pub const G_UNICODE_SCRIPT_YEZIDI: c_int = 156;
pub const G_UNICODE_SCRIPT_CYPRO_MINOAN: c_int = 157;
pub const G_UNICODE_SCRIPT_OLD_UYGHUR: c_int = 158;
pub const G_UNICODE_SCRIPT_TANGSA: c_int = 159;
pub const G_UNICODE_SCRIPT_TOTO: c_int = 160;
pub const G_UNICODE_SCRIPT_VITHKUQI: c_int = 161;
pub const G_UNICODE_SCRIPT_MATH: c_int = 162;
pub const G_UNICODE_SCRIPT_KAWI: c_int = 163;
pub const G_UNICODE_SCRIPT_NAG_MUNDARI: c_int = 164;
pub const GUnicodeScript = c_int;
pub extern fn _frida_g_unicode_script_to_iso15924(script: GUnicodeScript) guint32;
pub extern fn _frida_g_unicode_script_from_iso15924(iso15924: guint32) GUnicodeScript;
pub extern fn _frida_g_unichar_isalnum(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isalpha(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_iscntrl(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isdigit(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isgraph(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_islower(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isprint(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_ispunct(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isspace(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isupper(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isxdigit(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_istitle(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_isdefined(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_iswide(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_iswide_cjk(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_iszerowidth(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_ismark(c: gunichar) gboolean;
pub extern fn _frida_g_unichar_toupper(c: gunichar) gunichar;
pub extern fn _frida_g_unichar_tolower(c: gunichar) gunichar;
pub extern fn _frida_g_unichar_totitle(c: gunichar) gunichar;
pub extern fn _frida_g_unichar_digit_value(c: gunichar) gint;
pub extern fn _frida_g_unichar_xdigit_value(c: gunichar) gint;
pub extern fn _frida_g_unichar_type(c: gunichar) GUnicodeType;
pub extern fn _frida_g_unichar_break_type(c: gunichar) GUnicodeBreakType;
pub extern fn _frida_g_unichar_combining_class(uc: gunichar) gint;
pub extern fn _frida_g_unichar_get_mirror_char(ch: gunichar, mirrored_ch: [*c]gunichar) gboolean;
pub extern fn _frida_g_unichar_get_script(ch: gunichar) GUnicodeScript;
pub extern fn _frida_g_unichar_validate(ch: gunichar) gboolean;
pub extern fn _frida_g_unichar_compose(a: gunichar, b: gunichar, ch: [*c]gunichar) gboolean;
pub extern fn _frida_g_unichar_decompose(ch: gunichar, a: [*c]gunichar, b: [*c]gunichar) gboolean;
pub extern fn _frida_g_unichar_fully_decompose(ch: gunichar, compat: gboolean, result: [*c]gunichar, result_len: gsize) gsize;
pub extern fn _frida_g_unicode_canonical_ordering(string: [*c]gunichar, len: gsize) void;
pub extern fn _frida_g_unicode_canonical_decomposition(ch: gunichar, result_len: [*c]gsize) [*c]gunichar;
pub extern const _frida_g_utf8_skip: [*c]const gchar;
pub extern fn _frida_g_utf8_get_char(p: [*c]const gchar) gunichar;
pub extern fn _frida_g_utf8_get_char_validated(p: [*c]const gchar, max_len: gssize) gunichar;
pub extern fn _frida_g_utf8_offset_to_pointer(str: [*c]const gchar, offset: glong) [*c]gchar;
pub extern fn _frida_g_utf8_pointer_to_offset(str: [*c]const gchar, pos: [*c]const gchar) glong;
pub extern fn _frida_g_utf8_prev_char(p: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_utf8_find_next_char(p: [*c]const gchar, end: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_utf8_find_prev_char(str: [*c]const gchar, p: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_utf8_strlen(p: [*c]const gchar, max: gssize) glong;
pub extern fn _frida_g_utf8_substring(str: [*c]const gchar, start_pos: glong, end_pos: glong) [*c]gchar;
pub extern fn _frida_g_utf8_strncpy(dest: [*c]gchar, src: [*c]const gchar, n: gsize) [*c]gchar;
pub extern fn _frida_g_utf8_strchr(p: [*c]const gchar, len: gssize, c: gunichar) [*c]gchar;
pub extern fn _frida_g_utf8_strrchr(p: [*c]const gchar, len: gssize, c: gunichar) [*c]gchar;
pub extern fn _frida_g_utf8_strreverse(str: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_utf8_to_utf16(str: [*c]const gchar, len: glong, items_read: [*c]glong, items_written: [*c]glong, @"error": [*c][*c]GError) [*c]gunichar2;
pub extern fn _frida_g_utf8_to_ucs4(str: [*c]const gchar, len: glong, items_read: [*c]glong, items_written: [*c]glong, @"error": [*c][*c]GError) [*c]gunichar;
pub extern fn _frida_g_utf8_to_ucs4_fast(str: [*c]const gchar, len: glong, items_written: [*c]glong) [*c]gunichar;
pub extern fn _frida_g_utf16_to_ucs4(str: [*c]const gunichar2, len: glong, items_read: [*c]glong, items_written: [*c]glong, @"error": [*c][*c]GError) [*c]gunichar;
pub extern fn _frida_g_utf16_to_utf8(str: [*c]const gunichar2, len: glong, items_read: [*c]glong, items_written: [*c]glong, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_ucs4_to_utf16(str: [*c]const gunichar, len: glong, items_read: [*c]glong, items_written: [*c]glong, @"error": [*c][*c]GError) [*c]gunichar2;
pub extern fn _frida_g_ucs4_to_utf8(str: [*c]const gunichar, len: glong, items_read: [*c]glong, items_written: [*c]glong, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_unichar_to_utf8(c: gunichar, outbuf: [*c]gchar) gint;
pub extern fn _frida_g_utf8_validate(str: [*c]const gchar, max_len: gssize, end: [*c][*c]const gchar) gboolean;
pub extern fn _frida_g_utf8_validate_len(str: [*c]const gchar, max_len: gsize, end: [*c][*c]const gchar) gboolean;
pub extern fn _frida_g_utf8_strup(str: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_utf8_strdown(str: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_utf8_casefold(str: [*c]const gchar, len: gssize) [*c]gchar;
pub const G_NORMALIZE_DEFAULT: c_int = 0;
pub const G_NORMALIZE_NFD: c_int = 0;
pub const G_NORMALIZE_DEFAULT_COMPOSE: c_int = 1;
pub const G_NORMALIZE_NFC: c_int = 1;
pub const G_NORMALIZE_ALL: c_int = 2;
pub const G_NORMALIZE_NFKD: c_int = 2;
pub const G_NORMALIZE_ALL_COMPOSE: c_int = 3;
pub const G_NORMALIZE_NFKC: c_int = 3;
pub const GNormalizeMode = c_uint;
pub extern fn _frida_g_utf8_normalize(str: [*c]const gchar, len: gssize, mode: GNormalizeMode) [*c]gchar;
pub extern fn _frida_g_utf8_collate(str1: [*c]const gchar, str2: [*c]const gchar) gint;
pub extern fn _frida_g_utf8_collate_key(str: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_utf8_collate_key_for_filename(str: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_utf8_make_valid(str: [*c]const gchar, len: gssize) [*c]gchar;
pub const struct__GString = extern struct {
    str: [*c]gchar,
    len: gsize,
    allocated_len: gsize,
};
pub const GString = struct__GString;
pub extern fn _frida_g_string_new(init: [*c]const gchar) [*c]GString;
pub extern fn _frida_g_string_new_len(init: [*c]const gchar, len: gssize) [*c]GString;
pub extern fn _frida_g_string_sized_new(dfl_size: gsize) [*c]GString;
pub extern fn _frida_g_string_free(string: [*c]GString, free_segment: gboolean) [*c]gchar;
pub extern fn _frida_g_string_free_to_bytes(string: [*c]GString) ?*GBytes;
pub extern fn _frida_g_string_equal(v: [*c]const GString, v2: [*c]const GString) gboolean;
pub extern fn _frida_g_string_hash(str: [*c]const GString) guint;
pub extern fn _frida_g_string_assign(string: [*c]GString, rval: [*c]const gchar) [*c]GString;
pub extern fn _frida_g_string_truncate(string: [*c]GString, len: gsize) [*c]GString;
pub extern fn _frida_g_string_set_size(string: [*c]GString, len: gsize) [*c]GString;
pub extern fn _frida_g_string_insert_len(string: [*c]GString, pos: gssize, val: [*c]const gchar, len: gssize) [*c]GString;
pub extern fn _frida_g_string_append(string: [*c]GString, val: [*c]const gchar) [*c]GString;
pub extern fn _frida_g_string_append_len(string: [*c]GString, val: [*c]const gchar, len: gssize) [*c]GString;
pub extern fn _frida_g_string_append_c(string: [*c]GString, c: gchar) [*c]GString;
pub extern fn _frida_g_string_append_unichar(string: [*c]GString, wc: gunichar) [*c]GString;
pub extern fn _frida_g_string_prepend(string: [*c]GString, val: [*c]const gchar) [*c]GString;
pub extern fn _frida_g_string_prepend_c(string: [*c]GString, c: gchar) [*c]GString;
pub extern fn _frida_g_string_prepend_unichar(string: [*c]GString, wc: gunichar) [*c]GString;
pub extern fn _frida_g_string_prepend_len(string: [*c]GString, val: [*c]const gchar, len: gssize) [*c]GString;
pub extern fn _frida_g_string_insert(string: [*c]GString, pos: gssize, val: [*c]const gchar) [*c]GString;
pub extern fn _frida_g_string_insert_c(string: [*c]GString, pos: gssize, c: gchar) [*c]GString;
pub extern fn _frida_g_string_insert_unichar(string: [*c]GString, pos: gssize, wc: gunichar) [*c]GString;
pub extern fn _frida_g_string_overwrite(string: [*c]GString, pos: gsize, val: [*c]const gchar) [*c]GString;
pub extern fn _frida_g_string_overwrite_len(string: [*c]GString, pos: gsize, val: [*c]const gchar, len: gssize) [*c]GString;
pub extern fn _frida_g_string_erase(string: [*c]GString, pos: gssize, len: gssize) [*c]GString;
pub extern fn _frida_g_string_replace(string: [*c]GString, find: [*c]const gchar, replace: [*c]const gchar, limit: guint) guint;
pub extern fn _frida_g_string_ascii_down(string: [*c]GString) [*c]GString;
pub extern fn _frida_g_string_ascii_up(string: [*c]GString) [*c]GString;
pub extern fn _frida_g_string_vprintf(string: [*c]GString, format: [*c]const gchar, args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_string_printf(string: [*c]GString, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_string_append_vprintf(string: [*c]GString, format: [*c]const gchar, args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_string_append_printf(string: [*c]GString, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_string_append_uri_escaped(string: [*c]GString, unescaped: [*c]const gchar, reserved_chars_allowed: [*c]const gchar, allow_utf8: gboolean) [*c]GString;
pub fn g_string_append_c_inline(arg_gstring: [*c]GString, arg_c: gchar) callconv(.C) [*c]GString {
    var gstring = arg_gstring;
    var c = arg_c;
    if ((gstring.*.len +% @bitCast(gsize, @as(c_long, @as(c_int, 1)))) < gstring.*.allocated_len) {
        gstring.*.str[blk: {
                const ref = &gstring.*.len;
                const tmp = ref.*;
                ref.* +%= 1;
                break :blk tmp;
            }] = c;
        gstring.*.str[gstring.*.len] = 0;
    } else {
        _ = _frida_g_string_insert_c(gstring, @bitCast(gssize, @as(c_long, -@as(c_int, 1))), c);
    }
    return gstring;
}
pub extern fn _frida_g_string_down(string: [*c]GString) [*c]GString;
pub extern fn _frida_g_string_up(string: [*c]GString) [*c]GString;
pub const GIOChannel = struct__GIOChannel;
pub const struct__GIOFuncs = extern struct {
    io_read: ?*const fn (?*GIOChannel, [*c]gchar, gsize, [*c]gsize, [*c][*c]GError) callconv(.C) GIOStatus,
    io_write: ?*const fn (?*GIOChannel, [*c]const gchar, gsize, [*c]gsize, [*c][*c]GError) callconv(.C) GIOStatus,
    io_seek: ?*const fn (?*GIOChannel, gint64, GSeekType, [*c][*c]GError) callconv(.C) GIOStatus,
    io_close: ?*const fn (?*GIOChannel, [*c][*c]GError) callconv(.C) GIOStatus,
    io_create_watch: ?*const fn (?*GIOChannel, GIOCondition) callconv(.C) [*c]GSource,
    io_free: ?*const fn (?*GIOChannel) callconv(.C) void,
    io_set_flags: ?*const fn (?*GIOChannel, GIOFlags, [*c][*c]GError) callconv(.C) GIOStatus,
    io_get_flags: ?*const fn (?*GIOChannel) callconv(.C) GIOFlags,
};
pub const GIOFuncs = struct__GIOFuncs; // lib/frida-core/frida-core.h:18003:9: warning: struct demoted to opaque type - has bitfield
pub const struct__GIOChannel = opaque {};
pub const G_IO_ERROR_NONE: c_int = 0;
pub const G_IO_ERROR_AGAIN: c_int = 1;
pub const G_IO_ERROR_INVAL: c_int = 2;
pub const G_IO_ERROR_UNKNOWN: c_int = 3;
pub const GIOError = c_uint;
pub const G_IO_CHANNEL_ERROR_FBIG: c_int = 0;
pub const G_IO_CHANNEL_ERROR_INVAL: c_int = 1;
pub const G_IO_CHANNEL_ERROR_IO: c_int = 2;
pub const G_IO_CHANNEL_ERROR_ISDIR: c_int = 3;
pub const G_IO_CHANNEL_ERROR_NOSPC: c_int = 4;
pub const G_IO_CHANNEL_ERROR_NXIO: c_int = 5;
pub const G_IO_CHANNEL_ERROR_OVERFLOW: c_int = 6;
pub const G_IO_CHANNEL_ERROR_PIPE: c_int = 7;
pub const G_IO_CHANNEL_ERROR_FAILED: c_int = 8;
pub const GIOChannelError = c_uint;
pub const G_IO_STATUS_ERROR: c_int = 0;
pub const G_IO_STATUS_NORMAL: c_int = 1;
pub const G_IO_STATUS_EOF: c_int = 2;
pub const G_IO_STATUS_AGAIN: c_int = 3;
pub const GIOStatus = c_uint;
pub const G_SEEK_CUR: c_int = 0;
pub const G_SEEK_SET: c_int = 1;
pub const G_SEEK_END: c_int = 2;
pub const GSeekType = c_uint;
pub const G_IO_FLAG_NONE: c_int = 0;
pub const G_IO_FLAG_APPEND: c_int = 1;
pub const G_IO_FLAG_NONBLOCK: c_int = 2;
pub const G_IO_FLAG_IS_READABLE: c_int = 4;
pub const G_IO_FLAG_IS_WRITABLE: c_int = 8;
pub const G_IO_FLAG_IS_WRITEABLE: c_int = 8;
pub const G_IO_FLAG_IS_SEEKABLE: c_int = 16;
pub const G_IO_FLAG_MASK: c_int = 31;
pub const G_IO_FLAG_GET_MASK: c_int = 31;
pub const G_IO_FLAG_SET_MASK: c_int = 3;
pub const GIOFlags = c_uint;
pub const GIOFunc = ?*const fn (?*GIOChannel, GIOCondition, gpointer) callconv(.C) gboolean;
pub extern fn _frida_g_io_channel_init(channel: ?*GIOChannel) void;
pub extern fn _frida_g_io_channel_ref(channel: ?*GIOChannel) ?*GIOChannel;
pub extern fn _frida_g_io_channel_unref(channel: ?*GIOChannel) void;
pub extern fn _frida_g_io_channel_read(channel: ?*GIOChannel, buf: [*c]gchar, count: gsize, bytes_read: [*c]gsize) GIOError;
pub extern fn _frida_g_io_channel_write(channel: ?*GIOChannel, buf: [*c]const gchar, count: gsize, bytes_written: [*c]gsize) GIOError;
pub extern fn _frida_g_io_channel_seek(channel: ?*GIOChannel, offset: gint64, @"type": GSeekType) GIOError;
pub extern fn _frida_g_io_channel_close(channel: ?*GIOChannel) void;
pub extern fn _frida_g_io_channel_shutdown(channel: ?*GIOChannel, flush: gboolean, err: [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_add_watch_full(channel: ?*GIOChannel, priority: gint, condition: GIOCondition, func: GIOFunc, user_data: gpointer, notify: GDestroyNotify) guint;
pub extern fn _frida_g_io_create_watch(channel: ?*GIOChannel, condition: GIOCondition) [*c]GSource;
pub extern fn _frida_g_io_add_watch(channel: ?*GIOChannel, condition: GIOCondition, func: GIOFunc, user_data: gpointer) guint;
pub extern fn _frida_g_io_channel_set_buffer_size(channel: ?*GIOChannel, size: gsize) void;
pub extern fn _frida_g_io_channel_get_buffer_size(channel: ?*GIOChannel) gsize;
pub extern fn _frida_g_io_channel_get_buffer_condition(channel: ?*GIOChannel) GIOCondition;
pub extern fn _frida_g_io_channel_set_flags(channel: ?*GIOChannel, flags: GIOFlags, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_get_flags(channel: ?*GIOChannel) GIOFlags;
pub extern fn _frida_g_io_channel_set_line_term(channel: ?*GIOChannel, line_term: [*c]const gchar, length: gint) void;
pub extern fn _frida_g_io_channel_get_line_term(channel: ?*GIOChannel, length: [*c]gint) [*c]const gchar;
pub extern fn _frida_g_io_channel_set_buffered(channel: ?*GIOChannel, buffered: gboolean) void;
pub extern fn _frida_g_io_channel_get_buffered(channel: ?*GIOChannel) gboolean;
pub extern fn _frida_g_io_channel_set_encoding(channel: ?*GIOChannel, encoding: [*c]const gchar, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_get_encoding(channel: ?*GIOChannel) [*c]const gchar;
pub extern fn _frida_g_io_channel_set_close_on_unref(channel: ?*GIOChannel, do_close: gboolean) void;
pub extern fn _frida_g_io_channel_get_close_on_unref(channel: ?*GIOChannel) gboolean;
pub extern fn _frida_g_io_channel_flush(channel: ?*GIOChannel, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_read_line(channel: ?*GIOChannel, str_return: [*c][*c]gchar, length: [*c]gsize, terminator_pos: [*c]gsize, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_read_line_string(channel: ?*GIOChannel, buffer: [*c]GString, terminator_pos: [*c]gsize, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_read_to_end(channel: ?*GIOChannel, str_return: [*c][*c]gchar, length: [*c]gsize, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_read_chars(channel: ?*GIOChannel, buf: [*c]gchar, count: gsize, bytes_read: [*c]gsize, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_read_unichar(channel: ?*GIOChannel, thechar: [*c]gunichar, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_write_chars(channel: ?*GIOChannel, buf: [*c]const gchar, count: gssize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_write_unichar(channel: ?*GIOChannel, thechar: gunichar, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_seek_position(channel: ?*GIOChannel, offset: gint64, @"type": GSeekType, @"error": [*c][*c]GError) GIOStatus;
pub extern fn _frida_g_io_channel_new_file(filename: [*c]const gchar, mode: [*c]const gchar, @"error": [*c][*c]GError) ?*GIOChannel;
pub extern fn _frida_g_io_channel_error_quark() GQuark;
pub extern fn _frida_g_io_channel_error_from_errno(en: gint) GIOChannelError;
pub extern fn _frida_g_io_channel_unix_new(fd: c_int) ?*GIOChannel;
pub extern fn _frida_g_io_channel_unix_get_fd(channel: ?*GIOChannel) gint;
pub extern var _frida_g_io_watch_funcs: GSourceFuncs;
pub const G_KEY_FILE_ERROR_UNKNOWN_ENCODING: c_int = 0;
pub const G_KEY_FILE_ERROR_PARSE: c_int = 1;
pub const G_KEY_FILE_ERROR_NOT_FOUND: c_int = 2;
pub const G_KEY_FILE_ERROR_KEY_NOT_FOUND: c_int = 3;
pub const G_KEY_FILE_ERROR_GROUP_NOT_FOUND: c_int = 4;
pub const G_KEY_FILE_ERROR_INVALID_VALUE: c_int = 5;
pub const GKeyFileError = c_uint;
pub extern fn _frida_g_key_file_error_quark() GQuark;
pub const struct__GKeyFile = opaque {};
pub const GKeyFile = struct__GKeyFile;
pub const G_KEY_FILE_NONE: c_int = 0;
pub const G_KEY_FILE_KEEP_COMMENTS: c_int = 1;
pub const G_KEY_FILE_KEEP_TRANSLATIONS: c_int = 2;
pub const GKeyFileFlags = c_uint;
pub extern fn _frida_g_key_file_new() ?*GKeyFile;
pub extern fn _frida_g_key_file_ref(key_file: ?*GKeyFile) ?*GKeyFile;
pub extern fn _frida_g_key_file_unref(key_file: ?*GKeyFile) void;
pub extern fn _frida_g_key_file_free(key_file: ?*GKeyFile) void;
pub extern fn _frida_g_key_file_set_list_separator(key_file: ?*GKeyFile, separator: gchar) void;
pub extern fn _frida_g_key_file_load_from_file(key_file: ?*GKeyFile, file: [*c]const gchar, flags: GKeyFileFlags, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_load_from_data(key_file: ?*GKeyFile, data: [*c]const gchar, length: gsize, flags: GKeyFileFlags, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_load_from_bytes(key_file: ?*GKeyFile, bytes: ?*GBytes, flags: GKeyFileFlags, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_load_from_dirs(key_file: ?*GKeyFile, file: [*c]const gchar, search_dirs: [*c][*c]const gchar, full_path: [*c][*c]gchar, flags: GKeyFileFlags, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_load_from_data_dirs(key_file: ?*GKeyFile, file: [*c]const gchar, full_path: [*c][*c]gchar, flags: GKeyFileFlags, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_to_data(key_file: ?*GKeyFile, length: [*c]gsize, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_key_file_save_to_file(key_file: ?*GKeyFile, filename: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_get_start_group(key_file: ?*GKeyFile) [*c]gchar;
pub extern fn _frida_g_key_file_get_groups(key_file: ?*GKeyFile, length: [*c]gsize) [*c][*c]gchar;
pub extern fn _frida_g_key_file_get_keys(key_file: ?*GKeyFile, group_name: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_key_file_has_group(key_file: ?*GKeyFile, group_name: [*c]const gchar) gboolean;
pub extern fn _frida_g_key_file_has_key(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_get_value(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_key_file_set_value(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, value: [*c]const gchar) void;
pub extern fn _frida_g_key_file_get_string(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_key_file_set_string(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, string: [*c]const gchar) void;
pub extern fn _frida_g_key_file_get_locale_string(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, locale: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_key_file_get_locale_for_key(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, locale: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_key_file_set_locale_string(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, locale: [*c]const gchar, string: [*c]const gchar) void;
pub extern fn _frida_g_key_file_get_boolean(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_set_boolean(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, value: gboolean) void;
pub extern fn _frida_g_key_file_get_integer(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_key_file_set_integer(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, value: gint) void;
pub extern fn _frida_g_key_file_get_int64(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) gint64;
pub extern fn _frida_g_key_file_set_int64(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, value: gint64) void;
pub extern fn _frida_g_key_file_get_uint64(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) guint64;
pub extern fn _frida_g_key_file_set_uint64(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, value: guint64) void;
pub extern fn _frida_g_key_file_get_double(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) gdouble;
pub extern fn _frida_g_key_file_set_double(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, value: gdouble) void;
pub extern fn _frida_g_key_file_get_string_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_key_file_set_string_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, list: [*c]const [*c]const gchar, length: gsize) void;
pub extern fn _frida_g_key_file_get_locale_string_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, locale: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_key_file_set_locale_string_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, locale: [*c]const gchar, list: [*c]const [*c]const gchar, length: gsize) void;
pub extern fn _frida_g_key_file_get_boolean_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c]gboolean;
pub extern fn _frida_g_key_file_set_boolean_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, list: [*c]gboolean, length: gsize) void;
pub extern fn _frida_g_key_file_get_integer_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c]gint;
pub extern fn _frida_g_key_file_set_double_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, list: [*c]gdouble, length: gsize) void;
pub extern fn _frida_g_key_file_get_double_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, length: [*c]gsize, @"error": [*c][*c]GError) [*c]gdouble;
pub extern fn _frida_g_key_file_set_integer_list(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, list: [*c]gint, length: gsize) void;
pub extern fn _frida_g_key_file_set_comment(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, comment: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_get_comment(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_key_file_remove_comment(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_remove_key(key_file: ?*GKeyFile, group_name: [*c]const gchar, key: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_key_file_remove_group(key_file: ?*GKeyFile, group_name: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub const struct__GMappedFile = opaque {};
pub const GMappedFile = struct__GMappedFile;
pub extern fn _frida_g_mapped_file_new(filename: [*c]const gchar, writable: gboolean, @"error": [*c][*c]GError) ?*GMappedFile;
pub extern fn _frida_g_mapped_file_new_from_fd(fd: gint, writable: gboolean, @"error": [*c][*c]GError) ?*GMappedFile;
pub extern fn _frida_g_mapped_file_get_length(file: ?*GMappedFile) gsize;
pub extern fn _frida_g_mapped_file_get_contents(file: ?*GMappedFile) [*c]gchar;
pub extern fn _frida_g_mapped_file_get_bytes(file: ?*GMappedFile) ?*GBytes;
pub extern fn _frida_g_mapped_file_ref(file: ?*GMappedFile) ?*GMappedFile;
pub extern fn _frida_g_mapped_file_unref(file: ?*GMappedFile) void;
pub extern fn _frida_g_mapped_file_free(file: ?*GMappedFile) void;
pub const G_MARKUP_ERROR_BAD_UTF8: c_int = 0;
pub const G_MARKUP_ERROR_EMPTY: c_int = 1;
pub const G_MARKUP_ERROR_PARSE: c_int = 2;
pub const G_MARKUP_ERROR_UNKNOWN_ELEMENT: c_int = 3;
pub const G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: c_int = 4;
pub const G_MARKUP_ERROR_INVALID_CONTENT: c_int = 5;
pub const G_MARKUP_ERROR_MISSING_ATTRIBUTE: c_int = 6;
pub const GMarkupError = c_uint;
pub extern fn _frida_g_markup_error_quark() GQuark;
pub const G_MARKUP_DEFAULT_FLAGS: c_int = 0;
pub const G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: c_int = 1;
pub const G_MARKUP_TREAT_CDATA_AS_TEXT: c_int = 2;
pub const G_MARKUP_PREFIX_ERROR_POSITION: c_int = 4;
pub const G_MARKUP_IGNORE_QUALIFIED: c_int = 8;
pub const GMarkupParseFlags = c_uint;
pub const struct__GMarkupParseContext = opaque {};
pub const GMarkupParseContext = struct__GMarkupParseContext;
pub const struct__GMarkupParser = extern struct {
    start_element: ?*const fn (?*GMarkupParseContext, [*c]const gchar, [*c][*c]const gchar, [*c][*c]const gchar, gpointer, [*c][*c]GError) callconv(.C) void,
    end_element: ?*const fn (?*GMarkupParseContext, [*c]const gchar, gpointer, [*c][*c]GError) callconv(.C) void,
    text: ?*const fn (?*GMarkupParseContext, [*c]const gchar, gsize, gpointer, [*c][*c]GError) callconv(.C) void,
    passthrough: ?*const fn (?*GMarkupParseContext, [*c]const gchar, gsize, gpointer, [*c][*c]GError) callconv(.C) void,
    @"error": ?*const fn (?*GMarkupParseContext, [*c]GError, gpointer) callconv(.C) void,
};
pub const GMarkupParser = struct__GMarkupParser;
pub extern fn _frida_g_markup_parse_context_new(parser: [*c]const GMarkupParser, flags: GMarkupParseFlags, user_data: gpointer, user_data_dnotify: GDestroyNotify) ?*GMarkupParseContext;
pub extern fn _frida_g_markup_parse_context_ref(context: ?*GMarkupParseContext) ?*GMarkupParseContext;
pub extern fn _frida_g_markup_parse_context_unref(context: ?*GMarkupParseContext) void;
pub extern fn _frida_g_markup_parse_context_free(context: ?*GMarkupParseContext) void;
pub extern fn _frida_g_markup_parse_context_parse(context: ?*GMarkupParseContext, text: [*c]const gchar, text_len: gssize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_markup_parse_context_push(context: ?*GMarkupParseContext, parser: [*c]const GMarkupParser, user_data: gpointer) void;
pub extern fn _frida_g_markup_parse_context_pop(context: ?*GMarkupParseContext) gpointer;
pub extern fn _frida_g_markup_parse_context_end_parse(context: ?*GMarkupParseContext, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_markup_parse_context_get_element(context: ?*GMarkupParseContext) [*c]const gchar;
pub extern fn _frida_g_markup_parse_context_get_element_stack(context: ?*GMarkupParseContext) [*c]const GSList;
pub extern fn _frida_g_markup_parse_context_get_position(context: ?*GMarkupParseContext, line_number: [*c]gint, char_number: [*c]gint) void;
pub extern fn _frida_g_markup_parse_context_get_user_data(context: ?*GMarkupParseContext) gpointer;
pub extern fn _frida_g_markup_escape_text(text: [*c]const gchar, length: gssize) [*c]gchar;
pub extern fn _frida_g_markup_printf_escaped(format: [*c]const u8, ...) [*c]gchar;
pub extern fn _frida_g_markup_vprintf_escaped(format: [*c]const u8, args: [*c]struct___va_list_tag) [*c]gchar;
pub const G_MARKUP_COLLECT_INVALID: c_int = 0;
pub const G_MARKUP_COLLECT_STRING: c_int = 1;
pub const G_MARKUP_COLLECT_STRDUP: c_int = 2;
pub const G_MARKUP_COLLECT_BOOLEAN: c_int = 3;
pub const G_MARKUP_COLLECT_TRISTATE: c_int = 4;
pub const G_MARKUP_COLLECT_OPTIONAL: c_int = 65536;
pub const GMarkupCollectType = c_uint;
pub extern fn _frida_g_markup_collect_attributes(element_name: [*c]const gchar, attribute_names: [*c][*c]const gchar, attribute_values: [*c][*c]const gchar, @"error": [*c][*c]GError, first_type: GMarkupCollectType, first_attr: [*c]const gchar, ...) gboolean;
pub const struct__GVariantType = opaque {};
pub const GVariantType = struct__GVariantType;
pub extern fn _frida_g_variant_type_string_is_valid(type_string: [*c]const gchar) gboolean;
pub extern fn _frida_g_variant_type_string_scan(string: [*c]const gchar, limit: [*c]const gchar, endptr: [*c][*c]const gchar) gboolean;
pub extern fn _frida_g_variant_type_free(@"type": ?*GVariantType) void;
pub extern fn _frida_g_variant_type_copy(@"type": ?*const GVariantType) ?*GVariantType;
pub extern fn _frida_g_variant_type_new(type_string: [*c]const gchar) ?*GVariantType;
pub extern fn _frida_g_variant_type_get_string_length(@"type": ?*const GVariantType) gsize;
pub extern fn _frida_g_variant_type_peek_string(@"type": ?*const GVariantType) [*c]const gchar;
pub extern fn _frida_g_variant_type_dup_string(@"type": ?*const GVariantType) [*c]gchar;
pub extern fn _frida_g_variant_type_is_definite(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_is_container(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_is_basic(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_is_maybe(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_is_array(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_is_tuple(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_is_dict_entry(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_is_variant(@"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_hash(@"type": gconstpointer) guint;
pub extern fn _frida_g_variant_type_equal(type1: gconstpointer, type2: gconstpointer) gboolean;
pub extern fn _frida_g_variant_type_is_subtype_of(@"type": ?*const GVariantType, supertype: ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_type_element(@"type": ?*const GVariantType) ?*const GVariantType;
pub extern fn _frida_g_variant_type_first(@"type": ?*const GVariantType) ?*const GVariantType;
pub extern fn _frida_g_variant_type_next(@"type": ?*const GVariantType) ?*const GVariantType;
pub extern fn _frida_g_variant_type_n_items(@"type": ?*const GVariantType) gsize;
pub extern fn _frida_g_variant_type_key(@"type": ?*const GVariantType) ?*const GVariantType;
pub extern fn _frida_g_variant_type_value(@"type": ?*const GVariantType) ?*const GVariantType;
pub extern fn _frida_g_variant_type_new_array(element: ?*const GVariantType) ?*GVariantType;
pub extern fn _frida_g_variant_type_new_maybe(element: ?*const GVariantType) ?*GVariantType;
pub extern fn _frida_g_variant_type_new_tuple(items: [*c]const ?*const GVariantType, length: gint) ?*GVariantType;
pub extern fn _frida_g_variant_type_new_dict_entry(key: ?*const GVariantType, value: ?*const GVariantType) ?*GVariantType;
pub extern fn _frida_g_variant_type_checked_([*c]const gchar) ?*const GVariantType;
pub extern fn _frida_g_variant_type_string_get_depth_(type_string: [*c]const gchar) gsize;
pub const struct__GVariant = opaque {};
pub const GVariant = struct__GVariant;
pub const G_VARIANT_CLASS_BOOLEAN: c_int = 98;
pub const G_VARIANT_CLASS_BYTE: c_int = 121;
pub const G_VARIANT_CLASS_INT16: c_int = 110;
pub const G_VARIANT_CLASS_UINT16: c_int = 113;
pub const G_VARIANT_CLASS_INT32: c_int = 105;
pub const G_VARIANT_CLASS_UINT32: c_int = 117;
pub const G_VARIANT_CLASS_INT64: c_int = 120;
pub const G_VARIANT_CLASS_UINT64: c_int = 116;
pub const G_VARIANT_CLASS_HANDLE: c_int = 104;
pub const G_VARIANT_CLASS_DOUBLE: c_int = 100;
pub const G_VARIANT_CLASS_STRING: c_int = 115;
pub const G_VARIANT_CLASS_OBJECT_PATH: c_int = 111;
pub const G_VARIANT_CLASS_SIGNATURE: c_int = 103;
pub const G_VARIANT_CLASS_VARIANT: c_int = 118;
pub const G_VARIANT_CLASS_MAYBE: c_int = 109;
pub const G_VARIANT_CLASS_ARRAY: c_int = 97;
pub const G_VARIANT_CLASS_TUPLE: c_int = 40;
pub const G_VARIANT_CLASS_DICT_ENTRY: c_int = 123;
pub const GVariantClass = c_uint;
pub extern fn _frida_g_variant_unref(value: ?*GVariant) void;
pub extern fn _frida_g_variant_ref(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_ref_sink(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_is_floating(value: ?*GVariant) gboolean;
pub extern fn _frida_g_variant_take_ref(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_get_type(value: ?*GVariant) ?*const GVariantType;
pub extern fn _frida_g_variant_get_type_string(value: ?*GVariant) [*c]const gchar;
pub extern fn _frida_g_variant_is_of_type(value: ?*GVariant, @"type": ?*const GVariantType) gboolean;
pub extern fn _frida_g_variant_is_container(value: ?*GVariant) gboolean;
pub extern fn _frida_g_variant_classify(value: ?*GVariant) GVariantClass;
pub extern fn _frida_g_variant_new_boolean(value: gboolean) ?*GVariant;
pub extern fn _frida_g_variant_new_byte(value: guint8) ?*GVariant;
pub extern fn _frida_g_variant_new_int16(value: gint16) ?*GVariant;
pub extern fn _frida_g_variant_new_uint16(value: guint16) ?*GVariant;
pub extern fn _frida_g_variant_new_int32(value: gint32) ?*GVariant;
pub extern fn _frida_g_variant_new_uint32(value: guint32) ?*GVariant;
pub extern fn _frida_g_variant_new_int64(value: gint64) ?*GVariant;
pub extern fn _frida_g_variant_new_uint64(value: guint64) ?*GVariant;
pub extern fn _frida_g_variant_new_handle(value: gint32) ?*GVariant;
pub extern fn _frida_g_variant_new_double(value: gdouble) ?*GVariant;
pub extern fn _frida_g_variant_new_string(string: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_variant_new_take_string(string: [*c]gchar) ?*GVariant;
pub extern fn _frida_g_variant_new_printf(format_string: [*c]const gchar, ...) ?*GVariant;
pub extern fn _frida_g_variant_new_object_path(object_path: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_variant_is_object_path(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_variant_new_signature(signature: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_variant_is_signature(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_variant_new_variant(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_new_strv(strv: [*c]const [*c]const gchar, length: gssize) ?*GVariant;
pub extern fn _frida_g_variant_new_objv(strv: [*c]const [*c]const gchar, length: gssize) ?*GVariant;
pub extern fn _frida_g_variant_new_bytestring(string: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_variant_new_bytestring_array(strv: [*c]const [*c]const gchar, length: gssize) ?*GVariant;
pub extern fn _frida_g_variant_new_fixed_array(element_type: ?*const GVariantType, elements: gconstpointer, n_elements: gsize, element_size: gsize) ?*GVariant;
pub extern fn _frida_g_variant_get_boolean(value: ?*GVariant) gboolean;
pub extern fn _frida_g_variant_get_byte(value: ?*GVariant) guint8;
pub extern fn _frida_g_variant_get_int16(value: ?*GVariant) gint16;
pub extern fn _frida_g_variant_get_uint16(value: ?*GVariant) guint16;
pub extern fn _frida_g_variant_get_int32(value: ?*GVariant) gint32;
pub extern fn _frida_g_variant_get_uint32(value: ?*GVariant) guint32;
pub extern fn _frida_g_variant_get_int64(value: ?*GVariant) gint64;
pub extern fn _frida_g_variant_get_uint64(value: ?*GVariant) guint64;
pub extern fn _frida_g_variant_get_handle(value: ?*GVariant) gint32;
pub extern fn _frida_g_variant_get_double(value: ?*GVariant) gdouble;
pub extern fn _frida_g_variant_get_variant(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_get_string(value: ?*GVariant, length: [*c]gsize) [*c]const gchar;
pub extern fn _frida_g_variant_dup_string(value: ?*GVariant, length: [*c]gsize) [*c]gchar;
pub extern fn _frida_g_variant_get_strv(value: ?*GVariant, length: [*c]gsize) [*c][*c]const gchar;
pub extern fn _frida_g_variant_dup_strv(value: ?*GVariant, length: [*c]gsize) [*c][*c]gchar;
pub extern fn _frida_g_variant_get_objv(value: ?*GVariant, length: [*c]gsize) [*c][*c]const gchar;
pub extern fn _frida_g_variant_dup_objv(value: ?*GVariant, length: [*c]gsize) [*c][*c]gchar;
pub extern fn _frida_g_variant_get_bytestring(value: ?*GVariant) [*c]const gchar;
pub extern fn _frida_g_variant_dup_bytestring(value: ?*GVariant, length: [*c]gsize) [*c]gchar;
pub extern fn _frida_g_variant_get_bytestring_array(value: ?*GVariant, length: [*c]gsize) [*c][*c]const gchar;
pub extern fn _frida_g_variant_dup_bytestring_array(value: ?*GVariant, length: [*c]gsize) [*c][*c]gchar;
pub extern fn _frida_g_variant_new_maybe(child_type: ?*const GVariantType, child: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_new_array(child_type: ?*const GVariantType, children: [*c]const ?*GVariant, n_children: gsize) ?*GVariant;
pub extern fn _frida_g_variant_new_tuple(children: [*c]const ?*GVariant, n_children: gsize) ?*GVariant;
pub extern fn _frida_g_variant_new_dict_entry(key: ?*GVariant, value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_get_maybe(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_n_children(value: ?*GVariant) gsize;
pub extern fn _frida_g_variant_get_child(value: ?*GVariant, index_: gsize, format_string: [*c]const gchar, ...) void;
pub extern fn _frida_g_variant_get_child_value(value: ?*GVariant, index_: gsize) ?*GVariant;
pub extern fn _frida_g_variant_lookup(dictionary: ?*GVariant, key: [*c]const gchar, format_string: [*c]const gchar, ...) gboolean;
pub extern fn _frida_g_variant_lookup_value(dictionary: ?*GVariant, key: [*c]const gchar, expected_type: ?*const GVariantType) ?*GVariant;
pub extern fn _frida_g_variant_get_fixed_array(value: ?*GVariant, n_elements: [*c]gsize, element_size: gsize) gconstpointer;
pub extern fn _frida_g_variant_get_size(value: ?*GVariant) gsize;
pub extern fn _frida_g_variant_get_data(value: ?*GVariant) gconstpointer;
pub extern fn _frida_g_variant_get_data_as_bytes(value: ?*GVariant) ?*GBytes;
pub extern fn _frida_g_variant_store(value: ?*GVariant, data: gpointer) void;
pub extern fn _frida_g_variant_print(value: ?*GVariant, type_annotate: gboolean) [*c]gchar;
pub extern fn _frida_g_variant_print_string(value: ?*GVariant, string: [*c]GString, type_annotate: gboolean) [*c]GString;
pub extern fn _frida_g_variant_hash(value: gconstpointer) guint;
pub extern fn _frida_g_variant_equal(one: gconstpointer, two: gconstpointer) gboolean;
pub extern fn _frida_g_variant_get_normal_form(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_is_normal_form(value: ?*GVariant) gboolean;
pub extern fn _frida_g_variant_byteswap(value: ?*GVariant) ?*GVariant;
pub extern fn _frida_g_variant_new_from_bytes(@"type": ?*const GVariantType, bytes: ?*GBytes, trusted: gboolean) ?*GVariant;
pub extern fn _frida_g_variant_new_from_data(@"type": ?*const GVariantType, data: gconstpointer, size: gsize, trusted: gboolean, notify: GDestroyNotify, user_data: gpointer) ?*GVariant;
pub const struct__GVariantIter = extern struct {
    x: [16]gsize,
};
pub const GVariantIter = struct__GVariantIter;
pub extern fn _frida_g_variant_iter_new(value: ?*GVariant) [*c]GVariantIter;
pub extern fn _frida_g_variant_iter_init(iter: [*c]GVariantIter, value: ?*GVariant) gsize;
pub extern fn _frida_g_variant_iter_copy(iter: [*c]GVariantIter) [*c]GVariantIter;
pub extern fn _frida_g_variant_iter_n_children(iter: [*c]GVariantIter) gsize;
pub extern fn _frida_g_variant_iter_free(iter: [*c]GVariantIter) void;
pub extern fn _frida_g_variant_iter_next_value(iter: [*c]GVariantIter) ?*GVariant;
pub extern fn _frida_g_variant_iter_next(iter: [*c]GVariantIter, format_string: [*c]const gchar, ...) gboolean;
pub extern fn _frida_g_variant_iter_loop(iter: [*c]GVariantIter, format_string: [*c]const gchar, ...) gboolean;
const struct_unnamed_29 = extern struct {
    partial_magic: gsize,
    type: ?*const GVariantType,
    y: [14]gsize,
};
const union_unnamed_28 = extern union {
    s: struct_unnamed_29,
    x: [16]gsize,
};
pub const struct__GVariantBuilder = extern struct {
    u: union_unnamed_28,
};
pub const GVariantBuilder = struct__GVariantBuilder;
pub const G_VARIANT_PARSE_ERROR_FAILED: c_int = 0;
pub const G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED: c_int = 1;
pub const G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE: c_int = 2;
pub const G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED: c_int = 3;
pub const G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END: c_int = 4;
pub const G_VARIANT_PARSE_ERROR_INVALID_CHARACTER: c_int = 5;
pub const G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING: c_int = 6;
pub const G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH: c_int = 7;
pub const G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE: c_int = 8;
pub const G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING: c_int = 9;
pub const G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE: c_int = 10;
pub const G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE: c_int = 11;
pub const G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG: c_int = 12;
pub const G_VARIANT_PARSE_ERROR_TYPE_ERROR: c_int = 13;
pub const G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN: c_int = 14;
pub const G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD: c_int = 15;
pub const G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT: c_int = 16;
pub const G_VARIANT_PARSE_ERROR_VALUE_EXPECTED: c_int = 17;
pub const G_VARIANT_PARSE_ERROR_RECURSION: c_int = 18;
pub const GVariantParseError = c_uint;
pub extern fn _frida_g_variant_parser_get_error_quark() GQuark;
pub extern fn _frida_g_variant_parse_error_quark() GQuark;
pub extern fn _frida_g_variant_builder_new(@"type": ?*const GVariantType) [*c]GVariantBuilder;
pub extern fn _frida_g_variant_builder_unref(builder: [*c]GVariantBuilder) void;
pub extern fn _frida_g_variant_builder_ref(builder: [*c]GVariantBuilder) [*c]GVariantBuilder;
pub extern fn _frida_g_variant_builder_init(builder: [*c]GVariantBuilder, @"type": ?*const GVariantType) void;
pub extern fn _frida_g_variant_builder_end(builder: [*c]GVariantBuilder) ?*GVariant;
pub extern fn _frida_g_variant_builder_clear(builder: [*c]GVariantBuilder) void;
pub extern fn _frida_g_variant_builder_open(builder: [*c]GVariantBuilder, @"type": ?*const GVariantType) void;
pub extern fn _frida_g_variant_builder_close(builder: [*c]GVariantBuilder) void;
pub extern fn _frida_g_variant_builder_add_value(builder: [*c]GVariantBuilder, value: ?*GVariant) void;
pub extern fn _frida_g_variant_builder_add(builder: [*c]GVariantBuilder, format_string: [*c]const gchar, ...) void;
pub extern fn _frida_g_variant_builder_add_parsed(builder: [*c]GVariantBuilder, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_variant_new(format_string: [*c]const gchar, ...) ?*GVariant;
pub extern fn _frida_g_variant_get(value: ?*GVariant, format_string: [*c]const gchar, ...) void;
pub extern fn _frida_g_variant_new_va(format_string: [*c]const gchar, endptr: [*c][*c]const gchar, app: [*c]va_list) ?*GVariant;
pub extern fn _frida_g_variant_get_va(value: ?*GVariant, format_string: [*c]const gchar, endptr: [*c][*c]const gchar, app: [*c]va_list) void;
pub extern fn _frida_g_variant_check_format_string(value: ?*GVariant, format_string: [*c]const gchar, copy_only: gboolean) gboolean;
pub extern fn _frida_g_variant_parse(@"type": ?*const GVariantType, text: [*c]const gchar, limit: [*c]const gchar, endptr: [*c][*c]const gchar, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_variant_new_parsed(format: [*c]const gchar, ...) ?*GVariant;
pub extern fn _frida_g_variant_new_parsed_va(format: [*c]const gchar, app: [*c]va_list) ?*GVariant;
pub extern fn _frida_g_variant_parse_error_print_context(@"error": [*c]GError, source_str: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_variant_compare(one: gconstpointer, two: gconstpointer) gint;
const struct_unnamed_31 = extern struct {
    asv: ?*GVariant,
    partial_magic: gsize,
    y: [14]gsize,
};
const union_unnamed_30 = extern union {
    s: struct_unnamed_31,
    x: [16]gsize,
};
pub const struct__GVariantDict = extern struct {
    u: union_unnamed_30,
};
pub const GVariantDict = struct__GVariantDict;
pub extern fn _frida_g_variant_dict_new(from_asv: ?*GVariant) [*c]GVariantDict;
pub extern fn _frida_g_variant_dict_init(dict: [*c]GVariantDict, from_asv: ?*GVariant) void;
pub extern fn _frida_g_variant_dict_lookup(dict: [*c]GVariantDict, key: [*c]const gchar, format_string: [*c]const gchar, ...) gboolean;
pub extern fn _frida_g_variant_dict_lookup_value(dict: [*c]GVariantDict, key: [*c]const gchar, expected_type: ?*const GVariantType) ?*GVariant;
pub extern fn _frida_g_variant_dict_contains(dict: [*c]GVariantDict, key: [*c]const gchar) gboolean;
pub extern fn _frida_g_variant_dict_insert(dict: [*c]GVariantDict, key: [*c]const gchar, format_string: [*c]const gchar, ...) void;
pub extern fn _frida_g_variant_dict_insert_value(dict: [*c]GVariantDict, key: [*c]const gchar, value: ?*GVariant) void;
pub extern fn _frida_g_variant_dict_remove(dict: [*c]GVariantDict, key: [*c]const gchar) gboolean;
pub extern fn _frida_g_variant_dict_clear(dict: [*c]GVariantDict) void;
pub extern fn _frida_g_variant_dict_end(dict: [*c]GVariantDict) ?*GVariant;
pub extern fn _frida_g_variant_dict_ref(dict: [*c]GVariantDict) [*c]GVariantDict;
pub extern fn _frida_g_variant_dict_unref(dict: [*c]GVariantDict) void;
pub extern fn _frida_g_printf_string_upper_bound(format: [*c]const gchar, args: [*c]struct___va_list_tag) gsize;
pub const G_LOG_FLAG_RECURSION: c_int = 1;
pub const G_LOG_FLAG_FATAL: c_int = 2;
pub const G_LOG_LEVEL_ERROR: c_int = 4;
pub const G_LOG_LEVEL_CRITICAL: c_int = 8;
pub const G_LOG_LEVEL_WARNING: c_int = 16;
pub const G_LOG_LEVEL_MESSAGE: c_int = 32;
pub const G_LOG_LEVEL_INFO: c_int = 64;
pub const G_LOG_LEVEL_DEBUG: c_int = 128;
pub const G_LOG_LEVEL_MASK: c_int = -4;
pub const GLogLevelFlags = c_int;
pub const GLogFunc = ?*const fn ([*c]const gchar, GLogLevelFlags, [*c]const gchar, gpointer) callconv(.C) void;
pub extern fn _frida_g_log_set_handler(log_domain: [*c]const gchar, log_levels: GLogLevelFlags, log_func: GLogFunc, user_data: gpointer) guint;
pub extern fn _frida_g_log_set_handler_full(log_domain: [*c]const gchar, log_levels: GLogLevelFlags, log_func: GLogFunc, user_data: gpointer, destroy: GDestroyNotify) guint;
pub extern fn _frida_g_log_remove_handler(log_domain: [*c]const gchar, handler_id: guint) void;
pub extern fn _frida_g_log_default_handler(log_domain: [*c]const gchar, log_level: GLogLevelFlags, message: [*c]const gchar, unused_data: gpointer) void;
pub extern fn _frida_g_log_set_default_handler(log_func: GLogFunc, user_data: gpointer) GLogFunc;
pub extern fn _frida_g_log(log_domain: [*c]const gchar, log_level: GLogLevelFlags, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_logv(log_domain: [*c]const gchar, log_level: GLogLevelFlags, format: [*c]const gchar, args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_log_set_fatal_mask(log_domain: [*c]const gchar, fatal_mask: GLogLevelFlags) GLogLevelFlags;
pub extern fn _frida_g_log_set_always_fatal(fatal_mask: GLogLevelFlags) GLogLevelFlags;
pub const G_LOG_WRITER_HANDLED: c_int = 1;
pub const G_LOG_WRITER_UNHANDLED: c_int = 0;
pub const GLogWriterOutput = c_uint;
pub const struct__GLogField = extern struct {
    key: [*c]const gchar,
    value: gconstpointer,
    length: gssize,
};
pub const GLogField = struct__GLogField;
pub const GLogWriterFunc = ?*const fn (GLogLevelFlags, [*c]const GLogField, gsize, gpointer) callconv(.C) GLogWriterOutput;
pub extern fn _frida_g_log_structured(log_domain: [*c]const gchar, log_level: GLogLevelFlags, ...) void;
pub extern fn _frida_g_log_structured_array(log_level: GLogLevelFlags, fields: [*c]const GLogField, n_fields: gsize) void;
pub extern fn _frida_g_log_variant(log_domain: [*c]const gchar, log_level: GLogLevelFlags, fields: ?*GVariant) void;
pub extern fn _frida_g_log_set_writer_func(func: GLogWriterFunc, user_data: gpointer, user_data_free: GDestroyNotify) void;
pub extern fn _frida_g_log_writer_supports_color(output_fd: gint) gboolean;
pub extern fn _frida_g_log_writer_is_journald(output_fd: gint) gboolean;
pub extern fn _frida_g_log_writer_format_fields(log_level: GLogLevelFlags, fields: [*c]const GLogField, n_fields: gsize, use_color: gboolean) [*c]gchar;
pub extern fn _frida_g_log_writer_journald(log_level: GLogLevelFlags, fields: [*c]const GLogField, n_fields: gsize, user_data: gpointer) GLogWriterOutput;
pub extern fn _frida_g_log_writer_standard_streams(log_level: GLogLevelFlags, fields: [*c]const GLogField, n_fields: gsize, user_data: gpointer) GLogWriterOutput;
pub extern fn _frida_g_log_writer_default(log_level: GLogLevelFlags, fields: [*c]const GLogField, n_fields: gsize, user_data: gpointer) GLogWriterOutput;
pub extern fn _frida_g_log_writer_default_set_use_stderr(use_stderr: gboolean) void;
pub extern fn _frida_g_log_writer_default_would_drop(log_level: GLogLevelFlags, log_domain: [*c]const u8) gboolean;
pub extern fn _frida_g_log_get_debug_enabled() gboolean;
pub extern fn _frida_g_log_set_debug_enabled(enabled: gboolean) void;
pub extern fn _g_log_fallback_handler(log_domain: [*c]const gchar, log_level: GLogLevelFlags, message: [*c]const gchar, unused_data: gpointer) void;
pub extern fn _frida_g_return_if_fail_warning(log_domain: [*c]const u8, pretty_function: [*c]const u8, expression: [*c]const u8) void;
pub extern fn _frida_g_warn_message(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, warnexpr: [*c]const u8) void;
pub extern fn _frida_g_assert_warning(log_domain: [*c]const u8, file: [*c]const u8, line: c_int, pretty_function: [*c]const u8, expression: [*c]const u8) noreturn;
pub extern fn _frida_g_log_structured_standard(log_domain: [*c]const gchar, log_level: GLogLevelFlags, file: [*c]const gchar, line: [*c]const gchar, func: [*c]const gchar, message_format: [*c]const gchar, ...) void;
pub const GPrintFunc = ?*const fn ([*c]const gchar) callconv(.C) void;
pub extern fn _frida_g_print(format: [*c]const gchar, ...) void;
pub extern fn _frida_g_set_print_handler(func: GPrintFunc) GPrintFunc;
pub extern fn _frida_g_printerr(format: [*c]const gchar, ...) void;
pub extern fn _frida_g_set_printerr_handler(func: GPrintFunc) GPrintFunc;
pub const struct__GOptionContext = opaque {};
pub const GOptionContext = struct__GOptionContext;
pub const struct__GOptionGroup = opaque {};
pub const GOptionGroup = struct__GOptionGroup;
pub const struct__GOptionEntry = extern struct {
    long_name: [*c]const gchar,
    short_name: gchar,
    flags: gint,
    arg: GOptionArg,
    arg_data: gpointer,
    description: [*c]const gchar,
    arg_description: [*c]const gchar,
};
pub const GOptionEntry = struct__GOptionEntry;
pub const G_OPTION_FLAG_NONE: c_int = 0;
pub const G_OPTION_FLAG_HIDDEN: c_int = 1;
pub const G_OPTION_FLAG_IN_MAIN: c_int = 2;
pub const G_OPTION_FLAG_REVERSE: c_int = 4;
pub const G_OPTION_FLAG_NO_ARG: c_int = 8;
pub const G_OPTION_FLAG_FILENAME: c_int = 16;
pub const G_OPTION_FLAG_OPTIONAL_ARG: c_int = 32;
pub const G_OPTION_FLAG_NOALIAS: c_int = 64;
pub const GOptionFlags = c_uint;
pub const G_OPTION_ARG_NONE: c_int = 0;
pub const G_OPTION_ARG_STRING: c_int = 1;
pub const G_OPTION_ARG_INT: c_int = 2;
pub const G_OPTION_ARG_CALLBACK: c_int = 3;
pub const G_OPTION_ARG_FILENAME: c_int = 4;
pub const G_OPTION_ARG_STRING_ARRAY: c_int = 5;
pub const G_OPTION_ARG_FILENAME_ARRAY: c_int = 6;
pub const G_OPTION_ARG_DOUBLE: c_int = 7;
pub const G_OPTION_ARG_INT64: c_int = 8;
pub const GOptionArg = c_uint;
pub const GOptionArgFunc = ?*const fn ([*c]const gchar, [*c]const gchar, gpointer, [*c][*c]GError) callconv(.C) gboolean;
pub const GOptionParseFunc = ?*const fn (?*GOptionContext, ?*GOptionGroup, gpointer, [*c][*c]GError) callconv(.C) gboolean;
pub const GOptionErrorFunc = ?*const fn (?*GOptionContext, ?*GOptionGroup, gpointer, [*c][*c]GError) callconv(.C) void;
pub const G_OPTION_ERROR_UNKNOWN_OPTION: c_int = 0;
pub const G_OPTION_ERROR_BAD_VALUE: c_int = 1;
pub const G_OPTION_ERROR_FAILED: c_int = 2;
pub const GOptionError = c_uint;
pub extern fn _frida_g_option_error_quark() GQuark;
pub extern fn _frida_g_option_context_new(parameter_string: [*c]const gchar) ?*GOptionContext;
pub extern fn _frida_g_option_context_set_summary(context: ?*GOptionContext, summary: [*c]const gchar) void;
pub extern fn _frida_g_option_context_get_summary(context: ?*GOptionContext) [*c]const gchar;
pub extern fn _frida_g_option_context_set_description(context: ?*GOptionContext, description: [*c]const gchar) void;
pub extern fn _frida_g_option_context_get_description(context: ?*GOptionContext) [*c]const gchar;
pub extern fn _frida_g_option_context_free(context: ?*GOptionContext) void;
pub extern fn _frida_g_option_context_set_help_enabled(context: ?*GOptionContext, help_enabled: gboolean) void;
pub extern fn _frida_g_option_context_get_help_enabled(context: ?*GOptionContext) gboolean;
pub extern fn _frida_g_option_context_set_ignore_unknown_options(context: ?*GOptionContext, ignore_unknown: gboolean) void;
pub extern fn _frida_g_option_context_get_ignore_unknown_options(context: ?*GOptionContext) gboolean;
pub extern fn _frida_g_option_context_set_strict_posix(context: ?*GOptionContext, strict_posix: gboolean) void;
pub extern fn _frida_g_option_context_get_strict_posix(context: ?*GOptionContext) gboolean;
pub extern fn _frida_g_option_context_add_main_entries(context: ?*GOptionContext, entries: [*c]const GOptionEntry, translation_domain: [*c]const gchar) void;
pub extern fn _frida_g_option_context_parse(context: ?*GOptionContext, argc: [*c]gint, argv: [*c][*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_option_context_parse_strv(context: ?*GOptionContext, arguments: [*c][*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_option_context_set_translate_func(context: ?*GOptionContext, func: GTranslateFunc, data: gpointer, destroy_notify: GDestroyNotify) void;
pub extern fn _frida_g_option_context_set_translation_domain(context: ?*GOptionContext, domain: [*c]const gchar) void;
pub extern fn _frida_g_option_context_add_group(context: ?*GOptionContext, group: ?*GOptionGroup) void;
pub extern fn _frida_g_option_context_set_main_group(context: ?*GOptionContext, group: ?*GOptionGroup) void;
pub extern fn _frida_g_option_context_get_main_group(context: ?*GOptionContext) ?*GOptionGroup;
pub extern fn _frida_g_option_context_get_help(context: ?*GOptionContext, main_help: gboolean, group: ?*GOptionGroup) [*c]gchar;
pub extern fn _frida_g_option_group_new(name: [*c]const gchar, description: [*c]const gchar, help_description: [*c]const gchar, user_data: gpointer, destroy: GDestroyNotify) ?*GOptionGroup;
pub extern fn _frida_g_option_group_set_parse_hooks(group: ?*GOptionGroup, pre_parse_func: GOptionParseFunc, post_parse_func: GOptionParseFunc) void;
pub extern fn _frida_g_option_group_set_error_hook(group: ?*GOptionGroup, error_func: GOptionErrorFunc) void;
pub extern fn _frida_g_option_group_free(group: ?*GOptionGroup) void;
pub extern fn _frida_g_option_group_ref(group: ?*GOptionGroup) ?*GOptionGroup;
pub extern fn _frida_g_option_group_unref(group: ?*GOptionGroup) void;
pub extern fn _frida_g_option_group_add_entries(group: ?*GOptionGroup, entries: [*c]const GOptionEntry) void;
pub extern fn _frida_g_option_group_set_translate_func(group: ?*GOptionGroup, func: GTranslateFunc, data: gpointer, destroy_notify: GDestroyNotify) void;
pub extern fn _frida_g_option_group_set_translation_domain(group: ?*GOptionGroup, domain: [*c]const gchar) void;
pub const struct__GPatternSpec = opaque {};
pub const GPatternSpec = struct__GPatternSpec;
pub extern fn _frida_g_pattern_spec_new(pattern: [*c]const gchar) ?*GPatternSpec;
pub extern fn _frida_g_pattern_spec_free(pspec: ?*GPatternSpec) void;
pub extern fn _frida_g_pattern_spec_copy(pspec: ?*GPatternSpec) ?*GPatternSpec;
pub extern fn _frida_g_pattern_spec_equal(pspec1: ?*GPatternSpec, pspec2: ?*GPatternSpec) gboolean;
pub extern fn _frida_g_pattern_spec_match(pspec: ?*GPatternSpec, string_length: gsize, string: [*c]const gchar, string_reversed: [*c]const gchar) gboolean;
pub extern fn _frida_g_pattern_spec_match_string(pspec: ?*GPatternSpec, string: [*c]const gchar) gboolean;
pub extern fn _frida_g_pattern_match(pspec: ?*GPatternSpec, string_length: guint, string: [*c]const gchar, string_reversed: [*c]const gchar) gboolean;
pub extern fn _frida_g_pattern_match_string(pspec: ?*GPatternSpec, string: [*c]const gchar) gboolean;
pub extern fn _frida_g_pattern_match_simple(pattern: [*c]const gchar, string: [*c]const gchar) gboolean;
pub const struct__GFDCallbacks = extern struct {
    on_fd_opened: ?*const fn (gint, [*c]const gchar) callconv(.C) void,
    on_fd_closed: ?*const fn (gint, [*c]const gchar) callconv(.C) void,
};
pub const GFDCallbacks = struct__GFDCallbacks;
pub extern var _frida_glib_fd_callbacks: [*c]GFDCallbacks;
pub extern fn _frida_g_platform_audit_set_fd_callbacks(callbacks: [*c]GFDCallbacks) void;
pub extern fn _frida_g_spaced_primes_closest(num: guint) guint;
pub extern fn _frida_g_qsort_with_data(pbase: gconstpointer, total_elems: gint, size: gsize, compare_func: GCompareDataFunc, user_data: gpointer) void;
pub const struct__GQueue = extern struct {
    head: [*c]GList,
    tail: [*c]GList,
    length: guint,
};
pub const GQueue = struct__GQueue;
pub extern fn _frida_g_queue_new() [*c]GQueue;
pub extern fn _frida_g_queue_free(queue: [*c]GQueue) void;
pub extern fn _frida_g_queue_free_full(queue: [*c]GQueue, free_func: GDestroyNotify) void;
pub extern fn _frida_g_queue_init(queue: [*c]GQueue) void;
pub extern fn _frida_g_queue_clear(queue: [*c]GQueue) void;
pub extern fn _frida_g_queue_is_empty(queue: [*c]GQueue) gboolean;
pub extern fn _frida_g_queue_clear_full(queue: [*c]GQueue, free_func: GDestroyNotify) void;
pub extern fn _frida_g_queue_get_length(queue: [*c]GQueue) guint;
pub extern fn _frida_g_queue_reverse(queue: [*c]GQueue) void;
pub extern fn _frida_g_queue_copy(queue: [*c]GQueue) [*c]GQueue;
pub extern fn _frida_g_queue_foreach(queue: [*c]GQueue, func: GFunc, user_data: gpointer) void;
pub extern fn _frida_g_queue_find(queue: [*c]GQueue, data: gconstpointer) [*c]GList;
pub extern fn _frida_g_queue_find_custom(queue: [*c]GQueue, data: gconstpointer, func: GCompareFunc) [*c]GList;
pub extern fn _frida_g_queue_sort(queue: [*c]GQueue, compare_func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_queue_push_head(queue: [*c]GQueue, data: gpointer) void;
pub extern fn _frida_g_queue_push_tail(queue: [*c]GQueue, data: gpointer) void;
pub extern fn _frida_g_queue_push_nth(queue: [*c]GQueue, data: gpointer, n: gint) void;
pub extern fn _frida_g_queue_pop_head(queue: [*c]GQueue) gpointer;
pub extern fn _frida_g_queue_pop_tail(queue: [*c]GQueue) gpointer;
pub extern fn _frida_g_queue_pop_nth(queue: [*c]GQueue, n: guint) gpointer;
pub extern fn _frida_g_queue_peek_head(queue: [*c]GQueue) gpointer;
pub extern fn _frida_g_queue_peek_tail(queue: [*c]GQueue) gpointer;
pub extern fn _frida_g_queue_peek_nth(queue: [*c]GQueue, n: guint) gpointer;
pub extern fn _frida_g_queue_index(queue: [*c]GQueue, data: gconstpointer) gint;
pub extern fn _frida_g_queue_remove(queue: [*c]GQueue, data: gconstpointer) gboolean;
pub extern fn _frida_g_queue_remove_all(queue: [*c]GQueue, data: gconstpointer) guint;
pub extern fn _frida_g_queue_insert_before(queue: [*c]GQueue, sibling: [*c]GList, data: gpointer) void;
pub extern fn _frida_g_queue_insert_before_link(queue: [*c]GQueue, sibling: [*c]GList, link_: [*c]GList) void;
pub extern fn _frida_g_queue_insert_after(queue: [*c]GQueue, sibling: [*c]GList, data: gpointer) void;
pub extern fn _frida_g_queue_insert_after_link(queue: [*c]GQueue, sibling: [*c]GList, link_: [*c]GList) void;
pub extern fn _frida_g_queue_insert_sorted(queue: [*c]GQueue, data: gpointer, func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_queue_push_head_link(queue: [*c]GQueue, link_: [*c]GList) void;
pub extern fn _frida_g_queue_push_tail_link(queue: [*c]GQueue, link_: [*c]GList) void;
pub extern fn _frida_g_queue_push_nth_link(queue: [*c]GQueue, n: gint, link_: [*c]GList) void;
pub extern fn _frida_g_queue_pop_head_link(queue: [*c]GQueue) [*c]GList;
pub extern fn _frida_g_queue_pop_tail_link(queue: [*c]GQueue) [*c]GList;
pub extern fn _frida_g_queue_pop_nth_link(queue: [*c]GQueue, n: guint) [*c]GList;
pub extern fn _frida_g_queue_peek_head_link(queue: [*c]GQueue) [*c]GList;
pub extern fn _frida_g_queue_peek_tail_link(queue: [*c]GQueue) [*c]GList;
pub extern fn _frida_g_queue_peek_nth_link(queue: [*c]GQueue, n: guint) [*c]GList;
pub extern fn _frida_g_queue_link_index(queue: [*c]GQueue, link_: [*c]GList) gint;
pub extern fn _frida_g_queue_unlink(queue: [*c]GQueue, link_: [*c]GList) void;
pub extern fn _frida_g_queue_delete_link(queue: [*c]GQueue, link_: [*c]GList) void;
pub const struct__GRand = opaque {};
pub const GRand = struct__GRand;
pub extern fn _frida_g_rand_new_with_seed(seed: guint32) ?*GRand;
pub extern fn _frida_g_rand_new_with_seed_array(seed: [*c]const guint32, seed_length: guint) ?*GRand;
pub extern fn _frida_g_rand_new() ?*GRand;
pub extern fn _frida_g_rand_free(rand_: ?*GRand) void;
pub extern fn _frida_g_rand_copy(rand_: ?*GRand) ?*GRand;
pub extern fn _frida_g_rand_set_seed(rand_: ?*GRand, seed: guint32) void;
pub extern fn _frida_g_rand_set_seed_array(rand_: ?*GRand, seed: [*c]const guint32, seed_length: guint) void;
pub extern fn _frida_g_rand_int(rand_: ?*GRand) guint32;
pub extern fn _frida_g_rand_int_range(rand_: ?*GRand, begin: gint32, end: gint32) gint32;
pub extern fn _frida_g_rand_double(rand_: ?*GRand) gdouble;
pub extern fn _frida_g_rand_double_range(rand_: ?*GRand, begin: gdouble, end: gdouble) gdouble;
pub extern fn _frida_g_random_set_seed(seed: guint32) void;
pub extern fn _frida_g_random_int() guint32;
pub extern fn _frida_g_random_int_range(begin: gint32, end: gint32) gint32;
pub extern fn _frida_g_random_double() gdouble;
pub extern fn _frida_g_random_double_range(begin: gdouble, end: gdouble) gdouble;
pub extern fn _frida_g_rc_box_alloc(block_size: gsize) gpointer;
pub extern fn _frida_g_rc_box_alloc0(block_size: gsize) gpointer;
pub extern fn _frida_g_rc_box_dup(block_size: gsize, mem_block: gconstpointer) gpointer;
pub extern fn _frida_g_rc_box_acquire(mem_block: gpointer) gpointer;
pub extern fn _frida_g_rc_box_release(mem_block: gpointer) void;
pub extern fn _frida_g_rc_box_release_full(mem_block: gpointer, clear_func: GDestroyNotify) void;
pub extern fn _frida_g_rc_box_get_size(mem_block: gpointer) gsize;
pub extern fn _frida_g_atomic_rc_box_alloc(block_size: gsize) gpointer;
pub extern fn _frida_g_atomic_rc_box_alloc0(block_size: gsize) gpointer;
pub extern fn _frida_g_atomic_rc_box_dup(block_size: gsize, mem_block: gconstpointer) gpointer;
pub extern fn _frida_g_atomic_rc_box_acquire(mem_block: gpointer) gpointer;
pub extern fn _frida_g_atomic_rc_box_release(mem_block: gpointer) void;
pub extern fn _frida_g_atomic_rc_box_release_full(mem_block: gpointer, clear_func: GDestroyNotify) void;
pub extern fn _frida_g_atomic_rc_box_get_size(mem_block: gpointer) gsize;
pub extern fn _frida_g_ref_count_init(rc: [*c]grefcount) void;
pub extern fn _frida_g_ref_count_inc(rc: [*c]grefcount) void;
pub extern fn _frida_g_ref_count_dec(rc: [*c]grefcount) gboolean;
pub extern fn _frida_g_ref_count_compare(rc: [*c]grefcount, val: gint) gboolean;
pub extern fn _frida_g_atomic_ref_count_init(arc: [*c]gatomicrefcount) void;
pub extern fn _frida_g_atomic_ref_count_inc(arc: [*c]gatomicrefcount) void;
pub extern fn _frida_g_atomic_ref_count_dec(arc: [*c]gatomicrefcount) gboolean;
pub extern fn _frida_g_atomic_ref_count_compare(arc: [*c]gatomicrefcount, val: gint) gboolean;
pub extern fn _frida_g_ref_string_new(str: [*c]const u8) [*c]u8;
pub extern fn _frida_g_ref_string_new_len(str: [*c]const u8, len: gssize) [*c]u8;
pub extern fn _frida_g_ref_string_new_intern(str: [*c]const u8) [*c]u8;
pub extern fn _frida_g_ref_string_acquire(str: [*c]u8) [*c]u8;
pub extern fn _frida_g_ref_string_release(str: [*c]u8) void;
pub extern fn _frida_g_ref_string_length(str: [*c]u8) gsize;
pub const GRefString = u8;
pub const G_REGEX_ERROR_COMPILE: c_int = 0;
pub const G_REGEX_ERROR_OPTIMIZE: c_int = 1;
pub const G_REGEX_ERROR_REPLACE: c_int = 2;
pub const G_REGEX_ERROR_MATCH: c_int = 3;
pub const G_REGEX_ERROR_INTERNAL: c_int = 4;
pub const G_REGEX_ERROR_STRAY_BACKSLASH: c_int = 101;
pub const G_REGEX_ERROR_MISSING_CONTROL_CHAR: c_int = 102;
pub const G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: c_int = 103;
pub const G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: c_int = 104;
pub const G_REGEX_ERROR_QUANTIFIER_TOO_BIG: c_int = 105;
pub const G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: c_int = 106;
pub const G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: c_int = 107;
pub const G_REGEX_ERROR_RANGE_OUT_OF_ORDER: c_int = 108;
pub const G_REGEX_ERROR_NOTHING_TO_REPEAT: c_int = 109;
pub const G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: c_int = 112;
pub const G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: c_int = 113;
pub const G_REGEX_ERROR_UNMATCHED_PARENTHESIS: c_int = 114;
pub const G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: c_int = 115;
pub const G_REGEX_ERROR_UNTERMINATED_COMMENT: c_int = 118;
pub const G_REGEX_ERROR_EXPRESSION_TOO_LARGE: c_int = 120;
pub const G_REGEX_ERROR_MEMORY_ERROR: c_int = 121;
pub const G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: c_int = 125;
pub const G_REGEX_ERROR_MALFORMED_CONDITION: c_int = 126;
pub const G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: c_int = 127;
pub const G_REGEX_ERROR_ASSERTION_EXPECTED: c_int = 128;
pub const G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: c_int = 130;
pub const G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: c_int = 131;
pub const G_REGEX_ERROR_HEX_CODE_TOO_LARGE: c_int = 134;
pub const G_REGEX_ERROR_INVALID_CONDITION: c_int = 135;
pub const G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: c_int = 136;
pub const G_REGEX_ERROR_INFINITE_LOOP: c_int = 140;
pub const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: c_int = 142;
pub const G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: c_int = 143;
pub const G_REGEX_ERROR_MALFORMED_PROPERTY: c_int = 146;
pub const G_REGEX_ERROR_UNKNOWN_PROPERTY: c_int = 147;
pub const G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: c_int = 148;
pub const G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: c_int = 149;
pub const G_REGEX_ERROR_INVALID_OCTAL_VALUE: c_int = 151;
pub const G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: c_int = 154;
pub const G_REGEX_ERROR_DEFINE_REPETION: c_int = 155;
pub const G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: c_int = 156;
pub const G_REGEX_ERROR_MISSING_BACK_REFERENCE: c_int = 157;
pub const G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: c_int = 158;
pub const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: c_int = 159;
pub const G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: c_int = 160;
pub const G_REGEX_ERROR_NUMBER_TOO_BIG: c_int = 161;
pub const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: c_int = 162;
pub const G_REGEX_ERROR_MISSING_DIGIT: c_int = 163;
pub const G_REGEX_ERROR_INVALID_DATA_CHARACTER: c_int = 164;
pub const G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: c_int = 165;
pub const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: c_int = 166;
pub const G_REGEX_ERROR_INVALID_CONTROL_CHAR: c_int = 168;
pub const G_REGEX_ERROR_MISSING_NAME: c_int = 169;
pub const G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: c_int = 171;
pub const G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: c_int = 172;
pub const G_REGEX_ERROR_NAME_TOO_LONG: c_int = 175;
pub const G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: c_int = 176;
pub const GRegexError = c_uint;
pub extern fn _frida_g_regex_error_quark() GQuark;
pub const G_REGEX_DEFAULT: c_int = 0;
pub const G_REGEX_CASELESS: c_int = 1;
pub const G_REGEX_MULTILINE: c_int = 2;
pub const G_REGEX_DOTALL: c_int = 4;
pub const G_REGEX_EXTENDED: c_int = 8;
pub const G_REGEX_ANCHORED: c_int = 16;
pub const G_REGEX_DOLLAR_ENDONLY: c_int = 32;
pub const G_REGEX_UNGREEDY: c_int = 512;
pub const G_REGEX_RAW: c_int = 2048;
pub const G_REGEX_NO_AUTO_CAPTURE: c_int = 4096;
pub const G_REGEX_OPTIMIZE: c_int = 8192;
pub const G_REGEX_FIRSTLINE: c_int = 262144;
pub const G_REGEX_DUPNAMES: c_int = 524288;
pub const G_REGEX_NEWLINE_CR: c_int = 1048576;
pub const G_REGEX_NEWLINE_LF: c_int = 2097152;
pub const G_REGEX_NEWLINE_CRLF: c_int = 3145728;
pub const G_REGEX_NEWLINE_ANYCRLF: c_int = 5242880;
pub const G_REGEX_BSR_ANYCRLF: c_int = 8388608;
pub const G_REGEX_JAVASCRIPT_COMPAT: c_int = 33554432;
pub const GRegexCompileFlags = c_uint;
pub const G_REGEX_MATCH_DEFAULT: c_int = 0;
pub const G_REGEX_MATCH_ANCHORED: c_int = 16;
pub const G_REGEX_MATCH_NOTBOL: c_int = 128;
pub const G_REGEX_MATCH_NOTEOL: c_int = 256;
pub const G_REGEX_MATCH_NOTEMPTY: c_int = 1024;
pub const G_REGEX_MATCH_PARTIAL: c_int = 32768;
pub const G_REGEX_MATCH_NEWLINE_CR: c_int = 1048576;
pub const G_REGEX_MATCH_NEWLINE_LF: c_int = 2097152;
pub const G_REGEX_MATCH_NEWLINE_CRLF: c_int = 3145728;
pub const G_REGEX_MATCH_NEWLINE_ANY: c_int = 4194304;
pub const G_REGEX_MATCH_NEWLINE_ANYCRLF: c_int = 5242880;
pub const G_REGEX_MATCH_BSR_ANYCRLF: c_int = 8388608;
pub const G_REGEX_MATCH_BSR_ANY: c_int = 16777216;
pub const G_REGEX_MATCH_PARTIAL_SOFT: c_int = 32768;
pub const G_REGEX_MATCH_PARTIAL_HARD: c_int = 134217728;
pub const G_REGEX_MATCH_NOTEMPTY_ATSTART: c_int = 268435456;
pub const GRegexMatchFlags = c_uint;
pub const struct__GRegex = opaque {};
pub const GRegex = struct__GRegex;
pub const struct__GMatchInfo = opaque {};
pub const GMatchInfo = struct__GMatchInfo;
pub const GRegexEvalCallback = ?*const fn (?*const GMatchInfo, [*c]GString, gpointer) callconv(.C) gboolean;
pub extern fn _frida_g_regex_new(pattern: [*c]const gchar, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags, @"error": [*c][*c]GError) ?*GRegex;
pub extern fn _frida_g_regex_ref(regex: ?*GRegex) ?*GRegex;
pub extern fn _frida_g_regex_unref(regex: ?*GRegex) void;
pub extern fn _frida_g_regex_get_pattern(regex: ?*const GRegex) [*c]const gchar;
pub extern fn _frida_g_regex_get_max_backref(regex: ?*const GRegex) gint;
pub extern fn _frida_g_regex_get_capture_count(regex: ?*const GRegex) gint;
pub extern fn _frida_g_regex_get_has_cr_or_lf(regex: ?*const GRegex) gboolean;
pub extern fn _frida_g_regex_get_max_lookbehind(regex: ?*const GRegex) gint;
pub extern fn _frida_g_regex_get_string_number(regex: ?*const GRegex, name: [*c]const gchar) gint;
pub extern fn _frida_g_regex_escape_string(string: [*c]const gchar, length: gint) [*c]gchar;
pub extern fn _frida_g_regex_escape_nul(string: [*c]const gchar, length: gint) [*c]gchar;
pub extern fn _frida_g_regex_get_compile_flags(regex: ?*const GRegex) GRegexCompileFlags;
pub extern fn _frida_g_regex_get_match_flags(regex: ?*const GRegex) GRegexMatchFlags;
pub extern fn _frida_g_regex_match_simple(pattern: [*c]const gchar, string: [*c]const gchar, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags) gboolean;
pub extern fn _frida_g_regex_match(regex: ?*const GRegex, string: [*c]const gchar, match_options: GRegexMatchFlags, match_info: [*c]?*GMatchInfo) gboolean;
pub extern fn _frida_g_regex_match_full(regex: ?*const GRegex, string: [*c]const gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, match_info: [*c]?*GMatchInfo, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_regex_match_all(regex: ?*const GRegex, string: [*c]const gchar, match_options: GRegexMatchFlags, match_info: [*c]?*GMatchInfo) gboolean;
pub extern fn _frida_g_regex_match_all_full(regex: ?*const GRegex, string: [*c]const gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, match_info: [*c]?*GMatchInfo, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_regex_split_simple(pattern: [*c]const gchar, string: [*c]const gchar, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags) [*c][*c]gchar;
pub extern fn _frida_g_regex_split(regex: ?*const GRegex, string: [*c]const gchar, match_options: GRegexMatchFlags) [*c][*c]gchar;
pub extern fn _frida_g_regex_split_full(regex: ?*const GRegex, string: [*c]const gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, max_tokens: gint, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_regex_replace(regex: ?*const GRegex, string: [*c]const gchar, string_len: gssize, start_position: gint, replacement: [*c]const gchar, match_options: GRegexMatchFlags, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_regex_replace_literal(regex: ?*const GRegex, string: [*c]const gchar, string_len: gssize, start_position: gint, replacement: [*c]const gchar, match_options: GRegexMatchFlags, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_regex_replace_eval(regex: ?*const GRegex, string: [*c]const gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, eval: GRegexEvalCallback, user_data: gpointer, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_regex_check_replacement(replacement: [*c]const gchar, has_references: [*c]gboolean, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_match_info_get_regex(match_info: ?*const GMatchInfo) ?*GRegex;
pub extern fn _frida_g_match_info_get_string(match_info: ?*const GMatchInfo) [*c]const gchar;
pub extern fn _frida_g_match_info_ref(match_info: ?*GMatchInfo) ?*GMatchInfo;
pub extern fn _frida_g_match_info_unref(match_info: ?*GMatchInfo) void;
pub extern fn _frida_g_match_info_free(match_info: ?*GMatchInfo) void;
pub extern fn _frida_g_match_info_next(match_info: ?*GMatchInfo, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_match_info_matches(match_info: ?*const GMatchInfo) gboolean;
pub extern fn _frida_g_match_info_get_match_count(match_info: ?*const GMatchInfo) gint;
pub extern fn _frida_g_match_info_is_partial_match(match_info: ?*const GMatchInfo) gboolean;
pub extern fn _frida_g_match_info_expand_references(match_info: ?*const GMatchInfo, string_to_expand: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_match_info_fetch(match_info: ?*const GMatchInfo, match_num: gint) [*c]gchar;
pub extern fn _frida_g_match_info_fetch_pos(match_info: ?*const GMatchInfo, match_num: gint, start_pos: [*c]gint, end_pos: [*c]gint) gboolean;
pub extern fn _frida_g_match_info_fetch_named(match_info: ?*const GMatchInfo, name: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_match_info_fetch_named_pos(match_info: ?*const GMatchInfo, name: [*c]const gchar, start_pos: [*c]gint, end_pos: [*c]gint) gboolean;
pub extern fn _frida_g_match_info_fetch_all(match_info: ?*const GMatchInfo) [*c][*c]gchar; // lib/frida-core/frida-core.h:22508:10: warning: struct demoted to opaque type - has bitfield
pub const struct__GScannerConfig = opaque {};
pub const GScannerConfig = struct__GScannerConfig;
pub const union__GTokenValue = extern union {
    v_symbol: gpointer,
    v_identifier: [*c]gchar,
    v_binary: gulong,
    v_octal: gulong,
    v_int: gulong,
    v_int64: guint64,
    v_float: gdouble,
    v_hex: gulong,
    v_string: [*c]gchar,
    v_comment: [*c]gchar,
    v_char: guchar,
    v_error: guint,
};
pub const GTokenValue = union__GTokenValue;
pub const GScanner = struct__GScanner;
pub const GScannerMsgFunc = ?*const fn ([*c]GScanner, [*c]gchar, gboolean) callconv(.C) void;
pub const struct__GScanner = extern struct {
    user_data: gpointer,
    max_parse_errors: guint,
    parse_errors: guint,
    input_name: [*c]const gchar,
    qdata: ?*GData,
    config: ?*GScannerConfig,
    token: GTokenType,
    value: GTokenValue,
    line: guint,
    position: guint,
    next_token: GTokenType,
    next_value: GTokenValue,
    next_line: guint,
    next_position: guint,
    symbol_table: ?*GHashTable,
    input_fd: gint,
    text: [*c]const gchar,
    text_end: [*c]const gchar,
    buffer: [*c]gchar,
    scope_id: guint,
    msg_handler: GScannerMsgFunc,
};
pub const G_ERR_UNKNOWN: c_int = 0;
pub const G_ERR_UNEXP_EOF: c_int = 1;
pub const G_ERR_UNEXP_EOF_IN_STRING: c_int = 2;
pub const G_ERR_UNEXP_EOF_IN_COMMENT: c_int = 3;
pub const G_ERR_NON_DIGIT_IN_CONST: c_int = 4;
pub const G_ERR_DIGIT_RADIX: c_int = 5;
pub const G_ERR_FLOAT_RADIX: c_int = 6;
pub const G_ERR_FLOAT_MALFORMED: c_int = 7;
pub const GErrorType = c_uint;
pub const G_TOKEN_EOF: c_int = 0;
pub const G_TOKEN_LEFT_PAREN: c_int = 40;
pub const G_TOKEN_RIGHT_PAREN: c_int = 41;
pub const G_TOKEN_LEFT_CURLY: c_int = 123;
pub const G_TOKEN_RIGHT_CURLY: c_int = 125;
pub const G_TOKEN_LEFT_BRACE: c_int = 91;
pub const G_TOKEN_RIGHT_BRACE: c_int = 93;
pub const G_TOKEN_EQUAL_SIGN: c_int = 61;
pub const G_TOKEN_COMMA: c_int = 44;
pub const G_TOKEN_NONE: c_int = 256;
pub const G_TOKEN_ERROR: c_int = 257;
pub const G_TOKEN_CHAR: c_int = 258;
pub const G_TOKEN_BINARY: c_int = 259;
pub const G_TOKEN_OCTAL: c_int = 260;
pub const G_TOKEN_INT: c_int = 261;
pub const G_TOKEN_HEX: c_int = 262;
pub const G_TOKEN_FLOAT: c_int = 263;
pub const G_TOKEN_STRING: c_int = 264;
pub const G_TOKEN_SYMBOL: c_int = 265;
pub const G_TOKEN_IDENTIFIER: c_int = 266;
pub const G_TOKEN_IDENTIFIER_NULL: c_int = 267;
pub const G_TOKEN_COMMENT_SINGLE: c_int = 268;
pub const G_TOKEN_COMMENT_MULTI: c_int = 269;
pub const G_TOKEN_LAST: c_int = 270;
pub const GTokenType = c_uint;
pub extern fn _frida_g_scanner_new(config_templ: ?*const GScannerConfig) [*c]GScanner;
pub extern fn _frida_g_scanner_destroy(scanner: [*c]GScanner) void;
pub extern fn _frida_g_scanner_input_file(scanner: [*c]GScanner, input_fd: gint) void;
pub extern fn _frida_g_scanner_sync_file_offset(scanner: [*c]GScanner) void;
pub extern fn _frida_g_scanner_input_text(scanner: [*c]GScanner, text: [*c]const gchar, text_len: guint) void;
pub extern fn _frida_g_scanner_get_next_token(scanner: [*c]GScanner) GTokenType;
pub extern fn _frida_g_scanner_peek_next_token(scanner: [*c]GScanner) GTokenType;
pub extern fn _frida_g_scanner_cur_token(scanner: [*c]GScanner) GTokenType;
pub extern fn _frida_g_scanner_cur_value(scanner: [*c]GScanner) GTokenValue;
pub extern fn _frida_g_scanner_cur_line(scanner: [*c]GScanner) guint;
pub extern fn _frida_g_scanner_cur_position(scanner: [*c]GScanner) guint;
pub extern fn _frida_g_scanner_eof(scanner: [*c]GScanner) gboolean;
pub extern fn _frida_g_scanner_set_scope(scanner: [*c]GScanner, scope_id: guint) guint;
pub extern fn _frida_g_scanner_scope_add_symbol(scanner: [*c]GScanner, scope_id: guint, symbol: [*c]const gchar, value: gpointer) void;
pub extern fn _frida_g_scanner_scope_remove_symbol(scanner: [*c]GScanner, scope_id: guint, symbol: [*c]const gchar) void;
pub extern fn _frida_g_scanner_scope_lookup_symbol(scanner: [*c]GScanner, scope_id: guint, symbol: [*c]const gchar) gpointer;
pub extern fn _frida_g_scanner_scope_foreach_symbol(scanner: [*c]GScanner, scope_id: guint, func: GHFunc, user_data: gpointer) void;
pub extern fn _frida_g_scanner_lookup_symbol(scanner: [*c]GScanner, symbol: [*c]const gchar) gpointer;
pub extern fn _frida_g_scanner_unexp_token(scanner: [*c]GScanner, expected_token: GTokenType, identifier_spec: [*c]const gchar, symbol_spec: [*c]const gchar, symbol_name: [*c]const gchar, message: [*c]const gchar, is_error: gint) void;
pub extern fn _frida_g_scanner_error(scanner: [*c]GScanner, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_scanner_warn(scanner: [*c]GScanner, format: [*c]const gchar, ...) void;
pub const struct__GSequence = opaque {};
pub const GSequence = struct__GSequence;
pub const struct__GSequenceNode = opaque {};
pub const GSequenceIter = struct__GSequenceNode;
pub const GSequenceIterCompareFunc = ?*const fn (?*GSequenceIter, ?*GSequenceIter, gpointer) callconv(.C) gint;
pub extern fn _frida_g_sequence_new(data_destroy: GDestroyNotify) ?*GSequence;
pub extern fn _frida_g_sequence_free(seq: ?*GSequence) void;
pub extern fn _frida_g_sequence_get_length(seq: ?*GSequence) gint;
pub extern fn _frida_g_sequence_foreach(seq: ?*GSequence, func: GFunc, user_data: gpointer) void;
pub extern fn _frida_g_sequence_foreach_range(begin: ?*GSequenceIter, end: ?*GSequenceIter, func: GFunc, user_data: gpointer) void;
pub extern fn _frida_g_sequence_sort(seq: ?*GSequence, cmp_func: GCompareDataFunc, cmp_data: gpointer) void;
pub extern fn _frida_g_sequence_sort_iter(seq: ?*GSequence, cmp_func: GSequenceIterCompareFunc, cmp_data: gpointer) void;
pub extern fn _frida_g_sequence_is_empty(seq: ?*GSequence) gboolean;
pub extern fn _frida_g_sequence_get_begin_iter(seq: ?*GSequence) ?*GSequenceIter;
pub extern fn _frida_g_sequence_get_end_iter(seq: ?*GSequence) ?*GSequenceIter;
pub extern fn _frida_g_sequence_get_iter_at_pos(seq: ?*GSequence, pos: gint) ?*GSequenceIter;
pub extern fn _frida_g_sequence_append(seq: ?*GSequence, data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_prepend(seq: ?*GSequence, data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_insert_before(iter: ?*GSequenceIter, data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_move(src: ?*GSequenceIter, dest: ?*GSequenceIter) void;
pub extern fn _frida_g_sequence_swap(a: ?*GSequenceIter, b: ?*GSequenceIter) void;
pub extern fn _frida_g_sequence_insert_sorted(seq: ?*GSequence, data: gpointer, cmp_func: GCompareDataFunc, cmp_data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_insert_sorted_iter(seq: ?*GSequence, data: gpointer, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_sort_changed(iter: ?*GSequenceIter, cmp_func: GCompareDataFunc, cmp_data: gpointer) void;
pub extern fn _frida_g_sequence_sort_changed_iter(iter: ?*GSequenceIter, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer) void;
pub extern fn _frida_g_sequence_remove(iter: ?*GSequenceIter) void;
pub extern fn _frida_g_sequence_remove_range(begin: ?*GSequenceIter, end: ?*GSequenceIter) void;
pub extern fn _frida_g_sequence_move_range(dest: ?*GSequenceIter, begin: ?*GSequenceIter, end: ?*GSequenceIter) void;
pub extern fn _frida_g_sequence_search(seq: ?*GSequence, data: gpointer, cmp_func: GCompareDataFunc, cmp_data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_search_iter(seq: ?*GSequence, data: gpointer, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_lookup(seq: ?*GSequence, data: gpointer, cmp_func: GCompareDataFunc, cmp_data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_lookup_iter(seq: ?*GSequence, data: gpointer, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer) ?*GSequenceIter;
pub extern fn _frida_g_sequence_get(iter: ?*GSequenceIter) gpointer;
pub extern fn _frida_g_sequence_set(iter: ?*GSequenceIter, data: gpointer) void;
pub extern fn _frida_g_sequence_iter_is_begin(iter: ?*GSequenceIter) gboolean;
pub extern fn _frida_g_sequence_iter_is_end(iter: ?*GSequenceIter) gboolean;
pub extern fn _frida_g_sequence_iter_next(iter: ?*GSequenceIter) ?*GSequenceIter;
pub extern fn _frida_g_sequence_iter_prev(iter: ?*GSequenceIter) ?*GSequenceIter;
pub extern fn _frida_g_sequence_iter_get_position(iter: ?*GSequenceIter) gint;
pub extern fn _frida_g_sequence_iter_move(iter: ?*GSequenceIter, delta: gint) ?*GSequenceIter;
pub extern fn _frida_g_sequence_iter_get_sequence(iter: ?*GSequenceIter) ?*GSequence;
pub extern fn _frida_g_sequence_iter_compare(a: ?*GSequenceIter, b: ?*GSequenceIter) gint;
pub extern fn _frida_g_sequence_range_get_midpoint(begin: ?*GSequenceIter, end: ?*GSequenceIter) ?*GSequenceIter;
pub const G_SHELL_ERROR_BAD_QUOTING: c_int = 0;
pub const G_SHELL_ERROR_EMPTY_STRING: c_int = 1;
pub const G_SHELL_ERROR_FAILED: c_int = 2;
pub const GShellError = c_uint;
pub extern fn _frida_g_shell_error_quark() GQuark;
pub extern fn _frida_g_shell_quote(unquoted_string: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_shell_unquote(quoted_string: [*c]const gchar, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_shell_parse_argv(command_line: [*c]const gchar, argcp: [*c]gint, argvp: [*c][*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_slice_alloc(block_size: gsize) gpointer;
pub extern fn _frida_g_slice_alloc0(block_size: gsize) gpointer;
pub extern fn _frida_g_slice_copy(block_size: gsize, mem_block: gconstpointer) gpointer;
pub extern fn _frida_g_slice_free1(block_size: gsize, mem_block: gpointer) void;
pub extern fn _frida_g_slice_free_chain_with_offset(block_size: gsize, mem_chain: gpointer, next_offset: gsize) void;
pub const G_SLICE_CONFIG_ALWAYS_MALLOC: c_int = 1;
pub const G_SLICE_CONFIG_BYPASS_MAGAZINES: c_int = 2;
pub const G_SLICE_CONFIG_WORKING_SET_MSECS: c_int = 3;
pub const G_SLICE_CONFIG_COLOR_INCREMENT: c_int = 4;
pub const G_SLICE_CONFIG_CHUNK_SIZES: c_int = 5;
pub const G_SLICE_CONFIG_CONTENTION_COUNTER: c_int = 6;
pub const GSliceConfig = c_uint;
pub extern fn _frida_g_slice_set_config(ckey: GSliceConfig, value: gint64) void;
pub extern fn _frida_g_slice_get_config(ckey: GSliceConfig) gint64;
pub extern fn _frida_g_slice_get_config_state(ckey: GSliceConfig, address: gint64, n_values: [*c]guint) [*c]gint64;
pub const G_SPAWN_ERROR_FORK: c_int = 0;
pub const G_SPAWN_ERROR_READ: c_int = 1;
pub const G_SPAWN_ERROR_CHDIR: c_int = 2;
pub const G_SPAWN_ERROR_ACCES: c_int = 3;
pub const G_SPAWN_ERROR_PERM: c_int = 4;
pub const G_SPAWN_ERROR_TOO_BIG: c_int = 5;
pub const G_SPAWN_ERROR_2BIG: c_int = 5;
pub const G_SPAWN_ERROR_NOEXEC: c_int = 6;
pub const G_SPAWN_ERROR_NAMETOOLONG: c_int = 7;
pub const G_SPAWN_ERROR_NOENT: c_int = 8;
pub const G_SPAWN_ERROR_NOMEM: c_int = 9;
pub const G_SPAWN_ERROR_NOTDIR: c_int = 10;
pub const G_SPAWN_ERROR_LOOP: c_int = 11;
pub const G_SPAWN_ERROR_TXTBUSY: c_int = 12;
pub const G_SPAWN_ERROR_IO: c_int = 13;
pub const G_SPAWN_ERROR_NFILE: c_int = 14;
pub const G_SPAWN_ERROR_MFILE: c_int = 15;
pub const G_SPAWN_ERROR_INVAL: c_int = 16;
pub const G_SPAWN_ERROR_ISDIR: c_int = 17;
pub const G_SPAWN_ERROR_LIBBAD: c_int = 18;
pub const G_SPAWN_ERROR_FAILED: c_int = 19;
pub const GSpawnError = c_uint;
pub const GSpawnChildSetupFunc = ?*const fn (gpointer) callconv(.C) void;
pub const G_SPAWN_DEFAULT: c_int = 0;
pub const G_SPAWN_LEAVE_DESCRIPTORS_OPEN: c_int = 1;
pub const G_SPAWN_DO_NOT_REAP_CHILD: c_int = 2;
pub const G_SPAWN_SEARCH_PATH: c_int = 4;
pub const G_SPAWN_STDOUT_TO_DEV_NULL: c_int = 8;
pub const G_SPAWN_STDERR_TO_DEV_NULL: c_int = 16;
pub const G_SPAWN_CHILD_INHERITS_STDIN: c_int = 32;
pub const G_SPAWN_FILE_AND_ARGV_ZERO: c_int = 64;
pub const G_SPAWN_SEARCH_PATH_FROM_ENVP: c_int = 128;
pub const G_SPAWN_CLOEXEC_PIPES: c_int = 256;
pub const G_SPAWN_CHILD_INHERITS_STDOUT: c_int = 512;
pub const G_SPAWN_CHILD_INHERITS_STDERR: c_int = 1024;
pub const G_SPAWN_STDIN_FROM_DEV_NULL: c_int = 2048;
pub const GSpawnFlags = c_uint;
pub extern fn _frida_g_spawn_error_quark() GQuark;
pub extern fn _frida_g_spawn_exit_error_quark() GQuark;
pub extern fn _frida_g_spawn_async(working_directory: [*c]const gchar, argv: [*c][*c]gchar, envp: [*c][*c]gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, child_pid: [*c]GPid, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_async_with_pipes(working_directory: [*c]const gchar, argv: [*c][*c]gchar, envp: [*c][*c]gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, child_pid: [*c]GPid, standard_input: [*c]gint, standard_output: [*c]gint, standard_error: [*c]gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_async_with_pipes_and_fds(working_directory: [*c]const gchar, argv: [*c]const [*c]const gchar, envp: [*c]const [*c]const gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, stdin_fd: gint, stdout_fd: gint, stderr_fd: gint, source_fds: [*c]const gint, target_fds: [*c]const gint, n_fds: gsize, child_pid_out: [*c]GPid, stdin_pipe_out: [*c]gint, stdout_pipe_out: [*c]gint, stderr_pipe_out: [*c]gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_async_with_fds(working_directory: [*c]const gchar, argv: [*c][*c]gchar, envp: [*c][*c]gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, child_pid: [*c]GPid, stdin_fd: gint, stdout_fd: gint, stderr_fd: gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_sync(working_directory: [*c]const gchar, argv: [*c][*c]gchar, envp: [*c][*c]gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, standard_output: [*c][*c]gchar, standard_error: [*c][*c]gchar, wait_status: [*c]gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_command_line_sync(command_line: [*c]const gchar, standard_output: [*c][*c]gchar, standard_error: [*c][*c]gchar, wait_status: [*c]gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_command_line_async(command_line: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_check_wait_status(wait_status: gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_check_exit_status(wait_status: gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_spawn_close_pid(pid: GPid) void;
pub const G_ASCII_ALNUM: c_int = 1;
pub const G_ASCII_ALPHA: c_int = 2;
pub const G_ASCII_CNTRL: c_int = 4;
pub const G_ASCII_DIGIT: c_int = 8;
pub const G_ASCII_GRAPH: c_int = 16;
pub const G_ASCII_LOWER: c_int = 32;
pub const G_ASCII_PRINT: c_int = 64;
pub const G_ASCII_PUNCT: c_int = 128;
pub const G_ASCII_SPACE: c_int = 256;
pub const G_ASCII_UPPER: c_int = 512;
pub const G_ASCII_XDIGIT: c_int = 1024;
pub const GAsciiType = c_uint;
pub extern const _frida_g_ascii_table: [*c]const guint16;
pub extern fn _frida_g_ascii_tolower(c: gchar) gchar;
pub extern fn _frida_g_ascii_toupper(c: gchar) gchar;
pub extern fn _frida_g_ascii_digit_value(c: gchar) gint;
pub extern fn _frida_g_ascii_xdigit_value(c: gchar) gint;
pub extern fn _frida_g_strdelimit(string: [*c]gchar, delimiters: [*c]const gchar, new_delimiter: gchar) [*c]gchar;
pub extern fn _frida_g_strcanon(string: [*c]gchar, valid_chars: [*c]const gchar, substitutor: gchar) [*c]gchar;
pub extern fn _frida_g_strerror(errnum: gint) [*c]const gchar;
pub extern fn _frida_g_strsignal(signum: gint) [*c]const gchar;
pub extern fn _frida_g_strreverse(string: [*c]gchar) [*c]gchar;
pub extern fn _frida_g_strlcpy(dest: [*c]gchar, src: [*c]const gchar, dest_size: gsize) gsize;
pub extern fn _frida_g_strlcat(dest: [*c]gchar, src: [*c]const gchar, dest_size: gsize) gsize;
pub extern fn _frida_g_strstr_len(haystack: [*c]const gchar, haystack_len: gssize, needle: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_strrstr(haystack: [*c]const gchar, needle: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_strrstr_len(haystack: [*c]const gchar, haystack_len: gssize, needle: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_str_has_suffix(str: [*c]const gchar, suffix: [*c]const gchar) gboolean;
pub extern fn _frida_g_str_has_prefix(str: [*c]const gchar, prefix: [*c]const gchar) gboolean;
pub extern fn _frida_g_strtod(nptr: [*c]const gchar, endptr: [*c][*c]gchar) gdouble;
pub extern fn _frida_g_ascii_strtod(nptr: [*c]const gchar, endptr: [*c][*c]gchar) gdouble;
pub extern fn _frida_g_ascii_strtoull(nptr: [*c]const gchar, endptr: [*c][*c]gchar, base: guint) guint64;
pub extern fn _frida_g_ascii_strtoll(nptr: [*c]const gchar, endptr: [*c][*c]gchar, base: guint) gint64;
pub extern fn _frida_g_ascii_dtostr(buffer: [*c]gchar, buf_len: gint, d: gdouble) [*c]gchar;
pub extern fn _frida_g_ascii_formatd(buffer: [*c]gchar, buf_len: gint, format: [*c]const gchar, d: gdouble) [*c]gchar;
pub extern fn _frida_g_strchug(string: [*c]gchar) [*c]gchar;
pub extern fn _frida_g_strchomp(string: [*c]gchar) [*c]gchar;
pub extern fn _frida_g_ascii_strcasecmp(s1: [*c]const gchar, s2: [*c]const gchar) gint;
pub extern fn _frida_g_ascii_strncasecmp(s1: [*c]const gchar, s2: [*c]const gchar, n: gsize) gint;
pub extern fn _frida_g_ascii_strdown(str: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_ascii_strup(str: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_str_is_ascii(str: [*c]const gchar) gboolean;
pub extern fn _frida_g_strcasecmp(s1: [*c]const gchar, s2: [*c]const gchar) gint;
pub extern fn _frida_g_strncasecmp(s1: [*c]const gchar, s2: [*c]const gchar, n: guint) gint;
pub extern fn _frida_g_strdown(string: [*c]gchar) [*c]gchar;
pub extern fn _frida_g_strup(string: [*c]gchar) [*c]gchar;
pub extern fn _frida_g_strdup(str: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_strdup_printf(format: [*c]const gchar, ...) [*c]gchar;
pub extern fn _frida_g_strdup_vprintf(format: [*c]const gchar, args: [*c]struct___va_list_tag) [*c]gchar;
pub extern fn _frida_g_strndup(str: [*c]const gchar, n: gsize) [*c]gchar;
pub extern fn _frida_g_strnfill(length: gsize, fill_char: gchar) [*c]gchar;
pub extern fn _frida_g_strconcat(string1: [*c]const gchar, ...) [*c]gchar;
pub extern fn _frida_g_strjoin(separator: [*c]const gchar, ...) [*c]gchar;
pub extern fn _frida_g_strcompress(source: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_strescape(source: [*c]const gchar, exceptions: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_memdup(mem: gconstpointer, byte_size: guint) gpointer;
pub extern fn _frida_g_memdup2(mem: gconstpointer, byte_size: gsize) gpointer;
pub const GStrv = [*c][*c]gchar;
pub extern fn _frida_g_strsplit(string: [*c]const gchar, delimiter: [*c]const gchar, max_tokens: gint) [*c][*c]gchar;
pub extern fn _frida_g_strsplit_set(string: [*c]const gchar, delimiters: [*c]const gchar, max_tokens: gint) [*c][*c]gchar;
pub extern fn _frida_g_strjoinv(separator: [*c]const gchar, str_array: [*c][*c]gchar) [*c]gchar;
pub extern fn _frida_g_strfreev(str_array: [*c][*c]gchar) void;
pub extern fn _frida_g_strdupv(str_array: [*c][*c]gchar) [*c][*c]gchar;
pub extern fn _frida_g_strv_length(str_array: [*c][*c]gchar) guint;
pub extern fn _frida_g_stpcpy(dest: [*c]gchar, src: [*c]const u8) [*c]gchar;
pub extern fn _frida_g_str_to_ascii(str: [*c]const gchar, from_locale: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_str_tokenize_and_fold(string: [*c]const gchar, translit_locale: [*c]const gchar, ascii_alternates: [*c][*c][*c]gchar) [*c][*c]gchar;
pub extern fn _frida_g_str_match_string(search_term: [*c]const gchar, potential_hit: [*c]const gchar, accept_alternates: gboolean) gboolean;
pub extern fn _frida_g_strv_contains(strv: [*c]const [*c]const gchar, str: [*c]const gchar) gboolean;
pub extern fn _frida_g_strv_equal(strv1: [*c]const [*c]const gchar, strv2: [*c]const [*c]const gchar) gboolean;
pub const G_NUMBER_PARSER_ERROR_INVALID: c_int = 0;
pub const G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS: c_int = 1;
pub const GNumberParserError = c_uint;
pub extern fn _frida_g_number_parser_error_quark() GQuark;
pub extern fn _frida_g_ascii_string_to_signed(str: [*c]const gchar, base: guint, min: gint64, max: gint64, out_num: [*c]gint64, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_ascii_string_to_unsigned(str: [*c]const gchar, base: guint, min: guint64, max: guint64, out_num: [*c]guint64, @"error": [*c][*c]GError) gboolean;
pub fn g_set_str(arg_str_pointer: [*c][*c]u8, arg_new_str: [*c]const u8) callconv(.C) gboolean {
    var str_pointer = arg_str_pointer;
    var new_str = arg_new_str;
    var copy: [*c]u8 = undefined;
    if ((str_pointer.* == @intToPtr([*c]u8, @ptrToInt(new_str))) or (((str_pointer.* != null) and (new_str != null)) and (strcmp(str_pointer.*, new_str) == @as(c_int, 0)))) return @as(c_int, 0);
    copy = _frida_g_strdup(new_str);
    _frida_g_free(@ptrCast(gpointer, str_pointer.*));
    str_pointer.* = copy;
    return @boolToInt(!(@as(c_int, 0) != 0));
}
pub const struct__GStringChunk = opaque {};
pub const GStringChunk = struct__GStringChunk;
pub extern fn _frida_g_string_chunk_new(size: gsize) ?*GStringChunk;
pub extern fn _frida_g_string_chunk_free(chunk: ?*GStringChunk) void;
pub extern fn _frida_g_string_chunk_clear(chunk: ?*GStringChunk) void;
pub extern fn _frida_g_string_chunk_insert(chunk: ?*GStringChunk, string: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_string_chunk_insert_len(chunk: ?*GStringChunk, string: [*c]const gchar, len: gssize) [*c]gchar;
pub extern fn _frida_g_string_chunk_insert_const(chunk: ?*GStringChunk, string: [*c]const gchar) [*c]gchar;
pub const struct__GStrvBuilder = opaque {};
pub const GStrvBuilder = struct__GStrvBuilder;
pub extern fn _frida_g_strv_builder_new() ?*GStrvBuilder;
pub extern fn _frida_g_strv_builder_unref(builder: ?*GStrvBuilder) void;
pub extern fn _frida_g_strv_builder_ref(builder: ?*GStrvBuilder) ?*GStrvBuilder;
pub extern fn _frida_g_strv_builder_add(builder: ?*GStrvBuilder, value: [*c]const u8) void;
pub extern fn _frida_g_strv_builder_addv(builder: ?*GStrvBuilder, value: [*c][*c]const u8) void;
pub extern fn _frida_g_strv_builder_add_many(builder: ?*GStrvBuilder, ...) void;
pub extern fn _frida_g_strv_builder_end(builder: ?*GStrvBuilder) GStrv;
pub extern fn __errno_location() [*c]c_int;
pub const struct_GTestCase = opaque {};
pub const GTestCase = struct_GTestCase;
pub const struct_GTestSuite = opaque {};
pub const GTestSuite = struct_GTestSuite;
pub const GTestFunc = ?*const fn () callconv(.C) void;
pub const GTestDataFunc = ?*const fn (gconstpointer) callconv(.C) void;
pub const GTestFixtureFunc = ?*const fn (gpointer, gconstpointer) callconv(.C) void;
pub extern fn _frida_g_strcmp0(str1: [*c]const u8, str2: [*c]const u8) c_int;
pub extern fn _frida_g_test_minimized_result(minimized_quantity: f64, format: [*c]const u8, ...) void;
pub extern fn _frida_g_test_maximized_result(maximized_quantity: f64, format: [*c]const u8, ...) void;
pub extern fn _frida_g_test_init(argc: [*c]c_int, argv: [*c][*c][*c]u8, ...) void;
pub extern fn _frida_g_test_subprocess() gboolean;
pub extern fn _frida_g_test_run() c_int;
pub extern fn _frida_g_test_add_func(testpath: [*c]const u8, test_func: GTestFunc) void;
pub extern fn _frida_g_test_add_data_func(testpath: [*c]const u8, test_data: gconstpointer, test_func: GTestDataFunc) void;
pub extern fn _frida_g_test_add_data_func_full(testpath: [*c]const u8, test_data: gpointer, test_func: GTestDataFunc, data_free_func: GDestroyNotify) void;
pub extern fn _frida_g_test_get_path() [*c]const u8;
pub extern fn _frida_g_test_fail() void;
pub extern fn _frida_g_test_fail_printf(format: [*c]const u8, ...) void;
pub extern fn _frida_g_test_incomplete(msg: [*c]const gchar) void;
pub extern fn _frida_g_test_incomplete_printf(format: [*c]const u8, ...) void;
pub extern fn _frida_g_test_skip(msg: [*c]const gchar) void;
pub extern fn _frida_g_test_skip_printf(format: [*c]const u8, ...) void;
pub extern fn _frida_g_test_failed() gboolean;
pub extern fn _frida_g_test_set_nonfatal_assertions() void;
pub extern fn _frida_g_test_message(format: [*c]const u8, ...) void;
pub extern fn _frida_g_test_bug_base(uri_pattern: [*c]const u8) void;
pub extern fn _frida_g_test_bug(bug_uri_snippet: [*c]const u8) void;
pub extern fn _frida_g_test_summary(summary: [*c]const u8) void;
pub extern fn _frida_g_test_timer_start() void;
pub extern fn _frida_g_test_timer_elapsed() f64;
pub extern fn _frida_g_test_timer_last() f64;
pub extern fn _frida_g_test_queue_free(gfree_pointer: gpointer) void;
pub extern fn _frida_g_test_queue_destroy(destroy_func: GDestroyNotify, destroy_data: gpointer) void;
pub const G_TEST_TRAP_DEFAULT: c_int = 0;
pub const G_TEST_TRAP_SILENCE_STDOUT: c_int = 128;
pub const G_TEST_TRAP_SILENCE_STDERR: c_int = 256;
pub const G_TEST_TRAP_INHERIT_STDIN: c_int = 512;
pub const GTestTrapFlags = c_uint;
pub extern fn _frida_g_test_trap_fork(usec_timeout: guint64, test_trap_flags: GTestTrapFlags) gboolean;
pub const G_TEST_SUBPROCESS_DEFAULT: c_int = 0;
pub const G_TEST_SUBPROCESS_INHERIT_STDIN: c_int = 1;
pub const G_TEST_SUBPROCESS_INHERIT_STDOUT: c_int = 2;
pub const G_TEST_SUBPROCESS_INHERIT_STDERR: c_int = 4;
pub const GTestSubprocessFlags = c_uint;
pub extern fn _frida_g_test_trap_subprocess(test_path: [*c]const u8, usec_timeout: guint64, test_flags: GTestSubprocessFlags) void;
pub extern fn _frida_g_test_trap_has_passed() gboolean;
pub extern fn _frida_g_test_trap_reached_timeout() gboolean;
pub extern fn _frida_g_test_rand_int() gint32;
pub extern fn _frida_g_test_rand_int_range(begin: gint32, end: gint32) gint32;
pub extern fn _frida_g_test_rand_double() f64;
pub extern fn _frida_g_test_rand_double_range(range_start: f64, range_end: f64) f64;
pub extern fn _frida_g_test_create_case(test_name: [*c]const u8, data_size: gsize, test_data: gconstpointer, data_setup: GTestFixtureFunc, data_test: GTestFixtureFunc, data_teardown: GTestFixtureFunc) ?*GTestCase;
pub extern fn _frida_g_test_create_suite(suite_name: [*c]const u8) ?*GTestSuite;
pub extern fn _frida_g_test_get_root() ?*GTestSuite;
pub extern fn _frida_g_test_suite_add(suite: ?*GTestSuite, test_case: ?*GTestCase) void;
pub extern fn _frida_g_test_suite_add_suite(suite: ?*GTestSuite, nestedsuite: ?*GTestSuite) void;
pub extern fn _frida_g_test_run_suite(suite: ?*GTestSuite) c_int;
pub extern fn _frida_g_test_case_free(test_case: ?*GTestCase) void;
pub extern fn _frida_g_test_suite_free(suite: ?*GTestSuite) void;
pub extern fn _frida_g_test_trap_assertions(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, assertion_flags: guint64, pattern: [*c]const u8) void;
pub extern fn _frida_g_assertion_message(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, message: [*c]const u8) void;
pub extern fn _frida_g_assertion_message_expr(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, expr: [*c]const u8) noreturn;
pub extern fn _frida_g_assertion_message_cmpstr(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, expr: [*c]const u8, arg1: [*c]const u8, cmp: [*c]const u8, arg2: [*c]const u8) void;
pub extern fn _frida_g_assertion_message_cmpstrv(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, expr: [*c]const u8, arg1: [*c]const [*c]const u8, arg2: [*c]const [*c]const u8, first_wrong_idx: gsize) void;
pub extern fn _frida_g_assertion_message_cmpnum(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, expr: [*c]const u8, arg1: c_longdouble, cmp: [*c]const u8, arg2: c_longdouble, numtype: u8) void;
pub extern fn _frida_g_assertion_message_error(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8, expr: [*c]const u8, @"error": [*c]const GError, error_domain: GQuark, error_code: c_int) void;
pub extern fn _frida_g_test_add_vtable(testpath: [*c]const u8, data_size: gsize, test_data: gconstpointer, data_setup: GTestFixtureFunc, data_test: GTestFixtureFunc, data_teardown: GTestFixtureFunc) void;
pub const GTestConfig = extern struct {
    test_initialized: gboolean,
    test_quick: gboolean,
    test_perf: gboolean,
    test_verbose: gboolean,
    test_quiet: gboolean,
    test_undefined: gboolean,
};
pub extern const _frida_g_test_config_vars: [*c]const GTestConfig;
pub const G_TEST_RUN_SUCCESS: c_int = 0;
pub const G_TEST_RUN_SKIPPED: c_int = 1;
pub const G_TEST_RUN_FAILURE: c_int = 2;
pub const G_TEST_RUN_INCOMPLETE: c_int = 3;
pub const GTestResult = c_uint;
pub const G_TEST_LOG_NONE: c_int = 0;
pub const G_TEST_LOG_ERROR: c_int = 1;
pub const G_TEST_LOG_START_BINARY: c_int = 2;
pub const G_TEST_LOG_LIST_CASE: c_int = 3;
pub const G_TEST_LOG_SKIP_CASE: c_int = 4;
pub const G_TEST_LOG_START_CASE: c_int = 5;
pub const G_TEST_LOG_STOP_CASE: c_int = 6;
pub const G_TEST_LOG_MIN_RESULT: c_int = 7;
pub const G_TEST_LOG_MAX_RESULT: c_int = 8;
pub const G_TEST_LOG_MESSAGE: c_int = 9;
pub const G_TEST_LOG_START_SUITE: c_int = 10;
pub const G_TEST_LOG_STOP_SUITE: c_int = 11;
pub const GTestLogType = c_uint;
pub const GTestLogMsg = extern struct {
    log_type: GTestLogType,
    n_strings: guint,
    strings: [*c][*c]gchar,
    n_nums: guint,
    nums: [*c]c_longdouble,
};
pub const GTestLogBuffer = extern struct {
    data: [*c]GString,
    msgs: [*c]GSList,
};
pub extern fn _frida_g_test_log_type_name(log_type: GTestLogType) [*c]const u8;
pub extern fn _frida_g_test_log_buffer_new() [*c]GTestLogBuffer;
pub extern fn _frida_g_test_log_buffer_free(tbuffer: [*c]GTestLogBuffer) void;
pub extern fn _frida_g_test_log_buffer_push(tbuffer: [*c]GTestLogBuffer, n_bytes: guint, bytes: [*c]const guint8) void;
pub extern fn _frida_g_test_log_buffer_pop(tbuffer: [*c]GTestLogBuffer) [*c]GTestLogMsg;
pub extern fn _frida_g_test_log_msg_free(tmsg: [*c]GTestLogMsg) void;
pub const GTestLogFatalFunc = ?*const fn ([*c]const gchar, GLogLevelFlags, [*c]const gchar, gpointer) callconv(.C) gboolean;
pub extern fn _frida_g_test_log_set_fatal_handler(log_func: GTestLogFatalFunc, user_data: gpointer) void;
pub extern fn _frida_g_test_expect_message(log_domain: [*c]const gchar, log_level: GLogLevelFlags, pattern: [*c]const gchar) void;
pub extern fn _frida_g_test_assert_expected_messages_internal(domain: [*c]const u8, file: [*c]const u8, line: c_int, func: [*c]const u8) void;
pub const G_TEST_DIST: c_int = 0;
pub const G_TEST_BUILT: c_int = 1;
pub const GTestFileType = c_uint;
pub extern fn _frida_g_test_build_filename(file_type: GTestFileType, first_path: [*c]const gchar, ...) [*c]gchar;
pub extern fn _frida_g_test_get_dir(file_type: GTestFileType) [*c]const gchar;
pub extern fn _frida_g_test_get_filename(file_type: GTestFileType, first_path: [*c]const gchar, ...) [*c]const gchar;
pub const struct__GThreadPool = extern struct {
    func: GFunc,
    user_data: gpointer,
    exclusive: gboolean,
};
pub const GThreadPool = struct__GThreadPool;
pub extern fn _frida_g_thread_pool_new(func: GFunc, user_data: gpointer, max_threads: gint, exclusive: gboolean, @"error": [*c][*c]GError) [*c]GThreadPool;
pub extern fn _frida_g_thread_pool_new_full(func: GFunc, user_data: gpointer, item_free_func: GDestroyNotify, max_threads: gint, exclusive: gboolean, @"error": [*c][*c]GError) [*c]GThreadPool;
pub extern fn _frida_g_thread_pool_free(pool: [*c]GThreadPool, immediate: gboolean, wait_: gboolean) void;
pub extern fn _frida_g_thread_pool_push(pool: [*c]GThreadPool, data: gpointer, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_thread_pool_unprocessed(pool: [*c]GThreadPool) guint;
pub extern fn _frida_g_thread_pool_set_sort_function(pool: [*c]GThreadPool, func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_thread_pool_move_to_front(pool: [*c]GThreadPool, data: gpointer) gboolean;
pub extern fn _frida_g_thread_pool_set_max_threads(pool: [*c]GThreadPool, max_threads: gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_thread_pool_get_max_threads(pool: [*c]GThreadPool) gint;
pub extern fn _frida_g_thread_pool_get_num_threads(pool: [*c]GThreadPool) guint;
pub extern fn _frida_g_thread_pool_set_max_unused_threads(max_threads: gint) void;
pub extern fn _frida_g_thread_pool_get_max_unused_threads() gint;
pub extern fn _frida_g_thread_pool_get_num_unused_threads() guint;
pub extern fn _frida_g_thread_pool_stop_unused_threads() void;
pub extern fn _frida_g_thread_pool_set_max_idle_time(interval: guint) void;
pub extern fn _frida_g_thread_pool_get_max_idle_time() guint;
pub const struct__GTimer = opaque {};
pub const GTimer = struct__GTimer;
pub extern fn _frida_g_timer_new() ?*GTimer;
pub extern fn _frida_g_timer_destroy(timer: ?*GTimer) void;
pub extern fn _frida_g_timer_start(timer: ?*GTimer) void;
pub extern fn _frida_g_timer_stop(timer: ?*GTimer) void;
pub extern fn _frida_g_timer_reset(timer: ?*GTimer) void;
pub extern fn _frida_g_timer_continue(timer: ?*GTimer) void;
pub extern fn _frida_g_timer_elapsed(timer: ?*GTimer, microseconds: [*c]gulong) gdouble;
pub extern fn _frida_g_timer_is_active(timer: ?*GTimer) gboolean;
pub extern fn _frida_g_usleep(microseconds: gulong) void;
pub extern fn _frida_g_time_val_add(time_: [*c]GTimeVal, microseconds: glong) void;
pub extern fn _frida_g_time_val_from_iso8601(iso_date: [*c]const gchar, time_: [*c]GTimeVal) gboolean;
pub extern fn _frida_g_time_val_to_iso8601(time_: [*c]GTimeVal) [*c]gchar;
pub const GTrashStack = struct__GTrashStack;
pub const struct__GTrashStack = extern struct {
    next: [*c]GTrashStack,
};
pub extern fn _frida_g_trash_stack_push(stack_p: [*c][*c]GTrashStack, data_p: gpointer) void;
pub extern fn _frida_g_trash_stack_pop(stack_p: [*c][*c]GTrashStack) gpointer;
pub extern fn _frida_g_trash_stack_peek(stack_p: [*c][*c]GTrashStack) gpointer;
pub extern fn _frida_g_trash_stack_height(stack_p: [*c][*c]GTrashStack) guint;
pub const struct__GTree = opaque {};
pub const GTree = struct__GTree;
pub const struct__GTreeNode = opaque {};
pub const GTreeNode = struct__GTreeNode;
pub const GTraverseFunc = ?*const fn (gpointer, gpointer, gpointer) callconv(.C) gboolean;
pub const GTraverseNodeFunc = ?*const fn (?*GTreeNode, gpointer) callconv(.C) gboolean;
pub extern fn _frida_g_tree_new(key_compare_func: GCompareFunc) ?*GTree;
pub extern fn _frida_g_tree_new_with_data(key_compare_func: GCompareDataFunc, key_compare_data: gpointer) ?*GTree;
pub extern fn _frida_g_tree_new_full(key_compare_func: GCompareDataFunc, key_compare_data: gpointer, key_destroy_func: GDestroyNotify, value_destroy_func: GDestroyNotify) ?*GTree;
pub extern fn _frida_g_tree_node_first(tree: ?*GTree) ?*GTreeNode;
pub extern fn _frida_g_tree_node_last(tree: ?*GTree) ?*GTreeNode;
pub extern fn _frida_g_tree_node_previous(node: ?*GTreeNode) ?*GTreeNode;
pub extern fn _frida_g_tree_node_next(node: ?*GTreeNode) ?*GTreeNode;
pub extern fn _frida_g_tree_ref(tree: ?*GTree) ?*GTree;
pub extern fn _frida_g_tree_unref(tree: ?*GTree) void;
pub extern fn _frida_g_tree_destroy(tree: ?*GTree) void;
pub extern fn _frida_g_tree_insert_node(tree: ?*GTree, key: gpointer, value: gpointer) ?*GTreeNode;
pub extern fn _frida_g_tree_insert(tree: ?*GTree, key: gpointer, value: gpointer) void;
pub extern fn _frida_g_tree_replace_node(tree: ?*GTree, key: gpointer, value: gpointer) ?*GTreeNode;
pub extern fn _frida_g_tree_replace(tree: ?*GTree, key: gpointer, value: gpointer) void;
pub extern fn _frida_g_tree_remove(tree: ?*GTree, key: gconstpointer) gboolean;
pub extern fn _frida_g_tree_remove_all(tree: ?*GTree) void;
pub extern fn _frida_g_tree_steal(tree: ?*GTree, key: gconstpointer) gboolean;
pub extern fn _frida_g_tree_node_key(node: ?*GTreeNode) gpointer;
pub extern fn _frida_g_tree_node_value(node: ?*GTreeNode) gpointer;
pub extern fn _frida_g_tree_lookup_node(tree: ?*GTree, key: gconstpointer) ?*GTreeNode;
pub extern fn _frida_g_tree_lookup(tree: ?*GTree, key: gconstpointer) gpointer;
pub extern fn _frida_g_tree_lookup_extended(tree: ?*GTree, lookup_key: gconstpointer, orig_key: [*c]gpointer, value: [*c]gpointer) gboolean;
pub extern fn _frida_g_tree_foreach(tree: ?*GTree, func: GTraverseFunc, user_data: gpointer) void;
pub extern fn _frida_g_tree_foreach_node(tree: ?*GTree, func: GTraverseNodeFunc, user_data: gpointer) void;
pub extern fn _frida_g_tree_traverse(tree: ?*GTree, traverse_func: GTraverseFunc, traverse_type: GTraverseType, user_data: gpointer) void;
pub extern fn _frida_g_tree_search_node(tree: ?*GTree, search_func: GCompareFunc, user_data: gconstpointer) ?*GTreeNode;
pub extern fn _frida_g_tree_search(tree: ?*GTree, search_func: GCompareFunc, user_data: gconstpointer) gpointer;
pub extern fn _frida_g_tree_lower_bound(tree: ?*GTree, key: gconstpointer) ?*GTreeNode;
pub extern fn _frida_g_tree_upper_bound(tree: ?*GTree, key: gconstpointer) ?*GTreeNode;
pub extern fn _frida_g_tree_height(tree: ?*GTree) gint;
pub extern fn _frida_g_tree_nnodes(tree: ?*GTree) gint;
pub const struct__GUri = opaque {};
pub const GUri = struct__GUri;
pub extern fn _frida_g_uri_ref(uri: ?*GUri) ?*GUri;
pub extern fn _frida_g_uri_unref(uri: ?*GUri) void;
pub const G_URI_FLAGS_NONE: c_int = 0;
pub const G_URI_FLAGS_PARSE_RELAXED: c_int = 1;
pub const G_URI_FLAGS_HAS_PASSWORD: c_int = 2;
pub const G_URI_FLAGS_HAS_AUTH_PARAMS: c_int = 4;
pub const G_URI_FLAGS_ENCODED: c_int = 8;
pub const G_URI_FLAGS_NON_DNS: c_int = 16;
pub const G_URI_FLAGS_ENCODED_QUERY: c_int = 32;
pub const G_URI_FLAGS_ENCODED_PATH: c_int = 64;
pub const G_URI_FLAGS_ENCODED_FRAGMENT: c_int = 128;
pub const G_URI_FLAGS_SCHEME_NORMALIZE: c_int = 256;
pub const GUriFlags = c_uint;
pub extern fn _frida_g_uri_split(uri_ref: [*c]const gchar, flags: GUriFlags, scheme: [*c][*c]gchar, userinfo: [*c][*c]gchar, host: [*c][*c]gchar, port: [*c]gint, path: [*c][*c]gchar, query: [*c][*c]gchar, fragment: [*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_uri_split_with_user(uri_ref: [*c]const gchar, flags: GUriFlags, scheme: [*c][*c]gchar, user: [*c][*c]gchar, password: [*c][*c]gchar, auth_params: [*c][*c]gchar, host: [*c][*c]gchar, port: [*c]gint, path: [*c][*c]gchar, query: [*c][*c]gchar, fragment: [*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_uri_split_network(uri_string: [*c]const gchar, flags: GUriFlags, scheme: [*c][*c]gchar, host: [*c][*c]gchar, port: [*c]gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_uri_is_valid(uri_string: [*c]const gchar, flags: GUriFlags, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_uri_join(flags: GUriFlags, scheme: [*c]const gchar, userinfo: [*c]const gchar, host: [*c]const gchar, port: gint, path: [*c]const gchar, query: [*c]const gchar, fragment: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_uri_join_with_user(flags: GUriFlags, scheme: [*c]const gchar, user: [*c]const gchar, password: [*c]const gchar, auth_params: [*c]const gchar, host: [*c]const gchar, port: gint, path: [*c]const gchar, query: [*c]const gchar, fragment: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_uri_parse(uri_string: [*c]const gchar, flags: GUriFlags, @"error": [*c][*c]GError) ?*GUri;
pub extern fn _frida_g_uri_parse_relative(base_uri: ?*GUri, uri_ref: [*c]const gchar, flags: GUriFlags, @"error": [*c][*c]GError) ?*GUri;
pub extern fn _frida_g_uri_resolve_relative(base_uri_string: [*c]const gchar, uri_ref: [*c]const gchar, flags: GUriFlags, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_uri_build(flags: GUriFlags, scheme: [*c]const gchar, userinfo: [*c]const gchar, host: [*c]const gchar, port: gint, path: [*c]const gchar, query: [*c]const gchar, fragment: [*c]const gchar) ?*GUri;
pub extern fn _frida_g_uri_build_with_user(flags: GUriFlags, scheme: [*c]const gchar, user: [*c]const gchar, password: [*c]const gchar, auth_params: [*c]const gchar, host: [*c]const gchar, port: gint, path: [*c]const gchar, query: [*c]const gchar, fragment: [*c]const gchar) ?*GUri;
pub const G_URI_HIDE_NONE: c_int = 0;
pub const G_URI_HIDE_USERINFO: c_int = 1;
pub const G_URI_HIDE_PASSWORD: c_int = 2;
pub const G_URI_HIDE_AUTH_PARAMS: c_int = 4;
pub const G_URI_HIDE_QUERY: c_int = 8;
pub const G_URI_HIDE_FRAGMENT: c_int = 16;
pub const GUriHideFlags = c_uint;
pub extern fn _frida_g_uri_to_string(uri: ?*GUri) [*c]u8;
pub extern fn _frida_g_uri_to_string_partial(uri: ?*GUri, flags: GUriHideFlags) [*c]u8;
pub extern fn _frida_g_uri_get_scheme(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_userinfo(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_user(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_password(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_auth_params(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_host(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_port(uri: ?*GUri) gint;
pub extern fn _frida_g_uri_get_path(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_query(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_fragment(uri: ?*GUri) [*c]const gchar;
pub extern fn _frida_g_uri_get_flags(uri: ?*GUri) GUriFlags;
pub const G_URI_PARAMS_NONE: c_int = 0;
pub const G_URI_PARAMS_CASE_INSENSITIVE: c_int = 1;
pub const G_URI_PARAMS_WWW_FORM: c_int = 2;
pub const G_URI_PARAMS_PARSE_RELAXED: c_int = 4;
pub const GUriParamsFlags = c_uint;
pub extern fn _frida_g_uri_parse_params(params: [*c]const gchar, length: gssize, separators: [*c]const gchar, flags: GUriParamsFlags, @"error": [*c][*c]GError) ?*GHashTable;
pub const struct__GUriParamsIter = extern struct {
    dummy0: gint,
    dummy1: gpointer,
    dummy2: gpointer,
    dummy3: [256]guint8,
};
pub const GUriParamsIter = struct__GUriParamsIter;
pub extern fn _frida_g_uri_params_iter_init(iter: [*c]GUriParamsIter, params: [*c]const gchar, length: gssize, separators: [*c]const gchar, flags: GUriParamsFlags) void;
pub extern fn _frida_g_uri_params_iter_next(iter: [*c]GUriParamsIter, attribute: [*c][*c]gchar, value: [*c][*c]gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_uri_error_quark() GQuark;
pub const G_URI_ERROR_FAILED: c_int = 0;
pub const G_URI_ERROR_BAD_SCHEME: c_int = 1;
pub const G_URI_ERROR_BAD_USER: c_int = 2;
pub const G_URI_ERROR_BAD_PASSWORD: c_int = 3;
pub const G_URI_ERROR_BAD_AUTH_PARAMS: c_int = 4;
pub const G_URI_ERROR_BAD_HOST: c_int = 5;
pub const G_URI_ERROR_BAD_PORT: c_int = 6;
pub const G_URI_ERROR_BAD_PATH: c_int = 7;
pub const G_URI_ERROR_BAD_QUERY: c_int = 8;
pub const G_URI_ERROR_BAD_FRAGMENT: c_int = 9;
pub const GUriError = c_uint;
pub extern fn _frida_g_uri_unescape_string(escaped_string: [*c]const u8, illegal_characters: [*c]const u8) [*c]u8;
pub extern fn _frida_g_uri_unescape_segment(escaped_string: [*c]const u8, escaped_string_end: [*c]const u8, illegal_characters: [*c]const u8) [*c]u8;
pub extern fn _frida_g_uri_parse_scheme(uri: [*c]const u8) [*c]u8;
pub extern fn _frida_g_uri_peek_scheme(uri: [*c]const u8) [*c]const u8;
pub extern fn _frida_g_uri_escape_string(unescaped: [*c]const u8, reserved_chars_allowed: [*c]const u8, allow_utf8: gboolean) [*c]u8;
pub extern fn _frida_g_uri_unescape_bytes(escaped_string: [*c]const u8, length: gssize, illegal_characters: [*c]const u8, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn _frida_g_uri_escape_bytes(unescaped: [*c]const guint8, length: gsize, reserved_chars_allowed: [*c]const u8) [*c]u8;
pub extern fn _frida_g_uuid_string_is_valid(str: [*c]const gchar) gboolean;
pub extern fn _frida_g_uuid_string_random() [*c]gchar;
pub extern const _frida_glib_major_version: guint;
pub extern const _frida_glib_minor_version: guint;
pub extern const _frida_glib_micro_version: guint;
pub extern const _frida_glib_interface_age: guint;
pub extern const _frida_glib_binary_age: guint;
pub extern fn _frida_glib_check_version(required_major: guint, required_minor: guint, required_micro: guint) [*c]const gchar;
pub const struct__GAllocator = opaque {};
pub const GAllocator = struct__GAllocator;
pub const struct__GMemChunk = opaque {};
pub const GMemChunk = struct__GMemChunk;
pub extern fn _frida_g_mem_chunk_new(name: [*c]const gchar, atom_size: gint, area_size: gsize, @"type": gint) ?*GMemChunk;
pub extern fn _frida_g_mem_chunk_destroy(mem_chunk: ?*GMemChunk) void;
pub extern fn _frida_g_mem_chunk_alloc(mem_chunk: ?*GMemChunk) gpointer;
pub extern fn _frida_g_mem_chunk_alloc0(mem_chunk: ?*GMemChunk) gpointer;
pub extern fn _frida_g_mem_chunk_free(mem_chunk: ?*GMemChunk, mem: gpointer) void;
pub extern fn _frida_g_mem_chunk_clean(mem_chunk: ?*GMemChunk) void;
pub extern fn _frida_g_mem_chunk_reset(mem_chunk: ?*GMemChunk) void;
pub extern fn _frida_g_mem_chunk_print(mem_chunk: ?*GMemChunk) void;
pub extern fn _frida_g_mem_chunk_info() void;
pub extern fn _frida_g_blow_chunks() void;
pub extern fn _frida_g_allocator_new(name: [*c]const gchar, n_preallocs: guint) ?*GAllocator;
pub extern fn _frida_g_allocator_free(allocator: ?*GAllocator) void;
pub extern fn _frida_g_list_push_allocator(allocator: ?*GAllocator) void;
pub extern fn _frida_g_list_pop_allocator() void;
pub extern fn _frida_g_slist_push_allocator(allocator: ?*GAllocator) void;
pub extern fn _frida_g_slist_pop_allocator() void;
pub extern fn _frida_g_node_push_allocator(allocator: ?*GAllocator) void;
pub extern fn _frida_g_node_pop_allocator() void;
pub const struct__GCache = opaque {};
pub const GCache = struct__GCache;
pub const GCacheNewFunc = ?*const fn (gpointer) callconv(.C) gpointer;
pub const GCacheDupFunc = ?*const fn (gpointer) callconv(.C) gpointer;
pub const GCacheDestroyFunc = ?*const fn (gpointer) callconv(.C) void;
pub extern fn _frida_g_cache_new(value_new_func: GCacheNewFunc, value_destroy_func: GCacheDestroyFunc, key_dup_func: GCacheDupFunc, key_destroy_func: GCacheDestroyFunc, hash_key_func: GHashFunc, hash_value_func: GHashFunc, key_equal_func: GEqualFunc) ?*GCache;
pub extern fn _frida_g_cache_destroy(cache: ?*GCache) void;
pub extern fn _frida_g_cache_insert(cache: ?*GCache, key: gpointer) gpointer;
pub extern fn _frida_g_cache_remove(cache: ?*GCache, value: gconstpointer) void;
pub extern fn _frida_g_cache_key_foreach(cache: ?*GCache, func: GHFunc, user_data: gpointer) void;
pub extern fn _frida_g_cache_value_foreach(cache: ?*GCache, func: GHFunc, user_data: gpointer) void;
pub const GCompletionFunc = ?*const fn (gpointer) callconv(.C) [*c]gchar;
pub const GCompletionStrncmpFunc = ?*const fn ([*c]const gchar, [*c]const gchar, gsize) callconv(.C) gint;
pub const struct__GCompletion = extern struct {
    items: [*c]GList,
    func: GCompletionFunc,
    prefix: [*c]gchar,
    cache: [*c]GList,
    strncmp_func: GCompletionStrncmpFunc,
};
pub const GCompletion = struct__GCompletion;
pub extern fn _frida_g_completion_new(func: GCompletionFunc) [*c]GCompletion;
pub extern fn _frida_g_completion_add_items(cmp: [*c]GCompletion, items: [*c]GList) void;
pub extern fn _frida_g_completion_remove_items(cmp: [*c]GCompletion, items: [*c]GList) void;
pub extern fn _frida_g_completion_clear_items(cmp: [*c]GCompletion) void;
pub extern fn _frida_g_completion_complete(cmp: [*c]GCompletion, prefix: [*c]const gchar, new_prefix: [*c][*c]gchar) [*c]GList;
pub extern fn _frida_g_completion_complete_utf8(cmp: [*c]GCompletion, prefix: [*c]const gchar, new_prefix: [*c][*c]gchar) [*c]GList;
pub extern fn _frida_g_completion_set_compare(cmp: [*c]GCompletion, strncmp_func: GCompletionStrncmpFunc) void;
pub extern fn _frida_g_completion_free(cmp: [*c]GCompletion) void;
pub const struct__GRelation = opaque {};
pub const GRelation = struct__GRelation;
pub const struct__GTuples = extern struct {
    len: guint,
};
pub const GTuples = struct__GTuples;
pub extern fn _frida_g_relation_new(fields: gint) ?*GRelation;
pub extern fn _frida_g_relation_destroy(relation: ?*GRelation) void;
pub extern fn _frida_g_relation_index(relation: ?*GRelation, field: gint, hash_func: GHashFunc, key_equal_func: GEqualFunc) void;
pub extern fn _frida_g_relation_insert(relation: ?*GRelation, ...) void;
pub extern fn _frida_g_relation_delete(relation: ?*GRelation, key: gconstpointer, field: gint) gint;
pub extern fn _frida_g_relation_select(relation: ?*GRelation, key: gconstpointer, field: gint) [*c]GTuples;
pub extern fn _frida_g_relation_count(relation: ?*GRelation, key: gconstpointer, field: gint) gint;
pub extern fn _frida_g_relation_exists(relation: ?*GRelation, ...) gboolean;
pub extern fn _frida_g_relation_print(relation: ?*GRelation) void;
pub extern fn _frida_g_tuples_destroy(tuples: [*c]GTuples) void;
pub extern fn _frida_g_tuples_index(tuples: [*c]GTuples, index_: gint, field: gint) gpointer;
pub const G_THREAD_PRIORITY_LOW: c_int = 0;
pub const G_THREAD_PRIORITY_NORMAL: c_int = 1;
pub const G_THREAD_PRIORITY_HIGH: c_int = 2;
pub const G_THREAD_PRIORITY_URGENT: c_int = 3;
pub const GThreadPriority = c_uint;
pub const struct__GThreadFunctions = extern struct {
    mutex_new: ?*const fn () callconv(.C) [*c]GMutex,
    mutex_lock: ?*const fn ([*c]GMutex) callconv(.C) void,
    mutex_trylock: ?*const fn ([*c]GMutex) callconv(.C) gboolean,
    mutex_unlock: ?*const fn ([*c]GMutex) callconv(.C) void,
    mutex_free: ?*const fn ([*c]GMutex) callconv(.C) void,
    cond_new: ?*const fn () callconv(.C) [*c]GCond,
    cond_signal: ?*const fn ([*c]GCond) callconv(.C) void,
    cond_broadcast: ?*const fn ([*c]GCond) callconv(.C) void,
    cond_wait: ?*const fn ([*c]GCond, [*c]GMutex) callconv(.C) void,
    cond_timed_wait: ?*const fn ([*c]GCond, [*c]GMutex, [*c]GTimeVal) callconv(.C) gboolean,
    cond_free: ?*const fn ([*c]GCond) callconv(.C) void,
    private_new: ?*const fn (GDestroyNotify) callconv(.C) [*c]GPrivate,
    private_get: ?*const fn ([*c]GPrivate) callconv(.C) gpointer,
    private_set: ?*const fn ([*c]GPrivate, gpointer) callconv(.C) void,
    thread_create: ?*const fn (GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, [*c][*c]GError) callconv(.C) void,
    thread_yield: ?*const fn () callconv(.C) void,
    thread_join: ?*const fn (gpointer) callconv(.C) void,
    thread_exit: ?*const fn () callconv(.C) void,
    thread_set_priority: ?*const fn (gpointer, GThreadPriority) callconv(.C) void,
    thread_self: ?*const fn (gpointer) callconv(.C) void,
    thread_equal: ?*const fn (gpointer, gpointer) callconv(.C) gboolean,
};
pub const GThreadFunctions = struct__GThreadFunctions;
pub extern var _frida_g_thread_functions_for_glib_use: GThreadFunctions;
pub extern var _frida_g_thread_use_default_impl: gboolean;
pub extern var _frida_g_thread_gettime: ?*const fn () callconv(.C) guint64;
pub extern fn _frida_g_thread_create(func: GThreadFunc, data: gpointer, joinable: gboolean, @"error": [*c][*c]GError) [*c]GThread;
pub extern fn _frida_g_thread_create_full(func: GThreadFunc, data: gpointer, stack_size: gulong, joinable: gboolean, bound: gboolean, priority: GThreadPriority, @"error": [*c][*c]GError) [*c]GThread;
pub extern fn _frida_g_thread_set_priority(thread: [*c]GThread, priority: GThreadPriority) void;
pub extern fn _frida_g_thread_foreach(thread_func: GFunc, user_data: gpointer) void;
pub const struct_sched_param = extern struct {
    sched_priority: c_int,
};
pub const __cpu_mask = c_ulong;
pub const cpu_set_t = extern struct {
    __bits: [16]__cpu_mask,
};
pub extern fn __sched_cpucount(__setsize: usize, __setp: [*c]const cpu_set_t) c_int;
pub extern fn __sched_cpualloc(__count: usize) [*c]cpu_set_t;
pub extern fn __sched_cpufree(__set: [*c]cpu_set_t) void;
pub extern fn sched_setparam(__pid: __pid_t, __param: [*c]const struct_sched_param) c_int;
pub extern fn sched_getparam(__pid: __pid_t, __param: [*c]struct_sched_param) c_int;
pub extern fn sched_setscheduler(__pid: __pid_t, __policy: c_int, __param: [*c]const struct_sched_param) c_int;
pub extern fn sched_getscheduler(__pid: __pid_t) c_int;
pub extern fn sched_yield() c_int;
pub extern fn sched_get_priority_max(__algorithm: c_int) c_int;
pub extern fn sched_get_priority_min(__algorithm: c_int) c_int;
pub extern fn sched_rr_get_interval(__pid: __pid_t, __t: [*c]struct_timespec) c_int;
pub const __jmp_buf = [8]c_long;
pub const struct___jmp_buf_tag = extern struct {
    __jmpbuf: __jmp_buf,
    __mask_was_saved: c_int,
    __saved_mask: __sigset_t,
};
pub const PTHREAD_CREATE_JOINABLE: c_int = 0;
pub const PTHREAD_CREATE_DETACHED: c_int = 1;
const enum_unnamed_32 = c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: c_int = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: c_int = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: c_int = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: c_int = 3;
pub const PTHREAD_MUTEX_NORMAL: c_int = 0;
pub const PTHREAD_MUTEX_RECURSIVE: c_int = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: c_int = 2;
pub const PTHREAD_MUTEX_DEFAULT: c_int = 0;
const enum_unnamed_33 = c_uint;
pub const PTHREAD_MUTEX_STALLED: c_int = 0;
pub const PTHREAD_MUTEX_STALLED_NP: c_int = 0;
pub const PTHREAD_MUTEX_ROBUST: c_int = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: c_int = 1;
const enum_unnamed_34 = c_uint;
pub const PTHREAD_PRIO_NONE: c_int = 0;
pub const PTHREAD_PRIO_INHERIT: c_int = 1;
pub const PTHREAD_PRIO_PROTECT: c_int = 2;
const enum_unnamed_35 = c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: c_int = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: c_int = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: c_int = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: c_int = 0;
const enum_unnamed_36 = c_uint;
pub const PTHREAD_INHERIT_SCHED: c_int = 0;
pub const PTHREAD_EXPLICIT_SCHED: c_int = 1;
const enum_unnamed_37 = c_uint;
pub const PTHREAD_SCOPE_SYSTEM: c_int = 0;
pub const PTHREAD_SCOPE_PROCESS: c_int = 1;
const enum_unnamed_38 = c_uint;
pub const PTHREAD_PROCESS_PRIVATE: c_int = 0;
pub const PTHREAD_PROCESS_SHARED: c_int = 1;
const enum_unnamed_39 = c_uint;
pub const struct__pthread_cleanup_buffer = extern struct {
    __routine: ?*const fn (?*anyopaque) callconv(.C) void,
    __arg: ?*anyopaque,
    __canceltype: c_int,
    __prev: [*c]struct__pthread_cleanup_buffer,
};
pub const PTHREAD_CANCEL_ENABLE: c_int = 0;
pub const PTHREAD_CANCEL_DISABLE: c_int = 1;
const enum_unnamed_40 = c_uint;
pub const PTHREAD_CANCEL_DEFERRED: c_int = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: c_int = 1;
const enum_unnamed_41 = c_uint;
pub extern fn pthread_create(noalias __newthread: [*c]pthread_t, noalias __attr: [*c]const pthread_attr_t, __start_routine: ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque, noalias __arg: ?*anyopaque) c_int;
pub extern fn pthread_exit(__retval: ?*anyopaque) noreturn;
pub extern fn pthread_join(__th: pthread_t, __thread_return: [*c]?*anyopaque) c_int;
pub extern fn pthread_detach(__th: pthread_t) c_int;
pub extern fn pthread_self() pthread_t;
pub extern fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) c_int;
pub extern fn pthread_attr_init(__attr: [*c]pthread_attr_t) c_int;
pub extern fn pthread_attr_destroy(__attr: [*c]pthread_attr_t) c_int;
pub extern fn pthread_attr_getdetachstate(__attr: [*c]const pthread_attr_t, __detachstate: [*c]c_int) c_int;
pub extern fn pthread_attr_setdetachstate(__attr: [*c]pthread_attr_t, __detachstate: c_int) c_int;
pub extern fn pthread_attr_getguardsize(__attr: [*c]const pthread_attr_t, __guardsize: [*c]usize) c_int;
pub extern fn pthread_attr_setguardsize(__attr: [*c]pthread_attr_t, __guardsize: usize) c_int;
pub extern fn pthread_attr_getschedparam(noalias __attr: [*c]const pthread_attr_t, noalias __param: [*c]struct_sched_param) c_int;
pub extern fn pthread_attr_setschedparam(noalias __attr: [*c]pthread_attr_t, noalias __param: [*c]const struct_sched_param) c_int;
pub extern fn pthread_attr_getschedpolicy(noalias __attr: [*c]const pthread_attr_t, noalias __policy: [*c]c_int) c_int;
pub extern fn pthread_attr_setschedpolicy(__attr: [*c]pthread_attr_t, __policy: c_int) c_int;
pub extern fn pthread_attr_getinheritsched(noalias __attr: [*c]const pthread_attr_t, noalias __inherit: [*c]c_int) c_int;
pub extern fn pthread_attr_setinheritsched(__attr: [*c]pthread_attr_t, __inherit: c_int) c_int;
pub extern fn pthread_attr_getscope(noalias __attr: [*c]const pthread_attr_t, noalias __scope: [*c]c_int) c_int;
pub extern fn pthread_attr_setscope(__attr: [*c]pthread_attr_t, __scope: c_int) c_int;
pub extern fn pthread_attr_getstackaddr(noalias __attr: [*c]const pthread_attr_t, noalias __stackaddr: [*c]?*anyopaque) c_int;
pub extern fn pthread_attr_setstackaddr(__attr: [*c]pthread_attr_t, __stackaddr: ?*anyopaque) c_int;
pub extern fn pthread_attr_getstacksize(noalias __attr: [*c]const pthread_attr_t, noalias __stacksize: [*c]usize) c_int;
pub extern fn pthread_attr_setstacksize(__attr: [*c]pthread_attr_t, __stacksize: usize) c_int;
pub extern fn pthread_attr_getstack(noalias __attr: [*c]const pthread_attr_t, noalias __stackaddr: [*c]?*anyopaque, noalias __stacksize: [*c]usize) c_int;
pub extern fn pthread_attr_setstack(__attr: [*c]pthread_attr_t, __stackaddr: ?*anyopaque, __stacksize: usize) c_int;
pub extern fn pthread_setschedparam(__target_thread: pthread_t, __policy: c_int, __param: [*c]const struct_sched_param) c_int;
pub extern fn pthread_getschedparam(__target_thread: pthread_t, noalias __policy: [*c]c_int, noalias __param: [*c]struct_sched_param) c_int;
pub extern fn pthread_setschedprio(__target_thread: pthread_t, __prio: c_int) c_int;
pub extern fn pthread_once(__once_control: [*c]pthread_once_t, __init_routine: ?*const fn () callconv(.C) void) c_int;
pub extern fn pthread_setcancelstate(__state: c_int, __oldstate: [*c]c_int) c_int;
pub extern fn pthread_setcanceltype(__type: c_int, __oldtype: [*c]c_int) c_int;
pub extern fn pthread_cancel(__th: pthread_t) c_int;
pub extern fn pthread_testcancel() void;
pub const struct___cancel_jmp_buf_tag = extern struct {
    __cancel_jmp_buf: __jmp_buf,
    __mask_was_saved: c_int,
};
pub const __pthread_unwind_buf_t = extern struct {
    __cancel_jmp_buf: [1]struct___cancel_jmp_buf_tag,
    __pad: [4]?*anyopaque,
};
pub const struct___pthread_cleanup_frame = extern struct {
    __cancel_routine: ?*const fn (?*anyopaque) callconv(.C) void,
    __cancel_arg: ?*anyopaque,
    __do_it: c_int,
    __cancel_type: c_int,
};
pub extern fn __pthread_register_cancel(__buf: [*c]__pthread_unwind_buf_t) void;
pub extern fn __pthread_unregister_cancel(__buf: [*c]__pthread_unwind_buf_t) void;
pub extern fn __pthread_unwind_next(__buf: [*c]__pthread_unwind_buf_t) noreturn;
pub extern fn __sigsetjmp(__env: [*c]struct___jmp_buf_tag, __savemask: c_int) c_int;
pub extern fn pthread_mutex_init(__mutex: [*c]pthread_mutex_t, __mutexattr: [*c]const pthread_mutexattr_t) c_int;
pub extern fn pthread_mutex_destroy(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_trylock(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_lock(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_timedlock(noalias __mutex: [*c]pthread_mutex_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_mutex_unlock(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_getprioceiling(noalias __mutex: [*c]const pthread_mutex_t, noalias __prioceiling: [*c]c_int) c_int;
pub extern fn pthread_mutex_setprioceiling(noalias __mutex: [*c]pthread_mutex_t, __prioceiling: c_int, noalias __old_ceiling: [*c]c_int) c_int;
pub extern fn pthread_mutex_consistent(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutexattr_init(__attr: [*c]pthread_mutexattr_t) c_int;
pub extern fn pthread_mutexattr_destroy(__attr: [*c]pthread_mutexattr_t) c_int;
pub extern fn pthread_mutexattr_getpshared(noalias __attr: [*c]const pthread_mutexattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setpshared(__attr: [*c]pthread_mutexattr_t, __pshared: c_int) c_int;
pub extern fn pthread_mutexattr_gettype(noalias __attr: [*c]const pthread_mutexattr_t, noalias __kind: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_settype(__attr: [*c]pthread_mutexattr_t, __kind: c_int) c_int;
pub extern fn pthread_mutexattr_getprotocol(noalias __attr: [*c]const pthread_mutexattr_t, noalias __protocol: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setprotocol(__attr: [*c]pthread_mutexattr_t, __protocol: c_int) c_int;
pub extern fn pthread_mutexattr_getprioceiling(noalias __attr: [*c]const pthread_mutexattr_t, noalias __prioceiling: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setprioceiling(__attr: [*c]pthread_mutexattr_t, __prioceiling: c_int) c_int;
pub extern fn pthread_mutexattr_getrobust(__attr: [*c]const pthread_mutexattr_t, __robustness: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setrobust(__attr: [*c]pthread_mutexattr_t, __robustness: c_int) c_int;
pub extern fn pthread_rwlock_init(noalias __rwlock: [*c]pthread_rwlock_t, noalias __attr: [*c]const pthread_rwlockattr_t) c_int;
pub extern fn pthread_rwlock_destroy(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_rdlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_tryrdlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_timedrdlock(noalias __rwlock: [*c]pthread_rwlock_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_rwlock_wrlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_trywrlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_timedwrlock(noalias __rwlock: [*c]pthread_rwlock_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_rwlock_unlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlockattr_init(__attr: [*c]pthread_rwlockattr_t) c_int;
pub extern fn pthread_rwlockattr_destroy(__attr: [*c]pthread_rwlockattr_t) c_int;
pub extern fn pthread_rwlockattr_getpshared(noalias __attr: [*c]const pthread_rwlockattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_rwlockattr_setpshared(__attr: [*c]pthread_rwlockattr_t, __pshared: c_int) c_int;
pub extern fn pthread_rwlockattr_getkind_np(noalias __attr: [*c]const pthread_rwlockattr_t, noalias __pref: [*c]c_int) c_int;
pub extern fn pthread_rwlockattr_setkind_np(__attr: [*c]pthread_rwlockattr_t, __pref: c_int) c_int;
pub extern fn pthread_cond_init(noalias __cond: [*c]pthread_cond_t, noalias __cond_attr: [*c]const pthread_condattr_t) c_int;
pub extern fn pthread_cond_destroy(__cond: [*c]pthread_cond_t) c_int;
pub extern fn pthread_cond_signal(__cond: [*c]pthread_cond_t) c_int;
pub extern fn pthread_cond_broadcast(__cond: [*c]pthread_cond_t) c_int;
pub extern fn pthread_cond_wait(noalias __cond: [*c]pthread_cond_t, noalias __mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_cond_timedwait(noalias __cond: [*c]pthread_cond_t, noalias __mutex: [*c]pthread_mutex_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_condattr_init(__attr: [*c]pthread_condattr_t) c_int;
pub extern fn pthread_condattr_destroy(__attr: [*c]pthread_condattr_t) c_int;
pub extern fn pthread_condattr_getpshared(noalias __attr: [*c]const pthread_condattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_condattr_setpshared(__attr: [*c]pthread_condattr_t, __pshared: c_int) c_int;
pub extern fn pthread_condattr_getclock(noalias __attr: [*c]const pthread_condattr_t, noalias __clock_id: [*c]__clockid_t) c_int;
pub extern fn pthread_condattr_setclock(__attr: [*c]pthread_condattr_t, __clock_id: __clockid_t) c_int;
pub extern fn pthread_spin_init(__lock: [*c]volatile pthread_spinlock_t, __pshared: c_int) c_int;
pub extern fn pthread_spin_destroy(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_spin_lock(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_spin_trylock(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_spin_unlock(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_barrier_init(noalias __barrier: [*c]pthread_barrier_t, noalias __attr: [*c]const pthread_barrierattr_t, __count: c_uint) c_int;
pub extern fn pthread_barrier_destroy(__barrier: [*c]pthread_barrier_t) c_int;
pub extern fn pthread_barrier_wait(__barrier: [*c]pthread_barrier_t) c_int;
pub extern fn pthread_barrierattr_init(__attr: [*c]pthread_barrierattr_t) c_int;
pub extern fn pthread_barrierattr_destroy(__attr: [*c]pthread_barrierattr_t) c_int;
pub extern fn pthread_barrierattr_getpshared(noalias __attr: [*c]const pthread_barrierattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_barrierattr_setpshared(__attr: [*c]pthread_barrierattr_t, __pshared: c_int) c_int;
pub extern fn pthread_key_create(__key: [*c]pthread_key_t, __destr_function: ?*const fn (?*anyopaque) callconv(.C) void) c_int;
pub extern fn pthread_key_delete(__key: pthread_key_t) c_int;
pub extern fn pthread_getspecific(__key: pthread_key_t) ?*anyopaque;
pub extern fn pthread_setspecific(__key: pthread_key_t, __pointer: ?*const anyopaque) c_int;
pub extern fn pthread_getcpuclockid(__thread_id: pthread_t, __clock_id: [*c]__clockid_t) c_int;
pub extern fn pthread_atfork(__prepare: ?*const fn () callconv(.C) void, __parent: ?*const fn () callconv(.C) void, __child: ?*const fn () callconv(.C) void) c_int;
pub const GStaticMutex = extern struct {
    mutex: [*c]GMutex,
    unused: pthread_mutex_t,
};
pub extern fn _frida_g_static_mutex_init(mutex: [*c]GStaticMutex) void;
pub extern fn _frida_g_static_mutex_free(mutex: [*c]GStaticMutex) void;
pub extern fn _frida_g_static_mutex_get_mutex_impl(mutex: [*c]GStaticMutex) [*c]GMutex;
const union_unnamed_42 = extern union {
    owner: pthread_t,
    dummy: gdouble,
};
pub const struct__GStaticRecMutex = extern struct {
    mutex: GStaticMutex,
    depth: guint,
    unused: union_unnamed_42,
};
pub const GStaticRecMutex = struct__GStaticRecMutex;
pub extern fn _frida_g_static_rec_mutex_init(mutex: [*c]GStaticRecMutex) void;
pub extern fn _frida_g_static_rec_mutex_lock(mutex: [*c]GStaticRecMutex) void;
pub extern fn _frida_g_static_rec_mutex_trylock(mutex: [*c]GStaticRecMutex) gboolean;
pub extern fn _frida_g_static_rec_mutex_unlock(mutex: [*c]GStaticRecMutex) void;
pub extern fn _frida_g_static_rec_mutex_lock_full(mutex: [*c]GStaticRecMutex, depth: guint) void;
pub extern fn _frida_g_static_rec_mutex_unlock_full(mutex: [*c]GStaticRecMutex) guint;
pub extern fn _frida_g_static_rec_mutex_free(mutex: [*c]GStaticRecMutex) void;
pub const struct__GStaticRWLock = extern struct {
    mutex: GStaticMutex,
    read_cond: [*c]GCond,
    write_cond: [*c]GCond,
    read_counter: guint,
    have_writer: gboolean,
    want_to_read: guint,
    want_to_write: guint,
};
pub const GStaticRWLock = struct__GStaticRWLock;
pub extern fn _frida_g_static_rw_lock_init(lock: [*c]GStaticRWLock) void;
pub extern fn _frida_g_static_rw_lock_reader_lock(lock: [*c]GStaticRWLock) void;
pub extern fn _frida_g_static_rw_lock_reader_trylock(lock: [*c]GStaticRWLock) gboolean;
pub extern fn _frida_g_static_rw_lock_reader_unlock(lock: [*c]GStaticRWLock) void;
pub extern fn _frida_g_static_rw_lock_writer_lock(lock: [*c]GStaticRWLock) void;
pub extern fn _frida_g_static_rw_lock_writer_trylock(lock: [*c]GStaticRWLock) gboolean;
pub extern fn _frida_g_static_rw_lock_writer_unlock(lock: [*c]GStaticRWLock) void;
pub extern fn _frida_g_static_rw_lock_free(lock: [*c]GStaticRWLock) void;
pub extern fn _frida_g_private_new(notify: GDestroyNotify) [*c]GPrivate;
pub const struct__GStaticPrivate = extern struct {
    index: guint,
};
pub const GStaticPrivate = struct__GStaticPrivate;
pub extern fn _frida_g_static_private_init(private_key: [*c]GStaticPrivate) void;
pub extern fn _frida_g_static_private_get(private_key: [*c]GStaticPrivate) gpointer;
pub extern fn _frida_g_static_private_set(private_key: [*c]GStaticPrivate, data: gpointer, notify: GDestroyNotify) void;
pub extern fn _frida_g_static_private_free(private_key: [*c]GStaticPrivate) void;
pub extern fn _frida_g_once_init_enter_impl(location: [*c]volatile gsize) gboolean;
pub extern fn _frida_g_thread_init(vtable: gpointer) void;
pub extern fn _frida_g_thread_init_with_errorcheck_mutexes(vtable: gpointer) void;
pub extern fn _frida_g_thread_get_initialized() gboolean;
pub extern var _frida_g_threads_got_initialized: gboolean;
pub extern fn _frida_g_mutex_new() [*c]GMutex;
pub extern fn _frida_g_mutex_free(mutex: [*c]GMutex) void;
pub extern fn _frida_g_cond_new() [*c]GCond;
pub extern fn _frida_g_cond_free(cond: [*c]GCond) void;
pub extern fn _frida_g_cond_timed_wait(cond: [*c]GCond, mutex: [*c]GMutex, timeval: [*c]GTimeVal) gboolean;
pub fn g_autoptr_cleanup_generic_gfree(arg_p: ?*anyopaque) callconv(.C) void {
    var p = arg_p;
    var pp: [*c]?*anyopaque = @ptrCast([*c]?*anyopaque, @alignCast(@import("std").meta.alignment([*c]?*anyopaque), p));
    _frida_g_free(pp.*);
}
pub fn g_autoptr_cleanup_gstring_free(arg_string: [*c]GString) callconv(.C) void {
    var string = arg_string;
    if (string != null) {
        _ = _frida_g_string_free(string, @boolToInt(!(@as(c_int, 0) != 0)));
    }
}
pub const GAsyncQueue_autoptr = ?*GAsyncQueue;
pub const GAsyncQueue_listautoptr = [*c]GList;
pub const GAsyncQueue_slistautoptr = [*c]GSList;
pub const GAsyncQueue_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GAsyncQueue(arg__ptr: ?*GAsyncQueue) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_async_queue_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GAsyncQueue(arg__ptr: [*c]?*GAsyncQueue) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GAsyncQueue(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GAsyncQueue(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_async_queue_unref)))));
}
pub fn glib_slistautoptr_cleanup_GAsyncQueue(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_async_queue_unref)))));
}
pub fn glib_queueautoptr_cleanup_GAsyncQueue(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_async_queue_unref)))));
    }
}
pub const GBookmarkFile_autoptr = ?*GBookmarkFile;
pub const GBookmarkFile_listautoptr = [*c]GList;
pub const GBookmarkFile_slistautoptr = [*c]GSList;
pub const GBookmarkFile_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GBookmarkFile(arg__ptr: ?*GBookmarkFile) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_bookmark_file_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GBookmarkFile(arg__ptr: [*c]?*GBookmarkFile) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GBookmarkFile(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GBookmarkFile(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_bookmark_file_free)))));
}
pub fn glib_slistautoptr_cleanup_GBookmarkFile(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_bookmark_file_free)))));
}
pub fn glib_queueautoptr_cleanup_GBookmarkFile(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_bookmark_file_free)))));
    }
}
pub const GBytes_autoptr = ?*GBytes;
pub const GBytes_listautoptr = [*c]GList;
pub const GBytes_slistautoptr = [*c]GSList;
pub const GBytes_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GBytes(arg__ptr: ?*GBytes) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_bytes_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GBytes(arg__ptr: [*c]?*GBytes) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GBytes(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GBytes(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_bytes_unref)))));
}
pub fn glib_slistautoptr_cleanup_GBytes(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_bytes_unref)))));
}
pub fn glib_queueautoptr_cleanup_GBytes(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_bytes_unref)))));
    }
}
pub const GChecksum_autoptr = ?*GChecksum;
pub const GChecksum_listautoptr = [*c]GList;
pub const GChecksum_slistautoptr = [*c]GSList;
pub const GChecksum_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GChecksum(arg__ptr: ?*GChecksum) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_checksum_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GChecksum(arg__ptr: [*c]?*GChecksum) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GChecksum(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GChecksum(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_checksum_free)))));
}
pub fn glib_slistautoptr_cleanup_GChecksum(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_checksum_free)))));
}
pub fn glib_queueautoptr_cleanup_GChecksum(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_checksum_free)))));
    }
}
pub const GDateTime_autoptr = ?*GDateTime;
pub const GDateTime_listautoptr = [*c]GList;
pub const GDateTime_slistautoptr = [*c]GSList;
pub const GDateTime_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDateTime(arg__ptr: ?*GDateTime) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_date_time_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GDateTime(arg__ptr: [*c]?*GDateTime) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDateTime(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDateTime(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_date_time_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDateTime(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_date_time_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDateTime(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_date_time_unref)))));
    }
}
pub const GDate_autoptr = ?*GDate;
pub const GDate_listautoptr = [*c]GList;
pub const GDate_slistautoptr = [*c]GSList;
pub const GDate_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDate(arg__ptr: ?*GDate) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_date_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GDate(arg__ptr: [*c]?*GDate) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDate(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDate(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_date_free)))));
}
pub fn glib_slistautoptr_cleanup_GDate(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_date_free)))));
}
pub fn glib_queueautoptr_cleanup_GDate(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_date_free)))));
    }
}
pub const GDir_autoptr = ?*GDir;
pub const GDir_listautoptr = [*c]GList;
pub const GDir_slistautoptr = [*c]GSList;
pub const GDir_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDir(arg__ptr: ?*GDir) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_dir_close(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GDir(arg__ptr: [*c]?*GDir) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDir(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDir(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_dir_close)))));
}
pub fn glib_slistautoptr_cleanup_GDir(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_dir_close)))));
}
pub fn glib_queueautoptr_cleanup_GDir(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_dir_close)))));
    }
}
pub const GError_autoptr = [*c]GError;
pub const GError_listautoptr = [*c]GList;
pub const GError_slistautoptr = [*c]GSList;
pub const GError_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GError(arg__ptr: [*c]GError) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_error_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GError(arg__ptr: [*c][*c]GError) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GError(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GError(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_error_free)))));
}
pub fn glib_slistautoptr_cleanup_GError(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_error_free)))));
}
pub fn glib_queueautoptr_cleanup_GError(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_error_free)))));
    }
}
pub const GHashTable_autoptr = ?*GHashTable;
pub const GHashTable_listautoptr = [*c]GList;
pub const GHashTable_slistautoptr = [*c]GSList;
pub const GHashTable_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GHashTable(arg__ptr: ?*GHashTable) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_hash_table_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GHashTable(arg__ptr: [*c]?*GHashTable) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GHashTable(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GHashTable(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_hash_table_unref)))));
}
pub fn glib_slistautoptr_cleanup_GHashTable(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_hash_table_unref)))));
}
pub fn glib_queueautoptr_cleanup_GHashTable(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_hash_table_unref)))));
    }
}
pub const GHmac_autoptr = ?*GHmac;
pub const GHmac_listautoptr = [*c]GList;
pub const GHmac_slistautoptr = [*c]GSList;
pub const GHmac_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GHmac(arg__ptr: ?*GHmac) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_hmac_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GHmac(arg__ptr: [*c]?*GHmac) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GHmac(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GHmac(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_hmac_unref)))));
}
pub fn glib_slistautoptr_cleanup_GHmac(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_hmac_unref)))));
}
pub fn glib_queueautoptr_cleanup_GHmac(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_hmac_unref)))));
    }
}
pub const GIOChannel_autoptr = ?*GIOChannel;
pub const GIOChannel_listautoptr = [*c]GList;
pub const GIOChannel_slistautoptr = [*c]GSList;
pub const GIOChannel_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GIOChannel(arg__ptr: ?*GIOChannel) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_io_channel_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GIOChannel(arg__ptr: [*c]?*GIOChannel) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GIOChannel(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GIOChannel(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_io_channel_unref)))));
}
pub fn glib_slistautoptr_cleanup_GIOChannel(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_io_channel_unref)))));
}
pub fn glib_queueautoptr_cleanup_GIOChannel(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_io_channel_unref)))));
    }
}
pub const GKeyFile_autoptr = ?*GKeyFile;
pub const GKeyFile_listautoptr = [*c]GList;
pub const GKeyFile_slistautoptr = [*c]GSList;
pub const GKeyFile_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GKeyFile(arg__ptr: ?*GKeyFile) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_key_file_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GKeyFile(arg__ptr: [*c]?*GKeyFile) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GKeyFile(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GKeyFile(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_key_file_unref)))));
}
pub fn glib_slistautoptr_cleanup_GKeyFile(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_key_file_unref)))));
}
pub fn glib_queueautoptr_cleanup_GKeyFile(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_key_file_unref)))));
    }
}
pub const GList_autoptr = [*c]GList;
pub const GList_listautoptr = [*c]GList;
pub const GList_slistautoptr = [*c]GSList;
pub const GList_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GList(arg__ptr: [*c]GList) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_list_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GList(arg__ptr: [*c][*c]GList) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GList(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GList(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_list_free)))));
}
pub fn glib_slistautoptr_cleanup_GList(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_list_free)))));
}
pub fn glib_queueautoptr_cleanup_GList(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_list_free)))));
    }
}
pub const GArray_autoptr = [*c]GArray;
pub const GArray_listautoptr = [*c]GList;
pub const GArray_slistautoptr = [*c]GSList;
pub const GArray_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GArray(arg__ptr: [*c]GArray) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_array_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GArray(arg__ptr: [*c][*c]GArray) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GArray(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GArray(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_array_unref)))));
}
pub fn glib_slistautoptr_cleanup_GArray(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_array_unref)))));
}
pub fn glib_queueautoptr_cleanup_GArray(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_array_unref)))));
    }
}
pub const GPtrArray_autoptr = [*c]GPtrArray;
pub const GPtrArray_listautoptr = [*c]GList;
pub const GPtrArray_slistautoptr = [*c]GSList;
pub const GPtrArray_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GPtrArray(arg__ptr: [*c]GPtrArray) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_ptr_array_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GPtrArray(arg__ptr: [*c][*c]GPtrArray) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GPtrArray(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GPtrArray(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_ptr_array_unref)))));
}
pub fn glib_slistautoptr_cleanup_GPtrArray(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_ptr_array_unref)))));
}
pub fn glib_queueautoptr_cleanup_GPtrArray(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_ptr_array_unref)))));
    }
}
pub const GByteArray_autoptr = [*c]GByteArray;
pub const GByteArray_listautoptr = [*c]GList;
pub const GByteArray_slistautoptr = [*c]GSList;
pub const GByteArray_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GByteArray(arg__ptr: [*c]GByteArray) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_byte_array_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GByteArray(arg__ptr: [*c][*c]GByteArray) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GByteArray(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GByteArray(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_byte_array_unref)))));
}
pub fn glib_slistautoptr_cleanup_GByteArray(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_byte_array_unref)))));
}
pub fn glib_queueautoptr_cleanup_GByteArray(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_byte_array_unref)))));
    }
}
pub const GMainContext_autoptr = ?*GMainContext;
pub const GMainContext_listautoptr = [*c]GList;
pub const GMainContext_slistautoptr = [*c]GSList;
pub const GMainContext_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMainContext(arg__ptr: ?*GMainContext) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_main_context_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GMainContext(arg__ptr: [*c]?*GMainContext) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMainContext(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMainContext(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_main_context_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMainContext(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_main_context_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMainContext(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_main_context_unref)))));
    }
}
pub const GMainContextPusher_autoptr = ?*GMainContextPusher;
pub const GMainContextPusher_listautoptr = [*c]GList;
pub const GMainContextPusher_slistautoptr = [*c]GSList;
pub const GMainContextPusher_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMainContextPusher(arg__ptr: ?*GMainContextPusher) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        g_main_context_pusher_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GMainContextPusher(arg__ptr: [*c]?*GMainContextPusher) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMainContextPusher(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMainContextPusher(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_main_context_pusher_free)))));
}
pub fn glib_slistautoptr_cleanup_GMainContextPusher(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_main_context_pusher_free)))));
}
pub fn glib_queueautoptr_cleanup_GMainContextPusher(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_main_context_pusher_free)))));
    }
}
pub const GMainLoop_autoptr = ?*GMainLoop;
pub const GMainLoop_listautoptr = [*c]GList;
pub const GMainLoop_slistautoptr = [*c]GSList;
pub const GMainLoop_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMainLoop(arg__ptr: ?*GMainLoop) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_main_loop_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GMainLoop(arg__ptr: [*c]?*GMainLoop) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMainLoop(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMainLoop(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_main_loop_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMainLoop(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_main_loop_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMainLoop(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_main_loop_unref)))));
    }
}
pub const GSource_autoptr = [*c]GSource;
pub const GSource_listautoptr = [*c]GList;
pub const GSource_slistautoptr = [*c]GSList;
pub const GSource_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSource(arg__ptr: [*c]GSource) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_source_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GSource(arg__ptr: [*c][*c]GSource) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSource(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSource(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_source_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSource(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_source_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSource(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_source_unref)))));
    }
}
pub const GMappedFile_autoptr = ?*GMappedFile;
pub const GMappedFile_listautoptr = [*c]GList;
pub const GMappedFile_slistautoptr = [*c]GSList;
pub const GMappedFile_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMappedFile(arg__ptr: ?*GMappedFile) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_mapped_file_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GMappedFile(arg__ptr: [*c]?*GMappedFile) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMappedFile(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMappedFile(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_mapped_file_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMappedFile(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_mapped_file_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMappedFile(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_mapped_file_unref)))));
    }
}
pub const GMarkupParseContext_autoptr = ?*GMarkupParseContext;
pub const GMarkupParseContext_listautoptr = [*c]GList;
pub const GMarkupParseContext_slistautoptr = [*c]GSList;
pub const GMarkupParseContext_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMarkupParseContext(arg__ptr: ?*GMarkupParseContext) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_markup_parse_context_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GMarkupParseContext(arg__ptr: [*c]?*GMarkupParseContext) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMarkupParseContext(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMarkupParseContext(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_markup_parse_context_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMarkupParseContext(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_markup_parse_context_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMarkupParseContext(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_markup_parse_context_unref)))));
    }
}
pub const GNode_autoptr = [*c]GNode;
pub const GNode_listautoptr = [*c]GList;
pub const GNode_slistautoptr = [*c]GSList;
pub const GNode_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GNode(arg__ptr: [*c]GNode) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_node_destroy(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GNode(arg__ptr: [*c][*c]GNode) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GNode(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GNode(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_node_destroy)))));
}
pub fn glib_slistautoptr_cleanup_GNode(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_node_destroy)))));
}
pub fn glib_queueautoptr_cleanup_GNode(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_node_destroy)))));
    }
}
pub const GOptionContext_autoptr = ?*GOptionContext;
pub const GOptionContext_listautoptr = [*c]GList;
pub const GOptionContext_slistautoptr = [*c]GSList;
pub const GOptionContext_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GOptionContext(arg__ptr: ?*GOptionContext) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_option_context_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GOptionContext(arg__ptr: [*c]?*GOptionContext) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GOptionContext(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GOptionContext(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_option_context_free)))));
}
pub fn glib_slistautoptr_cleanup_GOptionContext(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_option_context_free)))));
}
pub fn glib_queueautoptr_cleanup_GOptionContext(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_option_context_free)))));
    }
}
pub const GOptionGroup_autoptr = ?*GOptionGroup;
pub const GOptionGroup_listautoptr = [*c]GList;
pub const GOptionGroup_slistautoptr = [*c]GSList;
pub const GOptionGroup_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GOptionGroup(arg__ptr: ?*GOptionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_option_group_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GOptionGroup(arg__ptr: [*c]?*GOptionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GOptionGroup(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GOptionGroup(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_option_group_unref)))));
}
pub fn glib_slistautoptr_cleanup_GOptionGroup(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_option_group_unref)))));
}
pub fn glib_queueautoptr_cleanup_GOptionGroup(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_option_group_unref)))));
    }
}
pub const GPatternSpec_autoptr = ?*GPatternSpec;
pub const GPatternSpec_listautoptr = [*c]GList;
pub const GPatternSpec_slistautoptr = [*c]GSList;
pub const GPatternSpec_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GPatternSpec(arg__ptr: ?*GPatternSpec) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_pattern_spec_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GPatternSpec(arg__ptr: [*c]?*GPatternSpec) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GPatternSpec(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GPatternSpec(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_pattern_spec_free)))));
}
pub fn glib_slistautoptr_cleanup_GPatternSpec(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_pattern_spec_free)))));
}
pub fn glib_queueautoptr_cleanup_GPatternSpec(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_pattern_spec_free)))));
    }
}
pub const GQueue_autoptr = [*c]GQueue;
pub const GQueue_listautoptr = [*c]GList;
pub const GQueue_slistautoptr = [*c]GSList;
pub const GQueue_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GQueue(arg__ptr: [*c]GQueue) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_queue_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GQueue(arg__ptr: [*c][*c]GQueue) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GQueue(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GQueue(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_queue_free)))));
}
pub fn glib_slistautoptr_cleanup_GQueue(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_queue_free)))));
}
pub fn glib_queueautoptr_cleanup_GQueue(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_queue_free)))));
    }
}
pub fn glib_auto_cleanup_GQueue(arg__ptr: [*c]GQueue) callconv(.C) void {
    var _ptr = arg__ptr;
    _frida_g_queue_clear(_ptr);
}
pub const GRand_autoptr = ?*GRand;
pub const GRand_listautoptr = [*c]GList;
pub const GRand_slistautoptr = [*c]GSList;
pub const GRand_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GRand(arg__ptr: ?*GRand) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_rand_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GRand(arg__ptr: [*c]?*GRand) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GRand(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GRand(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_rand_free)))));
}
pub fn glib_slistautoptr_cleanup_GRand(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_rand_free)))));
}
pub fn glib_queueautoptr_cleanup_GRand(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_rand_free)))));
    }
}
pub const GRegex_autoptr = ?*GRegex;
pub const GRegex_listautoptr = [*c]GList;
pub const GRegex_slistautoptr = [*c]GSList;
pub const GRegex_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GRegex(arg__ptr: ?*GRegex) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_regex_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GRegex(arg__ptr: [*c]?*GRegex) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GRegex(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GRegex(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_regex_unref)))));
}
pub fn glib_slistautoptr_cleanup_GRegex(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_regex_unref)))));
}
pub fn glib_queueautoptr_cleanup_GRegex(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_regex_unref)))));
    }
}
pub const GMatchInfo_autoptr = ?*GMatchInfo;
pub const GMatchInfo_listautoptr = [*c]GList;
pub const GMatchInfo_slistautoptr = [*c]GSList;
pub const GMatchInfo_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMatchInfo(arg__ptr: ?*GMatchInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_match_info_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GMatchInfo(arg__ptr: [*c]?*GMatchInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMatchInfo(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMatchInfo(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_match_info_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMatchInfo(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_match_info_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMatchInfo(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_match_info_unref)))));
    }
}
pub const GScanner_autoptr = [*c]GScanner;
pub const GScanner_listautoptr = [*c]GList;
pub const GScanner_slistautoptr = [*c]GSList;
pub const GScanner_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GScanner(arg__ptr: [*c]GScanner) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_scanner_destroy(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GScanner(arg__ptr: [*c][*c]GScanner) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GScanner(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GScanner(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_scanner_destroy)))));
}
pub fn glib_slistautoptr_cleanup_GScanner(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_scanner_destroy)))));
}
pub fn glib_queueautoptr_cleanup_GScanner(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_scanner_destroy)))));
    }
}
pub const GSequence_autoptr = ?*GSequence;
pub const GSequence_listautoptr = [*c]GList;
pub const GSequence_slistautoptr = [*c]GSList;
pub const GSequence_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSequence(arg__ptr: ?*GSequence) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_sequence_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GSequence(arg__ptr: [*c]?*GSequence) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSequence(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSequence(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_sequence_free)))));
}
pub fn glib_slistautoptr_cleanup_GSequence(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_sequence_free)))));
}
pub fn glib_queueautoptr_cleanup_GSequence(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_sequence_free)))));
    }
}
pub const GSList_autoptr = [*c]GSList;
pub const GSList_listautoptr = [*c]GList;
pub const GSList_slistautoptr = [*c]GSList;
pub const GSList_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSList(arg__ptr: [*c]GSList) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_slist_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GSList(arg__ptr: [*c][*c]GSList) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSList(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSList(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_slist_free)))));
}
pub fn glib_slistautoptr_cleanup_GSList(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_slist_free)))));
}
pub fn glib_queueautoptr_cleanup_GSList(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_slist_free)))));
    }
}
pub const GString_autoptr = [*c]GString;
pub const GString_listautoptr = [*c]GList;
pub const GString_slistautoptr = [*c]GSList;
pub const GString_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GString(arg__ptr: [*c]GString) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        g_autoptr_cleanup_gstring_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GString(arg__ptr: [*c][*c]GString) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GString(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GString(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_autoptr_cleanup_gstring_free)))));
}
pub fn glib_slistautoptr_cleanup_GString(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_autoptr_cleanup_gstring_free)))));
}
pub fn glib_queueautoptr_cleanup_GString(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_autoptr_cleanup_gstring_free)))));
    }
}
pub const GStringChunk_autoptr = ?*GStringChunk;
pub const GStringChunk_listautoptr = [*c]GList;
pub const GStringChunk_slistautoptr = [*c]GSList;
pub const GStringChunk_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GStringChunk(arg__ptr: ?*GStringChunk) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_string_chunk_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GStringChunk(arg__ptr: [*c]?*GStringChunk) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GStringChunk(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GStringChunk(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_string_chunk_free)))));
}
pub fn glib_slistautoptr_cleanup_GStringChunk(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_string_chunk_free)))));
}
pub fn glib_queueautoptr_cleanup_GStringChunk(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_string_chunk_free)))));
    }
}
pub const GStrvBuilder_autoptr = ?*GStrvBuilder;
pub const GStrvBuilder_listautoptr = [*c]GList;
pub const GStrvBuilder_slistautoptr = [*c]GSList;
pub const GStrvBuilder_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GStrvBuilder(arg__ptr: ?*GStrvBuilder) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_strv_builder_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GStrvBuilder(arg__ptr: [*c]?*GStrvBuilder) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GStrvBuilder(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GStrvBuilder(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_strv_builder_unref)))));
}
pub fn glib_slistautoptr_cleanup_GStrvBuilder(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_strv_builder_unref)))));
}
pub fn glib_queueautoptr_cleanup_GStrvBuilder(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_strv_builder_unref)))));
    }
}
pub const GThread_autoptr = [*c]GThread;
pub const GThread_listautoptr = [*c]GList;
pub const GThread_slistautoptr = [*c]GSList;
pub const GThread_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GThread(arg__ptr: [*c]GThread) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_thread_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GThread(arg__ptr: [*c][*c]GThread) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GThread(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GThread(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_thread_unref)))));
}
pub fn glib_slistautoptr_cleanup_GThread(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_thread_unref)))));
}
pub fn glib_queueautoptr_cleanup_GThread(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_thread_unref)))));
    }
}
pub fn glib_auto_cleanup_GMutex(arg__ptr: [*c]GMutex) callconv(.C) void {
    var _ptr = arg__ptr;
    _frida_g_mutex_clear(_ptr);
}
pub const GMutexLocker_autoptr = ?*GMutexLocker;
pub const GMutexLocker_listautoptr = [*c]GList;
pub const GMutexLocker_slistautoptr = [*c]GSList;
pub const GMutexLocker_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMutexLocker(arg__ptr: ?*GMutexLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        g_mutex_locker_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GMutexLocker(arg__ptr: [*c]?*GMutexLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMutexLocker(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMutexLocker(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_mutex_locker_free)))));
}
pub fn glib_slistautoptr_cleanup_GMutexLocker(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_mutex_locker_free)))));
}
pub fn glib_queueautoptr_cleanup_GMutexLocker(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_mutex_locker_free)))));
    }
}
pub const GRecMutexLocker_autoptr = ?*GRecMutexLocker;
pub const GRecMutexLocker_listautoptr = [*c]GList;
pub const GRecMutexLocker_slistautoptr = [*c]GSList;
pub const GRecMutexLocker_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GRecMutexLocker(arg__ptr: ?*GRecMutexLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        g_rec_mutex_locker_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GRecMutexLocker(arg__ptr: [*c]?*GRecMutexLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GRecMutexLocker(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GRecMutexLocker(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rec_mutex_locker_free)))));
}
pub fn glib_slistautoptr_cleanup_GRecMutexLocker(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rec_mutex_locker_free)))));
}
pub fn glib_queueautoptr_cleanup_GRecMutexLocker(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rec_mutex_locker_free)))));
    }
}
pub const GRWLockWriterLocker_autoptr = ?*GRWLockWriterLocker;
pub const GRWLockWriterLocker_listautoptr = [*c]GList;
pub const GRWLockWriterLocker_slistautoptr = [*c]GSList;
pub const GRWLockWriterLocker_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GRWLockWriterLocker(arg__ptr: ?*GRWLockWriterLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        g_rw_lock_writer_locker_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GRWLockWriterLocker(arg__ptr: [*c]?*GRWLockWriterLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GRWLockWriterLocker(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GRWLockWriterLocker(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rw_lock_writer_locker_free)))));
}
pub fn glib_slistautoptr_cleanup_GRWLockWriterLocker(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rw_lock_writer_locker_free)))));
}
pub fn glib_queueautoptr_cleanup_GRWLockWriterLocker(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rw_lock_writer_locker_free)))));
    }
}
pub const GRWLockReaderLocker_autoptr = ?*GRWLockReaderLocker;
pub const GRWLockReaderLocker_listautoptr = [*c]GList;
pub const GRWLockReaderLocker_slistautoptr = [*c]GSList;
pub const GRWLockReaderLocker_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GRWLockReaderLocker(arg__ptr: ?*GRWLockReaderLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        g_rw_lock_reader_locker_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GRWLockReaderLocker(arg__ptr: [*c]?*GRWLockReaderLocker) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GRWLockReaderLocker(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GRWLockReaderLocker(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rw_lock_reader_locker_free)))));
}
pub fn glib_slistautoptr_cleanup_GRWLockReaderLocker(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rw_lock_reader_locker_free)))));
}
pub fn glib_queueautoptr_cleanup_GRWLockReaderLocker(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &g_rw_lock_reader_locker_free)))));
    }
}
pub fn glib_auto_cleanup_GCond(arg__ptr: [*c]GCond) callconv(.C) void {
    var _ptr = arg__ptr;
    _frida_g_cond_clear(_ptr);
}
pub const GTimer_autoptr = ?*GTimer;
pub const GTimer_listautoptr = [*c]GList;
pub const GTimer_slistautoptr = [*c]GSList;
pub const GTimer_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTimer(arg__ptr: ?*GTimer) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_timer_destroy(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GTimer(arg__ptr: [*c]?*GTimer) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTimer(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTimer(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_timer_destroy)))));
}
pub fn glib_slistautoptr_cleanup_GTimer(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_timer_destroy)))));
}
pub fn glib_queueautoptr_cleanup_GTimer(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_timer_destroy)))));
    }
}
pub const GTimeZone_autoptr = ?*GTimeZone;
pub const GTimeZone_listautoptr = [*c]GList;
pub const GTimeZone_slistautoptr = [*c]GSList;
pub const GTimeZone_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTimeZone(arg__ptr: ?*GTimeZone) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_time_zone_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GTimeZone(arg__ptr: [*c]?*GTimeZone) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTimeZone(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTimeZone(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_time_zone_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTimeZone(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_time_zone_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTimeZone(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_time_zone_unref)))));
    }
}
pub const GTree_autoptr = ?*GTree;
pub const GTree_listautoptr = [*c]GList;
pub const GTree_slistautoptr = [*c]GSList;
pub const GTree_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTree(arg__ptr: ?*GTree) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_tree_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GTree(arg__ptr: [*c]?*GTree) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTree(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTree(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_tree_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTree(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_tree_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTree(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_tree_unref)))));
    }
}
pub const GVariant_autoptr = ?*GVariant;
pub const GVariant_listautoptr = [*c]GList;
pub const GVariant_slistautoptr = [*c]GSList;
pub const GVariant_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVariant(arg__ptr: ?*GVariant) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_variant_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GVariant(arg__ptr: [*c]?*GVariant) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVariant(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVariant(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_unref)))));
}
pub fn glib_slistautoptr_cleanup_GVariant(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_unref)))));
}
pub fn glib_queueautoptr_cleanup_GVariant(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_unref)))));
    }
}
pub const GVariantBuilder_autoptr = [*c]GVariantBuilder;
pub const GVariantBuilder_listautoptr = [*c]GList;
pub const GVariantBuilder_slistautoptr = [*c]GSList;
pub const GVariantBuilder_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVariantBuilder(arg__ptr: [*c]GVariantBuilder) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_variant_builder_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GVariantBuilder(arg__ptr: [*c][*c]GVariantBuilder) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVariantBuilder(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVariantBuilder(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_builder_unref)))));
}
pub fn glib_slistautoptr_cleanup_GVariantBuilder(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_builder_unref)))));
}
pub fn glib_queueautoptr_cleanup_GVariantBuilder(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_builder_unref)))));
    }
}
pub fn glib_auto_cleanup_GVariantBuilder(arg__ptr: [*c]GVariantBuilder) callconv(.C) void {
    var _ptr = arg__ptr;
    _frida_g_variant_builder_clear(_ptr);
}
pub const GVariantIter_autoptr = [*c]GVariantIter;
pub const GVariantIter_listautoptr = [*c]GList;
pub const GVariantIter_slistautoptr = [*c]GSList;
pub const GVariantIter_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVariantIter(arg__ptr: [*c]GVariantIter) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_variant_iter_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GVariantIter(arg__ptr: [*c][*c]GVariantIter) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVariantIter(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVariantIter(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_iter_free)))));
}
pub fn glib_slistautoptr_cleanup_GVariantIter(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_iter_free)))));
}
pub fn glib_queueautoptr_cleanup_GVariantIter(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_iter_free)))));
    }
}
pub const GVariantDict_autoptr = [*c]GVariantDict;
pub const GVariantDict_listautoptr = [*c]GList;
pub const GVariantDict_slistautoptr = [*c]GSList;
pub const GVariantDict_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVariantDict(arg__ptr: [*c]GVariantDict) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_variant_dict_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GVariantDict(arg__ptr: [*c][*c]GVariantDict) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVariantDict(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVariantDict(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_dict_unref)))));
}
pub fn glib_slistautoptr_cleanup_GVariantDict(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_dict_unref)))));
}
pub fn glib_queueautoptr_cleanup_GVariantDict(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_dict_unref)))));
    }
}
pub fn glib_auto_cleanup_GVariantDict(arg__ptr: [*c]GVariantDict) callconv(.C) void {
    var _ptr = arg__ptr;
    _frida_g_variant_dict_clear(_ptr);
}
pub const GVariantType_autoptr = ?*GVariantType;
pub const GVariantType_listautoptr = [*c]GList;
pub const GVariantType_slistautoptr = [*c]GSList;
pub const GVariantType_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVariantType(arg__ptr: ?*GVariantType) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_variant_type_free(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GVariantType(arg__ptr: [*c]?*GVariantType) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVariantType(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVariantType(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_type_free)))));
}
pub fn glib_slistautoptr_cleanup_GVariantType(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_type_free)))));
}
pub fn glib_queueautoptr_cleanup_GVariantType(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_variant_type_free)))));
    }
}
pub fn glib_auto_cleanup_GStrv(arg__ptr: [*c]GStrv) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr.* != @ptrCast(GStrv, @alignCast(@import("std").meta.alignment(GStrv), @intToPtr(?*anyopaque, @as(c_int, 0))))) {
        _frida_g_strfreev(_ptr.*);
    }
}
pub const GRefString_autoptr = [*c]GRefString;
pub const GRefString_listautoptr = [*c]GList;
pub const GRefString_slistautoptr = [*c]GSList;
pub const GRefString_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GRefString(arg__ptr: [*c]GRefString) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_ref_string_release(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GRefString(arg__ptr: [*c][*c]GRefString) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GRefString(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GRefString(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_ref_string_release)))));
}
pub fn glib_slistautoptr_cleanup_GRefString(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_ref_string_release)))));
}
pub fn glib_queueautoptr_cleanup_GRefString(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_ref_string_release)))));
    }
}
pub const GUri_autoptr = ?*GUri;
pub const GUri_listautoptr = [*c]GList;
pub const GUri_slistautoptr = [*c]GSList;
pub const GUri_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GUri(arg__ptr: ?*GUri) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_uri_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GUri(arg__ptr: [*c]?*GUri) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GUri(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GUri(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_uri_unref)))));
}
pub fn glib_slistautoptr_cleanup_GUri(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_uri_unref)))));
}
pub fn glib_queueautoptr_cleanup_GUri(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_uri_unref)))));
    }
}
pub extern fn _frida_glib_init() void;
pub extern fn _frida_glib_enable_io_features() void;
pub extern fn _frida_glib_shutdown() void;
pub extern fn _frida_glib_deinit() void;
pub extern fn _frida_glib_prepare_to_fork() void;
pub extern fn _frida_glib_recover_from_fork_in_parent() void;
pub extern fn _frida_glib_recover_from_fork_in_child() void;
pub const GType = gsize;
const union_unnamed_43 = extern union {
    v_int: gint,
    v_uint: guint,
    v_long: glong,
    v_ulong: gulong,
    v_int64: gint64,
    v_uint64: guint64,
    v_float: gfloat,
    v_double: gdouble,
    v_pointer: gpointer,
};
pub const struct__GValue = extern struct {
    g_type: GType,
    data: [2]union_unnamed_43,
};
pub const GValue = struct__GValue;
pub const union__GTypeCValue = opaque {};
pub const GTypeCValue = union__GTypeCValue;
pub const struct__GTypePlugin = opaque {};
pub const GTypePlugin = struct__GTypePlugin;
pub const struct__GTypeClass = extern struct {
    g_type: GType,
};
pub const GTypeClass = struct__GTypeClass;
pub const struct__GTypeInterface = extern struct {
    g_type: GType,
    g_instance_type: GType,
};
pub const GTypeInterface = struct__GTypeInterface;
pub const struct__GTypeInstance = extern struct {
    g_class: [*c]GTypeClass,
};
pub const GTypeInstance = struct__GTypeInstance;
pub const GBaseInitFunc = ?*const fn (gpointer) callconv(.C) void;
pub const GBaseFinalizeFunc = ?*const fn (gpointer) callconv(.C) void;
pub const GClassInitFunc = ?*const fn (gpointer, gpointer) callconv(.C) void;
pub const GClassFinalizeFunc = ?*const fn (gpointer, gpointer) callconv(.C) void;
pub const GInstanceInitFunc = ?*const fn ([*c]GTypeInstance, gpointer) callconv(.C) void;
pub const struct__GTypeValueTable = extern struct {
    value_init: ?*const fn ([*c]GValue) callconv(.C) void,
    value_free: ?*const fn ([*c]GValue) callconv(.C) void,
    value_copy: ?*const fn ([*c]const GValue, [*c]GValue) callconv(.C) void,
    value_peek_pointer: ?*const fn ([*c]const GValue) callconv(.C) gpointer,
    collect_format: [*c]const gchar,
    collect_value: ?*const fn ([*c]GValue, guint, ?*GTypeCValue, guint) callconv(.C) [*c]gchar,
    lcopy_format: [*c]const gchar,
    lcopy_value: ?*const fn ([*c]const GValue, guint, ?*GTypeCValue, guint) callconv(.C) [*c]gchar,
};
pub const GTypeValueTable = struct__GTypeValueTable;
pub const struct__GTypeInfo = extern struct {
    class_size: guint16,
    base_init: GBaseInitFunc,
    base_finalize: GBaseFinalizeFunc,
    class_init: GClassInitFunc,
    class_finalize: GClassFinalizeFunc,
    class_data: gconstpointer,
    instance_size: guint16,
    n_preallocs: guint16,
    instance_init: GInstanceInitFunc,
    value_table: [*c]const GTypeValueTable,
};
pub const GTypeInfo = struct__GTypeInfo;
pub const struct__GTypeFundamentalInfo = extern struct {
    type_flags: GTypeFundamentalFlags,
};
pub const GTypeFundamentalInfo = struct__GTypeFundamentalInfo;
pub const GInterfaceInitFunc = ?*const fn (gpointer, gpointer) callconv(.C) void;
pub const GInterfaceFinalizeFunc = ?*const fn (gpointer, gpointer) callconv(.C) void;
pub const struct__GInterfaceInfo = extern struct {
    interface_init: GInterfaceInitFunc,
    interface_finalize: GInterfaceFinalizeFunc,
    interface_data: gpointer,
};
pub const GInterfaceInfo = struct__GInterfaceInfo;
pub const struct__GTypeQuery = extern struct {
    type: GType,
    type_name: [*c]const gchar,
    class_size: guint,
    instance_size: guint,
};
pub const GTypeQuery = struct__GTypeQuery;
pub const G_TYPE_DEBUG_NONE: c_int = 0;
pub const G_TYPE_DEBUG_OBJECTS: c_int = 1;
pub const G_TYPE_DEBUG_SIGNALS: c_int = 2;
pub const G_TYPE_DEBUG_INSTANCE_COUNT: c_int = 4;
pub const G_TYPE_DEBUG_MASK: c_int = 7;
pub const GTypeDebugFlags = c_uint;
pub extern fn _frida_gobject_init() void;
pub extern fn _frida_g_type_init() void;
pub extern fn _frida_g_type_init_with_debug_flags(debug_flags: GTypeDebugFlags) void;
pub extern fn _frida_g_type_name(@"type": GType) [*c]const gchar;
pub extern fn _frida_g_type_qname(@"type": GType) GQuark;
pub extern fn _frida_g_type_from_name(name: [*c]const gchar) GType;
pub extern fn _frida_g_type_parent(@"type": GType) GType;
pub extern fn _frida_g_type_depth(@"type": GType) guint;
pub extern fn _frida_g_type_next_base(leaf_type: GType, root_type: GType) GType;
pub extern fn _frida_g_type_is_a(@"type": GType, is_a_type: GType) gboolean;
pub extern fn _frida_g_type_class_ref(@"type": GType) gpointer;
pub extern fn _frida_g_type_class_peek(@"type": GType) gpointer;
pub extern fn _frida_g_type_class_peek_static(@"type": GType) gpointer;
pub extern fn _frida_g_type_class_unref(g_class: gpointer) void;
pub extern fn _frida_g_type_class_peek_parent(g_class: gpointer) gpointer;
pub extern fn _frida_g_type_interface_peek(instance_class: gpointer, iface_type: GType) gpointer;
pub extern fn _frida_g_type_interface_peek_parent(g_iface: gpointer) gpointer;
pub extern fn _frida_g_type_default_interface_ref(g_type: GType) gpointer;
pub extern fn _frida_g_type_default_interface_peek(g_type: GType) gpointer;
pub extern fn _frida_g_type_default_interface_unref(g_iface: gpointer) void;
pub extern fn _frida_g_type_children(@"type": GType, n_children: [*c]guint) [*c]GType;
pub extern fn _frida_g_type_interfaces(@"type": GType, n_interfaces: [*c]guint) [*c]GType;
pub extern fn _frida_g_type_set_qdata(@"type": GType, quark: GQuark, data: gpointer) void;
pub extern fn _frida_g_type_get_qdata(@"type": GType, quark: GQuark) gpointer;
pub extern fn _frida_g_type_query(@"type": GType, query: [*c]GTypeQuery) void;
pub extern fn _frida_g_type_get_instance_count(@"type": GType) c_int;
pub const GTypeClassCacheFunc = ?*const fn (gpointer, [*c]GTypeClass) callconv(.C) gboolean;
pub const GTypeInterfaceCheckFunc = ?*const fn (gpointer, gpointer) callconv(.C) void;
pub const G_TYPE_FLAG_CLASSED: c_int = 1;
pub const G_TYPE_FLAG_INSTANTIATABLE: c_int = 2;
pub const G_TYPE_FLAG_DERIVABLE: c_int = 4;
pub const G_TYPE_FLAG_DEEP_DERIVABLE: c_int = 8;
pub const GTypeFundamentalFlags = c_uint;
pub const G_TYPE_FLAG_NONE: c_int = 0;
pub const G_TYPE_FLAG_ABSTRACT: c_int = 16;
pub const G_TYPE_FLAG_VALUE_ABSTRACT: c_int = 32;
pub const G_TYPE_FLAG_FINAL: c_int = 64;
pub const GTypeFlags = c_uint;
pub extern fn _frida_g_type_register_static(parent_type: GType, type_name: [*c]const gchar, info: [*c]const GTypeInfo, flags: GTypeFlags) GType;
pub extern fn _frida_g_type_register_static_simple(parent_type: GType, type_name: [*c]const gchar, class_size: guint, class_init: GClassInitFunc, instance_size: guint, instance_init: GInstanceInitFunc, flags: GTypeFlags) GType;
pub extern fn _frida_g_type_register_dynamic(parent_type: GType, type_name: [*c]const gchar, plugin: ?*GTypePlugin, flags: GTypeFlags) GType;
pub extern fn _frida_g_type_register_fundamental(type_id: GType, type_name: [*c]const gchar, info: [*c]const GTypeInfo, finfo: [*c]const GTypeFundamentalInfo, flags: GTypeFlags) GType;
pub extern fn _frida_g_type_add_interface_static(instance_type: GType, interface_type: GType, info: [*c]const GInterfaceInfo) void;
pub extern fn _frida_g_type_add_interface_dynamic(instance_type: GType, interface_type: GType, plugin: ?*GTypePlugin) void;
pub extern fn _frida_g_type_interface_add_prerequisite(interface_type: GType, prerequisite_type: GType) void;
pub extern fn _frida_g_type_interface_prerequisites(interface_type: GType, n_prerequisites: [*c]guint) [*c]GType;
pub extern fn _frida_g_type_interface_instantiatable_prerequisite(interface_type: GType) GType;
pub extern fn _frida_g_type_class_add_private(g_class: gpointer, private_size: gsize) void;
pub extern fn _frida_g_type_add_instance_private(class_type: GType, private_size: gsize) gint;
pub extern fn _frida_g_type_instance_get_private(instance: [*c]GTypeInstance, private_type: GType) gpointer;
pub extern fn _frida_g_type_class_adjust_private_offset(g_class: gpointer, private_size_or_offset: [*c]gint) void;
pub extern fn _frida_g_type_add_class_private(class_type: GType, private_size: gsize) void;
pub extern fn _frida_g_type_class_get_private(klass: [*c]GTypeClass, private_type: GType) gpointer;
pub extern fn _frida_g_type_class_get_instance_private_offset(g_class: gpointer) gint;
pub extern fn _frida_g_type_ensure(@"type": GType) void;
pub extern fn _frida_g_type_get_type_registration_serial() guint;
pub extern fn _frida_g_type_get_plugin(@"type": GType) ?*GTypePlugin;
pub extern fn _frida_g_type_interface_get_plugin(instance_type: GType, interface_type: GType) ?*GTypePlugin;
pub extern fn _frida_g_type_fundamental_next() GType;
pub extern fn _frida_g_type_fundamental(type_id: GType) GType;
pub extern fn _frida_g_type_create_instance(@"type": GType) [*c]GTypeInstance;
pub extern fn _frida_g_type_free_instance(instance: [*c]GTypeInstance) void;
pub extern fn _frida_g_type_add_class_cache_func(cache_data: gpointer, cache_func: GTypeClassCacheFunc) void;
pub extern fn _frida_g_type_remove_class_cache_func(cache_data: gpointer, cache_func: GTypeClassCacheFunc) void;
pub extern fn _frida_g_type_class_unref_uncached(g_class: gpointer) void;
pub extern fn _frida_g_type_add_interface_check(check_data: gpointer, check_func: GTypeInterfaceCheckFunc) void;
pub extern fn _frida_g_type_remove_interface_check(check_data: gpointer, check_func: GTypeInterfaceCheckFunc) void;
pub extern fn _frida_g_type_value_table_peek(@"type": GType) [*c]GTypeValueTable;
pub extern fn _frida_g_type_check_instance(instance: [*c]GTypeInstance) gboolean;
pub extern fn _frida_g_type_check_instance_cast(instance: [*c]GTypeInstance, iface_type: GType) [*c]GTypeInstance;
pub extern fn _frida_g_type_check_instance_is_a(instance: [*c]GTypeInstance, iface_type: GType) gboolean;
pub extern fn _frida_g_type_check_instance_is_fundamentally_a(instance: [*c]GTypeInstance, fundamental_type: GType) gboolean;
pub extern fn _frida_g_type_check_class_cast(g_class: [*c]GTypeClass, is_a_type: GType) [*c]GTypeClass;
pub extern fn _frida_g_type_check_class_is_a(g_class: [*c]GTypeClass, is_a_type: GType) gboolean;
pub extern fn _frida_g_type_check_is_value_type(@"type": GType) gboolean;
pub extern fn _frida_g_type_check_value(value: [*c]const GValue) gboolean;
pub extern fn _frida_g_type_check_value_holds(value: [*c]const GValue, @"type": GType) gboolean;
pub extern fn _frida_g_type_test_flags(@"type": GType, flags: guint) gboolean;
pub extern fn _frida_g_type_name_from_instance(instance: [*c]GTypeInstance) [*c]const gchar;
pub extern fn _frida_g_type_name_from_class(g_class: [*c]GTypeClass) [*c]const gchar;
pub const GValueTransform = ?*const fn ([*c]const GValue, [*c]GValue) callconv(.C) void;
pub extern fn _frida_g_value_init(value: [*c]GValue, g_type: GType) [*c]GValue;
pub extern fn _frida_g_value_copy(src_value: [*c]const GValue, dest_value: [*c]GValue) void;
pub extern fn _frida_g_value_reset(value: [*c]GValue) [*c]GValue;
pub extern fn _frida_g_value_unset(value: [*c]GValue) void;
pub extern fn _frida_g_value_set_instance(value: [*c]GValue, instance: gpointer) void;
pub extern fn _frida_g_value_init_from_instance(value: [*c]GValue, instance: gpointer) void;
pub extern fn _frida_g_value_fits_pointer(value: [*c]const GValue) gboolean;
pub extern fn _frida_g_value_peek_pointer(value: [*c]const GValue) gpointer;
pub extern fn _frida_g_value_type_compatible(src_type: GType, dest_type: GType) gboolean;
pub extern fn _frida_g_value_type_transformable(src_type: GType, dest_type: GType) gboolean;
pub extern fn _frida_g_value_transform(src_value: [*c]const GValue, dest_value: [*c]GValue) gboolean;
pub extern fn _frida_g_value_register_transform_func(src_type: GType, dest_type: GType, transform_func: GValueTransform) void;
pub const G_PARAM_READABLE: c_int = 1;
pub const G_PARAM_WRITABLE: c_int = 2;
pub const G_PARAM_READWRITE: c_int = 3;
pub const G_PARAM_CONSTRUCT: c_int = 4;
pub const G_PARAM_CONSTRUCT_ONLY: c_int = 8;
pub const G_PARAM_LAX_VALIDATION: c_int = 16;
pub const G_PARAM_STATIC_NAME: c_int = 32;
pub const G_PARAM_PRIVATE: c_int = 32;
pub const G_PARAM_STATIC_NICK: c_int = 64;
pub const G_PARAM_STATIC_BLURB: c_int = 128;
pub const G_PARAM_EXPLICIT_NOTIFY: c_int = 1073741824;
pub const G_PARAM_DEPRECATED: c_int = -2147483648;
pub const GParamFlags = c_int;
pub const struct__GParamSpec = extern struct {
    g_type_instance: GTypeInstance,
    name: [*c]const gchar,
    flags: GParamFlags,
    value_type: GType,
    owner_type: GType,
    _nick: [*c]gchar,
    _blurb: [*c]gchar,
    qdata: ?*GData,
    ref_count: guint,
    param_id: guint,
};
pub const GParamSpec = struct__GParamSpec;
pub const struct__GParamSpecClass = extern struct {
    g_type_class: GTypeClass,
    value_type: GType,
    finalize: ?*const fn ([*c]GParamSpec) callconv(.C) void,
    value_set_default: ?*const fn ([*c]GParamSpec, [*c]GValue) callconv(.C) void,
    value_validate: ?*const fn ([*c]GParamSpec, [*c]GValue) callconv(.C) gboolean,
    values_cmp: ?*const fn ([*c]GParamSpec, [*c]const GValue, [*c]const GValue) callconv(.C) gint,
    value_is_valid: ?*const fn ([*c]GParamSpec, [*c]const GValue) callconv(.C) gboolean,
    dummy: [3]gpointer,
};
pub const GParamSpecClass = struct__GParamSpecClass;
pub const struct__GParameter = extern struct {
    name: [*c]const gchar,
    value: GValue,
};
pub const GParameter = struct__GParameter;
pub const struct__GParamSpecPool = opaque {};
pub const GParamSpecPool = struct__GParamSpecPool;
pub extern fn _frida_g_param_spec_ref(pspec: [*c]GParamSpec) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_unref(pspec: [*c]GParamSpec) void;
pub extern fn _frida_g_param_spec_sink(pspec: [*c]GParamSpec) void;
pub extern fn _frida_g_param_spec_ref_sink(pspec: [*c]GParamSpec) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_get_qdata(pspec: [*c]GParamSpec, quark: GQuark) gpointer;
pub extern fn _frida_g_param_spec_set_qdata(pspec: [*c]GParamSpec, quark: GQuark, data: gpointer) void;
pub extern fn _frida_g_param_spec_set_qdata_full(pspec: [*c]GParamSpec, quark: GQuark, data: gpointer, destroy: GDestroyNotify) void;
pub extern fn _frida_g_param_spec_steal_qdata(pspec: [*c]GParamSpec, quark: GQuark) gpointer;
pub extern fn _frida_g_param_spec_get_redirect_target(pspec: [*c]GParamSpec) [*c]GParamSpec;
pub extern fn _frida_g_param_value_set_default(pspec: [*c]GParamSpec, value: [*c]GValue) void;
pub extern fn _frida_g_param_value_defaults(pspec: [*c]GParamSpec, value: [*c]const GValue) gboolean;
pub extern fn _frida_g_param_value_validate(pspec: [*c]GParamSpec, value: [*c]GValue) gboolean;
pub extern fn _frida_g_param_value_is_valid(pspec: [*c]GParamSpec, value: [*c]const GValue) gboolean;
pub extern fn _frida_g_param_value_convert(pspec: [*c]GParamSpec, src_value: [*c]const GValue, dest_value: [*c]GValue, strict_validation: gboolean) gboolean;
pub extern fn _frida_g_param_values_cmp(pspec: [*c]GParamSpec, value1: [*c]const GValue, value2: [*c]const GValue) gint;
pub extern fn _frida_g_param_spec_get_name(pspec: [*c]GParamSpec) [*c]const gchar;
pub extern fn _frida_g_param_spec_get_nick(pspec: [*c]GParamSpec) [*c]const gchar;
pub extern fn _frida_g_param_spec_get_blurb(pspec: [*c]GParamSpec) [*c]const gchar;
pub extern fn _frida_g_value_set_param(value: [*c]GValue, param: [*c]GParamSpec) void;
pub extern fn _frida_g_value_get_param(value: [*c]const GValue) [*c]GParamSpec;
pub extern fn _frida_g_value_dup_param(value: [*c]const GValue) [*c]GParamSpec;
pub extern fn _frida_g_value_take_param(value: [*c]GValue, param: [*c]GParamSpec) void;
pub extern fn _frida_g_value_set_param_take_ownership(value: [*c]GValue, param: [*c]GParamSpec) void;
pub extern fn _frida_g_param_spec_get_default_value(pspec: [*c]GParamSpec) [*c]const GValue;
pub extern fn _frida_g_param_spec_get_name_quark(pspec: [*c]GParamSpec) GQuark;
pub const struct__GParamSpecTypeInfo = extern struct {
    instance_size: guint16,
    n_preallocs: guint16,
    instance_init: ?*const fn ([*c]GParamSpec) callconv(.C) void,
    value_type: GType,
    finalize: ?*const fn ([*c]GParamSpec) callconv(.C) void,
    value_set_default: ?*const fn ([*c]GParamSpec, [*c]GValue) callconv(.C) void,
    value_validate: ?*const fn ([*c]GParamSpec, [*c]GValue) callconv(.C) gboolean,
    values_cmp: ?*const fn ([*c]GParamSpec, [*c]const GValue, [*c]const GValue) callconv(.C) gint,
};
pub const GParamSpecTypeInfo = struct__GParamSpecTypeInfo;
pub extern fn _frida_g_param_type_register_static(name: [*c]const gchar, pspec_info: [*c]const GParamSpecTypeInfo) GType;
pub extern fn _frida_g_param_spec_is_valid_name(name: [*c]const gchar) gboolean;
pub extern fn _g_param_type_register_static_constant(name: [*c]const gchar, pspec_info: [*c]const GParamSpecTypeInfo, opt_type: GType) GType;
pub extern fn _frida_g_param_spec_internal(param_type: GType, name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, flags: GParamFlags) gpointer;
pub extern fn _frida_g_param_spec_pool_new(type_prefixing: gboolean) ?*GParamSpecPool;
pub extern fn _frida_g_param_spec_pool_insert(pool: ?*GParamSpecPool, pspec: [*c]GParamSpec, owner_type: GType) void;
pub extern fn _frida_g_param_spec_pool_remove(pool: ?*GParamSpecPool, pspec: [*c]GParamSpec) void;
pub extern fn _frida_g_param_spec_pool_lookup(pool: ?*GParamSpecPool, param_name: [*c]const gchar, owner_type: GType, walk_ancestors: gboolean) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_pool_list_owned(pool: ?*GParamSpecPool, owner_type: GType) [*c]GList;
pub extern fn _frida_g_param_spec_pool_list(pool: ?*GParamSpecPool, owner_type: GType, n_pspecs_p: [*c]guint) [*c][*c]GParamSpec; // lib/frida-core/frida-core.h:30937:9: warning: struct demoted to opaque type - has bitfield
pub const struct__GClosure = opaque {};
pub const GClosure = struct__GClosure;
pub const GClosureNotify = ?*const fn (gpointer, ?*GClosure) callconv(.C) void;
pub const struct__GClosureNotifyData = extern struct {
    data: gpointer,
    notify: GClosureNotify,
};
pub const GClosureNotifyData = struct__GClosureNotifyData;
pub const GCallback = ?*const fn () callconv(.C) void;
pub const GClosureMarshal = ?*const fn (?*GClosure, [*c]GValue, guint, [*c]const GValue, gpointer, gpointer) callconv(.C) void;
pub const GVaClosureMarshal = ?*const fn (?*GClosure, [*c]GValue, gpointer, [*c]struct___va_list_tag, gpointer, c_int, [*c]GType) callconv(.C) void;
pub const struct__GCClosure = extern struct {
    closure: GClosure,
    callback: gpointer,
};
pub const GCClosure = struct__GCClosure;
pub extern fn _frida_g_cclosure_new(callback_func: GCallback, user_data: gpointer, destroy_data: GClosureNotify) ?*GClosure;
pub extern fn _frida_g_cclosure_new_swap(callback_func: GCallback, user_data: gpointer, destroy_data: GClosureNotify) ?*GClosure;
pub extern fn _frida_g_signal_type_cclosure_new(itype: GType, struct_offset: guint) ?*GClosure;
pub extern fn _frida_g_closure_ref(closure: ?*GClosure) ?*GClosure;
pub extern fn _frida_g_closure_sink(closure: ?*GClosure) void;
pub extern fn _frida_g_closure_unref(closure: ?*GClosure) void;
pub extern fn _frida_g_closure_new_simple(sizeof_closure: guint, data: gpointer) ?*GClosure;
pub extern fn _frida_g_closure_add_finalize_notifier(closure: ?*GClosure, notify_data: gpointer, notify_func: GClosureNotify) void;
pub extern fn _frida_g_closure_remove_finalize_notifier(closure: ?*GClosure, notify_data: gpointer, notify_func: GClosureNotify) void;
pub extern fn _frida_g_closure_add_invalidate_notifier(closure: ?*GClosure, notify_data: gpointer, notify_func: GClosureNotify) void;
pub extern fn _frida_g_closure_remove_invalidate_notifier(closure: ?*GClosure, notify_data: gpointer, notify_func: GClosureNotify) void;
pub extern fn _frida_g_closure_add_marshal_guards(closure: ?*GClosure, pre_marshal_data: gpointer, pre_marshal_notify: GClosureNotify, post_marshal_data: gpointer, post_marshal_notify: GClosureNotify) void;
pub extern fn _frida_g_closure_set_marshal(closure: ?*GClosure, marshal: GClosureMarshal) void;
pub extern fn _frida_g_closure_set_meta_marshal(closure: ?*GClosure, marshal_data: gpointer, meta_marshal: GClosureMarshal) void;
pub extern fn _frida_g_closure_invalidate(closure: ?*GClosure) void;
pub extern fn _frida_g_closure_invoke(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_generic(closure: ?*GClosure, return_gvalue: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_generic_va(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args_list: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__VOID(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__VOIDv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__BOOLEAN(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__BOOLEANv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__CHAR(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__CHARv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__UCHAR(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__UCHARv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__INT(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__INTv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__UINT(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__UINTv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__LONG(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__LONGv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__ULONG(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__ULONGv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__ENUM(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__ENUMv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__FLAGS(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__FLAGSv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__FLOAT(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__FLOATv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__DOUBLE(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__DOUBLEv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__STRING(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__STRINGv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__PARAM(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__PARAMv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__BOXED(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__BOXEDv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__POINTER(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__POINTERv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__OBJECT(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__OBJECTv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__VARIANT(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__VARIANTv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_VOID__UINT_POINTER(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_VOID__UINT_POINTERv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_BOOLEAN__FLAGS(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_BOOLEAN__FLAGSv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_STRING__OBJECT_POINTER(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_STRING__OBJECT_POINTERv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub extern fn _frida_g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure: ?*GClosure, return_value: [*c]GValue, n_param_values: guint, param_values: [*c]const GValue, invocation_hint: gpointer, marshal_data: gpointer) void;
pub extern fn _frida_g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure: ?*GClosure, return_value: [*c]GValue, instance: gpointer, args: [*c]struct___va_list_tag, marshal_data: gpointer, n_params: c_int, param_types: [*c]GType) void;
pub const struct__GSignalQuery = extern struct {
    signal_id: guint,
    signal_name: [*c]const gchar,
    itype: GType,
    signal_flags: GSignalFlags,
    return_type: GType,
    n_params: guint,
    param_types: [*c]const GType,
};
pub const GSignalQuery = struct__GSignalQuery;
pub const struct__GSignalInvocationHint = extern struct {
    signal_id: guint,
    detail: GQuark,
    run_type: GSignalFlags,
};
pub const GSignalInvocationHint = struct__GSignalInvocationHint;
pub const GSignalCMarshaller = GClosureMarshal;
pub const GSignalCVaMarshaller = GVaClosureMarshal;
pub const GSignalEmissionHook = ?*const fn ([*c]GSignalInvocationHint, guint, [*c]const GValue, gpointer) callconv(.C) gboolean;
pub const GSignalAccumulator = ?*const fn ([*c]GSignalInvocationHint, [*c]GValue, [*c]const GValue, gpointer) callconv(.C) gboolean;
pub const G_SIGNAL_RUN_FIRST: c_int = 1;
pub const G_SIGNAL_RUN_LAST: c_int = 2;
pub const G_SIGNAL_RUN_CLEANUP: c_int = 4;
pub const G_SIGNAL_NO_RECURSE: c_int = 8;
pub const G_SIGNAL_DETAILED: c_int = 16;
pub const G_SIGNAL_ACTION: c_int = 32;
pub const G_SIGNAL_NO_HOOKS: c_int = 64;
pub const G_SIGNAL_MUST_COLLECT: c_int = 128;
pub const G_SIGNAL_DEPRECATED: c_int = 256;
pub const G_SIGNAL_ACCUMULATOR_FIRST_RUN: c_int = 131072;
pub const GSignalFlags = c_uint;
pub const G_CONNECT_DEFAULT: c_int = 0;
pub const G_CONNECT_AFTER: c_int = 1;
pub const G_CONNECT_SWAPPED: c_int = 2;
pub const GConnectFlags = c_uint;
pub const G_SIGNAL_MATCH_ID: c_int = 1;
pub const G_SIGNAL_MATCH_DETAIL: c_int = 2;
pub const G_SIGNAL_MATCH_CLOSURE: c_int = 4;
pub const G_SIGNAL_MATCH_FUNC: c_int = 8;
pub const G_SIGNAL_MATCH_DATA: c_int = 16;
pub const G_SIGNAL_MATCH_UNBLOCKED: c_int = 32;
pub const GSignalMatchType = c_uint;
pub extern fn _frida_g_signal_newv(signal_name: [*c]const gchar, itype: GType, signal_flags: GSignalFlags, class_closure: ?*GClosure, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, param_types: [*c]GType) guint;
pub extern fn _frida_g_signal_new_valist(signal_name: [*c]const gchar, itype: GType, signal_flags: GSignalFlags, class_closure: ?*GClosure, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, args: [*c]struct___va_list_tag) guint;
pub extern fn _frida_g_signal_new(signal_name: [*c]const gchar, itype: GType, signal_flags: GSignalFlags, class_offset: guint, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, ...) guint;
pub extern fn _frida_g_signal_new_class_handler(signal_name: [*c]const gchar, itype: GType, signal_flags: GSignalFlags, class_handler: GCallback, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, ...) guint;
pub extern fn _frida_g_signal_set_va_marshaller(signal_id: guint, instance_type: GType, va_marshaller: GSignalCVaMarshaller) void;
pub extern fn _frida_g_signal_emitv(instance_and_params: [*c]const GValue, signal_id: guint, detail: GQuark, return_value: [*c]GValue) void;
pub extern fn _frida_g_signal_emit_valist(instance: gpointer, signal_id: guint, detail: GQuark, var_args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_signal_emit(instance: gpointer, signal_id: guint, detail: GQuark, ...) void;
pub extern fn _frida_g_signal_emit_by_name(instance: gpointer, detailed_signal: [*c]const gchar, ...) void;
pub extern fn _frida_g_signal_lookup(name: [*c]const gchar, itype: GType) guint;
pub extern fn _frida_g_signal_name(signal_id: guint) [*c]const gchar;
pub extern fn _frida_g_signal_query(signal_id: guint, query: [*c]GSignalQuery) void;
pub extern fn _frida_g_signal_list_ids(itype: GType, n_ids: [*c]guint) [*c]guint;
pub extern fn _frida_g_signal_is_valid_name(name: [*c]const gchar) gboolean;
pub extern fn _frida_g_signal_parse_name(detailed_signal: [*c]const gchar, itype: GType, signal_id_p: [*c]guint, detail_p: [*c]GQuark, force_detail_quark: gboolean) gboolean;
pub extern fn _frida_g_signal_get_invocation_hint(instance: gpointer) [*c]GSignalInvocationHint;
pub extern fn _frida_g_signal_stop_emission(instance: gpointer, signal_id: guint, detail: GQuark) void;
pub extern fn _frida_g_signal_stop_emission_by_name(instance: gpointer, detailed_signal: [*c]const gchar) void;
pub extern fn _frida_g_signal_add_emission_hook(signal_id: guint, detail: GQuark, hook_func: GSignalEmissionHook, hook_data: gpointer, data_destroy: GDestroyNotify) gulong;
pub extern fn _frida_g_signal_remove_emission_hook(signal_id: guint, hook_id: gulong) void;
pub extern fn _frida_g_signal_has_handler_pending(instance: gpointer, signal_id: guint, detail: GQuark, may_be_blocked: gboolean) gboolean;
pub extern fn _frida_g_signal_connect_closure_by_id(instance: gpointer, signal_id: guint, detail: GQuark, closure: ?*GClosure, after: gboolean) gulong;
pub extern fn _frida_g_signal_connect_closure(instance: gpointer, detailed_signal: [*c]const gchar, closure: ?*GClosure, after: gboolean) gulong;
pub extern fn _frida_g_signal_connect_data(instance: gpointer, detailed_signal: [*c]const gchar, c_handler: GCallback, data: gpointer, destroy_data: GClosureNotify, connect_flags: GConnectFlags) gulong;
pub extern fn _frida_g_signal_handler_block(instance: gpointer, handler_id: gulong) void;
pub extern fn _frida_g_signal_handler_unblock(instance: gpointer, handler_id: gulong) void;
pub extern fn _frida_g_signal_handler_disconnect(instance: gpointer, handler_id: gulong) void;
pub extern fn _frida_g_signal_handler_is_connected(instance: gpointer, handler_id: gulong) gboolean;
pub extern fn _frida_g_signal_handler_find(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: ?*GClosure, func: gpointer, data: gpointer) gulong;
pub extern fn _frida_g_signal_handlers_block_matched(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: ?*GClosure, func: gpointer, data: gpointer) guint;
pub extern fn _frida_g_signal_handlers_unblock_matched(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: ?*GClosure, func: gpointer, data: gpointer) guint;
pub extern fn _frida_g_signal_handlers_disconnect_matched(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: ?*GClosure, func: gpointer, data: gpointer) guint;
pub extern fn _frida_g_clear_signal_handler(handler_id_ptr: [*c]gulong, instance: gpointer) void;
pub extern fn _frida_g_signal_override_class_closure(signal_id: guint, instance_type: GType, class_closure: ?*GClosure) void;
pub extern fn _frida_g_signal_override_class_handler(signal_name: [*c]const gchar, instance_type: GType, class_handler: GCallback) void;
pub extern fn _frida_g_signal_chain_from_overridden(instance_and_params: [*c]const GValue, return_value: [*c]GValue) void;
pub extern fn _frida_g_signal_chain_from_overridden_handler(instance: gpointer, ...) void;
pub extern fn _frida_g_signal_accumulator_true_handled(ihint: [*c]GSignalInvocationHint, return_accu: [*c]GValue, handler_return: [*c]const GValue, dummy: gpointer) gboolean;
pub extern fn _frida_g_signal_accumulator_first_wins(ihint: [*c]GSignalInvocationHint, return_accu: [*c]GValue, handler_return: [*c]const GValue, dummy: gpointer) gboolean;
pub extern fn _frida_g_signal_handlers_destroy(instance: gpointer) void;
pub extern fn _g_signals_destroy(itype: GType) void;
pub extern fn _frida_g_date_get_type() GType;
pub extern fn _frida_g_strv_get_type() GType;
pub extern fn _frida_g_gstring_get_type() GType;
pub extern fn _frida_g_hash_table_get_type() GType;
pub extern fn _frida_g_array_get_type() GType;
pub extern fn _frida_g_byte_array_get_type() GType;
pub extern fn _frida_g_ptr_array_get_type() GType;
pub extern fn _frida_g_bytes_get_type() GType;
pub extern fn _frida_g_variant_type_get_gtype() GType;
pub extern fn _frida_g_regex_get_type() GType;
pub extern fn _frida_g_match_info_get_type() GType;
pub extern fn _frida_g_error_get_type() GType;
pub extern fn _frida_g_date_time_get_type() GType;
pub extern fn _frida_g_time_zone_get_type() GType;
pub extern fn _frida_g_io_channel_get_type() GType;
pub extern fn _frida_g_io_condition_get_type() GType;
pub extern fn _frida_g_variant_builder_get_type() GType;
pub extern fn _frida_g_variant_dict_get_type() GType;
pub extern fn _frida_g_key_file_get_type() GType;
pub extern fn _frida_g_main_loop_get_type() GType;
pub extern fn _frida_g_main_context_get_type() GType;
pub extern fn _frida_g_source_get_type() GType;
pub extern fn _frida_g_pollfd_get_type() GType;
pub extern fn _frida_g_thread_get_type() GType;
pub extern fn _frida_g_checksum_get_type() GType;
pub extern fn _frida_g_markup_parse_context_get_type() GType;
pub extern fn _frida_g_mapped_file_get_type() GType;
pub extern fn _frida_g_option_group_get_type() GType;
pub extern fn _frida_g_uri_get_type() GType;
pub extern fn _frida_g_tree_get_type() GType;
pub extern fn _frida_g_pattern_spec_get_type() GType;
pub extern fn _frida_g_bookmark_file_get_type() GType;
pub extern fn _frida_g_variant_get_gtype() GType;
pub const GBoxedCopyFunc = ?*const fn (gpointer) callconv(.C) gpointer;
pub const GBoxedFreeFunc = ?*const fn (gpointer) callconv(.C) void;
pub extern fn _frida_g_boxed_copy(boxed_type: GType, src_boxed: gconstpointer) gpointer;
pub extern fn _frida_g_boxed_free(boxed_type: GType, boxed: gpointer) void;
pub extern fn _frida_g_value_set_boxed(value: [*c]GValue, v_boxed: gconstpointer) void;
pub extern fn _frida_g_value_set_static_boxed(value: [*c]GValue, v_boxed: gconstpointer) void;
pub extern fn _frida_g_value_take_boxed(value: [*c]GValue, v_boxed: gconstpointer) void;
pub extern fn _frida_g_value_set_boxed_take_ownership(value: [*c]GValue, v_boxed: gconstpointer) void;
pub extern fn _frida_g_value_get_boxed(value: [*c]const GValue) gpointer;
pub extern fn _frida_g_value_dup_boxed(value: [*c]const GValue) gpointer;
pub extern fn _frida_g_boxed_type_register_static(name: [*c]const gchar, boxed_copy: GBoxedCopyFunc, boxed_free: GBoxedFreeFunc) GType;
pub extern fn _frida_g_closure_get_type() GType;
pub extern fn _frida_g_value_get_type() GType;
pub const struct__GObject = extern struct {
    g_type_instance: GTypeInstance,
    ref_count: guint,
    qdata: ?*GData,
};
pub const GObject = struct__GObject;
pub const struct__GObjectConstructParam = extern struct {
    pspec: [*c]GParamSpec,
    value: [*c]GValue,
};
pub const GObjectConstructParam = struct__GObjectConstructParam;
pub const struct__GObjectClass = extern struct {
    g_type_class: GTypeClass,
    construct_properties: [*c]GSList,
    constructor: ?*const fn (GType, guint, [*c]GObjectConstructParam) callconv(.C) [*c]GObject,
    set_property: ?*const fn ([*c]GObject, guint, [*c]const GValue, [*c]GParamSpec) callconv(.C) void,
    get_property: ?*const fn ([*c]GObject, guint, [*c]GValue, [*c]GParamSpec) callconv(.C) void,
    dispose: ?*const fn ([*c]GObject) callconv(.C) void,
    finalize: ?*const fn ([*c]GObject) callconv(.C) void,
    dispatch_properties_changed: ?*const fn ([*c]GObject, guint, [*c][*c]GParamSpec) callconv(.C) void,
    notify: ?*const fn ([*c]GObject, [*c]GParamSpec) callconv(.C) void,
    constructed: ?*const fn ([*c]GObject) callconv(.C) void,
    flags: gsize,
    n_construct_properties: gsize,
    pspecs: gpointer,
    n_pspecs: gsize,
    pdummy: [3]gpointer,
};
pub const GObjectClass = struct__GObjectClass;
pub const GInitiallyUnowned = struct__GObject;
pub const GInitiallyUnownedClass = struct__GObjectClass;
pub const GObjectGetPropertyFunc = ?*const fn ([*c]GObject, guint, [*c]GValue, [*c]GParamSpec) callconv(.C) void;
pub const GObjectSetPropertyFunc = ?*const fn ([*c]GObject, guint, [*c]const GValue, [*c]GParamSpec) callconv(.C) void;
pub const GObjectFinalizeFunc = ?*const fn ([*c]GObject) callconv(.C) void;
pub const GWeakNotify = ?*const fn (gpointer, [*c]GObject) callconv(.C) void;
pub extern fn _frida_g_initially_unowned_get_type() GType;
pub extern fn _frida_g_object_class_install_property(oclass: [*c]GObjectClass, property_id: guint, pspec: [*c]GParamSpec) void;
pub extern fn _frida_g_object_class_find_property(oclass: [*c]GObjectClass, property_name: [*c]const gchar) [*c]GParamSpec;
pub extern fn _frida_g_object_class_list_properties(oclass: [*c]GObjectClass, n_properties: [*c]guint) [*c][*c]GParamSpec;
pub extern fn _frida_g_object_class_override_property(oclass: [*c]GObjectClass, property_id: guint, name: [*c]const gchar) void;
pub extern fn _frida_g_object_class_install_properties(oclass: [*c]GObjectClass, n_pspecs: guint, pspecs: [*c][*c]GParamSpec) void;
pub extern fn _frida_g_object_interface_install_property(g_iface: gpointer, pspec: [*c]GParamSpec) void;
pub extern fn _frida_g_object_interface_find_property(g_iface: gpointer, property_name: [*c]const gchar) [*c]GParamSpec;
pub extern fn _frida_g_object_interface_list_properties(g_iface: gpointer, n_properties_p: [*c]guint) [*c][*c]GParamSpec;
pub extern fn _frida_g_object_get_type() GType;
pub extern fn _frida_g_object_new(object_type: GType, first_property_name: [*c]const gchar, ...) gpointer;
pub extern fn _frida_g_object_new_with_properties(object_type: GType, n_properties: guint, names: [*c][*c]const u8, values: [*c]const GValue) [*c]GObject;
pub extern fn _frida_g_object_newv(object_type: GType, n_parameters: guint, parameters: [*c]GParameter) gpointer;
pub extern fn _frida_g_object_new_valist(object_type: GType, first_property_name: [*c]const gchar, var_args: [*c]struct___va_list_tag) [*c]GObject;
pub extern fn _frida_g_object_set(object: gpointer, first_property_name: [*c]const gchar, ...) void;
pub extern fn _frida_g_object_get(object: gpointer, first_property_name: [*c]const gchar, ...) void;
pub extern fn _frida_g_object_connect(object: gpointer, signal_spec: [*c]const gchar, ...) gpointer;
pub extern fn _frida_g_object_disconnect(object: gpointer, signal_spec: [*c]const gchar, ...) void;
pub extern fn _frida_g_object_setv(object: [*c]GObject, n_properties: guint, names: [*c][*c]const gchar, values: [*c]const GValue) void;
pub extern fn _frida_g_object_set_valist(object: [*c]GObject, first_property_name: [*c]const gchar, var_args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_object_getv(object: [*c]GObject, n_properties: guint, names: [*c][*c]const gchar, values: [*c]GValue) void;
pub extern fn _frida_g_object_get_valist(object: [*c]GObject, first_property_name: [*c]const gchar, var_args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_object_set_property(object: [*c]GObject, property_name: [*c]const gchar, value: [*c]const GValue) void;
pub extern fn _frida_g_object_get_property(object: [*c]GObject, property_name: [*c]const gchar, value: [*c]GValue) void;
pub extern fn _frida_g_object_freeze_notify(object: [*c]GObject) void;
pub extern fn _frida_g_object_notify(object: [*c]GObject, property_name: [*c]const gchar) void;
pub extern fn _frida_g_object_notify_by_pspec(object: [*c]GObject, pspec: [*c]GParamSpec) void;
pub extern fn _frida_g_object_thaw_notify(object: [*c]GObject) void;
pub extern fn _frida_g_object_is_floating(object: gpointer) gboolean;
pub extern fn _frida_g_object_ref_sink(object: gpointer) gpointer;
pub extern fn _frida_g_object_take_ref(object: gpointer) gpointer;
pub extern fn _frida_g_object_ref(object: gpointer) gpointer;
pub extern fn _frida_g_object_unref(object: gpointer) void;
pub extern fn _frida_g_object_weak_ref(object: [*c]GObject, notify: GWeakNotify, data: gpointer) void;
pub extern fn _frida_g_object_weak_unref(object: [*c]GObject, notify: GWeakNotify, data: gpointer) void;
pub extern fn _frida_g_object_add_weak_pointer(object: [*c]GObject, weak_pointer_location: [*c]gpointer) void;
pub extern fn _frida_g_object_remove_weak_pointer(object: [*c]GObject, weak_pointer_location: [*c]gpointer) void;
pub const GToggleNotify = ?*const fn (gpointer, [*c]GObject, gboolean) callconv(.C) void;
pub extern fn _frida_g_object_add_toggle_ref(object: [*c]GObject, notify: GToggleNotify, data: gpointer) void;
pub extern fn _frida_g_object_remove_toggle_ref(object: [*c]GObject, notify: GToggleNotify, data: gpointer) void;
pub extern fn _frida_g_object_get_qdata(object: [*c]GObject, quark: GQuark) gpointer;
pub extern fn _frida_g_object_set_qdata(object: [*c]GObject, quark: GQuark, data: gpointer) void;
pub extern fn _frida_g_object_set_qdata_full(object: [*c]GObject, quark: GQuark, data: gpointer, destroy: GDestroyNotify) void;
pub extern fn _frida_g_object_steal_qdata(object: [*c]GObject, quark: GQuark) gpointer;
pub extern fn _frida_g_object_dup_qdata(object: [*c]GObject, quark: GQuark, dup_func: GDuplicateFunc, user_data: gpointer) gpointer;
pub extern fn _frida_g_object_replace_qdata(object: [*c]GObject, quark: GQuark, oldval: gpointer, newval: gpointer, destroy: GDestroyNotify, old_destroy: [*c]GDestroyNotify) gboolean;
pub extern fn _frida_g_object_get_data(object: [*c]GObject, key: [*c]const gchar) gpointer;
pub extern fn _frida_g_object_set_data(object: [*c]GObject, key: [*c]const gchar, data: gpointer) void;
pub extern fn _frida_g_object_set_data_full(object: [*c]GObject, key: [*c]const gchar, data: gpointer, destroy: GDestroyNotify) void;
pub extern fn _frida_g_object_steal_data(object: [*c]GObject, key: [*c]const gchar) gpointer;
pub extern fn _frida_g_object_dup_data(object: [*c]GObject, key: [*c]const gchar, dup_func: GDuplicateFunc, user_data: gpointer) gpointer;
pub extern fn _frida_g_object_replace_data(object: [*c]GObject, key: [*c]const gchar, oldval: gpointer, newval: gpointer, destroy: GDestroyNotify, old_destroy: [*c]GDestroyNotify) gboolean;
pub extern fn _frida_g_object_watch_closure(object: [*c]GObject, closure: ?*GClosure) void;
pub extern fn _frida_g_cclosure_new_object(callback_func: GCallback, object: [*c]GObject) ?*GClosure;
pub extern fn _frida_g_cclosure_new_object_swap(callback_func: GCallback, object: [*c]GObject) ?*GClosure;
pub extern fn _frida_g_closure_new_object(sizeof_closure: guint, object: [*c]GObject) ?*GClosure;
pub extern fn _frida_g_value_set_object(value: [*c]GValue, v_object: gpointer) void;
pub extern fn _frida_g_value_get_object(value: [*c]const GValue) gpointer;
pub extern fn _frida_g_value_dup_object(value: [*c]const GValue) gpointer;
pub extern fn _frida_g_signal_connect_object(instance: gpointer, detailed_signal: [*c]const gchar, c_handler: GCallback, gobject: gpointer, connect_flags: GConnectFlags) gulong;
pub extern fn _frida_g_object_force_floating(object: [*c]GObject) void;
pub extern fn _frida_g_object_run_dispose(object: [*c]GObject) void;
pub extern fn _frida_g_value_take_object(value: [*c]GValue, v_object: gpointer) void;
pub extern fn _frida_g_value_set_object_take_ownership(value: [*c]GValue, v_object: gpointer) void;
pub extern fn _frida_g_object_compat_control(what: gsize, data: gpointer) gsize;
pub extern fn _frida_g_clear_object(object_ptr: [*c][*c]GObject) void;
pub fn g_set_object(arg_object_ptr: [*c][*c]GObject, arg_new_object: [*c]GObject) callconv(.C) gboolean {
    var object_ptr = arg_object_ptr;
    var new_object = arg_new_object;
    var old_object: [*c]GObject = object_ptr.*;
    if (old_object == new_object) return @as(c_int, 0);
    if (new_object != @ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), @intToPtr(?*anyopaque, @as(c_int, 0))))) {
        _ = @ptrCast(@TypeOf(new_object), @alignCast(@import("std").meta.alignment(@TypeOf(new_object)), _frida_g_object_ref(@ptrCast(gpointer, new_object))));
    }
    object_ptr.* = new_object;
    if (old_object != @ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), @intToPtr(?*anyopaque, @as(c_int, 0))))) {
        _frida_g_object_unref(@ptrCast(gpointer, old_object));
    }
    return @boolToInt(!(@as(c_int, 0) != 0));
}
pub fn g_assert_finalize_object(arg_object: [*c]GObject) callconv(.C) void {
    var object = arg_object;
    var weak_pointer: gpointer = @ptrCast(gpointer, object);
    while (true) {
        if (_frida_g_type_check_instance_is_fundamentally_a(@ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), weak_pointer)), @bitCast(GType, @as(c_long, @as(c_int, 20) << @intCast(@import("std").math.Log2Int(c_int), @as(c_int, 2))))) != 0) {} else {
            _frida_g_assertion_message(@intToPtr([*c]gchar, @as(c_int, 0)), "lib/frida-core/frida-core.h", @as(c_int, 33481), "g_assert_finalize_object", "'G_IS_OBJECT (weak_pointer)' should be TRUE");
        }
        if (!false) break;
    }
    _frida_g_object_add_weak_pointer(object, &weak_pointer);
    _frida_g_object_unref(weak_pointer);
    while (true) {
        if (weak_pointer == @intToPtr(?*anyopaque, @as(c_int, 0))) {} else {
            _frida_g_assertion_message(@intToPtr([*c]gchar, @as(c_int, 0)), "lib/frida-core/frida-core.h", @as(c_int, 33484), "g_assert_finalize_object", "'weak_pointer' should be NULL");
        }
        if (!false) break;
    }
}
pub fn g_clear_weak_pointer(arg_weak_pointer_location: [*c]gpointer) callconv(.C) void {
    var weak_pointer_location = arg_weak_pointer_location;
    var object: [*c]GObject = @ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), weak_pointer_location.*));
    if (object != @ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), @intToPtr(?*anyopaque, @as(c_int, 0))))) {
        _frida_g_object_remove_weak_pointer(object, weak_pointer_location);
        weak_pointer_location.* = @intToPtr(?*anyopaque, @as(c_int, 0));
    }
}
pub fn g_set_weak_pointer(arg_weak_pointer_location: [*c]gpointer, arg_new_object: [*c]GObject) callconv(.C) gboolean {
    var weak_pointer_location = arg_weak_pointer_location;
    var new_object = arg_new_object;
    var old_object: [*c]GObject = @ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), weak_pointer_location.*));
    if (old_object == new_object) return @as(c_int, 0);
    if (old_object != @ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), @intToPtr(?*anyopaque, @as(c_int, 0))))) {
        _frida_g_object_remove_weak_pointer(old_object, weak_pointer_location);
    }
    weak_pointer_location.* = @ptrCast(gpointer, new_object);
    if (new_object != @ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), @intToPtr(?*anyopaque, @as(c_int, 0))))) {
        _frida_g_object_add_weak_pointer(new_object, weak_pointer_location);
    }
    return @boolToInt(!(@as(c_int, 0) != 0));
}
const union_unnamed_44 = extern union {
    p: gpointer,
};
pub const GWeakRef = extern struct {
    priv: union_unnamed_44,
};
pub extern fn _frida_g_weak_ref_init(weak_ref: [*c]GWeakRef, object: gpointer) void;
pub extern fn _frida_g_weak_ref_clear(weak_ref: [*c]GWeakRef) void;
pub extern fn _frida_g_weak_ref_get(weak_ref: [*c]GWeakRef) gpointer;
pub extern fn _frida_g_weak_ref_set(weak_ref: [*c]GWeakRef, object: gpointer) void;
pub const struct__GBinding = opaque {};
pub const GBinding = struct__GBinding;
pub const GBindingTransformFunc = ?*const fn (?*GBinding, [*c]const GValue, [*c]GValue, gpointer) callconv(.C) gboolean;
pub const G_BINDING_DEFAULT: c_int = 0;
pub const G_BINDING_BIDIRECTIONAL: c_int = 1;
pub const G_BINDING_SYNC_CREATE: c_int = 2;
pub const G_BINDING_INVERT_BOOLEAN: c_int = 4;
pub const GBindingFlags = c_uint;
pub extern fn _frida_g_binding_flags_get_type() GType;
pub extern fn _frida_g_binding_get_type() GType;
pub extern fn _frida_g_binding_get_flags(binding: ?*GBinding) GBindingFlags;
pub extern fn _frida_g_binding_get_source(binding: ?*GBinding) [*c]GObject;
pub extern fn _frida_g_binding_dup_source(binding: ?*GBinding) [*c]GObject;
pub extern fn _frida_g_binding_get_target(binding: ?*GBinding) [*c]GObject;
pub extern fn _frida_g_binding_dup_target(binding: ?*GBinding) [*c]GObject;
pub extern fn _frida_g_binding_get_source_property(binding: ?*GBinding) [*c]const gchar;
pub extern fn _frida_g_binding_get_target_property(binding: ?*GBinding) [*c]const gchar;
pub extern fn _frida_g_binding_unbind(binding: ?*GBinding) void;
pub extern fn _frida_g_object_bind_property(source: gpointer, source_property: [*c]const gchar, target: gpointer, target_property: [*c]const gchar, flags: GBindingFlags) ?*GBinding;
pub extern fn _frida_g_object_bind_property_full(source: gpointer, source_property: [*c]const gchar, target: gpointer, target_property: [*c]const gchar, flags: GBindingFlags, transform_to: GBindingTransformFunc, transform_from: GBindingTransformFunc, user_data: gpointer, notify: GDestroyNotify) ?*GBinding;
pub extern fn _frida_g_object_bind_property_with_closures(source: gpointer, source_property: [*c]const gchar, target: gpointer, target_property: [*c]const gchar, flags: GBindingFlags, transform_to: ?*GClosure, transform_from: ?*GClosure) ?*GBinding;
pub const struct__GBindingGroup = opaque {};
pub const GBindingGroup = struct__GBindingGroup;
pub extern fn _frida_g_binding_group_get_type() GType;
pub extern fn _frida_g_binding_group_new() ?*GBindingGroup;
pub extern fn _frida_g_binding_group_dup_source(self: ?*GBindingGroup) gpointer;
pub extern fn _frida_g_binding_group_set_source(self: ?*GBindingGroup, source: gpointer) void;
pub extern fn _frida_g_binding_group_bind(self: ?*GBindingGroup, source_property: [*c]const gchar, target: gpointer, target_property: [*c]const gchar, flags: GBindingFlags) void;
pub extern fn _frida_g_binding_group_bind_full(self: ?*GBindingGroup, source_property: [*c]const gchar, target: gpointer, target_property: [*c]const gchar, flags: GBindingFlags, transform_to: GBindingTransformFunc, transform_from: GBindingTransformFunc, user_data: gpointer, user_data_destroy: GDestroyNotify) void;
pub extern fn _frida_g_binding_group_bind_with_closures(self: ?*GBindingGroup, source_property: [*c]const gchar, target: gpointer, target_property: [*c]const gchar, flags: GBindingFlags, transform_to: ?*GClosure, transform_from: ?*GClosure) void;
pub const struct__GEnumValue = extern struct {
    value: gint,
    value_name: [*c]const gchar,
    value_nick: [*c]const gchar,
};
pub const GEnumValue = struct__GEnumValue;
pub const struct__GEnumClass = extern struct {
    g_type_class: GTypeClass,
    minimum: gint,
    maximum: gint,
    n_values: guint,
    values: [*c]GEnumValue,
};
pub const GEnumClass = struct__GEnumClass;
pub const struct__GFlagsValue = extern struct {
    value: guint,
    value_name: [*c]const gchar,
    value_nick: [*c]const gchar,
};
pub const GFlagsValue = struct__GFlagsValue;
pub const struct__GFlagsClass = extern struct {
    g_type_class: GTypeClass,
    mask: guint,
    n_values: guint,
    values: [*c]GFlagsValue,
};
pub const GFlagsClass = struct__GFlagsClass;
pub extern fn _frida_g_enum_get_value(enum_class: [*c]GEnumClass, value: gint) [*c]GEnumValue;
pub extern fn _frida_g_enum_get_value_by_name(enum_class: [*c]GEnumClass, name: [*c]const gchar) [*c]GEnumValue;
pub extern fn _frida_g_enum_get_value_by_nick(enum_class: [*c]GEnumClass, nick: [*c]const gchar) [*c]GEnumValue;
pub extern fn _frida_g_flags_get_first_value(flags_class: [*c]GFlagsClass, value: guint) [*c]GFlagsValue;
pub extern fn _frida_g_flags_get_value_by_name(flags_class: [*c]GFlagsClass, name: [*c]const gchar) [*c]GFlagsValue;
pub extern fn _frida_g_flags_get_value_by_nick(flags_class: [*c]GFlagsClass, nick: [*c]const gchar) [*c]GFlagsValue;
pub extern fn _frida_g_enum_to_string(g_enum_type: GType, value: gint) [*c]gchar;
pub extern fn _frida_g_flags_to_string(flags_type: GType, value: guint) [*c]gchar;
pub extern fn _frida_g_value_set_enum(value: [*c]GValue, v_enum: gint) void;
pub extern fn _frida_g_value_get_enum(value: [*c]const GValue) gint;
pub extern fn _frida_g_value_set_flags(value: [*c]GValue, v_flags: guint) void;
pub extern fn _frida_g_value_get_flags(value: [*c]const GValue) guint;
pub extern fn _frida_g_enum_register_static(name: [*c]const gchar, const_static_values: [*c]const GEnumValue) GType;
pub extern fn _frida_g_flags_register_static(name: [*c]const gchar, const_static_values: [*c]const GFlagsValue) GType;
pub extern fn _frida_g_enum_complete_type_info(g_enum_type: GType, info: [*c]GTypeInfo, const_values: [*c]const GEnumValue) void;
pub extern fn _frida_g_flags_complete_type_info(g_flags_type: GType, info: [*c]GTypeInfo, const_values: [*c]const GFlagsValue) void;
pub extern fn _frida_g_unicode_type_get_type() GType;
pub extern fn _frida_g_unicode_break_type_get_type() GType;
pub extern fn _frida_g_unicode_script_get_type() GType;
pub extern fn _frida_g_normalize_mode_get_type() GType;
pub const struct__GParamSpecChar = extern struct {
    parent_instance: GParamSpec,
    minimum: gint8,
    maximum: gint8,
    default_value: gint8,
};
pub const GParamSpecChar = struct__GParamSpecChar;
pub const struct__GParamSpecUChar = extern struct {
    parent_instance: GParamSpec,
    minimum: guint8,
    maximum: guint8,
    default_value: guint8,
};
pub const GParamSpecUChar = struct__GParamSpecUChar;
pub const struct__GParamSpecBoolean = extern struct {
    parent_instance: GParamSpec,
    default_value: gboolean,
};
pub const GParamSpecBoolean = struct__GParamSpecBoolean;
pub const struct__GParamSpecInt = extern struct {
    parent_instance: GParamSpec,
    minimum: gint,
    maximum: gint,
    default_value: gint,
};
pub const GParamSpecInt = struct__GParamSpecInt;
pub const struct__GParamSpecUInt = extern struct {
    parent_instance: GParamSpec,
    minimum: guint,
    maximum: guint,
    default_value: guint,
};
pub const GParamSpecUInt = struct__GParamSpecUInt;
pub const struct__GParamSpecLong = extern struct {
    parent_instance: GParamSpec,
    minimum: glong,
    maximum: glong,
    default_value: glong,
};
pub const GParamSpecLong = struct__GParamSpecLong;
pub const struct__GParamSpecULong = extern struct {
    parent_instance: GParamSpec,
    minimum: gulong,
    maximum: gulong,
    default_value: gulong,
};
pub const GParamSpecULong = struct__GParamSpecULong;
pub const struct__GParamSpecInt64 = extern struct {
    parent_instance: GParamSpec,
    minimum: gint64,
    maximum: gint64,
    default_value: gint64,
};
pub const GParamSpecInt64 = struct__GParamSpecInt64;
pub const struct__GParamSpecUInt64 = extern struct {
    parent_instance: GParamSpec,
    minimum: guint64,
    maximum: guint64,
    default_value: guint64,
};
pub const GParamSpecUInt64 = struct__GParamSpecUInt64;
pub const struct__GParamSpecUnichar = extern struct {
    parent_instance: GParamSpec,
    default_value: gunichar,
};
pub const GParamSpecUnichar = struct__GParamSpecUnichar;
pub const struct__GParamSpecEnum = extern struct {
    parent_instance: GParamSpec,
    enum_class: [*c]GEnumClass,
    default_value: gint,
};
pub const GParamSpecEnum = struct__GParamSpecEnum;
pub const struct__GParamSpecFlags = extern struct {
    parent_instance: GParamSpec,
    flags_class: [*c]GFlagsClass,
    default_value: guint,
};
pub const GParamSpecFlags = struct__GParamSpecFlags;
pub const struct__GParamSpecFloat = extern struct {
    parent_instance: GParamSpec,
    minimum: gfloat,
    maximum: gfloat,
    default_value: gfloat,
    epsilon: gfloat,
};
pub const GParamSpecFloat = struct__GParamSpecFloat;
pub const struct__GParamSpecDouble = extern struct {
    parent_instance: GParamSpec,
    minimum: gdouble,
    maximum: gdouble,
    default_value: gdouble,
    epsilon: gdouble,
};
pub const GParamSpecDouble = struct__GParamSpecDouble; // lib/frida-core/frida-core.h:35089:17: warning: struct demoted to opaque type - has bitfield
pub const struct__GParamSpecString = opaque {};
pub const GParamSpecString = struct__GParamSpecString;
pub const struct__GParamSpecParam = extern struct {
    parent_instance: GParamSpec,
};
pub const GParamSpecParam = struct__GParamSpecParam;
pub const struct__GParamSpecBoxed = extern struct {
    parent_instance: GParamSpec,
};
pub const GParamSpecBoxed = struct__GParamSpecBoxed;
pub const struct__GParamSpecPointer = extern struct {
    parent_instance: GParamSpec,
};
pub const GParamSpecPointer = struct__GParamSpecPointer;
pub const struct__GParamSpecValueArray = extern struct {
    parent_instance: GParamSpec,
    element_spec: [*c]GParamSpec,
    fixed_n_elements: guint,
};
pub const GParamSpecValueArray = struct__GParamSpecValueArray;
pub const struct__GParamSpecObject = extern struct {
    parent_instance: GParamSpec,
};
pub const GParamSpecObject = struct__GParamSpecObject;
pub const struct__GParamSpecOverride = extern struct {
    parent_instance: GParamSpec,
    overridden: [*c]GParamSpec,
};
pub const GParamSpecOverride = struct__GParamSpecOverride;
pub const struct__GParamSpecGType = extern struct {
    parent_instance: GParamSpec,
    is_a_type: GType,
};
pub const GParamSpecGType = struct__GParamSpecGType;
pub const struct__GParamSpecVariant = extern struct {
    parent_instance: GParamSpec,
    type: ?*GVariantType,
    default_value: ?*GVariant,
    padding: [4]gpointer,
};
pub const GParamSpecVariant = struct__GParamSpecVariant;
pub extern fn _frida_g_param_spec_char(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: gint8, maximum: gint8, default_value: gint8, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_uchar(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: guint8, maximum: guint8, default_value: guint8, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_boolean(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, default_value: gboolean, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_int(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: gint, maximum: gint, default_value: gint, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_uint(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: guint, maximum: guint, default_value: guint, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_long(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: glong, maximum: glong, default_value: glong, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_ulong(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: gulong, maximum: gulong, default_value: gulong, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_int64(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: gint64, maximum: gint64, default_value: gint64, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_uint64(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: guint64, maximum: guint64, default_value: guint64, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_unichar(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, default_value: gunichar, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_enum(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, enum_type: GType, default_value: gint, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_flags(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, flags_type: GType, default_value: guint, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_float(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: gfloat, maximum: gfloat, default_value: gfloat, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_double(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, minimum: gdouble, maximum: gdouble, default_value: gdouble, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_string(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, default_value: [*c]const gchar, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_param(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, param_type: GType, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_boxed(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, boxed_type: GType, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_pointer(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_value_array(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, element_spec: [*c]GParamSpec, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_object(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, object_type: GType, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_override(name: [*c]const gchar, overridden: [*c]GParamSpec) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_gtype(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, is_a_type: GType, flags: GParamFlags) [*c]GParamSpec;
pub extern fn _frida_g_param_spec_variant(name: [*c]const gchar, nick: [*c]const gchar, blurb: [*c]const gchar, @"type": ?*const GVariantType, default_value: ?*GVariant, flags: GParamFlags) [*c]GParamSpec;
pub extern var _frida_g_param_spec_types: [*c]GType;
pub const struct__GSignalGroup = opaque {};
pub const GSignalGroup = struct__GSignalGroup;
pub extern fn _frida_g_signal_group_get_type() GType;
pub extern fn _frida_g_signal_group_new(target_type: GType) ?*GSignalGroup;
pub extern fn _frida_g_signal_group_set_target(self: ?*GSignalGroup, target: gpointer) void;
pub extern fn _frida_g_signal_group_dup_target(self: ?*GSignalGroup) gpointer;
pub extern fn _frida_g_signal_group_block(self: ?*GSignalGroup) void;
pub extern fn _frida_g_signal_group_unblock(self: ?*GSignalGroup) void;
pub extern fn _frida_g_signal_group_connect_closure(self: ?*GSignalGroup, detailed_signal: [*c]const gchar, closure: ?*GClosure, after: gboolean) void;
pub extern fn _frida_g_signal_group_connect_object(self: ?*GSignalGroup, detailed_signal: [*c]const gchar, c_handler: GCallback, object: gpointer, flags: GConnectFlags) void;
pub extern fn _frida_g_signal_group_connect_data(self: ?*GSignalGroup, detailed_signal: [*c]const gchar, c_handler: GCallback, data: gpointer, notify: GClosureNotify, flags: GConnectFlags) void;
pub extern fn _frida_g_signal_group_connect(self: ?*GSignalGroup, detailed_signal: [*c]const gchar, c_handler: GCallback, data: gpointer) void;
pub extern fn _frida_g_signal_group_connect_after(self: ?*GSignalGroup, detailed_signal: [*c]const gchar, c_handler: GCallback, data: gpointer) void;
pub extern fn _frida_g_signal_group_connect_swapped(self: ?*GSignalGroup, detailed_signal: [*c]const gchar, c_handler: GCallback, data: gpointer) void;
pub extern fn _frida_g_source_set_closure(source: [*c]GSource, closure: ?*GClosure) void;
pub extern fn _frida_g_source_set_dummy_callback(source: [*c]GSource) void;
pub const struct__GTypeModule = extern struct {
    parent_instance: GObject,
    use_count: guint,
    type_infos: [*c]GSList,
    interface_infos: [*c]GSList,
    name: [*c]gchar,
};
pub const GTypeModule = struct__GTypeModule;
pub const struct__GTypeModuleClass = extern struct {
    parent_class: GObjectClass,
    load: ?*const fn ([*c]GTypeModule) callconv(.C) gboolean,
    unload: ?*const fn ([*c]GTypeModule) callconv(.C) void,
    reserved1: ?*const fn () callconv(.C) void,
    reserved2: ?*const fn () callconv(.C) void,
    reserved3: ?*const fn () callconv(.C) void,
    reserved4: ?*const fn () callconv(.C) void,
};
pub const GTypeModuleClass = struct__GTypeModuleClass;
pub const GTypeModule_autoptr = [*c]GTypeModule;
pub const GTypeModule_listautoptr = [*c]GList;
pub const GTypeModule_slistautoptr = [*c]GSList;
pub const GTypeModule_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTypeModule(arg__ptr: [*c]GTypeModule) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTypeModule(arg__ptr: [*c][*c]GTypeModule) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTypeModule(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTypeModule(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTypeModule(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTypeModule(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub extern fn _frida_g_type_module_get_type() GType;
pub extern fn _frida_g_type_module_use(module: [*c]GTypeModule) gboolean;
pub extern fn _frida_g_type_module_unuse(module: [*c]GTypeModule) void;
pub extern fn _frida_g_type_module_set_name(module: [*c]GTypeModule, name: [*c]const gchar) void;
pub extern fn _frida_g_type_module_register_type(module: [*c]GTypeModule, parent_type: GType, type_name: [*c]const gchar, type_info: [*c]const GTypeInfo, flags: GTypeFlags) GType;
pub extern fn _frida_g_type_module_add_interface(module: [*c]GTypeModule, instance_type: GType, interface_type: GType, interface_info: [*c]const GInterfaceInfo) void;
pub extern fn _frida_g_type_module_register_enum(module: [*c]GTypeModule, name: [*c]const gchar, const_static_values: [*c]const GEnumValue) GType;
pub extern fn _frida_g_type_module_register_flags(module: [*c]GTypeModule, name: [*c]const gchar, const_static_values: [*c]const GFlagsValue) GType;
pub const GTypePluginUse = ?*const fn (?*GTypePlugin) callconv(.C) void;
pub const GTypePluginUnuse = ?*const fn (?*GTypePlugin) callconv(.C) void;
pub const GTypePluginCompleteTypeInfo = ?*const fn (?*GTypePlugin, GType, [*c]GTypeInfo, [*c]GTypeValueTable) callconv(.C) void;
pub const GTypePluginCompleteInterfaceInfo = ?*const fn (?*GTypePlugin, GType, GType, [*c]GInterfaceInfo) callconv(.C) void;
pub const struct__GTypePluginClass = extern struct {
    base_iface: GTypeInterface,
    use_plugin: GTypePluginUse,
    unuse_plugin: GTypePluginUnuse,
    complete_type_info: GTypePluginCompleteTypeInfo,
    complete_interface_info: GTypePluginCompleteInterfaceInfo,
};
pub const GTypePluginClass = struct__GTypePluginClass;
pub extern fn _frida_g_type_plugin_get_type() GType;
pub extern fn _frida_g_type_plugin_use(plugin: ?*GTypePlugin) void;
pub extern fn _frida_g_type_plugin_unuse(plugin: ?*GTypePlugin) void;
pub extern fn _frida_g_type_plugin_complete_type_info(plugin: ?*GTypePlugin, g_type: GType, info: [*c]GTypeInfo, value_table: [*c]GTypeValueTable) void;
pub extern fn _frida_g_type_plugin_complete_interface_info(plugin: ?*GTypePlugin, instance_type: GType, interface_type: GType, info: [*c]GInterfaceInfo) void;
pub const struct__GValueArray = extern struct {
    n_values: guint,
    values: [*c]GValue,
    n_prealloced: guint,
};
pub const GValueArray = struct__GValueArray;
pub extern fn _frida_g_value_array_get_type() GType;
pub extern fn _frida_g_value_array_get_nth(value_array: [*c]GValueArray, index_: guint) [*c]GValue;
pub extern fn _frida_g_value_array_new(n_prealloced: guint) [*c]GValueArray;
pub extern fn _frida_g_value_array_free(value_array: [*c]GValueArray) void;
pub extern fn _frida_g_value_array_copy(value_array: [*c]const GValueArray) [*c]GValueArray;
pub extern fn _frida_g_value_array_prepend(value_array: [*c]GValueArray, value: [*c]const GValue) [*c]GValueArray;
pub extern fn _frida_g_value_array_append(value_array: [*c]GValueArray, value: [*c]const GValue) [*c]GValueArray;
pub extern fn _frida_g_value_array_insert(value_array: [*c]GValueArray, index_: guint, value: [*c]const GValue) [*c]GValueArray;
pub extern fn _frida_g_value_array_remove(value_array: [*c]GValueArray, index_: guint) [*c]GValueArray;
pub extern fn _frida_g_value_array_sort(value_array: [*c]GValueArray, compare_func: GCompareFunc) [*c]GValueArray;
pub extern fn _frida_g_value_array_sort_with_data(value_array: [*c]GValueArray, compare_func: GCompareDataFunc, user_data: gpointer) [*c]GValueArray;
pub extern fn _frida_g_value_set_char(value: [*c]GValue, v_char: gchar) void;
pub extern fn _frida_g_value_get_char(value: [*c]const GValue) gchar;
pub extern fn _frida_g_value_set_schar(value: [*c]GValue, v_char: gint8) void;
pub extern fn _frida_g_value_get_schar(value: [*c]const GValue) gint8;
pub extern fn _frida_g_value_set_uchar(value: [*c]GValue, v_uchar: guchar) void;
pub extern fn _frida_g_value_get_uchar(value: [*c]const GValue) guchar;
pub extern fn _frida_g_value_set_boolean(value: [*c]GValue, v_boolean: gboolean) void;
pub extern fn _frida_g_value_get_boolean(value: [*c]const GValue) gboolean;
pub extern fn _frida_g_value_set_int(value: [*c]GValue, v_int: gint) void;
pub extern fn _frida_g_value_get_int(value: [*c]const GValue) gint;
pub extern fn _frida_g_value_set_uint(value: [*c]GValue, v_uint: guint) void;
pub extern fn _frida_g_value_get_uint(value: [*c]const GValue) guint;
pub extern fn _frida_g_value_set_long(value: [*c]GValue, v_long: glong) void;
pub extern fn _frida_g_value_get_long(value: [*c]const GValue) glong;
pub extern fn _frida_g_value_set_ulong(value: [*c]GValue, v_ulong: gulong) void;
pub extern fn _frida_g_value_get_ulong(value: [*c]const GValue) gulong;
pub extern fn _frida_g_value_set_int64(value: [*c]GValue, v_int64: gint64) void;
pub extern fn _frida_g_value_get_int64(value: [*c]const GValue) gint64;
pub extern fn _frida_g_value_set_uint64(value: [*c]GValue, v_uint64: guint64) void;
pub extern fn _frida_g_value_get_uint64(value: [*c]const GValue) guint64;
pub extern fn _frida_g_value_set_float(value: [*c]GValue, v_float: gfloat) void;
pub extern fn _frida_g_value_get_float(value: [*c]const GValue) gfloat;
pub extern fn _frida_g_value_set_double(value: [*c]GValue, v_double: gdouble) void;
pub extern fn _frida_g_value_get_double(value: [*c]const GValue) gdouble;
pub extern fn _frida_g_value_set_string(value: [*c]GValue, v_string: [*c]const gchar) void;
pub extern fn _frida_g_value_set_static_string(value: [*c]GValue, v_string: [*c]const gchar) void;
pub extern fn _frida_g_value_set_interned_string(value: [*c]GValue, v_string: [*c]const gchar) void;
pub extern fn _frida_g_value_get_string(value: [*c]const GValue) [*c]const gchar;
pub extern fn _frida_g_value_dup_string(value: [*c]const GValue) [*c]gchar;
pub extern fn _frida_g_value_set_pointer(value: [*c]GValue, v_pointer: gpointer) void;
pub extern fn _frida_g_value_get_pointer(value: [*c]const GValue) gpointer;
pub extern fn _frida_g_gtype_get_type() GType;
pub extern fn _frida_g_value_set_gtype(value: [*c]GValue, v_gtype: GType) void;
pub extern fn _frida_g_value_get_gtype(value: [*c]const GValue) GType;
pub extern fn _frida_g_value_set_variant(value: [*c]GValue, variant: ?*GVariant) void;
pub extern fn _frida_g_value_take_variant(value: [*c]GValue, variant: ?*GVariant) void;
pub extern fn _frida_g_value_get_variant(value: [*c]const GValue) ?*GVariant;
pub extern fn _frida_g_value_dup_variant(value: [*c]const GValue) ?*GVariant;
pub extern fn _frida_g_pointer_type_register_static(name: [*c]const gchar) GType;
pub extern fn _frida_g_strdup_value_contents(value: [*c]const GValue) [*c]gchar;
pub extern fn _frida_g_value_take_string(value: [*c]GValue, v_string: [*c]gchar) void;
pub extern fn _frida_g_value_set_string_take_ownership(value: [*c]GValue, v_string: [*c]gchar) void;
pub const gchararray = [*c]gchar;
pub const GClosure_autoptr = ?*GClosure;
pub const GClosure_listautoptr = [*c]GList;
pub const GClosure_slistautoptr = [*c]GSList;
pub const GClosure_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GClosure(arg__ptr: ?*GClosure) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_closure_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GClosure(arg__ptr: [*c]?*GClosure) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GClosure(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GClosure(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_closure_unref)))));
}
pub fn glib_slistautoptr_cleanup_GClosure(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_closure_unref)))));
}
pub fn glib_queueautoptr_cleanup_GClosure(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_closure_unref)))));
    }
}
pub const GEnumClass_autoptr = [*c]GEnumClass;
pub const GEnumClass_listautoptr = [*c]GList;
pub const GEnumClass_slistautoptr = [*c]GSList;
pub const GEnumClass_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GEnumClass(arg__ptr: [*c]GEnumClass) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_type_class_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GEnumClass(arg__ptr: [*c][*c]GEnumClass) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GEnumClass(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GEnumClass(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_slistautoptr_cleanup_GEnumClass(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_queueautoptr_cleanup_GEnumClass(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
    }
}
pub const GFlagsClass_autoptr = [*c]GFlagsClass;
pub const GFlagsClass_listautoptr = [*c]GList;
pub const GFlagsClass_slistautoptr = [*c]GSList;
pub const GFlagsClass_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFlagsClass(arg__ptr: [*c]GFlagsClass) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_type_class_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFlagsClass(arg__ptr: [*c][*c]GFlagsClass) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFlagsClass(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFlagsClass(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFlagsClass(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFlagsClass(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
    }
}
pub const GObject_autoptr = [*c]GObject;
pub const GObject_listautoptr = [*c]GList;
pub const GObject_slistautoptr = [*c]GSList;
pub const GObject_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GObject(arg__ptr: [*c]GObject) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GObject(arg__ptr: [*c][*c]GObject) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GObject(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GObject(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GObject(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GObject(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GInitiallyUnowned_autoptr = [*c]GInitiallyUnowned;
pub const GInitiallyUnowned_listautoptr = [*c]GList;
pub const GInitiallyUnowned_slistautoptr = [*c]GSList;
pub const GInitiallyUnowned_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GInitiallyUnowned(arg__ptr: [*c]GInitiallyUnowned) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GInitiallyUnowned(arg__ptr: [*c][*c]GInitiallyUnowned) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GInitiallyUnowned(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GInitiallyUnowned(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GInitiallyUnowned(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GInitiallyUnowned(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GParamSpec_autoptr = [*c]GParamSpec;
pub const GParamSpec_listautoptr = [*c]GList;
pub const GParamSpec_slistautoptr = [*c]GSList;
pub const GParamSpec_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GParamSpec(arg__ptr: [*c]GParamSpec) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_param_spec_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GParamSpec(arg__ptr: [*c][*c]GParamSpec) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GParamSpec(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GParamSpec(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_param_spec_unref)))));
}
pub fn glib_slistautoptr_cleanup_GParamSpec(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_param_spec_unref)))));
}
pub fn glib_queueautoptr_cleanup_GParamSpec(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_param_spec_unref)))));
    }
}
pub const GTypeClass_autoptr = [*c]GTypeClass;
pub const GTypeClass_listautoptr = [*c]GList;
pub const GTypeClass_slistautoptr = [*c]GSList;
pub const GTypeClass_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTypeClass(arg__ptr: [*c]GTypeClass) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_type_class_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTypeClass(arg__ptr: [*c][*c]GTypeClass) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTypeClass(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTypeClass(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTypeClass(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTypeClass(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
    }
}
pub fn glib_auto_cleanup_GValue(arg__ptr: [*c]GValue) callconv(.C) void {
    var _ptr = arg__ptr;
    _frida_g_value_unset(_ptr);
}
pub const G_APP_INFO_CREATE_NONE: c_int = 0;
pub const G_APP_INFO_CREATE_NEEDS_TERMINAL: c_int = 1;
pub const G_APP_INFO_CREATE_SUPPORTS_URIS: c_int = 2;
pub const G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION: c_int = 4;
pub const GAppInfoCreateFlags = c_uint;
pub const G_CONVERTER_NO_FLAGS: c_int = 0;
pub const G_CONVERTER_INPUT_AT_END: c_int = 1;
pub const G_CONVERTER_FLUSH: c_int = 2;
pub const GConverterFlags = c_uint;
pub const G_CONVERTER_ERROR: c_int = 0;
pub const G_CONVERTER_CONVERTED: c_int = 1;
pub const G_CONVERTER_FINISHED: c_int = 2;
pub const G_CONVERTER_FLUSHED: c_int = 3;
pub const GConverterResult = c_uint;
pub const G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN: c_int = 0;
pub const G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN: c_int = 1;
pub const G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN: c_int = 2;
pub const GDataStreamByteOrder = c_uint;
pub const G_DATA_STREAM_NEWLINE_TYPE_LF: c_int = 0;
pub const G_DATA_STREAM_NEWLINE_TYPE_CR: c_int = 1;
pub const G_DATA_STREAM_NEWLINE_TYPE_CR_LF: c_int = 2;
pub const G_DATA_STREAM_NEWLINE_TYPE_ANY: c_int = 3;
pub const GDataStreamNewlineType = c_uint;
pub const G_FILE_ATTRIBUTE_TYPE_INVALID: c_int = 0;
pub const G_FILE_ATTRIBUTE_TYPE_STRING: c_int = 1;
pub const G_FILE_ATTRIBUTE_TYPE_BYTE_STRING: c_int = 2;
pub const G_FILE_ATTRIBUTE_TYPE_BOOLEAN: c_int = 3;
pub const G_FILE_ATTRIBUTE_TYPE_UINT32: c_int = 4;
pub const G_FILE_ATTRIBUTE_TYPE_INT32: c_int = 5;
pub const G_FILE_ATTRIBUTE_TYPE_UINT64: c_int = 6;
pub const G_FILE_ATTRIBUTE_TYPE_INT64: c_int = 7;
pub const G_FILE_ATTRIBUTE_TYPE_OBJECT: c_int = 8;
pub const G_FILE_ATTRIBUTE_TYPE_STRINGV: c_int = 9;
pub const GFileAttributeType = c_uint;
pub const G_FILE_ATTRIBUTE_INFO_NONE: c_int = 0;
pub const G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE: c_int = 1;
pub const G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED: c_int = 2;
pub const GFileAttributeInfoFlags = c_uint;
pub const G_FILE_ATTRIBUTE_STATUS_UNSET: c_int = 0;
pub const G_FILE_ATTRIBUTE_STATUS_SET: c_int = 1;
pub const G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING: c_int = 2;
pub const GFileAttributeStatus = c_uint;
pub const G_FILE_QUERY_INFO_NONE: c_int = 0;
pub const G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS: c_int = 1;
pub const GFileQueryInfoFlags = c_uint;
pub const G_FILE_CREATE_NONE: c_int = 0;
pub const G_FILE_CREATE_PRIVATE: c_int = 1;
pub const G_FILE_CREATE_REPLACE_DESTINATION: c_int = 2;
pub const GFileCreateFlags = c_uint;
pub const G_FILE_MEASURE_NONE: c_int = 0;
pub const G_FILE_MEASURE_REPORT_ANY_ERROR: c_int = 2;
pub const G_FILE_MEASURE_APPARENT_SIZE: c_int = 4;
pub const G_FILE_MEASURE_NO_XDEV: c_int = 8;
pub const GFileMeasureFlags = c_uint;
pub const G_MOUNT_MOUNT_NONE: c_int = 0;
pub const GMountMountFlags = c_uint;
pub const G_MOUNT_UNMOUNT_NONE: c_int = 0;
pub const G_MOUNT_UNMOUNT_FORCE: c_int = 1;
pub const GMountUnmountFlags = c_uint;
pub const G_DRIVE_START_NONE: c_int = 0;
pub const GDriveStartFlags = c_uint;
pub const G_DRIVE_START_STOP_TYPE_UNKNOWN: c_int = 0;
pub const G_DRIVE_START_STOP_TYPE_SHUTDOWN: c_int = 1;
pub const G_DRIVE_START_STOP_TYPE_NETWORK: c_int = 2;
pub const G_DRIVE_START_STOP_TYPE_MULTIDISK: c_int = 3;
pub const G_DRIVE_START_STOP_TYPE_PASSWORD: c_int = 4;
pub const GDriveStartStopType = c_uint;
pub const G_FILE_COPY_NONE: c_int = 0;
pub const G_FILE_COPY_OVERWRITE: c_int = 1;
pub const G_FILE_COPY_BACKUP: c_int = 2;
pub const G_FILE_COPY_NOFOLLOW_SYMLINKS: c_int = 4;
pub const G_FILE_COPY_ALL_METADATA: c_int = 8;
pub const G_FILE_COPY_NO_FALLBACK_FOR_MOVE: c_int = 16;
pub const G_FILE_COPY_TARGET_DEFAULT_PERMS: c_int = 32;
pub const GFileCopyFlags = c_uint;
pub const G_FILE_MONITOR_NONE: c_int = 0;
pub const G_FILE_MONITOR_WATCH_MOUNTS: c_int = 1;
pub const G_FILE_MONITOR_SEND_MOVED: c_int = 2;
pub const G_FILE_MONITOR_WATCH_HARD_LINKS: c_int = 4;
pub const G_FILE_MONITOR_WATCH_MOVES: c_int = 8;
pub const GFileMonitorFlags = c_uint;
pub const G_FILE_TYPE_UNKNOWN: c_int = 0;
pub const G_FILE_TYPE_REGULAR: c_int = 1;
pub const G_FILE_TYPE_DIRECTORY: c_int = 2;
pub const G_FILE_TYPE_SYMBOLIC_LINK: c_int = 3;
pub const G_FILE_TYPE_SPECIAL: c_int = 4;
pub const G_FILE_TYPE_SHORTCUT: c_int = 5;
pub const G_FILE_TYPE_MOUNTABLE: c_int = 6;
pub const GFileType = c_uint;
pub const G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS: c_int = 0;
pub const G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL: c_int = 1;
pub const G_FILESYSTEM_PREVIEW_TYPE_NEVER: c_int = 2;
pub const GFilesystemPreviewType = c_uint;
pub const G_FILE_MONITOR_EVENT_CHANGED: c_int = 0;
pub const G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT: c_int = 1;
pub const G_FILE_MONITOR_EVENT_DELETED: c_int = 2;
pub const G_FILE_MONITOR_EVENT_CREATED: c_int = 3;
pub const G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED: c_int = 4;
pub const G_FILE_MONITOR_EVENT_PRE_UNMOUNT: c_int = 5;
pub const G_FILE_MONITOR_EVENT_UNMOUNTED: c_int = 6;
pub const G_FILE_MONITOR_EVENT_MOVED: c_int = 7;
pub const G_FILE_MONITOR_EVENT_RENAMED: c_int = 8;
pub const G_FILE_MONITOR_EVENT_MOVED_IN: c_int = 9;
pub const G_FILE_MONITOR_EVENT_MOVED_OUT: c_int = 10;
pub const GFileMonitorEvent = c_uint;
pub const G_IO_ERROR_FAILED: c_int = 0;
pub const G_IO_ERROR_NOT_FOUND: c_int = 1;
pub const G_IO_ERROR_EXISTS: c_int = 2;
pub const G_IO_ERROR_IS_DIRECTORY: c_int = 3;
pub const G_IO_ERROR_NOT_DIRECTORY: c_int = 4;
pub const G_IO_ERROR_NOT_EMPTY: c_int = 5;
pub const G_IO_ERROR_NOT_REGULAR_FILE: c_int = 6;
pub const G_IO_ERROR_NOT_SYMBOLIC_LINK: c_int = 7;
pub const G_IO_ERROR_NOT_MOUNTABLE_FILE: c_int = 8;
pub const G_IO_ERROR_FILENAME_TOO_LONG: c_int = 9;
pub const G_IO_ERROR_INVALID_FILENAME: c_int = 10;
pub const G_IO_ERROR_TOO_MANY_LINKS: c_int = 11;
pub const G_IO_ERROR_NO_SPACE: c_int = 12;
pub const G_IO_ERROR_INVALID_ARGUMENT: c_int = 13;
pub const G_IO_ERROR_PERMISSION_DENIED: c_int = 14;
pub const G_IO_ERROR_NOT_SUPPORTED: c_int = 15;
pub const G_IO_ERROR_NOT_MOUNTED: c_int = 16;
pub const G_IO_ERROR_ALREADY_MOUNTED: c_int = 17;
pub const G_IO_ERROR_CLOSED: c_int = 18;
pub const G_IO_ERROR_CANCELLED: c_int = 19;
pub const G_IO_ERROR_PENDING: c_int = 20;
pub const G_IO_ERROR_READ_ONLY: c_int = 21;
pub const G_IO_ERROR_CANT_CREATE_BACKUP: c_int = 22;
pub const G_IO_ERROR_WRONG_ETAG: c_int = 23;
pub const G_IO_ERROR_TIMED_OUT: c_int = 24;
pub const G_IO_ERROR_WOULD_RECURSE: c_int = 25;
pub const G_IO_ERROR_BUSY: c_int = 26;
pub const G_IO_ERROR_WOULD_BLOCK: c_int = 27;
pub const G_IO_ERROR_HOST_NOT_FOUND: c_int = 28;
pub const G_IO_ERROR_WOULD_MERGE: c_int = 29;
pub const G_IO_ERROR_FAILED_HANDLED: c_int = 30;
pub const G_IO_ERROR_TOO_MANY_OPEN_FILES: c_int = 31;
pub const G_IO_ERROR_NOT_INITIALIZED: c_int = 32;
pub const G_IO_ERROR_ADDRESS_IN_USE: c_int = 33;
pub const G_IO_ERROR_PARTIAL_INPUT: c_int = 34;
pub const G_IO_ERROR_INVALID_DATA: c_int = 35;
pub const G_IO_ERROR_DBUS_ERROR: c_int = 36;
pub const G_IO_ERROR_HOST_UNREACHABLE: c_int = 37;
pub const G_IO_ERROR_NETWORK_UNREACHABLE: c_int = 38;
pub const G_IO_ERROR_CONNECTION_REFUSED: c_int = 39;
pub const G_IO_ERROR_PROXY_FAILED: c_int = 40;
pub const G_IO_ERROR_PROXY_AUTH_FAILED: c_int = 41;
pub const G_IO_ERROR_PROXY_NEED_AUTH: c_int = 42;
pub const G_IO_ERROR_PROXY_NOT_ALLOWED: c_int = 43;
pub const G_IO_ERROR_BROKEN_PIPE: c_int = 44;
pub const G_IO_ERROR_CONNECTION_CLOSED: c_int = 44;
pub const G_IO_ERROR_NOT_CONNECTED: c_int = 45;
pub const G_IO_ERROR_MESSAGE_TOO_LARGE: c_int = 46;
pub const G_IO_ERROR_NO_SUCH_DEVICE: c_int = 47;
pub const GIOErrorEnum = c_uint;
pub const G_ASK_PASSWORD_NEED_PASSWORD: c_int = 1;
pub const G_ASK_PASSWORD_NEED_USERNAME: c_int = 2;
pub const G_ASK_PASSWORD_NEED_DOMAIN: c_int = 4;
pub const G_ASK_PASSWORD_SAVING_SUPPORTED: c_int = 8;
pub const G_ASK_PASSWORD_ANONYMOUS_SUPPORTED: c_int = 16;
pub const G_ASK_PASSWORD_TCRYPT: c_int = 32;
pub const GAskPasswordFlags = c_uint;
pub const G_PASSWORD_SAVE_NEVER: c_int = 0;
pub const G_PASSWORD_SAVE_FOR_SESSION: c_int = 1;
pub const G_PASSWORD_SAVE_PERMANENTLY: c_int = 2;
pub const GPasswordSave = c_uint;
pub const G_MOUNT_OPERATION_HANDLED: c_int = 0;
pub const G_MOUNT_OPERATION_ABORTED: c_int = 1;
pub const G_MOUNT_OPERATION_UNHANDLED: c_int = 2;
pub const GMountOperationResult = c_uint;
pub const G_OUTPUT_STREAM_SPLICE_NONE: c_int = 0;
pub const G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE: c_int = 1;
pub const G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET: c_int = 2;
pub const GOutputStreamSpliceFlags = c_uint;
pub const G_IO_STREAM_SPLICE_NONE: c_int = 0;
pub const G_IO_STREAM_SPLICE_CLOSE_STREAM1: c_int = 1;
pub const G_IO_STREAM_SPLICE_CLOSE_STREAM2: c_int = 2;
pub const G_IO_STREAM_SPLICE_WAIT_FOR_BOTH: c_int = 4;
pub const GIOStreamSpliceFlags = c_uint;
pub const G_EMBLEM_ORIGIN_UNKNOWN: c_int = 0;
pub const G_EMBLEM_ORIGIN_DEVICE: c_int = 1;
pub const G_EMBLEM_ORIGIN_LIVEMETADATA: c_int = 2;
pub const G_EMBLEM_ORIGIN_TAG: c_int = 3;
pub const GEmblemOrigin = c_uint;
pub const G_RESOLVER_ERROR_NOT_FOUND: c_int = 0;
pub const G_RESOLVER_ERROR_TEMPORARY_FAILURE: c_int = 1;
pub const G_RESOLVER_ERROR_INTERNAL: c_int = 2;
pub const GResolverError = c_uint;
pub const G_RESOLVER_RECORD_SRV: c_int = 1;
pub const G_RESOLVER_RECORD_MX: c_int = 2;
pub const G_RESOLVER_RECORD_TXT: c_int = 3;
pub const G_RESOLVER_RECORD_SOA: c_int = 4;
pub const G_RESOLVER_RECORD_NS: c_int = 5;
pub const GResolverRecordType = c_uint;
pub const G_RESOURCE_ERROR_NOT_FOUND: c_int = 0;
pub const G_RESOURCE_ERROR_INTERNAL: c_int = 1;
pub const GResourceError = c_uint;
pub const G_RESOURCE_FLAGS_NONE: c_int = 0;
pub const G_RESOURCE_FLAGS_COMPRESSED: c_int = 1;
pub const GResourceFlags = c_uint;
pub const G_RESOURCE_LOOKUP_FLAGS_NONE: c_int = 0;
pub const GResourceLookupFlags = c_uint;
pub const G_SOCKET_FAMILY_INVALID: c_int = 0;
pub const G_SOCKET_FAMILY_UNIX: c_int = 1;
pub const G_SOCKET_FAMILY_IPV4: c_int = 2;
pub const G_SOCKET_FAMILY_IPV6: c_int = 10;
pub const GSocketFamily = c_uint;
pub const G_SOCKET_TYPE_INVALID: c_int = 0;
pub const G_SOCKET_TYPE_STREAM: c_int = 1;
pub const G_SOCKET_TYPE_DATAGRAM: c_int = 2;
pub const G_SOCKET_TYPE_SEQPACKET: c_int = 3;
pub const GSocketType = c_uint;
pub const G_SOCKET_MSG_NONE: c_int = 0;
pub const G_SOCKET_MSG_OOB: c_int = 1;
pub const G_SOCKET_MSG_PEEK: c_int = 2;
pub const G_SOCKET_MSG_DONTROUTE: c_int = 4;
pub const GSocketMsgFlags = c_uint;
pub const G_SOCKET_PROTOCOL_UNKNOWN: c_int = -1;
pub const G_SOCKET_PROTOCOL_DEFAULT: c_int = 0;
pub const G_SOCKET_PROTOCOL_TCP: c_int = 6;
pub const G_SOCKET_PROTOCOL_UDP: c_int = 17;
pub const G_SOCKET_PROTOCOL_SCTP: c_int = 132;
pub const GSocketProtocol = c_int;
pub const G_ZLIB_COMPRESSOR_FORMAT_ZLIB: c_int = 0;
pub const G_ZLIB_COMPRESSOR_FORMAT_GZIP: c_int = 1;
pub const G_ZLIB_COMPRESSOR_FORMAT_RAW: c_int = 2;
pub const GZlibCompressorFormat = c_uint;
pub const G_UNIX_SOCKET_ADDRESS_INVALID: c_int = 0;
pub const G_UNIX_SOCKET_ADDRESS_ANONYMOUS: c_int = 1;
pub const G_UNIX_SOCKET_ADDRESS_PATH: c_int = 2;
pub const G_UNIX_SOCKET_ADDRESS_ABSTRACT: c_int = 3;
pub const G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED: c_int = 4;
pub const GUnixSocketAddressType = c_uint;
pub const G_BUS_TYPE_STARTER: c_int = -1;
pub const G_BUS_TYPE_NONE: c_int = 0;
pub const G_BUS_TYPE_SYSTEM: c_int = 1;
pub const G_BUS_TYPE_SESSION: c_int = 2;
pub const GBusType = c_int;
pub const G_BUS_NAME_OWNER_FLAGS_NONE: c_int = 0;
pub const G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT: c_int = 1;
pub const G_BUS_NAME_OWNER_FLAGS_REPLACE: c_int = 2;
pub const G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE: c_int = 4;
pub const GBusNameOwnerFlags = c_uint;
pub const G_BUS_NAME_WATCHER_FLAGS_NONE: c_int = 0;
pub const G_BUS_NAME_WATCHER_FLAGS_AUTO_START: c_int = 1;
pub const GBusNameWatcherFlags = c_uint;
pub const G_DBUS_PROXY_FLAGS_NONE: c_int = 0;
pub const G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES: c_int = 1;
pub const G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS: c_int = 2;
pub const G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START: c_int = 4;
pub const G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES: c_int = 8;
pub const G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION: c_int = 16;
pub const G_DBUS_PROXY_FLAGS_NO_MATCH_RULE: c_int = 32;
pub const GDBusProxyFlags = c_uint;
pub const G_DBUS_ERROR_FAILED: c_int = 0;
pub const G_DBUS_ERROR_NO_MEMORY: c_int = 1;
pub const G_DBUS_ERROR_SERVICE_UNKNOWN: c_int = 2;
pub const G_DBUS_ERROR_NAME_HAS_NO_OWNER: c_int = 3;
pub const G_DBUS_ERROR_NO_REPLY: c_int = 4;
pub const G_DBUS_ERROR_IO_ERROR: c_int = 5;
pub const G_DBUS_ERROR_BAD_ADDRESS: c_int = 6;
pub const G_DBUS_ERROR_NOT_SUPPORTED: c_int = 7;
pub const G_DBUS_ERROR_LIMITS_EXCEEDED: c_int = 8;
pub const G_DBUS_ERROR_ACCESS_DENIED: c_int = 9;
pub const G_DBUS_ERROR_AUTH_FAILED: c_int = 10;
pub const G_DBUS_ERROR_NO_SERVER: c_int = 11;
pub const G_DBUS_ERROR_TIMEOUT: c_int = 12;
pub const G_DBUS_ERROR_NO_NETWORK: c_int = 13;
pub const G_DBUS_ERROR_ADDRESS_IN_USE: c_int = 14;
pub const G_DBUS_ERROR_DISCONNECTED: c_int = 15;
pub const G_DBUS_ERROR_INVALID_ARGS: c_int = 16;
pub const G_DBUS_ERROR_FILE_NOT_FOUND: c_int = 17;
pub const G_DBUS_ERROR_FILE_EXISTS: c_int = 18;
pub const G_DBUS_ERROR_UNKNOWN_METHOD: c_int = 19;
pub const G_DBUS_ERROR_TIMED_OUT: c_int = 20;
pub const G_DBUS_ERROR_MATCH_RULE_NOT_FOUND: c_int = 21;
pub const G_DBUS_ERROR_MATCH_RULE_INVALID: c_int = 22;
pub const G_DBUS_ERROR_SPAWN_EXEC_FAILED: c_int = 23;
pub const G_DBUS_ERROR_SPAWN_FORK_FAILED: c_int = 24;
pub const G_DBUS_ERROR_SPAWN_CHILD_EXITED: c_int = 25;
pub const G_DBUS_ERROR_SPAWN_CHILD_SIGNALED: c_int = 26;
pub const G_DBUS_ERROR_SPAWN_FAILED: c_int = 27;
pub const G_DBUS_ERROR_SPAWN_SETUP_FAILED: c_int = 28;
pub const G_DBUS_ERROR_SPAWN_CONFIG_INVALID: c_int = 29;
pub const G_DBUS_ERROR_SPAWN_SERVICE_INVALID: c_int = 30;
pub const G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND: c_int = 31;
pub const G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID: c_int = 32;
pub const G_DBUS_ERROR_SPAWN_FILE_INVALID: c_int = 33;
pub const G_DBUS_ERROR_SPAWN_NO_MEMORY: c_int = 34;
pub const G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN: c_int = 35;
pub const G_DBUS_ERROR_INVALID_SIGNATURE: c_int = 36;
pub const G_DBUS_ERROR_INVALID_FILE_CONTENT: c_int = 37;
pub const G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN: c_int = 38;
pub const G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN: c_int = 39;
pub const G_DBUS_ERROR_OBJECT_PATH_IN_USE: c_int = 40;
pub const G_DBUS_ERROR_UNKNOWN_OBJECT: c_int = 41;
pub const G_DBUS_ERROR_UNKNOWN_INTERFACE: c_int = 42;
pub const G_DBUS_ERROR_UNKNOWN_PROPERTY: c_int = 43;
pub const G_DBUS_ERROR_PROPERTY_READ_ONLY: c_int = 44;
pub const GDBusError = c_uint;
pub const G_DBUS_CONNECTION_FLAGS_NONE: c_int = 0;
pub const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT: c_int = 1;
pub const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER: c_int = 2;
pub const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: c_int = 4;
pub const G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION: c_int = 8;
pub const G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING: c_int = 16;
pub const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER: c_int = 32;
pub const G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE: c_int = 64;
pub const GDBusConnectionFlags = c_uint;
pub const G_DBUS_CAPABILITY_FLAGS_NONE: c_int = 0;
pub const G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING: c_int = 1;
pub const GDBusCapabilityFlags = c_uint;
pub const G_DBUS_CALL_FLAGS_NONE: c_int = 0;
pub const G_DBUS_CALL_FLAGS_NO_AUTO_START: c_int = 1;
pub const G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: c_int = 2;
pub const GDBusCallFlags = c_uint;
pub const G_DBUS_MESSAGE_TYPE_INVALID: c_int = 0;
pub const G_DBUS_MESSAGE_TYPE_METHOD_CALL: c_int = 1;
pub const G_DBUS_MESSAGE_TYPE_METHOD_RETURN: c_int = 2;
pub const G_DBUS_MESSAGE_TYPE_ERROR: c_int = 3;
pub const G_DBUS_MESSAGE_TYPE_SIGNAL: c_int = 4;
pub const GDBusMessageType = c_uint;
pub const G_DBUS_MESSAGE_FLAGS_NONE: c_int = 0;
pub const G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED: c_int = 1;
pub const G_DBUS_MESSAGE_FLAGS_NO_AUTO_START: c_int = 2;
pub const G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: c_int = 4;
pub const GDBusMessageFlags = c_uint;
pub const G_DBUS_MESSAGE_HEADER_FIELD_INVALID: c_int = 0;
pub const G_DBUS_MESSAGE_HEADER_FIELD_PATH: c_int = 1;
pub const G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE: c_int = 2;
pub const G_DBUS_MESSAGE_HEADER_FIELD_MEMBER: c_int = 3;
pub const G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME: c_int = 4;
pub const G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL: c_int = 5;
pub const G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION: c_int = 6;
pub const G_DBUS_MESSAGE_HEADER_FIELD_SENDER: c_int = 7;
pub const G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE: c_int = 8;
pub const G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS: c_int = 9;
pub const GDBusMessageHeaderField = c_uint;
pub const G_DBUS_PROPERTY_INFO_FLAGS_NONE: c_int = 0;
pub const G_DBUS_PROPERTY_INFO_FLAGS_READABLE: c_int = 1;
pub const G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE: c_int = 2;
pub const GDBusPropertyInfoFlags = c_uint;
pub const G_DBUS_SUBTREE_FLAGS_NONE: c_int = 0;
pub const G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES: c_int = 1;
pub const GDBusSubtreeFlags = c_uint;
pub const G_DBUS_SERVER_FLAGS_NONE: c_int = 0;
pub const G_DBUS_SERVER_FLAGS_RUN_IN_THREAD: c_int = 1;
pub const G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: c_int = 2;
pub const G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER: c_int = 4;
pub const GDBusServerFlags = c_uint;
pub const G_DBUS_SIGNAL_FLAGS_NONE: c_int = 0;
pub const G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE: c_int = 1;
pub const G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE: c_int = 2;
pub const G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH: c_int = 4;
pub const GDBusSignalFlags = c_uint;
pub const G_DBUS_SEND_MESSAGE_FLAGS_NONE: c_int = 0;
pub const G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL: c_int = 1;
pub const GDBusSendMessageFlags = c_uint;
pub const G_CREDENTIALS_TYPE_INVALID: c_int = 0;
pub const G_CREDENTIALS_TYPE_LINUX_UCRED: c_int = 1;
pub const G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED: c_int = 2;
pub const G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED: c_int = 3;
pub const G_CREDENTIALS_TYPE_SOLARIS_UCRED: c_int = 4;
pub const G_CREDENTIALS_TYPE_NETBSD_UNPCBID: c_int = 5;
pub const G_CREDENTIALS_TYPE_APPLE_XUCRED: c_int = 6;
pub const G_CREDENTIALS_TYPE_WIN32_PID: c_int = 7;
pub const GCredentialsType = c_uint;
pub const G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN: c_int = 66;
pub const G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN: c_int = 108;
pub const GDBusMessageByteOrder = c_uint;
pub const G_APPLICATION_FLAGS_NONE: c_int = 0;
pub const G_APPLICATION_DEFAULT_FLAGS: c_int = 0;
pub const G_APPLICATION_IS_SERVICE: c_int = 1;
pub const G_APPLICATION_IS_LAUNCHER: c_int = 2;
pub const G_APPLICATION_HANDLES_OPEN: c_int = 4;
pub const G_APPLICATION_HANDLES_COMMAND_LINE: c_int = 8;
pub const G_APPLICATION_SEND_ENVIRONMENT: c_int = 16;
pub const G_APPLICATION_NON_UNIQUE: c_int = 32;
pub const G_APPLICATION_CAN_OVERRIDE_APP_ID: c_int = 64;
pub const G_APPLICATION_ALLOW_REPLACEMENT: c_int = 128;
pub const G_APPLICATION_REPLACE: c_int = 256;
pub const GApplicationFlags = c_uint;
pub const G_TLS_ERROR_UNAVAILABLE: c_int = 0;
pub const G_TLS_ERROR_MISC: c_int = 1;
pub const G_TLS_ERROR_BAD_CERTIFICATE: c_int = 2;
pub const G_TLS_ERROR_NOT_TLS: c_int = 3;
pub const G_TLS_ERROR_HANDSHAKE: c_int = 4;
pub const G_TLS_ERROR_CERTIFICATE_REQUIRED: c_int = 5;
pub const G_TLS_ERROR_EOF: c_int = 6;
pub const G_TLS_ERROR_INAPPROPRIATE_FALLBACK: c_int = 7;
pub const G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD: c_int = 8;
pub const GTlsError = c_uint;
pub const G_TLS_CERTIFICATE_NO_FLAGS: c_int = 0;
pub const G_TLS_CERTIFICATE_UNKNOWN_CA: c_int = 1;
pub const G_TLS_CERTIFICATE_BAD_IDENTITY: c_int = 2;
pub const G_TLS_CERTIFICATE_NOT_ACTIVATED: c_int = 4;
pub const G_TLS_CERTIFICATE_EXPIRED: c_int = 8;
pub const G_TLS_CERTIFICATE_REVOKED: c_int = 16;
pub const G_TLS_CERTIFICATE_INSECURE: c_int = 32;
pub const G_TLS_CERTIFICATE_GENERIC_ERROR: c_int = 64;
pub const G_TLS_CERTIFICATE_VALIDATE_ALL: c_int = 127;
pub const GTlsCertificateFlags = c_uint;
pub const G_TLS_AUTHENTICATION_NONE: c_int = 0;
pub const G_TLS_AUTHENTICATION_REQUESTED: c_int = 1;
pub const G_TLS_AUTHENTICATION_REQUIRED: c_int = 2;
pub const GTlsAuthenticationMode = c_uint;
pub const G_TLS_CHANNEL_BINDING_TLS_UNIQUE: c_int = 0;
pub const G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT: c_int = 1;
pub const G_TLS_CHANNEL_BINDING_TLS_EXPORTER: c_int = 2;
pub const GTlsChannelBindingType = c_uint;
pub const G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED: c_int = 0;
pub const G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE: c_int = 1;
pub const G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE: c_int = 2;
pub const G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED: c_int = 3;
pub const G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR: c_int = 4;
pub const GTlsChannelBindingError = c_uint;
pub const G_TLS_REHANDSHAKE_NEVER: c_int = 0;
pub const G_TLS_REHANDSHAKE_SAFELY: c_int = 1;
pub const G_TLS_REHANDSHAKE_UNSAFELY: c_int = 2;
pub const GTlsRehandshakeMode = c_uint;
pub const G_TLS_PASSWORD_NONE: c_int = 0;
pub const G_TLS_PASSWORD_RETRY: c_int = 2;
pub const G_TLS_PASSWORD_MANY_TRIES: c_int = 4;
pub const G_TLS_PASSWORD_FINAL_TRY: c_int = 8;
pub const G_TLS_PASSWORD_PKCS11_USER: c_int = 16;
pub const G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER: c_int = 32;
pub const G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC: c_int = 64;
pub const enum__GTlsPasswordFlags = c_uint;
pub const GTlsPasswordFlags = enum__GTlsPasswordFlags;
pub const G_TLS_INTERACTION_UNHANDLED: c_int = 0;
pub const G_TLS_INTERACTION_HANDLED: c_int = 1;
pub const G_TLS_INTERACTION_FAILED: c_int = 2;
pub const GTlsInteractionResult = c_uint;
pub const G_DBUS_INTERFACE_SKELETON_FLAGS_NONE: c_int = 0;
pub const G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD: c_int = 1;
pub const GDBusInterfaceSkeletonFlags = c_uint;
pub const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE: c_int = 0;
pub const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START: c_int = 1;
pub const GDBusObjectManagerClientFlags = c_uint;
pub const G_TLS_DATABASE_VERIFY_NONE: c_int = 0;
pub const GTlsDatabaseVerifyFlags = c_uint;
pub const G_TLS_DATABASE_LOOKUP_NONE: c_int = 0;
pub const G_TLS_DATABASE_LOOKUP_KEYPAIR: c_int = 1;
pub const GTlsDatabaseLookupFlags = c_uint;
pub const G_TLS_CERTIFICATE_REQUEST_NONE: c_int = 0;
pub const GTlsCertificateRequestFlags = c_uint;
pub const G_TLS_PROTOCOL_VERSION_UNKNOWN: c_int = 0;
pub const G_TLS_PROTOCOL_VERSION_SSL_3_0: c_int = 1;
pub const G_TLS_PROTOCOL_VERSION_TLS_1_0: c_int = 2;
pub const G_TLS_PROTOCOL_VERSION_TLS_1_1: c_int = 3;
pub const G_TLS_PROTOCOL_VERSION_TLS_1_2: c_int = 4;
pub const G_TLS_PROTOCOL_VERSION_TLS_1_3: c_int = 5;
pub const G_TLS_PROTOCOL_VERSION_DTLS_1_0: c_int = 201;
pub const G_TLS_PROTOCOL_VERSION_DTLS_1_2: c_int = 202;
pub const GTlsProtocolVersion = c_uint;
pub const G_IO_MODULE_SCOPE_NONE: c_int = 0;
pub const G_IO_MODULE_SCOPE_BLOCK_DUPLICATES: c_int = 1;
pub const GIOModuleScopeFlags = c_uint;
pub const G_SOCKET_CLIENT_RESOLVING: c_int = 0;
pub const G_SOCKET_CLIENT_RESOLVED: c_int = 1;
pub const G_SOCKET_CLIENT_CONNECTING: c_int = 2;
pub const G_SOCKET_CLIENT_CONNECTED: c_int = 3;
pub const G_SOCKET_CLIENT_PROXY_NEGOTIATING: c_int = 4;
pub const G_SOCKET_CLIENT_PROXY_NEGOTIATED: c_int = 5;
pub const G_SOCKET_CLIENT_TLS_HANDSHAKING: c_int = 6;
pub const G_SOCKET_CLIENT_TLS_HANDSHAKED: c_int = 7;
pub const G_SOCKET_CLIENT_COMPLETE: c_int = 8;
pub const GSocketClientEvent = c_uint;
pub const G_SOCKET_LISTENER_BINDING: c_int = 0;
pub const G_SOCKET_LISTENER_BOUND: c_int = 1;
pub const G_SOCKET_LISTENER_LISTENING: c_int = 2;
pub const G_SOCKET_LISTENER_LISTENED: c_int = 3;
pub const GSocketListenerEvent = c_uint;
pub const G_TEST_DBUS_NONE: c_int = 0;
pub const GTestDBusFlags = c_uint;
pub const G_SUBPROCESS_FLAGS_NONE: c_int = 0;
pub const G_SUBPROCESS_FLAGS_STDIN_PIPE: c_int = 1;
pub const G_SUBPROCESS_FLAGS_STDIN_INHERIT: c_int = 2;
pub const G_SUBPROCESS_FLAGS_STDOUT_PIPE: c_int = 4;
pub const G_SUBPROCESS_FLAGS_STDOUT_SILENCE: c_int = 8;
pub const G_SUBPROCESS_FLAGS_STDERR_PIPE: c_int = 16;
pub const G_SUBPROCESS_FLAGS_STDERR_SILENCE: c_int = 32;
pub const G_SUBPROCESS_FLAGS_STDERR_MERGE: c_int = 64;
pub const G_SUBPROCESS_FLAGS_INHERIT_FDS: c_int = 128;
pub const G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP: c_int = 256;
pub const GSubprocessFlags = c_uint;
pub const G_NOTIFICATION_PRIORITY_NORMAL: c_int = 0;
pub const G_NOTIFICATION_PRIORITY_LOW: c_int = 1;
pub const G_NOTIFICATION_PRIORITY_HIGH: c_int = 2;
pub const G_NOTIFICATION_PRIORITY_URGENT: c_int = 3;
pub const GNotificationPriority = c_uint;
pub const G_NETWORK_CONNECTIVITY_LOCAL: c_int = 1;
pub const G_NETWORK_CONNECTIVITY_LIMITED: c_int = 2;
pub const G_NETWORK_CONNECTIVITY_PORTAL: c_int = 3;
pub const G_NETWORK_CONNECTIVITY_FULL: c_int = 4;
pub const GNetworkConnectivity = c_uint;
pub const G_POLLABLE_RETURN_FAILED: c_int = 0;
pub const G_POLLABLE_RETURN_OK: c_int = 1;
pub const G_POLLABLE_RETURN_WOULD_BLOCK: c_int = -27;
pub const GPollableReturn = c_int;
pub const G_MEMORY_MONITOR_WARNING_LEVEL_LOW: c_int = 50;
pub const G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM: c_int = 100;
pub const G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL: c_int = 255;
pub const GMemoryMonitorWarningLevel = c_uint;
pub const struct__GAppLaunchContextPrivate = opaque {};
pub const GAppLaunchContextPrivate = struct__GAppLaunchContextPrivate;
pub const struct__GAppLaunchContext = extern struct {
    parent_instance: GObject,
    priv: ?*GAppLaunchContextPrivate,
};
pub const GAppLaunchContext = struct__GAppLaunchContext;
pub const struct__GAppInfo = opaque {};
pub const GAppInfo = struct__GAppInfo;
pub const struct__GAsyncResult = opaque {};
pub const GAsyncResult = struct__GAsyncResult;
pub const struct__GAsyncInitable = opaque {};
pub const GAsyncInitable = struct__GAsyncInitable;
pub const struct__GInputStreamPrivate = opaque {};
pub const GInputStreamPrivate = struct__GInputStreamPrivate;
pub const struct__GInputStream = extern struct {
    parent_instance: GObject,
    priv: ?*GInputStreamPrivate,
};
pub const GInputStream = struct__GInputStream;
pub const struct__GFilterInputStream = extern struct {
    parent_instance: GInputStream,
    base_stream: [*c]GInputStream,
};
pub const GFilterInputStream = struct__GFilterInputStream;
pub const struct__GBufferedInputStreamPrivate = opaque {};
pub const GBufferedInputStreamPrivate = struct__GBufferedInputStreamPrivate;
pub const struct__GBufferedInputStream = extern struct {
    parent_instance: GFilterInputStream,
    priv: ?*GBufferedInputStreamPrivate,
};
pub const GBufferedInputStream = struct__GBufferedInputStream;
pub const struct__GOutputStreamPrivate = opaque {};
pub const GOutputStreamPrivate = struct__GOutputStreamPrivate;
pub const struct__GOutputStream = extern struct {
    parent_instance: GObject,
    priv: ?*GOutputStreamPrivate,
};
pub const GOutputStream = struct__GOutputStream;
pub const struct__GFilterOutputStream = extern struct {
    parent_instance: GOutputStream,
    base_stream: [*c]GOutputStream,
};
pub const GFilterOutputStream = struct__GFilterOutputStream;
pub const struct__GBufferedOutputStreamPrivate = opaque {};
pub const GBufferedOutputStreamPrivate = struct__GBufferedOutputStreamPrivate;
pub const struct__GBufferedOutputStream = extern struct {
    parent_instance: GFilterOutputStream,
    priv: ?*GBufferedOutputStreamPrivate,
};
pub const GBufferedOutputStream = struct__GBufferedOutputStream;
pub const struct__GCancellablePrivate = opaque {};
pub const GCancellablePrivate = struct__GCancellablePrivate;
pub const struct__GCancellable = extern struct {
    parent_instance: GObject,
    priv: ?*GCancellablePrivate,
};
pub const GCancellable = struct__GCancellable;
pub const struct__GCharsetConverter = opaque {};
pub const GCharsetConverter = struct__GCharsetConverter;
pub const struct__GConverter = opaque {};
pub const GConverter = struct__GConverter;
pub const struct__GConverterInputStreamPrivate = opaque {};
pub const GConverterInputStreamPrivate = struct__GConverterInputStreamPrivate;
pub const struct__GConverterInputStream = extern struct {
    parent_instance: GFilterInputStream,
    priv: ?*GConverterInputStreamPrivate,
};
pub const GConverterInputStream = struct__GConverterInputStream;
pub const struct__GConverterOutputStreamPrivate = opaque {};
pub const GConverterOutputStreamPrivate = struct__GConverterOutputStreamPrivate;
pub const struct__GConverterOutputStream = extern struct {
    parent_instance: GFilterOutputStream,
    priv: ?*GConverterOutputStreamPrivate,
};
pub const GConverterOutputStream = struct__GConverterOutputStream;
pub const struct__GDatagramBased = opaque {};
pub const GDatagramBased = struct__GDatagramBased;
pub const struct__GDataInputStreamPrivate = opaque {};
pub const GDataInputStreamPrivate = struct__GDataInputStreamPrivate;
pub const struct__GDataInputStream = extern struct {
    parent_instance: GBufferedInputStream,
    priv: ?*GDataInputStreamPrivate,
};
pub const GDataInputStream = struct__GDataInputStream;
pub const struct__GSimplePermission = opaque {};
pub const GSimplePermission = struct__GSimplePermission;
pub const struct__GZlibCompressor = opaque {};
pub const GZlibCompressor = struct__GZlibCompressor;
pub const struct__GZlibDecompressor = opaque {};
pub const GZlibDecompressor = struct__GZlibDecompressor;
pub const struct__GSimpleActionGroupPrivate = opaque {};
pub const GSimpleActionGroupPrivate = struct__GSimpleActionGroupPrivate;
pub const struct__GSimpleActionGroup = extern struct {
    parent_instance: GObject,
    priv: ?*GSimpleActionGroupPrivate,
};
pub const GSimpleActionGroup = struct__GSimpleActionGroup;
pub const struct__GRemoteActionGroup = opaque {};
pub const GRemoteActionGroup = struct__GRemoteActionGroup;
pub const struct__GDBusActionGroup = opaque {};
pub const GDBusActionGroup = struct__GDBusActionGroup;
pub const struct__GActionMap = opaque {};
pub const GActionMap = struct__GActionMap;
pub const struct__GActionGroup = opaque {};
pub const GActionGroup = struct__GActionGroup;
pub const struct__GPropertyAction = opaque {};
pub const GPropertyAction = struct__GPropertyAction;
pub const struct__GSimpleAction = opaque {};
pub const GSimpleAction = struct__GSimpleAction;
pub const struct__GAction = opaque {};
pub const GAction = struct__GAction;
pub const struct__GApplicationPrivate = opaque {};
pub const GApplicationPrivate = struct__GApplicationPrivate;
pub const struct__GApplication = extern struct {
    parent_instance: GObject,
    priv: ?*GApplicationPrivate,
};
pub const GApplication = struct__GApplication;
pub const struct__GApplicationCommandLinePrivate = opaque {};
pub const GApplicationCommandLinePrivate = struct__GApplicationCommandLinePrivate;
pub const struct__GApplicationCommandLine = extern struct {
    parent_instance: GObject,
    priv: ?*GApplicationCommandLinePrivate,
};
pub const GApplicationCommandLine = struct__GApplicationCommandLine;
pub const struct__GSettingsBackend = opaque {};
pub const GSettingsBackend = struct__GSettingsBackend;
pub const struct__GSettingsPrivate = opaque {};
pub const GSettingsPrivate = struct__GSettingsPrivate;
pub const struct__GSettings = extern struct {
    parent_instance: GObject,
    priv: ?*GSettingsPrivate,
};
pub const GSettings = struct__GSettings;
pub const struct__GPermissionPrivate = opaque {};
pub const GPermissionPrivate = struct__GPermissionPrivate;
pub const struct__GPermission = extern struct {
    parent_instance: GObject,
    priv: ?*GPermissionPrivate,
};
pub const GPermission = struct__GPermission;
pub const struct__GMenuModelPrivate = opaque {};
pub const GMenuModelPrivate = struct__GMenuModelPrivate;
pub const struct__GMenuModel = extern struct {
    parent_instance: GObject,
    priv: ?*GMenuModelPrivate,
};
pub const GMenuModel = struct__GMenuModel;
pub const struct__GNotification = opaque {};
pub const GNotification = struct__GNotification;
pub const struct__GDrive = opaque {};
pub const GDrive = struct__GDrive;
pub const struct__GFileEnumeratorPrivate = opaque {};
pub const GFileEnumeratorPrivate = struct__GFileEnumeratorPrivate;
pub const struct__GFileEnumerator = extern struct {
    parent_instance: GObject,
    priv: ?*GFileEnumeratorPrivate,
};
pub const GFileEnumerator = struct__GFileEnumerator;
pub const struct__GFileMonitorPrivate = opaque {};
pub const GFileMonitorPrivate = struct__GFileMonitorPrivate;
pub const struct__GFileMonitor = extern struct {
    parent_instance: GObject,
    priv: ?*GFileMonitorPrivate,
};
pub const GFileMonitor = struct__GFileMonitor;
pub const struct__GFile = opaque {};
pub const GFile = struct__GFile;
pub const struct__GFileInfo = opaque {};
pub const GFileInfo = struct__GFileInfo;
pub const struct__GFileAttributeMatcher = opaque {};
pub const GFileAttributeMatcher = struct__GFileAttributeMatcher;
pub const struct__GFileAttributeInfo = extern struct {
    name: [*c]u8,
    type: GFileAttributeType,
    flags: GFileAttributeInfoFlags,
};
pub const GFileAttributeInfo = struct__GFileAttributeInfo;
pub const struct__GFileAttributeInfoList = extern struct {
    infos: [*c]GFileAttributeInfo,
    n_infos: c_int,
};
pub const GFileAttributeInfoList = struct__GFileAttributeInfoList;
pub const struct__GFileDescriptorBased = opaque {};
pub const GFileDescriptorBased = struct__GFileDescriptorBased;
pub const struct__GFileInputStreamPrivate = opaque {};
pub const GFileInputStreamPrivate = struct__GFileInputStreamPrivate;
pub const struct__GFileInputStream = extern struct {
    parent_instance: GInputStream,
    priv: ?*GFileInputStreamPrivate,
};
pub const GFileInputStream = struct__GFileInputStream;
pub const struct__GFileOutputStreamPrivate = opaque {};
pub const GFileOutputStreamPrivate = struct__GFileOutputStreamPrivate;
pub const struct__GFileOutputStream = extern struct {
    parent_instance: GOutputStream,
    priv: ?*GFileOutputStreamPrivate,
};
pub const GFileOutputStream = struct__GFileOutputStream;
pub const struct__GIOStreamPrivate = opaque {};
pub const GIOStreamPrivate = struct__GIOStreamPrivate;
pub const struct__GIOStream = extern struct {
    parent_instance: GObject,
    priv: ?*GIOStreamPrivate,
};
pub const GIOStream = struct__GIOStream;
pub const struct__GFileIOStreamPrivate = opaque {};
pub const GFileIOStreamPrivate = struct__GFileIOStreamPrivate;
pub const struct__GFileIOStream = extern struct {
    parent_instance: GIOStream,
    priv: ?*GFileIOStreamPrivate,
};
pub const GFileIOStream = struct__GFileIOStream;
pub const struct__GFileIcon = opaque {};
pub const GFileIcon = struct__GFileIcon;
pub const struct__GFilenameCompleter = opaque {};
pub const GFilenameCompleter = struct__GFilenameCompleter;
pub const struct__GIcon = opaque {};
pub const GIcon = struct__GIcon;
pub const struct__GInetAddressPrivate = opaque {};
pub const GInetAddressPrivate = struct__GInetAddressPrivate;
pub const struct__GInetAddress = extern struct {
    parent_instance: GObject,
    priv: ?*GInetAddressPrivate,
};
pub const GInetAddress = struct__GInetAddress;
pub const struct__GInetAddressMaskPrivate = opaque {};
pub const GInetAddressMaskPrivate = struct__GInetAddressMaskPrivate;
pub const struct__GInetAddressMask = extern struct {
    parent_instance: GObject,
    priv: ?*GInetAddressMaskPrivate,
};
pub const GInetAddressMask = struct__GInetAddressMask;
pub const struct__GSocketAddress = extern struct {
    parent_instance: GObject,
};
pub const GSocketAddress = struct__GSocketAddress;
pub const struct__GInetSocketAddressPrivate = opaque {};
pub const GInetSocketAddressPrivate = struct__GInetSocketAddressPrivate;
pub const struct__GInetSocketAddress = extern struct {
    parent_instance: GSocketAddress,
    priv: ?*GInetSocketAddressPrivate,
};
pub const GInetSocketAddress = struct__GInetSocketAddress;
pub const struct__GNativeSocketAddressPrivate = opaque {};
pub const GNativeSocketAddressPrivate = struct__GNativeSocketAddressPrivate;
pub const struct__GNativeSocketAddress = extern struct {
    parent_instance: GSocketAddress,
    priv: ?*GNativeSocketAddressPrivate,
};
pub const GNativeSocketAddress = struct__GNativeSocketAddress;
pub const struct__GInitable = opaque {};
pub const GInitable = struct__GInitable;
pub const struct__GIOModule = opaque {};
pub const GIOModule = struct__GIOModule;
pub const struct__GIOExtensionPoint = opaque {};
pub const GIOExtensionPoint = struct__GIOExtensionPoint;
pub const struct__GIOExtension = opaque {};
pub const GIOExtension = struct__GIOExtension;
pub const struct__GIOSchedulerJob = opaque {};
pub const GIOSchedulerJob = struct__GIOSchedulerJob;
pub const struct__GIOStreamAdapter = opaque {};
pub const GIOStreamAdapter = struct__GIOStreamAdapter;
pub const struct__GLoadableIcon = opaque {};
pub const GLoadableIcon = struct__GLoadableIcon;
pub const struct__GBytesIcon = opaque {};
pub const GBytesIcon = struct__GBytesIcon;
pub const struct__GMemoryInputStreamPrivate = opaque {};
pub const GMemoryInputStreamPrivate = struct__GMemoryInputStreamPrivate;
pub const struct__GMemoryInputStream = extern struct {
    parent_instance: GInputStream,
    priv: ?*GMemoryInputStreamPrivate,
};
pub const GMemoryInputStream = struct__GMemoryInputStream;
pub const struct__GMemoryOutputStreamPrivate = opaque {};
pub const GMemoryOutputStreamPrivate = struct__GMemoryOutputStreamPrivate;
pub const struct__GMemoryOutputStream = extern struct {
    parent_instance: GOutputStream,
    priv: ?*GMemoryOutputStreamPrivate,
};
pub const GMemoryOutputStream = struct__GMemoryOutputStream;
pub const struct__GMount = opaque {};
pub const GMount = struct__GMount;
pub const struct__GMountOperationPrivate = opaque {};
pub const GMountOperationPrivate = struct__GMountOperationPrivate;
pub const struct__GMountOperation = extern struct {
    parent_instance: GObject,
    priv: ?*GMountOperationPrivate,
};
pub const GMountOperation = struct__GMountOperation;
pub const struct__GNetworkAddressPrivate = opaque {};
pub const GNetworkAddressPrivate = struct__GNetworkAddressPrivate;
pub const struct__GNetworkAddress = extern struct {
    parent_instance: GObject,
    priv: ?*GNetworkAddressPrivate,
};
pub const GNetworkAddress = struct__GNetworkAddress;
pub const struct__GNetworkMonitor = opaque {};
pub const GNetworkMonitor = struct__GNetworkMonitor;
pub const struct__GNetworkServicePrivate = opaque {};
pub const GNetworkServicePrivate = struct__GNetworkServicePrivate;
pub const struct__GNetworkService = extern struct {
    parent_instance: GObject,
    priv: ?*GNetworkServicePrivate,
};
pub const GNetworkService = struct__GNetworkService;
pub const struct__GSimpleIOStream = opaque {};
pub const GSimpleIOStream = struct__GSimpleIOStream;
pub const struct__GPollableInputStream = opaque {};
pub const GPollableInputStream = struct__GPollableInputStream;
pub const struct__GPollableOutputStream = opaque {};
pub const GPollableOutputStream = struct__GPollableOutputStream;
pub const struct__GResolverPrivate = opaque {};
pub const GResolverPrivate = struct__GResolverPrivate;
pub const struct__GResolver = extern struct {
    parent_instance: GObject,
    priv: ?*GResolverPrivate,
};
pub const GResolver = struct__GResolver;
pub const struct__GResource = opaque {};
pub const GResource = struct__GResource;
pub const struct__GSeekable = opaque {};
pub const GSeekable = struct__GSeekable;
pub const struct__GSimpleAsyncResult = opaque {};
pub const GSimpleAsyncResult = struct__GSimpleAsyncResult;
pub const struct__GSocketPrivate = opaque {};
pub const GSocketPrivate = struct__GSocketPrivate;
pub const struct__GSocket = extern struct {
    parent_instance: GObject,
    priv: ?*GSocketPrivate,
};
pub const GSocket = struct__GSocket;
pub const struct__GSocketControlMessagePrivate = opaque {};
pub const GSocketControlMessagePrivate = struct__GSocketControlMessagePrivate;
pub const struct__GSocketControlMessage = extern struct {
    parent_instance: GObject,
    priv: ?*GSocketControlMessagePrivate,
};
pub const GSocketControlMessage = struct__GSocketControlMessage;
pub const struct__GSocketClientPrivate = opaque {};
pub const GSocketClientPrivate = struct__GSocketClientPrivate;
pub const struct__GSocketClient = extern struct {
    parent_instance: GObject,
    priv: ?*GSocketClientPrivate,
};
pub const GSocketClient = struct__GSocketClient;
pub const struct__GSocketConnectionPrivate = opaque {};
pub const GSocketConnectionPrivate = struct__GSocketConnectionPrivate;
pub const struct__GSocketConnection = extern struct {
    parent_instance: GIOStream,
    priv: ?*GSocketConnectionPrivate,
};
pub const GSocketConnection = struct__GSocketConnection;
pub const struct__GSocketListenerPrivate = opaque {};
pub const GSocketListenerPrivate = struct__GSocketListenerPrivate;
pub const struct__GSocketListener = extern struct {
    parent_instance: GObject,
    priv: ?*GSocketListenerPrivate,
};
pub const GSocketListener = struct__GSocketListener;
pub const struct__GSocketServicePrivate = opaque {};
pub const GSocketServicePrivate = struct__GSocketServicePrivate;
pub const struct__GSocketService = extern struct {
    parent_instance: GSocketListener,
    priv: ?*GSocketServicePrivate,
};
pub const GSocketService = struct__GSocketService;
pub const struct__GSocketAddressEnumerator = extern struct {
    parent_instance: GObject,
};
pub const GSocketAddressEnumerator = struct__GSocketAddressEnumerator;
pub const struct__GSocketConnectable = opaque {};
pub const GSocketConnectable = struct__GSocketConnectable;
pub const struct__GSrvTarget = opaque {};
pub const GSrvTarget = struct__GSrvTarget;
pub const struct__GTask = opaque {};
pub const GTask = struct__GTask;
pub const struct__GTcpConnectionPrivate = opaque {};
pub const GTcpConnectionPrivate = struct__GTcpConnectionPrivate;
pub const struct__GTcpConnection = extern struct {
    parent_instance: GSocketConnection,
    priv: ?*GTcpConnectionPrivate,
};
pub const GTcpConnection = struct__GTcpConnection;
pub const struct__GTcpWrapperConnectionPrivate = opaque {};
pub const GTcpWrapperConnectionPrivate = struct__GTcpWrapperConnectionPrivate;
pub const struct__GTcpWrapperConnection = extern struct {
    parent_instance: GTcpConnection,
    priv: ?*GTcpWrapperConnectionPrivate,
};
pub const GTcpWrapperConnection = struct__GTcpWrapperConnection;
pub const struct__GThreadedSocketServicePrivate = opaque {};
pub const GThreadedSocketServicePrivate = struct__GThreadedSocketServicePrivate;
pub const struct__GThreadedSocketService = extern struct {
    parent_instance: GSocketService,
    priv: ?*GThreadedSocketServicePrivate,
};
pub const GThreadedSocketService = struct__GThreadedSocketService;
pub const struct__GDtlsConnection = opaque {};
pub const GDtlsConnection = struct__GDtlsConnection;
pub const struct__GDtlsClientConnection = opaque {};
pub const GDtlsClientConnection = struct__GDtlsClientConnection;
pub const struct__GDtlsServerConnection = opaque {};
pub const GDtlsServerConnection = struct__GDtlsServerConnection;
pub const struct__GThemedIcon = opaque {};
pub const GThemedIcon = struct__GThemedIcon;
pub const struct__GTlsCertificatePrivate = opaque {};
pub const GTlsCertificatePrivate = struct__GTlsCertificatePrivate;
pub const struct__GTlsCertificate = extern struct {
    parent_instance: GObject,
    priv: ?*GTlsCertificatePrivate,
};
pub const GTlsCertificate = struct__GTlsCertificate;
pub const struct__GTlsClientConnection = opaque {};
pub const GTlsClientConnection = struct__GTlsClientConnection;
pub const struct__GTlsConnectionPrivate = opaque {};
pub const GTlsConnectionPrivate = struct__GTlsConnectionPrivate;
pub const struct__GTlsConnection = extern struct {
    parent_instance: GIOStream,
    priv: ?*GTlsConnectionPrivate,
};
pub const GTlsConnection = struct__GTlsConnection;
pub const struct__GTlsDatabasePrivate = opaque {};
pub const GTlsDatabasePrivate = struct__GTlsDatabasePrivate;
pub const struct__GTlsDatabase = extern struct {
    parent_instance: GObject,
    priv: ?*GTlsDatabasePrivate,
};
pub const GTlsDatabase = struct__GTlsDatabase;
pub const struct__GTlsFileDatabase = opaque {};
pub const GTlsFileDatabase = struct__GTlsFileDatabase;
pub const struct__GTlsInteractionPrivate = opaque {};
pub const GTlsInteractionPrivate = struct__GTlsInteractionPrivate;
pub const struct__GTlsInteraction = extern struct {
    parent_instance: GObject,
    priv: ?*GTlsInteractionPrivate,
};
pub const GTlsInteraction = struct__GTlsInteraction;
pub const struct__GTlsPasswordPrivate = opaque {};
pub const GTlsPasswordPrivate = struct__GTlsPasswordPrivate;
pub const struct__GTlsPassword = extern struct {
    parent_instance: GObject,
    priv: ?*GTlsPasswordPrivate,
};
pub const GTlsPassword = struct__GTlsPassword;
pub const struct__GTlsServerConnection = opaque {};
pub const GTlsServerConnection = struct__GTlsServerConnection;
pub const struct__GVfs = extern struct {
    parent_instance: GObject,
};
pub const GVfs = struct__GVfs;
pub const struct__GProxyResolver = opaque {};
pub const GProxyResolver = struct__GProxyResolver;
pub const struct__GProxy = opaque {};
pub const GProxy = struct__GProxy;
pub const struct__GProxyAddressPrivate = opaque {};
pub const GProxyAddressPrivate = struct__GProxyAddressPrivate;
pub const struct__GProxyAddress = extern struct {
    parent_instance: GInetSocketAddress,
    priv: ?*GProxyAddressPrivate,
};
pub const GProxyAddress = struct__GProxyAddress;
pub const struct__GProxyAddressEnumeratorPrivate = opaque {};
pub const GProxyAddressEnumeratorPrivate = struct__GProxyAddressEnumeratorPrivate;
pub const struct__GProxyAddressEnumerator = extern struct {
    parent_instance: GSocketAddressEnumerator,
    priv: ?*GProxyAddressEnumeratorPrivate,
};
pub const GProxyAddressEnumerator = struct__GProxyAddressEnumerator;
pub const struct__GVolume = opaque {};
pub const GVolume = struct__GVolume;
pub const struct__GVolumeMonitor = extern struct {
    parent_instance: GObject,
    priv: gpointer,
};
pub const GVolumeMonitor = struct__GVolumeMonitor;
pub const GAsyncReadyCallback = ?*const fn ([*c]GObject, ?*GAsyncResult, gpointer) callconv(.C) void;
pub const GFileProgressCallback = ?*const fn (goffset, goffset, gpointer) callconv(.C) void;
pub const GFileReadMoreCallback = ?*const fn ([*c]const u8, goffset, gpointer) callconv(.C) gboolean;
pub const GFileMeasureProgressCallback = ?*const fn (gboolean, guint64, guint64, guint64, gpointer) callconv(.C) void;
pub const GIOSchedulerJobFunc = ?*const fn (?*GIOSchedulerJob, [*c]GCancellable, gpointer) callconv(.C) gboolean;
pub const GSimpleAsyncThreadFunc = ?*const fn (?*GSimpleAsyncResult, [*c]GObject, [*c]GCancellable) callconv(.C) void;
pub const GSocketSourceFunc = ?*const fn ([*c]GSocket, GIOCondition, gpointer) callconv(.C) gboolean;
pub const GDatagramBasedSourceFunc = ?*const fn (?*GDatagramBased, GIOCondition, gpointer) callconv(.C) gboolean;
pub const struct__GInputVector = extern struct {
    buffer: gpointer,
    size: gsize,
};
pub const GInputVector = struct__GInputVector;
pub const struct__GInputMessage = extern struct {
    address: [*c][*c]GSocketAddress,
    vectors: [*c]GInputVector,
    num_vectors: guint,
    bytes_received: gsize,
    flags: gint,
    control_messages: [*c][*c][*c]GSocketControlMessage,
    num_control_messages: [*c]guint,
};
pub const GInputMessage = struct__GInputMessage;
pub const struct__GOutputVector = extern struct {
    buffer: gconstpointer,
    size: gsize,
};
pub const GOutputVector = struct__GOutputVector;
pub const struct__GOutputMessage = extern struct {
    address: [*c]GSocketAddress,
    vectors: [*c]GOutputVector,
    num_vectors: guint,
    bytes_sent: guint,
    control_messages: [*c][*c]GSocketControlMessage,
    num_control_messages: guint,
};
pub const GOutputMessage = struct__GOutputMessage;
pub const struct__GCredentials = opaque {};
pub const GCredentials = struct__GCredentials;
pub const struct__GUnixCredentialsMessagePrivate = opaque {};
pub const GUnixCredentialsMessagePrivate = struct__GUnixCredentialsMessagePrivate;
pub const struct__GUnixCredentialsMessage = extern struct {
    parent_instance: GSocketControlMessage,
    priv: ?*GUnixCredentialsMessagePrivate,
};
pub const GUnixCredentialsMessage = struct__GUnixCredentialsMessage;
pub const struct__GUnixFDListPrivate = opaque {};
pub const GUnixFDListPrivate = struct__GUnixFDListPrivate;
pub const struct__GUnixFDList = extern struct {
    parent_instance: GObject,
    priv: ?*GUnixFDListPrivate,
};
pub const GUnixFDList = struct__GUnixFDList;
pub const struct__GDBusMessage = opaque {};
pub const GDBusMessage = struct__GDBusMessage;
pub const struct__GDBusConnection = opaque {};
pub const GDBusConnection = struct__GDBusConnection;
pub const struct__GDBusProxyPrivate = opaque {};
pub const GDBusProxyPrivate = struct__GDBusProxyPrivate;
pub const struct__GDBusProxy = extern struct {
    parent_instance: GObject,
    priv: ?*GDBusProxyPrivate,
};
pub const GDBusProxy = struct__GDBusProxy;
pub const struct__GDBusMethodInvocation = opaque {};
pub const GDBusMethodInvocation = struct__GDBusMethodInvocation;
pub const struct__GDBusServer = opaque {};
pub const GDBusServer = struct__GDBusServer;
pub const struct__GDBusAuthObserver = opaque {};
pub const GDBusAuthObserver = struct__GDBusAuthObserver;
pub const struct__GDBusErrorEntry = extern struct {
    error_code: gint,
    dbus_error_name: [*c]const gchar,
};
pub const GDBusErrorEntry = struct__GDBusErrorEntry;
pub const GDBusInterfaceMethodCallFunc = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, [*c]const gchar, [*c]const gchar, ?*GVariant, ?*GDBusMethodInvocation, gpointer) callconv(.C) void;
pub const GDBusInterfaceGetPropertyFunc = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, [*c]const gchar, [*c]const gchar, [*c][*c]GError, gpointer) callconv(.C) ?*GVariant;
pub const GDBusInterfaceSetPropertyFunc = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, [*c]const gchar, [*c]const gchar, ?*GVariant, [*c][*c]GError, gpointer) callconv(.C) gboolean;
pub const struct__GDBusInterfaceVTable = extern struct {
    method_call: GDBusInterfaceMethodCallFunc,
    get_property: GDBusInterfaceGetPropertyFunc,
    set_property: GDBusInterfaceSetPropertyFunc,
    padding: [8]gpointer,
};
pub const GDBusInterfaceVTable = struct__GDBusInterfaceVTable;
pub const GDBusSubtreeEnumerateFunc = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, gpointer) callconv(.C) [*c][*c]gchar;
pub const struct__GDBusAnnotationInfo = extern struct {
    ref_count: gint,
    key: [*c]gchar,
    value: [*c]gchar,
    annotations: [*c][*c]GDBusAnnotationInfo,
};
pub const GDBusAnnotationInfo = struct__GDBusAnnotationInfo;
pub const struct__GDBusArgInfo = extern struct {
    ref_count: gint,
    name: [*c]gchar,
    signature: [*c]gchar,
    annotations: [*c][*c]GDBusAnnotationInfo,
};
pub const GDBusArgInfo = struct__GDBusArgInfo;
pub const struct__GDBusMethodInfo = extern struct {
    ref_count: gint,
    name: [*c]gchar,
    in_args: [*c][*c]GDBusArgInfo,
    out_args: [*c][*c]GDBusArgInfo,
    annotations: [*c][*c]GDBusAnnotationInfo,
};
pub const GDBusMethodInfo = struct__GDBusMethodInfo;
pub const struct__GDBusSignalInfo = extern struct {
    ref_count: gint,
    name: [*c]gchar,
    args: [*c][*c]GDBusArgInfo,
    annotations: [*c][*c]GDBusAnnotationInfo,
};
pub const GDBusSignalInfo = struct__GDBusSignalInfo;
pub const struct__GDBusPropertyInfo = extern struct {
    ref_count: gint,
    name: [*c]gchar,
    signature: [*c]gchar,
    flags: GDBusPropertyInfoFlags,
    annotations: [*c][*c]GDBusAnnotationInfo,
};
pub const GDBusPropertyInfo = struct__GDBusPropertyInfo;
pub const struct__GDBusInterfaceInfo = extern struct {
    ref_count: gint,
    name: [*c]gchar,
    methods: [*c][*c]GDBusMethodInfo,
    signals: [*c][*c]GDBusSignalInfo,
    properties: [*c][*c]GDBusPropertyInfo,
    annotations: [*c][*c]GDBusAnnotationInfo,
};
pub const GDBusInterfaceInfo = struct__GDBusInterfaceInfo;
pub const GDBusSubtreeIntrospectFunc = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, [*c]const gchar, gpointer) callconv(.C) [*c][*c]GDBusInterfaceInfo;
pub const GDBusSubtreeDispatchFunc = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, [*c]const gchar, [*c]const gchar, [*c]gpointer, gpointer) callconv(.C) [*c]const GDBusInterfaceVTable;
pub const struct__GDBusSubtreeVTable = extern struct {
    enumerate: GDBusSubtreeEnumerateFunc,
    introspect: GDBusSubtreeIntrospectFunc,
    dispatch: GDBusSubtreeDispatchFunc,
    padding: [8]gpointer,
};
pub const GDBusSubtreeVTable = struct__GDBusSubtreeVTable;
pub const GDBusNodeInfo = struct__GDBusNodeInfo;
pub const struct__GDBusNodeInfo = extern struct {
    ref_count: gint,
    path: [*c]gchar,
    interfaces: [*c][*c]GDBusInterfaceInfo,
    nodes: [*c][*c]GDBusNodeInfo,
    annotations: [*c][*c]GDBusAnnotationInfo,
};
pub const GCancellableSourceFunc = ?*const fn ([*c]GCancellable, gpointer) callconv(.C) gboolean;
pub const GPollableSourceFunc = ?*const fn ([*c]GObject, gpointer) callconv(.C) gboolean;
pub const struct__GDBusInterface = opaque {};
pub const GDBusInterface = struct__GDBusInterface;
pub const struct__GDBusInterfaceSkeletonPrivate = opaque {};
pub const GDBusInterfaceSkeletonPrivate = struct__GDBusInterfaceSkeletonPrivate;
pub const struct__GDBusInterfaceSkeleton = extern struct {
    parent_instance: GObject,
    priv: ?*GDBusInterfaceSkeletonPrivate,
};
pub const GDBusInterfaceSkeleton = struct__GDBusInterfaceSkeleton;
pub const struct__GDBusObject = opaque {};
pub const GDBusObject = struct__GDBusObject;
pub const struct__GDBusObjectSkeletonPrivate = opaque {};
pub const GDBusObjectSkeletonPrivate = struct__GDBusObjectSkeletonPrivate;
pub const struct__GDBusObjectSkeleton = extern struct {
    parent_instance: GObject,
    priv: ?*GDBusObjectSkeletonPrivate,
};
pub const GDBusObjectSkeleton = struct__GDBusObjectSkeleton;
pub const struct__GDBusObjectProxyPrivate = opaque {};
pub const GDBusObjectProxyPrivate = struct__GDBusObjectProxyPrivate;
pub const struct__GDBusObjectProxy = extern struct {
    parent_instance: GObject,
    priv: ?*GDBusObjectProxyPrivate,
};
pub const GDBusObjectProxy = struct__GDBusObjectProxy;
pub const struct__GDBusObjectManager = opaque {};
pub const GDBusObjectManager = struct__GDBusObjectManager;
pub const struct__GDBusObjectManagerClientPrivate = opaque {};
pub const GDBusObjectManagerClientPrivate = struct__GDBusObjectManagerClientPrivate;
pub const struct__GDBusObjectManagerClient = extern struct {
    parent_instance: GObject,
    priv: ?*GDBusObjectManagerClientPrivate,
};
pub const GDBusObjectManagerClient = struct__GDBusObjectManagerClient;
pub const struct__GDBusObjectManagerServerPrivate = opaque {};
pub const GDBusObjectManagerServerPrivate = struct__GDBusObjectManagerServerPrivate;
pub const struct__GDBusObjectManagerServer = extern struct {
    parent_instance: GObject,
    priv: ?*GDBusObjectManagerServerPrivate,
};
pub const GDBusObjectManagerServer = struct__GDBusObjectManagerServer;
pub const GDBusProxyTypeFunc = ?*const fn ([*c]GDBusObjectManagerClient, [*c]const gchar, [*c]const gchar, gpointer) callconv(.C) GType;
pub const struct__GTestDBus = opaque {};
pub const GTestDBus = struct__GTestDBus;
pub const struct__GSubprocess = opaque {};
pub const GSubprocess = struct__GSubprocess;
pub const struct__GSubprocessLauncher = opaque {};
pub const GSubprocessLauncher = struct__GSubprocessLauncher;
pub const struct__GActionInterface = extern struct {
    g_iface: GTypeInterface,
    get_name: ?*const fn (?*GAction) callconv(.C) [*c]const gchar,
    get_parameter_type: ?*const fn (?*GAction) callconv(.C) ?*const GVariantType,
    get_state_type: ?*const fn (?*GAction) callconv(.C) ?*const GVariantType,
    get_state_hint: ?*const fn (?*GAction) callconv(.C) ?*GVariant,
    get_enabled: ?*const fn (?*GAction) callconv(.C) gboolean,
    get_state: ?*const fn (?*GAction) callconv(.C) ?*GVariant,
    change_state: ?*const fn (?*GAction, ?*GVariant) callconv(.C) void,
    activate: ?*const fn (?*GAction, ?*GVariant) callconv(.C) void,
};
pub const GActionInterface = struct__GActionInterface;
pub extern fn _frida_g_action_get_type() GType;
pub extern fn _frida_g_action_get_name(action: ?*GAction) [*c]const gchar;
pub extern fn _frida_g_action_get_parameter_type(action: ?*GAction) ?*const GVariantType;
pub extern fn _frida_g_action_get_state_type(action: ?*GAction) ?*const GVariantType;
pub extern fn _frida_g_action_get_state_hint(action: ?*GAction) ?*GVariant;
pub extern fn _frida_g_action_get_enabled(action: ?*GAction) gboolean;
pub extern fn _frida_g_action_get_state(action: ?*GAction) ?*GVariant;
pub extern fn _frida_g_action_change_state(action: ?*GAction, value: ?*GVariant) void;
pub extern fn _frida_g_action_activate(action: ?*GAction, parameter: ?*GVariant) void;
pub extern fn _frida_g_action_name_is_valid(action_name: [*c]const gchar) gboolean;
pub extern fn _frida_g_action_parse_detailed_name(detailed_name: [*c]const gchar, action_name: [*c][*c]gchar, target_value: [*c]?*GVariant, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_action_print_detailed_name(action_name: [*c]const gchar, target_value: ?*GVariant) [*c]gchar;
pub const struct__GActionGroupInterface = extern struct {
    g_iface: GTypeInterface,
    has_action: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) gboolean,
    list_actions: ?*const fn (?*GActionGroup) callconv(.C) [*c][*c]gchar,
    get_action_enabled: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) gboolean,
    get_action_parameter_type: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) ?*const GVariantType,
    get_action_state_type: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) ?*const GVariantType,
    get_action_state_hint: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) ?*GVariant,
    get_action_state: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) ?*GVariant,
    change_action_state: ?*const fn (?*GActionGroup, [*c]const gchar, ?*GVariant) callconv(.C) void,
    activate_action: ?*const fn (?*GActionGroup, [*c]const gchar, ?*GVariant) callconv(.C) void,
    action_added: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) void,
    action_removed: ?*const fn (?*GActionGroup, [*c]const gchar) callconv(.C) void,
    action_enabled_changed: ?*const fn (?*GActionGroup, [*c]const gchar, gboolean) callconv(.C) void,
    action_state_changed: ?*const fn (?*GActionGroup, [*c]const gchar, ?*GVariant) callconv(.C) void,
    query_action: ?*const fn (?*GActionGroup, [*c]const gchar, [*c]gboolean, [*c]?*const GVariantType, [*c]?*const GVariantType, [*c]?*GVariant, [*c]?*GVariant) callconv(.C) gboolean,
};
pub const GActionGroupInterface = struct__GActionGroupInterface;
pub extern fn _frida_g_action_group_get_type() GType;
pub extern fn _frida_g_action_group_has_action(action_group: ?*GActionGroup, action_name: [*c]const gchar) gboolean;
pub extern fn _frida_g_action_group_list_actions(action_group: ?*GActionGroup) [*c][*c]gchar;
pub extern fn _frida_g_action_group_get_action_parameter_type(action_group: ?*GActionGroup, action_name: [*c]const gchar) ?*const GVariantType;
pub extern fn _frida_g_action_group_get_action_state_type(action_group: ?*GActionGroup, action_name: [*c]const gchar) ?*const GVariantType;
pub extern fn _frida_g_action_group_get_action_state_hint(action_group: ?*GActionGroup, action_name: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_action_group_get_action_enabled(action_group: ?*GActionGroup, action_name: [*c]const gchar) gboolean;
pub extern fn _frida_g_action_group_get_action_state(action_group: ?*GActionGroup, action_name: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_action_group_change_action_state(action_group: ?*GActionGroup, action_name: [*c]const gchar, value: ?*GVariant) void;
pub extern fn _frida_g_action_group_activate_action(action_group: ?*GActionGroup, action_name: [*c]const gchar, parameter: ?*GVariant) void;
pub extern fn _frida_g_action_group_action_added(action_group: ?*GActionGroup, action_name: [*c]const gchar) void;
pub extern fn _frida_g_action_group_action_removed(action_group: ?*GActionGroup, action_name: [*c]const gchar) void;
pub extern fn _frida_g_action_group_action_enabled_changed(action_group: ?*GActionGroup, action_name: [*c]const gchar, enabled: gboolean) void;
pub extern fn _frida_g_action_group_action_state_changed(action_group: ?*GActionGroup, action_name: [*c]const gchar, state: ?*GVariant) void;
pub extern fn _frida_g_action_group_query_action(action_group: ?*GActionGroup, action_name: [*c]const gchar, enabled: [*c]gboolean, parameter_type: [*c]?*const GVariantType, state_type: [*c]?*const GVariantType, state_hint: [*c]?*GVariant, state: [*c]?*GVariant) gboolean;
pub extern fn _frida_g_dbus_connection_export_action_group(connection: ?*GDBusConnection, object_path: [*c]const gchar, action_group: ?*GActionGroup, @"error": [*c][*c]GError) guint;
pub extern fn _frida_g_dbus_connection_unexport_action_group(connection: ?*GDBusConnection, export_id: guint) void;
pub const struct__GActionMapInterface = extern struct {
    g_iface: GTypeInterface,
    lookup_action: ?*const fn (?*GActionMap, [*c]const gchar) callconv(.C) ?*GAction,
    add_action: ?*const fn (?*GActionMap, ?*GAction) callconv(.C) void,
    remove_action: ?*const fn (?*GActionMap, [*c]const gchar) callconv(.C) void,
};
pub const GActionMapInterface = struct__GActionMapInterface;
pub const struct__GActionEntry = extern struct {
    name: [*c]const gchar,
    activate: ?*const fn (?*GSimpleAction, ?*GVariant, gpointer) callconv(.C) void,
    parameter_type: [*c]const gchar,
    state: [*c]const gchar,
    change_state: ?*const fn (?*GSimpleAction, ?*GVariant, gpointer) callconv(.C) void,
    padding: [3]gsize,
};
pub const GActionEntry = struct__GActionEntry;
pub extern fn _frida_g_action_map_get_type() GType;
pub extern fn _frida_g_action_map_lookup_action(action_map: ?*GActionMap, action_name: [*c]const gchar) ?*GAction;
pub extern fn _frida_g_action_map_add_action(action_map: ?*GActionMap, action: ?*GAction) void;
pub extern fn _frida_g_action_map_remove_action(action_map: ?*GActionMap, action_name: [*c]const gchar) void;
pub extern fn _frida_g_action_map_add_action_entries(action_map: ?*GActionMap, entries: [*c]const GActionEntry, n_entries: gint, user_data: gpointer) void;
pub const struct__GAppLaunchContextClass = extern struct {
    parent_class: GObjectClass,
    get_display: ?*const fn ([*c]GAppLaunchContext, ?*GAppInfo, [*c]GList) callconv(.C) [*c]u8,
    get_startup_notify_id: ?*const fn ([*c]GAppLaunchContext, ?*GAppInfo, [*c]GList) callconv(.C) [*c]u8,
    launch_failed: ?*const fn ([*c]GAppLaunchContext, [*c]const u8) callconv(.C) void,
    launched: ?*const fn ([*c]GAppLaunchContext, ?*GAppInfo, ?*GVariant) callconv(.C) void,
    launch_started: ?*const fn ([*c]GAppLaunchContext, ?*GAppInfo, ?*GVariant) callconv(.C) void,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
};
pub const GAppLaunchContextClass = struct__GAppLaunchContextClass;
pub const struct__GAppInfoIface = extern struct {
    g_iface: GTypeInterface,
    dup: ?*const fn (?*GAppInfo) callconv(.C) ?*GAppInfo,
    equal: ?*const fn (?*GAppInfo, ?*GAppInfo) callconv(.C) gboolean,
    get_id: ?*const fn (?*GAppInfo) callconv(.C) [*c]const u8,
    get_name: ?*const fn (?*GAppInfo) callconv(.C) [*c]const u8,
    get_description: ?*const fn (?*GAppInfo) callconv(.C) [*c]const u8,
    get_executable: ?*const fn (?*GAppInfo) callconv(.C) [*c]const u8,
    get_icon: ?*const fn (?*GAppInfo) callconv(.C) ?*GIcon,
    launch: ?*const fn (?*GAppInfo, [*c]GList, [*c]GAppLaunchContext, [*c][*c]GError) callconv(.C) gboolean,
    supports_uris: ?*const fn (?*GAppInfo) callconv(.C) gboolean,
    supports_files: ?*const fn (?*GAppInfo) callconv(.C) gboolean,
    launch_uris: ?*const fn (?*GAppInfo, [*c]GList, [*c]GAppLaunchContext, [*c][*c]GError) callconv(.C) gboolean,
    should_show: ?*const fn (?*GAppInfo) callconv(.C) gboolean,
    set_as_default_for_type: ?*const fn (?*GAppInfo, [*c]const u8, [*c][*c]GError) callconv(.C) gboolean,
    set_as_default_for_extension: ?*const fn (?*GAppInfo, [*c]const u8, [*c][*c]GError) callconv(.C) gboolean,
    add_supports_type: ?*const fn (?*GAppInfo, [*c]const u8, [*c][*c]GError) callconv(.C) gboolean,
    can_remove_supports_type: ?*const fn (?*GAppInfo) callconv(.C) gboolean,
    remove_supports_type: ?*const fn (?*GAppInfo, [*c]const u8, [*c][*c]GError) callconv(.C) gboolean,
    can_delete: ?*const fn (?*GAppInfo) callconv(.C) gboolean,
    do_delete: ?*const fn (?*GAppInfo) callconv(.C) gboolean,
    get_commandline: ?*const fn (?*GAppInfo) callconv(.C) [*c]const u8,
    get_display_name: ?*const fn (?*GAppInfo) callconv(.C) [*c]const u8,
    set_as_last_used_for_type: ?*const fn (?*GAppInfo, [*c]const u8, [*c][*c]GError) callconv(.C) gboolean,
    get_supported_types: ?*const fn (?*GAppInfo) callconv(.C) [*c][*c]const u8,
    launch_uris_async: ?*const fn (?*GAppInfo, [*c]GList, [*c]GAppLaunchContext, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    launch_uris_finish: ?*const fn (?*GAppInfo, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GAppInfoIface = struct__GAppInfoIface;
pub extern fn _frida_g_app_info_get_type() GType;
pub extern fn _frida_g_app_info_create_from_commandline(commandline: [*c]const u8, application_name: [*c]const u8, flags: GAppInfoCreateFlags, @"error": [*c][*c]GError) ?*GAppInfo;
pub extern fn _frida_g_app_info_dup(appinfo: ?*GAppInfo) ?*GAppInfo;
pub extern fn _frida_g_app_info_equal(appinfo1: ?*GAppInfo, appinfo2: ?*GAppInfo) gboolean;
pub extern fn _frida_g_app_info_get_id(appinfo: ?*GAppInfo) [*c]const u8;
pub extern fn _frida_g_app_info_get_name(appinfo: ?*GAppInfo) [*c]const u8;
pub extern fn _frida_g_app_info_get_display_name(appinfo: ?*GAppInfo) [*c]const u8;
pub extern fn _frida_g_app_info_get_description(appinfo: ?*GAppInfo) [*c]const u8;
pub extern fn _frida_g_app_info_get_executable(appinfo: ?*GAppInfo) [*c]const u8;
pub extern fn _frida_g_app_info_get_commandline(appinfo: ?*GAppInfo) [*c]const u8;
pub extern fn _frida_g_app_info_get_icon(appinfo: ?*GAppInfo) ?*GIcon;
pub extern fn _frida_g_app_info_launch(appinfo: ?*GAppInfo, files: [*c]GList, context: [*c]GAppLaunchContext, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_supports_uris(appinfo: ?*GAppInfo) gboolean;
pub extern fn _frida_g_app_info_supports_files(appinfo: ?*GAppInfo) gboolean;
pub extern fn _frida_g_app_info_launch_uris(appinfo: ?*GAppInfo, uris: [*c]GList, context: [*c]GAppLaunchContext, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_launch_uris_async(appinfo: ?*GAppInfo, uris: [*c]GList, context: [*c]GAppLaunchContext, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_app_info_launch_uris_finish(appinfo: ?*GAppInfo, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_should_show(appinfo: ?*GAppInfo) gboolean;
pub extern fn _frida_g_app_info_set_as_default_for_type(appinfo: ?*GAppInfo, content_type: [*c]const u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_set_as_default_for_extension(appinfo: ?*GAppInfo, extension: [*c]const u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_add_supports_type(appinfo: ?*GAppInfo, content_type: [*c]const u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_can_remove_supports_type(appinfo: ?*GAppInfo) gboolean;
pub extern fn _frida_g_app_info_remove_supports_type(appinfo: ?*GAppInfo, content_type: [*c]const u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_get_supported_types(appinfo: ?*GAppInfo) [*c][*c]const u8;
pub extern fn _frida_g_app_info_can_delete(appinfo: ?*GAppInfo) gboolean;
pub extern fn _frida_g_app_info_delete(appinfo: ?*GAppInfo) gboolean;
pub extern fn _frida_g_app_info_set_as_last_used_for_type(appinfo: ?*GAppInfo, content_type: [*c]const u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_get_all() [*c]GList;
pub extern fn _frida_g_app_info_get_all_for_type(content_type: [*c]const u8) [*c]GList;
pub extern fn _frida_g_app_info_get_recommended_for_type(content_type: [*c]const gchar) [*c]GList;
pub extern fn _frida_g_app_info_get_fallback_for_type(content_type: [*c]const gchar) [*c]GList;
pub extern fn _frida_g_app_info_reset_type_associations(content_type: [*c]const u8) void;
pub extern fn _frida_g_app_info_get_default_for_type(content_type: [*c]const u8, must_support_uris: gboolean) ?*GAppInfo;
pub extern fn _frida_g_app_info_get_default_for_type_async(content_type: [*c]const u8, must_support_uris: gboolean, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_app_info_get_default_for_type_finish(result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GAppInfo;
pub extern fn _frida_g_app_info_get_default_for_uri_scheme(uri_scheme: [*c]const u8) ?*GAppInfo;
pub extern fn _frida_g_app_info_get_default_for_uri_scheme_async(uri_scheme: [*c]const u8, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_app_info_get_default_for_uri_scheme_finish(result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GAppInfo;
pub extern fn _frida_g_app_info_launch_default_for_uri(uri: [*c]const u8, context: [*c]GAppLaunchContext, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_info_launch_default_for_uri_async(uri: [*c]const u8, context: [*c]GAppLaunchContext, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_app_info_launch_default_for_uri_finish(result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_app_launch_context_get_type() GType;
pub extern fn _frida_g_app_launch_context_new() [*c]GAppLaunchContext;
pub extern fn _frida_g_app_launch_context_setenv(context: [*c]GAppLaunchContext, variable: [*c]const u8, value: [*c]const u8) void;
pub extern fn _frida_g_app_launch_context_unsetenv(context: [*c]GAppLaunchContext, variable: [*c]const u8) void;
pub extern fn _frida_g_app_launch_context_get_environment(context: [*c]GAppLaunchContext) [*c][*c]u8;
pub extern fn _frida_g_app_launch_context_get_display(context: [*c]GAppLaunchContext, info: ?*GAppInfo, files: [*c]GList) [*c]u8;
pub extern fn _frida_g_app_launch_context_get_startup_notify_id(context: [*c]GAppLaunchContext, info: ?*GAppInfo, files: [*c]GList) [*c]u8;
pub extern fn _frida_g_app_launch_context_launch_failed(context: [*c]GAppLaunchContext, startup_notify_id: [*c]const u8) void;
pub const struct__GAppInfoMonitor = opaque {};
pub const GAppInfoMonitor = struct__GAppInfoMonitor;
pub extern fn _frida_g_app_info_monitor_get_type() GType;
pub extern fn _frida_g_app_info_monitor_get() ?*GAppInfoMonitor;
pub const struct__GApplicationClass = extern struct {
    parent_class: GObjectClass,
    startup: ?*const fn ([*c]GApplication) callconv(.C) void,
    activate: ?*const fn ([*c]GApplication) callconv(.C) void,
    open: ?*const fn ([*c]GApplication, [*c]?*GFile, gint, [*c]const gchar) callconv(.C) void,
    command_line: ?*const fn ([*c]GApplication, [*c]GApplicationCommandLine) callconv(.C) c_int,
    local_command_line: ?*const fn ([*c]GApplication, [*c][*c][*c]gchar, [*c]c_int) callconv(.C) gboolean,
    before_emit: ?*const fn ([*c]GApplication, ?*GVariant) callconv(.C) void,
    after_emit: ?*const fn ([*c]GApplication, ?*GVariant) callconv(.C) void,
    add_platform_data: ?*const fn ([*c]GApplication, [*c]GVariantBuilder) callconv(.C) void,
    quit_mainloop: ?*const fn ([*c]GApplication) callconv(.C) void,
    run_mainloop: ?*const fn ([*c]GApplication) callconv(.C) void,
    shutdown: ?*const fn ([*c]GApplication) callconv(.C) void,
    dbus_register: ?*const fn ([*c]GApplication, ?*GDBusConnection, [*c]const gchar, [*c][*c]GError) callconv(.C) gboolean,
    dbus_unregister: ?*const fn ([*c]GApplication, ?*GDBusConnection, [*c]const gchar) callconv(.C) void,
    handle_local_options: ?*const fn ([*c]GApplication, [*c]GVariantDict) callconv(.C) gint,
    name_lost: ?*const fn ([*c]GApplication) callconv(.C) gboolean,
    padding: [7]gpointer,
};
pub const GApplicationClass = struct__GApplicationClass;
pub extern fn _frida_g_application_get_type() GType;
pub extern fn _frida_g_application_id_is_valid(application_id: [*c]const gchar) gboolean;
pub extern fn _frida_g_application_new(application_id: [*c]const gchar, flags: GApplicationFlags) [*c]GApplication;
pub extern fn _frida_g_application_get_application_id(application: [*c]GApplication) [*c]const gchar;
pub extern fn _frida_g_application_set_application_id(application: [*c]GApplication, application_id: [*c]const gchar) void;
pub extern fn _frida_g_application_get_dbus_connection(application: [*c]GApplication) ?*GDBusConnection;
pub extern fn _frida_g_application_get_dbus_object_path(application: [*c]GApplication) [*c]const gchar;
pub extern fn _frida_g_application_get_inactivity_timeout(application: [*c]GApplication) guint;
pub extern fn _frida_g_application_set_inactivity_timeout(application: [*c]GApplication, inactivity_timeout: guint) void;
pub extern fn _frida_g_application_get_flags(application: [*c]GApplication) GApplicationFlags;
pub extern fn _frida_g_application_set_flags(application: [*c]GApplication, flags: GApplicationFlags) void;
pub extern fn _frida_g_application_get_resource_base_path(application: [*c]GApplication) [*c]const gchar;
pub extern fn _frida_g_application_set_resource_base_path(application: [*c]GApplication, resource_path: [*c]const gchar) void;
pub extern fn _frida_g_application_set_action_group(application: [*c]GApplication, action_group: ?*GActionGroup) void;
pub extern fn _frida_g_application_add_main_option_entries(application: [*c]GApplication, entries: [*c]const GOptionEntry) void;
pub extern fn _frida_g_application_add_main_option(application: [*c]GApplication, long_name: [*c]const u8, short_name: u8, flags: GOptionFlags, arg: GOptionArg, description: [*c]const u8, arg_description: [*c]const u8) void;
pub extern fn _frida_g_application_add_option_group(application: [*c]GApplication, group: ?*GOptionGroup) void;
pub extern fn _frida_g_application_set_option_context_parameter_string(application: [*c]GApplication, parameter_string: [*c]const gchar) void;
pub extern fn _frida_g_application_set_option_context_summary(application: [*c]GApplication, summary: [*c]const gchar) void;
pub extern fn _frida_g_application_set_option_context_description(application: [*c]GApplication, description: [*c]const gchar) void;
pub extern fn _frida_g_application_get_is_registered(application: [*c]GApplication) gboolean;
pub extern fn _frida_g_application_get_is_remote(application: [*c]GApplication) gboolean;
pub extern fn _frida_g_application_register(application: [*c]GApplication, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_application_hold(application: [*c]GApplication) void;
pub extern fn _frida_g_application_release(application: [*c]GApplication) void;
pub extern fn _frida_g_application_activate(application: [*c]GApplication) void;
pub extern fn _frida_g_application_open(application: [*c]GApplication, files: [*c]?*GFile, n_files: gint, hint: [*c]const gchar) void;
pub extern fn _frida_g_application_run(application: [*c]GApplication, argc: c_int, argv: [*c][*c]u8) c_int;
pub extern fn _frida_g_application_quit(application: [*c]GApplication) void;
pub extern fn _frida_g_application_get_default() [*c]GApplication;
pub extern fn _frida_g_application_set_default(application: [*c]GApplication) void;
pub extern fn _frida_g_application_mark_busy(application: [*c]GApplication) void;
pub extern fn _frida_g_application_unmark_busy(application: [*c]GApplication) void;
pub extern fn _frida_g_application_get_is_busy(application: [*c]GApplication) gboolean;
pub extern fn _frida_g_application_send_notification(application: [*c]GApplication, id: [*c]const gchar, notification: ?*GNotification) void;
pub extern fn _frida_g_application_withdraw_notification(application: [*c]GApplication, id: [*c]const gchar) void;
pub extern fn _frida_g_application_bind_busy_property(application: [*c]GApplication, object: gpointer, property: [*c]const gchar) void;
pub extern fn _frida_g_application_unbind_busy_property(application: [*c]GApplication, object: gpointer, property: [*c]const gchar) void;
pub const struct__GApplicationCommandLineClass = extern struct {
    parent_class: GObjectClass,
    print_literal: ?*const fn ([*c]GApplicationCommandLine, [*c]const gchar) callconv(.C) void,
    printerr_literal: ?*const fn ([*c]GApplicationCommandLine, [*c]const gchar) callconv(.C) void,
    get_stdin: ?*const fn ([*c]GApplicationCommandLine) callconv(.C) [*c]GInputStream,
    padding: [11]gpointer,
};
pub const GApplicationCommandLineClass = struct__GApplicationCommandLineClass;
pub extern fn _frida_g_application_command_line_get_type() GType;
pub extern fn _frida_g_application_command_line_get_arguments(cmdline: [*c]GApplicationCommandLine, argc: [*c]c_int) [*c][*c]gchar;
pub extern fn _frida_g_application_command_line_get_options_dict(cmdline: [*c]GApplicationCommandLine) [*c]GVariantDict;
pub extern fn _frida_g_application_command_line_get_stdin(cmdline: [*c]GApplicationCommandLine) [*c]GInputStream;
pub extern fn _frida_g_application_command_line_get_environ(cmdline: [*c]GApplicationCommandLine) [*c]const [*c]const gchar;
pub extern fn _frida_g_application_command_line_getenv(cmdline: [*c]GApplicationCommandLine, name: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_application_command_line_get_cwd(cmdline: [*c]GApplicationCommandLine) [*c]const gchar;
pub extern fn _frida_g_application_command_line_get_is_remote(cmdline: [*c]GApplicationCommandLine) gboolean;
pub extern fn _frida_g_application_command_line_print(cmdline: [*c]GApplicationCommandLine, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_application_command_line_printerr(cmdline: [*c]GApplicationCommandLine, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_application_command_line_get_exit_status(cmdline: [*c]GApplicationCommandLine) c_int;
pub extern fn _frida_g_application_command_line_set_exit_status(cmdline: [*c]GApplicationCommandLine, exit_status: c_int) void;
pub extern fn _frida_g_application_command_line_get_platform_data(cmdline: [*c]GApplicationCommandLine) ?*GVariant;
pub extern fn _frida_g_application_command_line_create_file_for_arg(cmdline: [*c]GApplicationCommandLine, arg: [*c]const gchar) ?*GFile;
pub const struct__GInitableIface = extern struct {
    g_iface: GTypeInterface,
    init: ?*const fn (?*GInitable, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GInitableIface = struct__GInitableIface;
pub extern fn _frida_g_initable_get_type() GType;
pub extern fn _frida_g_initable_init(initable: ?*GInitable, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_initable_new(object_type: GType, cancellable: [*c]GCancellable, @"error": [*c][*c]GError, first_property_name: [*c]const gchar, ...) gpointer;
pub extern fn _frida_g_initable_newv(object_type: GType, n_parameters: guint, parameters: [*c]GParameter, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gpointer;
pub extern fn _frida_g_initable_new_valist(object_type: GType, first_property_name: [*c]const gchar, var_args: [*c]struct___va_list_tag, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GObject;
pub const struct__GAsyncInitableIface = extern struct {
    g_iface: GTypeInterface,
    init_async: ?*const fn (?*GAsyncInitable, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    init_finish: ?*const fn (?*GAsyncInitable, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GAsyncInitableIface = struct__GAsyncInitableIface;
pub extern fn _frida_g_async_initable_get_type() GType;
pub extern fn _frida_g_async_initable_init_async(initable: ?*GAsyncInitable, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_async_initable_init_finish(initable: ?*GAsyncInitable, res: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_async_initable_new_async(object_type: GType, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer, first_property_name: [*c]const gchar, ...) void;
pub extern fn _frida_g_async_initable_newv_async(object_type: GType, n_parameters: guint, parameters: [*c]GParameter, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_async_initable_new_valist_async(object_type: GType, first_property_name: [*c]const gchar, var_args: [*c]struct___va_list_tag, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_async_initable_new_finish(initable: ?*GAsyncInitable, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GObject;
pub const struct__GAsyncResultIface = extern struct {
    g_iface: GTypeInterface,
    get_user_data: ?*const fn (?*GAsyncResult) callconv(.C) gpointer,
    get_source_object: ?*const fn (?*GAsyncResult) callconv(.C) [*c]GObject,
    is_tagged: ?*const fn (?*GAsyncResult, gpointer) callconv(.C) gboolean,
};
pub const GAsyncResultIface = struct__GAsyncResultIface;
pub extern fn _frida_g_async_result_get_type() GType;
pub extern fn _frida_g_async_result_get_user_data(res: ?*GAsyncResult) gpointer;
pub extern fn _frida_g_async_result_get_source_object(res: ?*GAsyncResult) [*c]GObject;
pub extern fn _frida_g_async_result_legacy_propagate_error(res: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_async_result_is_tagged(res: ?*GAsyncResult, source_tag: gpointer) gboolean;
pub const struct__GInputStreamClass = extern struct {
    parent_class: GObjectClass,
    read_fn: ?*const fn ([*c]GInputStream, ?*anyopaque, gsize, [*c]GCancellable, [*c][*c]GError) callconv(.C) gssize,
    skip: ?*const fn ([*c]GInputStream, gsize, [*c]GCancellable, [*c][*c]GError) callconv(.C) gssize,
    close_fn: ?*const fn ([*c]GInputStream, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    read_async: ?*const fn ([*c]GInputStream, ?*anyopaque, gsize, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    read_finish: ?*const fn ([*c]GInputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gssize,
    skip_async: ?*const fn ([*c]GInputStream, gsize, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    skip_finish: ?*const fn ([*c]GInputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gssize,
    close_async: ?*const fn ([*c]GInputStream, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    close_finish: ?*const fn ([*c]GInputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GInputStreamClass = struct__GInputStreamClass;
pub extern fn _frida_g_input_stream_get_type() GType;
pub extern fn _frida_g_input_stream_read(stream: [*c]GInputStream, buffer: ?*anyopaque, count: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_input_stream_read_all(stream: [*c]GInputStream, buffer: ?*anyopaque, count: gsize, bytes_read: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_input_stream_read_bytes(stream: [*c]GInputStream, count: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn _frida_g_input_stream_skip(stream: [*c]GInputStream, count: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_input_stream_close(stream: [*c]GInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_input_stream_read_async(stream: [*c]GInputStream, buffer: ?*anyopaque, count: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_input_stream_read_finish(stream: [*c]GInputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_input_stream_read_all_async(stream: [*c]GInputStream, buffer: ?*anyopaque, count: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_input_stream_read_all_finish(stream: [*c]GInputStream, result: ?*GAsyncResult, bytes_read: [*c]gsize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_input_stream_read_bytes_async(stream: [*c]GInputStream, count: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_input_stream_read_bytes_finish(stream: [*c]GInputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn _frida_g_input_stream_skip_async(stream: [*c]GInputStream, count: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_input_stream_skip_finish(stream: [*c]GInputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_input_stream_close_async(stream: [*c]GInputStream, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_input_stream_close_finish(stream: [*c]GInputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_input_stream_is_closed(stream: [*c]GInputStream) gboolean;
pub extern fn _frida_g_input_stream_has_pending(stream: [*c]GInputStream) gboolean;
pub extern fn _frida_g_input_stream_set_pending(stream: [*c]GInputStream, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_input_stream_clear_pending(stream: [*c]GInputStream) void;
pub const struct__GFilterInputStreamClass = extern struct {
    parent_class: GInputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
};
pub const GFilterInputStreamClass = struct__GFilterInputStreamClass;
pub extern fn _frida_g_filter_input_stream_get_type() GType;
pub extern fn _frida_g_filter_input_stream_get_base_stream(stream: [*c]GFilterInputStream) [*c]GInputStream;
pub extern fn _frida_g_filter_input_stream_get_close_base_stream(stream: [*c]GFilterInputStream) gboolean;
pub extern fn _frida_g_filter_input_stream_set_close_base_stream(stream: [*c]GFilterInputStream, close_base: gboolean) void;
pub const struct__GBufferedInputStreamClass = extern struct {
    parent_class: GFilterInputStreamClass,
    fill: ?*const fn ([*c]GBufferedInputStream, gssize, [*c]GCancellable, [*c][*c]GError) callconv(.C) gssize,
    fill_async: ?*const fn ([*c]GBufferedInputStream, gssize, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    fill_finish: ?*const fn ([*c]GBufferedInputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gssize,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GBufferedInputStreamClass = struct__GBufferedInputStreamClass;
pub extern fn _frida_g_buffered_input_stream_get_type() GType;
pub extern fn _frida_g_buffered_input_stream_new(base_stream: [*c]GInputStream) [*c]GInputStream;
pub extern fn _frida_g_buffered_input_stream_new_sized(base_stream: [*c]GInputStream, size: gsize) [*c]GInputStream;
pub extern fn _frida_g_buffered_input_stream_get_buffer_size(stream: [*c]GBufferedInputStream) gsize;
pub extern fn _frida_g_buffered_input_stream_set_buffer_size(stream: [*c]GBufferedInputStream, size: gsize) void;
pub extern fn _frida_g_buffered_input_stream_get_available(stream: [*c]GBufferedInputStream) gsize;
pub extern fn _frida_g_buffered_input_stream_peek(stream: [*c]GBufferedInputStream, buffer: ?*anyopaque, offset: gsize, count: gsize) gsize;
pub extern fn _frida_g_buffered_input_stream_peek_buffer(stream: [*c]GBufferedInputStream, count: [*c]gsize) ?*const anyopaque;
pub extern fn _frida_g_buffered_input_stream_fill(stream: [*c]GBufferedInputStream, count: gssize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_buffered_input_stream_fill_async(stream: [*c]GBufferedInputStream, count: gssize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_buffered_input_stream_fill_finish(stream: [*c]GBufferedInputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_buffered_input_stream_read_byte(stream: [*c]GBufferedInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) c_int;
pub const struct__GOutputStreamClass = extern struct {
    parent_class: GObjectClass,
    write_fn: ?*const fn ([*c]GOutputStream, ?*const anyopaque, gsize, [*c]GCancellable, [*c][*c]GError) callconv(.C) gssize,
    splice: ?*const fn ([*c]GOutputStream, [*c]GInputStream, GOutputStreamSpliceFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) gssize,
    flush: ?*const fn ([*c]GOutputStream, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    close_fn: ?*const fn ([*c]GOutputStream, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    write_async: ?*const fn ([*c]GOutputStream, ?*const anyopaque, gsize, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    write_finish: ?*const fn ([*c]GOutputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gssize,
    splice_async: ?*const fn ([*c]GOutputStream, [*c]GInputStream, GOutputStreamSpliceFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    splice_finish: ?*const fn ([*c]GOutputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gssize,
    flush_async: ?*const fn ([*c]GOutputStream, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    flush_finish: ?*const fn ([*c]GOutputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    close_async: ?*const fn ([*c]GOutputStream, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    close_finish: ?*const fn ([*c]GOutputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    writev_fn: ?*const fn ([*c]GOutputStream, [*c]const GOutputVector, gsize, [*c]gsize, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    writev_async: ?*const fn ([*c]GOutputStream, [*c]const GOutputVector, gsize, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    writev_finish: ?*const fn ([*c]GOutputStream, ?*GAsyncResult, [*c]gsize, [*c][*c]GError) callconv(.C) gboolean,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
    _g_reserved7: ?*const fn () callconv(.C) void,
    _g_reserved8: ?*const fn () callconv(.C) void,
};
pub const GOutputStreamClass = struct__GOutputStreamClass;
pub extern fn _frida_g_output_stream_get_type() GType;
pub extern fn _frida_g_output_stream_write(stream: [*c]GOutputStream, buffer: ?*const anyopaque, count: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_output_stream_write_all(stream: [*c]GOutputStream, buffer: ?*const anyopaque, count: gsize, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_writev(stream: [*c]GOutputStream, vectors: [*c]const GOutputVector, n_vectors: gsize, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_writev_all(stream: [*c]GOutputStream, vectors: [*c]GOutputVector, n_vectors: gsize, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_printf(stream: [*c]GOutputStream, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError, format: [*c]const gchar, ...) gboolean;
pub extern fn _frida_g_output_stream_vprintf(stream: [*c]GOutputStream, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError, format: [*c]const gchar, args: [*c]struct___va_list_tag) gboolean;
pub extern fn _frida_g_output_stream_write_bytes(stream: [*c]GOutputStream, bytes: ?*GBytes, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_output_stream_splice(stream: [*c]GOutputStream, source: [*c]GInputStream, flags: GOutputStreamSpliceFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_output_stream_flush(stream: [*c]GOutputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_close(stream: [*c]GOutputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_write_async(stream: [*c]GOutputStream, buffer: ?*const anyopaque, count: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_write_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_output_stream_write_all_async(stream: [*c]GOutputStream, buffer: ?*const anyopaque, count: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_write_all_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, bytes_written: [*c]gsize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_writev_async(stream: [*c]GOutputStream, vectors: [*c]const GOutputVector, n_vectors: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_writev_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, bytes_written: [*c]gsize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_writev_all_async(stream: [*c]GOutputStream, vectors: [*c]GOutputVector, n_vectors: gsize, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_writev_all_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, bytes_written: [*c]gsize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_write_bytes_async(stream: [*c]GOutputStream, bytes: ?*GBytes, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_write_bytes_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_output_stream_splice_async(stream: [*c]GOutputStream, source: [*c]GInputStream, flags: GOutputStreamSpliceFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_splice_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_output_stream_flush_async(stream: [*c]GOutputStream, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_flush_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_close_async(stream: [*c]GOutputStream, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_output_stream_close_finish(stream: [*c]GOutputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_is_closed(stream: [*c]GOutputStream) gboolean;
pub extern fn _frida_g_output_stream_is_closing(stream: [*c]GOutputStream) gboolean;
pub extern fn _frida_g_output_stream_has_pending(stream: [*c]GOutputStream) gboolean;
pub extern fn _frida_g_output_stream_set_pending(stream: [*c]GOutputStream, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_output_stream_clear_pending(stream: [*c]GOutputStream) void;
pub const struct__GFilterOutputStreamClass = extern struct {
    parent_class: GOutputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
};
pub const GFilterOutputStreamClass = struct__GFilterOutputStreamClass;
pub extern fn _frida_g_filter_output_stream_get_type() GType;
pub extern fn _frida_g_filter_output_stream_get_base_stream(stream: [*c]GFilterOutputStream) [*c]GOutputStream;
pub extern fn _frida_g_filter_output_stream_get_close_base_stream(stream: [*c]GFilterOutputStream) gboolean;
pub extern fn _frida_g_filter_output_stream_set_close_base_stream(stream: [*c]GFilterOutputStream, close_base: gboolean) void;
pub const struct__GBufferedOutputStreamClass = extern struct {
    parent_class: GFilterOutputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
};
pub const GBufferedOutputStreamClass = struct__GBufferedOutputStreamClass;
pub extern fn _frida_g_buffered_output_stream_get_type() GType;
pub extern fn _frida_g_buffered_output_stream_new(base_stream: [*c]GOutputStream) [*c]GOutputStream;
pub extern fn _frida_g_buffered_output_stream_new_sized(base_stream: [*c]GOutputStream, size: gsize) [*c]GOutputStream;
pub extern fn _frida_g_buffered_output_stream_get_buffer_size(stream: [*c]GBufferedOutputStream) gsize;
pub extern fn _frida_g_buffered_output_stream_set_buffer_size(stream: [*c]GBufferedOutputStream, size: gsize) void;
pub extern fn _frida_g_buffered_output_stream_get_auto_grow(stream: [*c]GBufferedOutputStream) gboolean;
pub extern fn _frida_g_buffered_output_stream_set_auto_grow(stream: [*c]GBufferedOutputStream, auto_grow: gboolean) void;
pub extern fn _frida_g_bytes_icon_get_type() GType;
pub extern fn _frida_g_bytes_icon_new(bytes: ?*GBytes) ?*GIcon;
pub extern fn _frida_g_bytes_icon_get_bytes(icon: ?*GBytesIcon) ?*GBytes;
pub const struct__GCancellableClass = extern struct {
    parent_class: GObjectClass,
    cancelled: ?*const fn ([*c]GCancellable) callconv(.C) void,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GCancellableClass = struct__GCancellableClass;
pub extern fn _frida_g_cancellable_get_type() GType;
pub extern fn _frida_g_cancellable_new() [*c]GCancellable;
pub extern fn _frida_g_cancellable_is_cancelled(cancellable: [*c]GCancellable) gboolean;
pub extern fn _frida_g_cancellable_set_error_if_cancelled(cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_cancellable_get_fd(cancellable: [*c]GCancellable) c_int;
pub extern fn _frida_g_cancellable_make_pollfd(cancellable: [*c]GCancellable, pollfd: [*c]GPollFD) gboolean;
pub extern fn _frida_g_cancellable_release_fd(cancellable: [*c]GCancellable) void;
pub extern fn _frida_g_cancellable_source_new(cancellable: [*c]GCancellable) [*c]GSource;
pub extern fn _frida_g_cancellable_get_current() [*c]GCancellable;
pub extern fn _frida_g_cancellable_push_current(cancellable: [*c]GCancellable) void;
pub extern fn _frida_g_cancellable_pop_current(cancellable: [*c]GCancellable) void;
pub extern fn _frida_g_cancellable_reset(cancellable: [*c]GCancellable) void;
pub extern fn _frida_g_cancellable_connect(cancellable: [*c]GCancellable, callback: GCallback, data: gpointer, data_destroy_func: GDestroyNotify) gulong;
pub extern fn _frida_g_cancellable_disconnect(cancellable: [*c]GCancellable, handler_id: gulong) void;
pub extern fn _frida_g_cancellable_cancel(cancellable: [*c]GCancellable) void;
pub const struct__GConverterIface = extern struct {
    g_iface: GTypeInterface,
    convert: ?*const fn (?*GConverter, ?*const anyopaque, gsize, ?*anyopaque, gsize, GConverterFlags, [*c]gsize, [*c]gsize, [*c][*c]GError) callconv(.C) GConverterResult,
    reset: ?*const fn (?*GConverter) callconv(.C) void,
};
pub const GConverterIface = struct__GConverterIface;
pub extern fn _frida_g_converter_get_type() GType;
pub extern fn _frida_g_converter_convert(converter: ?*GConverter, inbuf: ?*const anyopaque, inbuf_size: gsize, outbuf: ?*anyopaque, outbuf_size: gsize, flags: GConverterFlags, bytes_read: [*c]gsize, bytes_written: [*c]gsize, @"error": [*c][*c]GError) GConverterResult;
pub extern fn _frida_g_converter_reset(converter: ?*GConverter) void;
pub const struct__GCharsetConverterClass = extern struct {
    parent_class: GObjectClass,
};
pub const GCharsetConverterClass = struct__GCharsetConverterClass;
pub extern fn _frida_g_charset_converter_get_type() GType;
pub extern fn _frida_g_charset_converter_new(to_charset: [*c]const gchar, from_charset: [*c]const gchar, @"error": [*c][*c]GError) ?*GCharsetConverter;
pub extern fn _frida_g_charset_converter_set_use_fallback(converter: ?*GCharsetConverter, use_fallback: gboolean) void;
pub extern fn _frida_g_charset_converter_get_use_fallback(converter: ?*GCharsetConverter) gboolean;
pub extern fn _frida_g_charset_converter_get_num_fallbacks(converter: ?*GCharsetConverter) guint;
pub extern fn _frida_g_content_type_equals(type1: [*c]const gchar, type2: [*c]const gchar) gboolean;
pub extern fn _frida_g_content_type_is_a(@"type": [*c]const gchar, supertype: [*c]const gchar) gboolean;
pub extern fn _frida_g_content_type_is_mime_type(@"type": [*c]const gchar, mime_type: [*c]const gchar) gboolean;
pub extern fn _frida_g_content_type_is_unknown(@"type": [*c]const gchar) gboolean;
pub extern fn _frida_g_content_type_get_description(@"type": [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_content_type_get_mime_type(@"type": [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_content_type_get_icon(@"type": [*c]const gchar) ?*GIcon;
pub extern fn _frida_g_content_type_get_symbolic_icon(@"type": [*c]const gchar) ?*GIcon;
pub extern fn _frida_g_content_type_get_generic_icon_name(@"type": [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_content_type_can_be_executable(@"type": [*c]const gchar) gboolean;
pub extern fn _frida_g_content_type_from_mime_type(mime_type: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_content_type_guess(filename: [*c]const gchar, data: [*c]const guchar, data_size: gsize, result_uncertain: [*c]gboolean) [*c]gchar;
pub extern fn _frida_g_content_type_guess_for_tree(root: ?*GFile) [*c][*c]gchar;
pub extern fn _frida_g_content_types_get_registered() [*c]GList;
pub extern fn _frida_g_content_type_get_mime_dirs() [*c]const [*c]const gchar;
pub extern fn _frida_g_content_type_set_mime_dirs(dirs: [*c]const [*c]const gchar) void;
pub const struct__GConverterInputStreamClass = extern struct {
    parent_class: GFilterInputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GConverterInputStreamClass = struct__GConverterInputStreamClass;
pub extern fn _frida_g_converter_input_stream_get_type() GType;
pub extern fn _frida_g_converter_input_stream_new(base_stream: [*c]GInputStream, converter: ?*GConverter) [*c]GInputStream;
pub extern fn _frida_g_converter_input_stream_get_converter(converter_stream: [*c]GConverterInputStream) ?*GConverter;
pub const struct__GConverterOutputStreamClass = extern struct {
    parent_class: GFilterOutputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GConverterOutputStreamClass = struct__GConverterOutputStreamClass;
pub extern fn _frida_g_converter_output_stream_get_type() GType;
pub extern fn _frida_g_converter_output_stream_new(base_stream: [*c]GOutputStream, converter: ?*GConverter) [*c]GOutputStream;
pub extern fn _frida_g_converter_output_stream_get_converter(converter_stream: [*c]GConverterOutputStream) ?*GConverter;
pub const useconds_t = __useconds_t;
pub const socklen_t = __socklen_t;
pub extern fn access(__name: [*c]const u8, __type: c_int) c_int;
pub extern fn faccessat(__fd: c_int, __file: [*c]const u8, __type: c_int, __flag: c_int) c_int;
pub extern fn lseek(__fd: c_int, __offset: __off_t, __whence: c_int) __off_t;
pub extern fn close(__fd: c_int) c_int;
pub extern fn closefrom(__lowfd: c_int) void;
pub extern fn read(__fd: c_int, __buf: ?*anyopaque, __nbytes: usize) isize;
pub extern fn write(__fd: c_int, __buf: ?*const anyopaque, __n: usize) isize;
pub extern fn pread(__fd: c_int, __buf: ?*anyopaque, __nbytes: usize, __offset: __off_t) isize;
pub extern fn pwrite(__fd: c_int, __buf: ?*const anyopaque, __n: usize, __offset: __off_t) isize;
pub extern fn pipe(__pipedes: [*c]c_int) c_int;
pub extern fn alarm(__seconds: c_uint) c_uint;
pub extern fn sleep(__seconds: c_uint) c_uint;
pub extern fn ualarm(__value: __useconds_t, __interval: __useconds_t) __useconds_t;
pub extern fn usleep(__useconds: __useconds_t) c_int;
pub extern fn pause() c_int;
pub extern fn chown(__file: [*c]const u8, __owner: __uid_t, __group: __gid_t) c_int;
pub extern fn fchown(__fd: c_int, __owner: __uid_t, __group: __gid_t) c_int;
pub extern fn lchown(__file: [*c]const u8, __owner: __uid_t, __group: __gid_t) c_int;
pub extern fn fchownat(__fd: c_int, __file: [*c]const u8, __owner: __uid_t, __group: __gid_t, __flag: c_int) c_int;
pub extern fn chdir(__path: [*c]const u8) c_int;
pub extern fn fchdir(__fd: c_int) c_int;
pub extern fn getcwd(__buf: [*c]u8, __size: usize) [*c]u8;
pub extern fn getwd(__buf: [*c]u8) [*c]u8;
pub extern fn dup(__fd: c_int) c_int;
pub extern fn dup2(__fd: c_int, __fd2: c_int) c_int;
pub extern var __environ: [*c][*c]u8;
pub extern fn execve(__path: [*c]const u8, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn fexecve(__fd: c_int, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn execv(__path: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execle(__path: [*c]const u8, __arg: [*c]const u8, ...) c_int;
pub extern fn execl(__path: [*c]const u8, __arg: [*c]const u8, ...) c_int;
pub extern fn execvp(__file: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execlp(__file: [*c]const u8, __arg: [*c]const u8, ...) c_int;
pub extern fn nice(__inc: c_int) c_int;
pub extern fn _exit(__status: c_int) noreturn;
pub const _PC_LINK_MAX: c_int = 0;
pub const _PC_MAX_CANON: c_int = 1;
pub const _PC_MAX_INPUT: c_int = 2;
pub const _PC_NAME_MAX: c_int = 3;
pub const _PC_PATH_MAX: c_int = 4;
pub const _PC_PIPE_BUF: c_int = 5;
pub const _PC_CHOWN_RESTRICTED: c_int = 6;
pub const _PC_NO_TRUNC: c_int = 7;
pub const _PC_VDISABLE: c_int = 8;
pub const _PC_SYNC_IO: c_int = 9;
pub const _PC_ASYNC_IO: c_int = 10;
pub const _PC_PRIO_IO: c_int = 11;
pub const _PC_SOCK_MAXBUF: c_int = 12;
pub const _PC_FILESIZEBITS: c_int = 13;
pub const _PC_REC_INCR_XFER_SIZE: c_int = 14;
pub const _PC_REC_MAX_XFER_SIZE: c_int = 15;
pub const _PC_REC_MIN_XFER_SIZE: c_int = 16;
pub const _PC_REC_XFER_ALIGN: c_int = 17;
pub const _PC_ALLOC_SIZE_MIN: c_int = 18;
pub const _PC_SYMLINK_MAX: c_int = 19;
pub const _PC_2_SYMLINKS: c_int = 20;
const enum_unnamed_45 = c_uint;
pub const _SC_ARG_MAX: c_int = 0;
pub const _SC_CHILD_MAX: c_int = 1;
pub const _SC_CLK_TCK: c_int = 2;
pub const _SC_NGROUPS_MAX: c_int = 3;
pub const _SC_OPEN_MAX: c_int = 4;
pub const _SC_STREAM_MAX: c_int = 5;
pub const _SC_TZNAME_MAX: c_int = 6;
pub const _SC_JOB_CONTROL: c_int = 7;
pub const _SC_SAVED_IDS: c_int = 8;
pub const _SC_REALTIME_SIGNALS: c_int = 9;
pub const _SC_PRIORITY_SCHEDULING: c_int = 10;
pub const _SC_TIMERS: c_int = 11;
pub const _SC_ASYNCHRONOUS_IO: c_int = 12;
pub const _SC_PRIORITIZED_IO: c_int = 13;
pub const _SC_SYNCHRONIZED_IO: c_int = 14;
pub const _SC_FSYNC: c_int = 15;
pub const _SC_MAPPED_FILES: c_int = 16;
pub const _SC_MEMLOCK: c_int = 17;
pub const _SC_MEMLOCK_RANGE: c_int = 18;
pub const _SC_MEMORY_PROTECTION: c_int = 19;
pub const _SC_MESSAGE_PASSING: c_int = 20;
pub const _SC_SEMAPHORES: c_int = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: c_int = 22;
pub const _SC_AIO_LISTIO_MAX: c_int = 23;
pub const _SC_AIO_MAX: c_int = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: c_int = 25;
pub const _SC_DELAYTIMER_MAX: c_int = 26;
pub const _SC_MQ_OPEN_MAX: c_int = 27;
pub const _SC_MQ_PRIO_MAX: c_int = 28;
pub const _SC_VERSION: c_int = 29;
pub const _SC_PAGESIZE: c_int = 30;
pub const _SC_RTSIG_MAX: c_int = 31;
pub const _SC_SEM_NSEMS_MAX: c_int = 32;
pub const _SC_SEM_VALUE_MAX: c_int = 33;
pub const _SC_SIGQUEUE_MAX: c_int = 34;
pub const _SC_TIMER_MAX: c_int = 35;
pub const _SC_BC_BASE_MAX: c_int = 36;
pub const _SC_BC_DIM_MAX: c_int = 37;
pub const _SC_BC_SCALE_MAX: c_int = 38;
pub const _SC_BC_STRING_MAX: c_int = 39;
pub const _SC_COLL_WEIGHTS_MAX: c_int = 40;
pub const _SC_EQUIV_CLASS_MAX: c_int = 41;
pub const _SC_EXPR_NEST_MAX: c_int = 42;
pub const _SC_LINE_MAX: c_int = 43;
pub const _SC_RE_DUP_MAX: c_int = 44;
pub const _SC_CHARCLASS_NAME_MAX: c_int = 45;
pub const _SC_2_VERSION: c_int = 46;
pub const _SC_2_C_BIND: c_int = 47;
pub const _SC_2_C_DEV: c_int = 48;
pub const _SC_2_FORT_DEV: c_int = 49;
pub const _SC_2_FORT_RUN: c_int = 50;
pub const _SC_2_SW_DEV: c_int = 51;
pub const _SC_2_LOCALEDEF: c_int = 52;
pub const _SC_PII: c_int = 53;
pub const _SC_PII_XTI: c_int = 54;
pub const _SC_PII_SOCKET: c_int = 55;
pub const _SC_PII_INTERNET: c_int = 56;
pub const _SC_PII_OSI: c_int = 57;
pub const _SC_POLL: c_int = 58;
pub const _SC_SELECT: c_int = 59;
pub const _SC_UIO_MAXIOV: c_int = 60;
pub const _SC_IOV_MAX: c_int = 60;
pub const _SC_PII_INTERNET_STREAM: c_int = 61;
pub const _SC_PII_INTERNET_DGRAM: c_int = 62;
pub const _SC_PII_OSI_COTS: c_int = 63;
pub const _SC_PII_OSI_CLTS: c_int = 64;
pub const _SC_PII_OSI_M: c_int = 65;
pub const _SC_T_IOV_MAX: c_int = 66;
pub const _SC_THREADS: c_int = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: c_int = 68;
pub const _SC_GETGR_R_SIZE_MAX: c_int = 69;
pub const _SC_GETPW_R_SIZE_MAX: c_int = 70;
pub const _SC_LOGIN_NAME_MAX: c_int = 71;
pub const _SC_TTY_NAME_MAX: c_int = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: c_int = 73;
pub const _SC_THREAD_KEYS_MAX: c_int = 74;
pub const _SC_THREAD_STACK_MIN: c_int = 75;
pub const _SC_THREAD_THREADS_MAX: c_int = 76;
pub const _SC_THREAD_ATTR_STACKADDR: c_int = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: c_int = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: c_int = 79;
pub const _SC_THREAD_PRIO_INHERIT: c_int = 80;
pub const _SC_THREAD_PRIO_PROTECT: c_int = 81;
pub const _SC_THREAD_PROCESS_SHARED: c_int = 82;
pub const _SC_NPROCESSORS_CONF: c_int = 83;
pub const _SC_NPROCESSORS_ONLN: c_int = 84;
pub const _SC_PHYS_PAGES: c_int = 85;
pub const _SC_AVPHYS_PAGES: c_int = 86;
pub const _SC_ATEXIT_MAX: c_int = 87;
pub const _SC_PASS_MAX: c_int = 88;
pub const _SC_XOPEN_VERSION: c_int = 89;
pub const _SC_XOPEN_XCU_VERSION: c_int = 90;
pub const _SC_XOPEN_UNIX: c_int = 91;
pub const _SC_XOPEN_CRYPT: c_int = 92;
pub const _SC_XOPEN_ENH_I18N: c_int = 93;
pub const _SC_XOPEN_SHM: c_int = 94;
pub const _SC_2_CHAR_TERM: c_int = 95;
pub const _SC_2_C_VERSION: c_int = 96;
pub const _SC_2_UPE: c_int = 97;
pub const _SC_XOPEN_XPG2: c_int = 98;
pub const _SC_XOPEN_XPG3: c_int = 99;
pub const _SC_XOPEN_XPG4: c_int = 100;
pub const _SC_CHAR_BIT: c_int = 101;
pub const _SC_CHAR_MAX: c_int = 102;
pub const _SC_CHAR_MIN: c_int = 103;
pub const _SC_INT_MAX: c_int = 104;
pub const _SC_INT_MIN: c_int = 105;
pub const _SC_LONG_BIT: c_int = 106;
pub const _SC_WORD_BIT: c_int = 107;
pub const _SC_MB_LEN_MAX: c_int = 108;
pub const _SC_NZERO: c_int = 109;
pub const _SC_SSIZE_MAX: c_int = 110;
pub const _SC_SCHAR_MAX: c_int = 111;
pub const _SC_SCHAR_MIN: c_int = 112;
pub const _SC_SHRT_MAX: c_int = 113;
pub const _SC_SHRT_MIN: c_int = 114;
pub const _SC_UCHAR_MAX: c_int = 115;
pub const _SC_UINT_MAX: c_int = 116;
pub const _SC_ULONG_MAX: c_int = 117;
pub const _SC_USHRT_MAX: c_int = 118;
pub const _SC_NL_ARGMAX: c_int = 119;
pub const _SC_NL_LANGMAX: c_int = 120;
pub const _SC_NL_MSGMAX: c_int = 121;
pub const _SC_NL_NMAX: c_int = 122;
pub const _SC_NL_SETMAX: c_int = 123;
pub const _SC_NL_TEXTMAX: c_int = 124;
pub const _SC_XBS5_ILP32_OFF32: c_int = 125;
pub const _SC_XBS5_ILP32_OFFBIG: c_int = 126;
pub const _SC_XBS5_LP64_OFF64: c_int = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: c_int = 128;
pub const _SC_XOPEN_LEGACY: c_int = 129;
pub const _SC_XOPEN_REALTIME: c_int = 130;
pub const _SC_XOPEN_REALTIME_THREADS: c_int = 131;
pub const _SC_ADVISORY_INFO: c_int = 132;
pub const _SC_BARRIERS: c_int = 133;
pub const _SC_BASE: c_int = 134;
pub const _SC_C_LANG_SUPPORT: c_int = 135;
pub const _SC_C_LANG_SUPPORT_R: c_int = 136;
pub const _SC_CLOCK_SELECTION: c_int = 137;
pub const _SC_CPUTIME: c_int = 138;
pub const _SC_THREAD_CPUTIME: c_int = 139;
pub const _SC_DEVICE_IO: c_int = 140;
pub const _SC_DEVICE_SPECIFIC: c_int = 141;
pub const _SC_DEVICE_SPECIFIC_R: c_int = 142;
pub const _SC_FD_MGMT: c_int = 143;
pub const _SC_FIFO: c_int = 144;
pub const _SC_PIPE: c_int = 145;
pub const _SC_FILE_ATTRIBUTES: c_int = 146;
pub const _SC_FILE_LOCKING: c_int = 147;
pub const _SC_FILE_SYSTEM: c_int = 148;
pub const _SC_MONOTONIC_CLOCK: c_int = 149;
pub const _SC_MULTI_PROCESS: c_int = 150;
pub const _SC_SINGLE_PROCESS: c_int = 151;
pub const _SC_NETWORKING: c_int = 152;
pub const _SC_READER_WRITER_LOCKS: c_int = 153;
pub const _SC_SPIN_LOCKS: c_int = 154;
pub const _SC_REGEXP: c_int = 155;
pub const _SC_REGEX_VERSION: c_int = 156;
pub const _SC_SHELL: c_int = 157;
pub const _SC_SIGNALS: c_int = 158;
pub const _SC_SPAWN: c_int = 159;
pub const _SC_SPORADIC_SERVER: c_int = 160;
pub const _SC_THREAD_SPORADIC_SERVER: c_int = 161;
pub const _SC_SYSTEM_DATABASE: c_int = 162;
pub const _SC_SYSTEM_DATABASE_R: c_int = 163;
pub const _SC_TIMEOUTS: c_int = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: c_int = 165;
pub const _SC_USER_GROUPS: c_int = 166;
pub const _SC_USER_GROUPS_R: c_int = 167;
pub const _SC_2_PBS: c_int = 168;
pub const _SC_2_PBS_ACCOUNTING: c_int = 169;
pub const _SC_2_PBS_LOCATE: c_int = 170;
pub const _SC_2_PBS_MESSAGE: c_int = 171;
pub const _SC_2_PBS_TRACK: c_int = 172;
pub const _SC_SYMLOOP_MAX: c_int = 173;
pub const _SC_STREAMS: c_int = 174;
pub const _SC_2_PBS_CHECKPOINT: c_int = 175;
pub const _SC_V6_ILP32_OFF32: c_int = 176;
pub const _SC_V6_ILP32_OFFBIG: c_int = 177;
pub const _SC_V6_LP64_OFF64: c_int = 178;
pub const _SC_V6_LPBIG_OFFBIG: c_int = 179;
pub const _SC_HOST_NAME_MAX: c_int = 180;
pub const _SC_TRACE: c_int = 181;
pub const _SC_TRACE_EVENT_FILTER: c_int = 182;
pub const _SC_TRACE_INHERIT: c_int = 183;
pub const _SC_TRACE_LOG: c_int = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: c_int = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: c_int = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: c_int = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: c_int = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: c_int = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: c_int = 190;
pub const _SC_LEVEL2_CACHE_SIZE: c_int = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: c_int = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: c_int = 193;
pub const _SC_LEVEL3_CACHE_SIZE: c_int = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: c_int = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: c_int = 196;
pub const _SC_LEVEL4_CACHE_SIZE: c_int = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: c_int = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: c_int = 199;
pub const _SC_IPV6: c_int = 235;
pub const _SC_RAW_SOCKETS: c_int = 236;
pub const _SC_V7_ILP32_OFF32: c_int = 237;
pub const _SC_V7_ILP32_OFFBIG: c_int = 238;
pub const _SC_V7_LP64_OFF64: c_int = 239;
pub const _SC_V7_LPBIG_OFFBIG: c_int = 240;
pub const _SC_SS_REPL_MAX: c_int = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: c_int = 242;
pub const _SC_TRACE_NAME_MAX: c_int = 243;
pub const _SC_TRACE_SYS_MAX: c_int = 244;
pub const _SC_TRACE_USER_EVENT_MAX: c_int = 245;
pub const _SC_XOPEN_STREAMS: c_int = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: c_int = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: c_int = 248;
pub const _SC_MINSIGSTKSZ: c_int = 249;
pub const _SC_SIGSTKSZ: c_int = 250;
const enum_unnamed_46 = c_uint;
pub const _CS_PATH: c_int = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: c_int = 1;
pub const _CS_GNU_LIBC_VERSION: c_int = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: c_int = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: c_int = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: c_int = 5;
pub const _CS_LFS_CFLAGS: c_int = 1000;
pub const _CS_LFS_LDFLAGS: c_int = 1001;
pub const _CS_LFS_LIBS: c_int = 1002;
pub const _CS_LFS_LINTFLAGS: c_int = 1003;
pub const _CS_LFS64_CFLAGS: c_int = 1004;
pub const _CS_LFS64_LDFLAGS: c_int = 1005;
pub const _CS_LFS64_LIBS: c_int = 1006;
pub const _CS_LFS64_LINTFLAGS: c_int = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: c_int = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: c_int = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: c_int = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: c_int = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: c_int = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: c_int = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: c_int = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: c_int = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: c_int = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: c_int = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: c_int = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: c_int = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: c_int = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: c_int = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: c_int = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: c_int = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: c_int = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: c_int = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: c_int = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: c_int = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: c_int = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: c_int = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: c_int = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: c_int = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: c_int = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: c_int = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: c_int = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: c_int = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: c_int = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: c_int = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: c_int = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: c_int = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: c_int = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: c_int = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: c_int = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: c_int = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: c_int = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: c_int = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: c_int = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: c_int = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: c_int = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: c_int = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: c_int = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: c_int = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: c_int = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: c_int = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: c_int = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: c_int = 1147;
pub const _CS_V6_ENV: c_int = 1148;
pub const _CS_V7_ENV: c_int = 1149;
const enum_unnamed_47 = c_uint;
pub extern fn pathconf(__path: [*c]const u8, __name: c_int) c_long;
pub extern fn fpathconf(__fd: c_int, __name: c_int) c_long;
pub extern fn sysconf(__name: c_int) c_long;
pub extern fn confstr(__name: c_int, __buf: [*c]u8, __len: usize) usize;
pub extern fn getpid() __pid_t;
pub extern fn getppid() __pid_t;
pub extern fn getpgrp() __pid_t;
pub extern fn __getpgid(__pid: __pid_t) __pid_t;
pub extern fn getpgid(__pid: __pid_t) __pid_t;
pub extern fn setpgid(__pid: __pid_t, __pgid: __pid_t) c_int;
pub extern fn setpgrp() c_int;
pub extern fn setsid() __pid_t;
pub extern fn getsid(__pid: __pid_t) __pid_t;
pub extern fn getuid() __uid_t;
pub extern fn geteuid() __uid_t;
pub extern fn getgid() __gid_t;
pub extern fn getegid() __gid_t;
pub extern fn getgroups(__size: c_int, __list: [*c]__gid_t) c_int;
pub extern fn setuid(__uid: __uid_t) c_int;
pub extern fn setreuid(__ruid: __uid_t, __euid: __uid_t) c_int;
pub extern fn seteuid(__uid: __uid_t) c_int;
pub extern fn setgid(__gid: __gid_t) c_int;
pub extern fn setregid(__rgid: __gid_t, __egid: __gid_t) c_int;
pub extern fn setegid(__gid: __gid_t) c_int;
pub extern fn fork() __pid_t;
pub extern fn vfork() c_int;
pub extern fn ttyname(__fd: c_int) [*c]u8;
pub extern fn ttyname_r(__fd: c_int, __buf: [*c]u8, __buflen: usize) c_int;
pub extern fn isatty(__fd: c_int) c_int;
pub extern fn ttyslot() c_int;
pub extern fn link(__from: [*c]const u8, __to: [*c]const u8) c_int;
pub extern fn linkat(__fromfd: c_int, __from: [*c]const u8, __tofd: c_int, __to: [*c]const u8, __flags: c_int) c_int;
pub extern fn symlink(__from: [*c]const u8, __to: [*c]const u8) c_int;
pub extern fn readlink(noalias __path: [*c]const u8, noalias __buf: [*c]u8, __len: usize) isize;
pub extern fn symlinkat(__from: [*c]const u8, __tofd: c_int, __to: [*c]const u8) c_int;
pub extern fn readlinkat(__fd: c_int, noalias __path: [*c]const u8, noalias __buf: [*c]u8, __len: usize) isize;
pub extern fn unlink(__name: [*c]const u8) c_int;
pub extern fn unlinkat(__fd: c_int, __name: [*c]const u8, __flag: c_int) c_int;
pub extern fn rmdir(__path: [*c]const u8) c_int;
pub extern fn tcgetpgrp(__fd: c_int) __pid_t;
pub extern fn tcsetpgrp(__fd: c_int, __pgrp_id: __pid_t) c_int;
pub extern fn getlogin() [*c]u8;
pub extern fn getlogin_r(__name: [*c]u8, __name_len: usize) c_int;
pub extern fn setlogin(__name: [*c]const u8) c_int;
pub extern var optarg: [*c]u8;
pub extern var optind: c_int;
pub extern var opterr: c_int;
pub extern var optopt: c_int;
pub extern fn getopt(___argc: c_int, ___argv: [*c]const [*c]u8, __shortopts: [*c]const u8) c_int;
pub extern fn gethostname(__name: [*c]u8, __len: usize) c_int;
pub extern fn sethostname(__name: [*c]const u8, __len: usize) c_int;
pub extern fn sethostid(__id: c_long) c_int;
pub extern fn getdomainname(__name: [*c]u8, __len: usize) c_int;
pub extern fn setdomainname(__name: [*c]const u8, __len: usize) c_int;
pub extern fn vhangup() c_int;
pub extern fn revoke(__file: [*c]const u8) c_int;
pub extern fn profil(__sample_buffer: [*c]c_ushort, __size: usize, __offset: usize, __scale: c_uint) c_int;
pub extern fn acct(__name: [*c]const u8) c_int;
pub extern fn getusershell() [*c]u8;
pub extern fn endusershell() void;
pub extern fn setusershell() void;
pub extern fn daemon(__nochdir: c_int, __noclose: c_int) c_int;
pub extern fn chroot(__path: [*c]const u8) c_int;
pub extern fn getpass(__prompt: [*c]const u8) [*c]u8;
pub extern fn fsync(__fd: c_int) c_int;
pub extern fn gethostid() c_long;
pub extern fn sync() void;
pub extern fn getpagesize() c_int;
pub extern fn getdtablesize() c_int;
pub extern fn truncate(__file: [*c]const u8, __length: __off_t) c_int;
pub extern fn ftruncate(__fd: c_int, __length: __off_t) c_int;
pub extern fn brk(__addr: ?*anyopaque) c_int;
pub extern fn sbrk(__delta: isize) ?*anyopaque;
pub extern fn syscall(__sysno: c_long, ...) c_long;
pub extern fn lockf(__fd: c_int, __cmd: c_int, __len: __off_t) c_int;
pub extern fn fdatasync(__fildes: c_int) c_int;
pub extern fn crypt(__key: [*c]const u8, __salt: [*c]const u8) [*c]u8;
pub extern fn getentropy(__buffer: ?*anyopaque, __length: usize) c_int;
pub const struct__GCredentialsClass = opaque {};
pub const GCredentialsClass = struct__GCredentialsClass;
pub extern fn _frida_g_credentials_get_type() GType;
pub extern fn _frida_g_credentials_new() ?*GCredentials;
pub extern fn _frida_g_credentials_to_string(credentials: ?*GCredentials) [*c]gchar;
pub extern fn _frida_g_credentials_get_native(credentials: ?*GCredentials, native_type: GCredentialsType) gpointer;
pub extern fn _frida_g_credentials_set_native(credentials: ?*GCredentials, native_type: GCredentialsType, native: gpointer) void;
pub extern fn _frida_g_credentials_is_same_user(credentials: ?*GCredentials, other_credentials: ?*GCredentials, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_credentials_get_unix_pid(credentials: ?*GCredentials, @"error": [*c][*c]GError) pid_t;
pub extern fn _frida_g_credentials_get_unix_user(credentials: ?*GCredentials, @"error": [*c][*c]GError) uid_t;
pub extern fn _frida_g_credentials_set_unix_user(credentials: ?*GCredentials, uid: uid_t, @"error": [*c][*c]GError) gboolean;
pub const struct__GDatagramBasedInterface = extern struct {
    g_iface: GTypeInterface,
    receive_messages: ?*const fn (?*GDatagramBased, [*c]GInputMessage, guint, gint, gint64, [*c]GCancellable, [*c][*c]GError) callconv(.C) gint,
    send_messages: ?*const fn (?*GDatagramBased, [*c]GOutputMessage, guint, gint, gint64, [*c]GCancellable, [*c][*c]GError) callconv(.C) gint,
    create_source: ?*const fn (?*GDatagramBased, GIOCondition, [*c]GCancellable) callconv(.C) [*c]GSource,
    condition_check: ?*const fn (?*GDatagramBased, GIOCondition) callconv(.C) GIOCondition,
    condition_wait: ?*const fn (?*GDatagramBased, GIOCondition, gint64, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GDatagramBasedInterface = struct__GDatagramBasedInterface;
pub extern fn _frida_g_datagram_based_get_type() GType;
pub extern fn _frida_g_datagram_based_receive_messages(datagram_based: ?*GDatagramBased, messages: [*c]GInputMessage, num_messages: guint, flags: gint, timeout: gint64, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_datagram_based_send_messages(datagram_based: ?*GDatagramBased, messages: [*c]GOutputMessage, num_messages: guint, flags: gint, timeout: gint64, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_datagram_based_create_source(datagram_based: ?*GDatagramBased, condition: GIOCondition, cancellable: [*c]GCancellable) [*c]GSource;
pub extern fn _frida_g_datagram_based_condition_check(datagram_based: ?*GDatagramBased, condition: GIOCondition) GIOCondition;
pub extern fn _frida_g_datagram_based_condition_wait(datagram_based: ?*GDatagramBased, condition: GIOCondition, timeout: gint64, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub const struct__GDataInputStreamClass = extern struct {
    parent_class: GBufferedInputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GDataInputStreamClass = struct__GDataInputStreamClass;
pub extern fn _frida_g_data_input_stream_get_type() GType;
pub extern fn _frida_g_data_input_stream_new(base_stream: [*c]GInputStream) [*c]GDataInputStream;
pub extern fn _frida_g_data_input_stream_set_byte_order(stream: [*c]GDataInputStream, order: GDataStreamByteOrder) void;
pub extern fn _frida_g_data_input_stream_get_byte_order(stream: [*c]GDataInputStream) GDataStreamByteOrder;
pub extern fn _frida_g_data_input_stream_set_newline_type(stream: [*c]GDataInputStream, @"type": GDataStreamNewlineType) void;
pub extern fn _frida_g_data_input_stream_get_newline_type(stream: [*c]GDataInputStream) GDataStreamNewlineType;
pub extern fn _frida_g_data_input_stream_read_byte(stream: [*c]GDataInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guchar;
pub extern fn _frida_g_data_input_stream_read_int16(stream: [*c]GDataInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint16;
pub extern fn _frida_g_data_input_stream_read_uint16(stream: [*c]GDataInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint16;
pub extern fn _frida_g_data_input_stream_read_int32(stream: [*c]GDataInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint32;
pub extern fn _frida_g_data_input_stream_read_uint32(stream: [*c]GDataInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint32;
pub extern fn _frida_g_data_input_stream_read_int64(stream: [*c]GDataInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint64;
pub extern fn _frida_g_data_input_stream_read_uint64(stream: [*c]GDataInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint64;
pub extern fn _frida_g_data_input_stream_read_line(stream: [*c]GDataInputStream, length: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_data_input_stream_read_line_utf8(stream: [*c]GDataInputStream, length: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_data_input_stream_read_line_async(stream: [*c]GDataInputStream, io_priority: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_data_input_stream_read_line_finish(stream: [*c]GDataInputStream, result: ?*GAsyncResult, length: [*c]gsize, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_data_input_stream_read_line_finish_utf8(stream: [*c]GDataInputStream, result: ?*GAsyncResult, length: [*c]gsize, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_data_input_stream_read_until(stream: [*c]GDataInputStream, stop_chars: [*c]const gchar, length: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_data_input_stream_read_until_async(stream: [*c]GDataInputStream, stop_chars: [*c]const gchar, io_priority: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_data_input_stream_read_until_finish(stream: [*c]GDataInputStream, result: ?*GAsyncResult, length: [*c]gsize, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_data_input_stream_read_upto(stream: [*c]GDataInputStream, stop_chars: [*c]const gchar, stop_chars_len: gssize, length: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_data_input_stream_read_upto_async(stream: [*c]GDataInputStream, stop_chars: [*c]const gchar, stop_chars_len: gssize, io_priority: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_data_input_stream_read_upto_finish(stream: [*c]GDataInputStream, result: ?*GAsyncResult, length: [*c]gsize, @"error": [*c][*c]GError) [*c]u8;
pub const struct__GDataOutputStreamPrivate = opaque {};
pub const GDataOutputStreamPrivate = struct__GDataOutputStreamPrivate;
pub const struct__GDataOutputStream = extern struct {
    parent_instance: GFilterOutputStream,
    priv: ?*GDataOutputStreamPrivate,
};
pub const GDataOutputStream = struct__GDataOutputStream;
pub const struct__GDataOutputStreamClass = extern struct {
    parent_class: GFilterOutputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GDataOutputStreamClass = struct__GDataOutputStreamClass;
pub extern fn _frida_g_data_output_stream_get_type() GType;
pub extern fn _frida_g_data_output_stream_new(base_stream: [*c]GOutputStream) [*c]GDataOutputStream;
pub extern fn _frida_g_data_output_stream_set_byte_order(stream: [*c]GDataOutputStream, order: GDataStreamByteOrder) void;
pub extern fn _frida_g_data_output_stream_get_byte_order(stream: [*c]GDataOutputStream) GDataStreamByteOrder;
pub extern fn _frida_g_data_output_stream_put_byte(stream: [*c]GDataOutputStream, data: guchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_data_output_stream_put_int16(stream: [*c]GDataOutputStream, data: gint16, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_data_output_stream_put_uint16(stream: [*c]GDataOutputStream, data: guint16, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_data_output_stream_put_int32(stream: [*c]GDataOutputStream, data: gint32, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_data_output_stream_put_uint32(stream: [*c]GDataOutputStream, data: guint32, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_data_output_stream_put_int64(stream: [*c]GDataOutputStream, data: gint64, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_data_output_stream_put_uint64(stream: [*c]GDataOutputStream, data: guint64, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_data_output_stream_put_string(stream: [*c]GDataOutputStream, str: [*c]const u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_action_group_get_type() GType;
pub extern fn _frida_g_dbus_action_group_get(connection: ?*GDBusConnection, bus_name: [*c]const gchar, object_path: [*c]const gchar) ?*GDBusActionGroup;
pub extern fn _frida_g_dbus_address_escape_value(string: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_dbus_is_address(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_is_supported_address(string: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_address_get_stream(address: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_address_get_stream_finish(res: ?*GAsyncResult, out_guid: [*c][*c]gchar, @"error": [*c][*c]GError) [*c]GIOStream;
pub extern fn _frida_g_dbus_address_get_stream_sync(address: [*c]const gchar, out_guid: [*c][*c]gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GIOStream;
pub extern fn _frida_g_dbus_address_get_for_bus_sync(bus_type: GBusType, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_dbus_auth_observer_get_type() GType;
pub extern fn _frida_g_dbus_auth_observer_new() ?*GDBusAuthObserver;
pub extern fn _frida_g_dbus_auth_observer_authorize_authenticated_peer(observer: ?*GDBusAuthObserver, stream: [*c]GIOStream, credentials: ?*GCredentials) gboolean;
pub extern fn _frida_g_dbus_auth_observer_allow_mechanism(observer: ?*GDBusAuthObserver, mechanism: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_connection_get_type() GType;
pub extern fn _frida_g_bus_get(bus_type: GBusType, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_bus_get_finish(res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GDBusConnection;
pub extern fn _frida_g_bus_get_sync(bus_type: GBusType, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GDBusConnection;
pub extern fn _frida_g_dbus_connection_new(stream: [*c]GIOStream, guid: [*c]const gchar, flags: GDBusConnectionFlags, observer: ?*GDBusAuthObserver, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_connection_new_finish(res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GDBusConnection;
pub extern fn _frida_g_dbus_connection_new_sync(stream: [*c]GIOStream, guid: [*c]const gchar, flags: GDBusConnectionFlags, observer: ?*GDBusAuthObserver, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GDBusConnection;
pub extern fn _frida_g_dbus_connection_new_for_address(address: [*c]const gchar, flags: GDBusConnectionFlags, observer: ?*GDBusAuthObserver, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_connection_new_for_address_finish(res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GDBusConnection;
pub extern fn _frida_g_dbus_connection_new_for_address_sync(address: [*c]const gchar, flags: GDBusConnectionFlags, observer: ?*GDBusAuthObserver, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GDBusConnection;
pub extern fn _frida_g_dbus_connection_start_message_processing(connection: ?*GDBusConnection) void;
pub extern fn _frida_g_dbus_connection_is_closed(connection: ?*GDBusConnection) gboolean;
pub extern fn _frida_g_dbus_connection_get_stream(connection: ?*GDBusConnection) [*c]GIOStream;
pub extern fn _frida_g_dbus_connection_get_guid(connection: ?*GDBusConnection) [*c]const gchar;
pub extern fn _frida_g_dbus_connection_get_unique_name(connection: ?*GDBusConnection) [*c]const gchar;
pub extern fn _frida_g_dbus_connection_get_peer_credentials(connection: ?*GDBusConnection) ?*GCredentials;
pub extern fn _frida_g_dbus_connection_get_last_serial(connection: ?*GDBusConnection) guint32;
pub extern fn _frida_g_dbus_connection_get_exit_on_close(connection: ?*GDBusConnection) gboolean;
pub extern fn _frida_g_dbus_connection_set_exit_on_close(connection: ?*GDBusConnection, exit_on_close: gboolean) void;
pub extern fn _frida_g_dbus_connection_get_capabilities(connection: ?*GDBusConnection) GDBusCapabilityFlags;
pub extern fn _frida_g_dbus_connection_get_flags(connection: ?*GDBusConnection) GDBusConnectionFlags;
pub extern fn _frida_g_dbus_connection_close(connection: ?*GDBusConnection, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_connection_close_finish(connection: ?*GDBusConnection, res: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_connection_close_sync(connection: ?*GDBusConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_connection_flush(connection: ?*GDBusConnection, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_connection_flush_finish(connection: ?*GDBusConnection, res: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_connection_flush_sync(connection: ?*GDBusConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_connection_send_message(connection: ?*GDBusConnection, message: ?*GDBusMessage, flags: GDBusSendMessageFlags, out_serial: [*c]volatile guint32, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_connection_send_message_with_reply(connection: ?*GDBusConnection, message: ?*GDBusMessage, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: [*c]volatile guint32, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_connection_send_message_with_reply_finish(connection: ?*GDBusConnection, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GDBusMessage;
pub extern fn _frida_g_dbus_connection_send_message_with_reply_sync(connection: ?*GDBusConnection, message: ?*GDBusMessage, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: [*c]volatile guint32, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GDBusMessage;
pub extern fn _frida_g_dbus_connection_emit_signal(connection: ?*GDBusConnection, destination_bus_name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, signal_name: [*c]const gchar, parameters: ?*GVariant, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_connection_call(connection: ?*GDBusConnection, bus_name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, method_name: [*c]const gchar, parameters: ?*GVariant, reply_type: ?*const GVariantType, flags: GDBusCallFlags, timeout_msec: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_connection_call_finish(connection: ?*GDBusConnection, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_connection_call_sync(connection: ?*GDBusConnection, bus_name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, method_name: [*c]const gchar, parameters: ?*GVariant, reply_type: ?*const GVariantType, flags: GDBusCallFlags, timeout_msec: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_connection_call_with_unix_fd_list(connection: ?*GDBusConnection, bus_name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, method_name: [*c]const gchar, parameters: ?*GVariant, reply_type: ?*const GVariantType, flags: GDBusCallFlags, timeout_msec: gint, fd_list: [*c]GUnixFDList, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_connection_call_with_unix_fd_list_finish(connection: ?*GDBusConnection, out_fd_list: [*c][*c]GUnixFDList, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_connection_call_with_unix_fd_list_sync(connection: ?*GDBusConnection, bus_name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, method_name: [*c]const gchar, parameters: ?*GVariant, reply_type: ?*const GVariantType, flags: GDBusCallFlags, timeout_msec: gint, fd_list: [*c]GUnixFDList, out_fd_list: [*c][*c]GUnixFDList, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_connection_register_object(connection: ?*GDBusConnection, object_path: [*c]const gchar, interface_info: [*c]GDBusInterfaceInfo, vtable: [*c]const GDBusInterfaceVTable, user_data: gpointer, user_data_free_func: GDestroyNotify, @"error": [*c][*c]GError) guint;
pub extern fn _frida_g_dbus_connection_register_object_with_closures(connection: ?*GDBusConnection, object_path: [*c]const gchar, interface_info: [*c]GDBusInterfaceInfo, method_call_closure: ?*GClosure, get_property_closure: ?*GClosure, set_property_closure: ?*GClosure, @"error": [*c][*c]GError) guint;
pub extern fn _frida_g_dbus_connection_unregister_object(connection: ?*GDBusConnection, registration_id: guint) gboolean;
pub extern fn _frida_g_dbus_connection_register_subtree(connection: ?*GDBusConnection, object_path: [*c]const gchar, vtable: [*c]const GDBusSubtreeVTable, flags: GDBusSubtreeFlags, user_data: gpointer, user_data_free_func: GDestroyNotify, @"error": [*c][*c]GError) guint;
pub extern fn _frida_g_dbus_connection_unregister_subtree(connection: ?*GDBusConnection, registration_id: guint) gboolean;
pub const GDBusSignalCallback = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, [*c]const gchar, [*c]const gchar, ?*GVariant, gpointer) callconv(.C) void;
pub extern fn _frida_g_dbus_connection_signal_subscribe(connection: ?*GDBusConnection, sender: [*c]const gchar, interface_name: [*c]const gchar, member: [*c]const gchar, object_path: [*c]const gchar, arg0: [*c]const gchar, flags: GDBusSignalFlags, callback: GDBusSignalCallback, user_data: gpointer, user_data_free_func: GDestroyNotify) guint;
pub extern fn _frida_g_dbus_connection_signal_unsubscribe(connection: ?*GDBusConnection, subscription_id: guint) void;
pub const GDBusMessageFilterFunction = ?*const fn (?*GDBusConnection, ?*GDBusMessage, gboolean, gpointer) callconv(.C) ?*GDBusMessage;
pub extern fn _frida_g_dbus_connection_add_filter(connection: ?*GDBusConnection, filter_function: GDBusMessageFilterFunction, user_data: gpointer, user_data_free_func: GDestroyNotify) guint;
pub extern fn _frida_g_dbus_connection_remove_filter(connection: ?*GDBusConnection, filter_id: guint) void;
pub extern fn _frida_g_dbus_error_quark() GQuark;
pub extern fn _frida_g_dbus_error_is_remote_error(@"error": [*c]const GError) gboolean;
pub extern fn _frida_g_dbus_error_get_remote_error(@"error": [*c]const GError) [*c]gchar;
pub extern fn _frida_g_dbus_error_strip_remote_error(@"error": [*c]GError) gboolean;
pub extern fn _frida_g_dbus_error_register_error(error_domain: GQuark, error_code: gint, dbus_error_name: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_error_unregister_error(error_domain: GQuark, error_code: gint, dbus_error_name: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_error_register_error_domain(error_domain_quark_name: [*c]const gchar, quark_volatile: [*c]volatile gsize, entries: [*c]const GDBusErrorEntry, num_entries: guint) void;
pub extern fn _frida_g_dbus_error_new_for_dbus_error(dbus_error_name: [*c]const gchar, dbus_error_message: [*c]const gchar) [*c]GError;
pub extern fn _frida_g_dbus_error_set_dbus_error(@"error": [*c][*c]GError, dbus_error_name: [*c]const gchar, dbus_error_message: [*c]const gchar, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_dbus_error_set_dbus_error_valist(@"error": [*c][*c]GError, dbus_error_name: [*c]const gchar, dbus_error_message: [*c]const gchar, format: [*c]const gchar, var_args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_dbus_error_encode_gerror(@"error": [*c]const GError) [*c]gchar;
pub const struct__GDBusInterfaceIface = extern struct {
    parent_iface: GTypeInterface,
    get_info: ?*const fn (?*GDBusInterface) callconv(.C) [*c]GDBusInterfaceInfo,
    get_object: ?*const fn (?*GDBusInterface) callconv(.C) ?*GDBusObject,
    set_object: ?*const fn (?*GDBusInterface, ?*GDBusObject) callconv(.C) void,
    dup_object: ?*const fn (?*GDBusInterface) callconv(.C) ?*GDBusObject,
};
pub const GDBusInterfaceIface = struct__GDBusInterfaceIface;
pub extern fn _frida_g_dbus_interface_get_type() GType;
pub extern fn _frida_g_dbus_interface_get_info(interface_: ?*GDBusInterface) [*c]GDBusInterfaceInfo;
pub extern fn _frida_g_dbus_interface_get_object(interface_: ?*GDBusInterface) ?*GDBusObject;
pub extern fn _frida_g_dbus_interface_set_object(interface_: ?*GDBusInterface, object: ?*GDBusObject) void;
pub extern fn _frida_g_dbus_interface_dup_object(interface_: ?*GDBusInterface) ?*GDBusObject;
pub const struct__GDBusInterfaceSkeletonClass = extern struct {
    parent_class: GObjectClass,
    get_info: ?*const fn ([*c]GDBusInterfaceSkeleton) callconv(.C) [*c]GDBusInterfaceInfo,
    get_vtable: ?*const fn ([*c]GDBusInterfaceSkeleton) callconv(.C) [*c]GDBusInterfaceVTable,
    get_properties: ?*const fn ([*c]GDBusInterfaceSkeleton) callconv(.C) ?*GVariant,
    flush: ?*const fn ([*c]GDBusInterfaceSkeleton) callconv(.C) void,
    vfunc_padding: [8]gpointer,
    g_authorize_method: ?*const fn ([*c]GDBusInterfaceSkeleton, ?*GDBusMethodInvocation) callconv(.C) gboolean,
    signal_padding: [8]gpointer,
};
pub const GDBusInterfaceSkeletonClass = struct__GDBusInterfaceSkeletonClass;
pub extern fn _frida_g_dbus_interface_skeleton_get_type() GType;
pub extern fn _frida_g_dbus_interface_skeleton_get_flags(interface_: [*c]GDBusInterfaceSkeleton) GDBusInterfaceSkeletonFlags;
pub extern fn _frida_g_dbus_interface_skeleton_set_flags(interface_: [*c]GDBusInterfaceSkeleton, flags: GDBusInterfaceSkeletonFlags) void;
pub extern fn _frida_g_dbus_interface_skeleton_get_info(interface_: [*c]GDBusInterfaceSkeleton) [*c]GDBusInterfaceInfo;
pub extern fn _frida_g_dbus_interface_skeleton_get_vtable(interface_: [*c]GDBusInterfaceSkeleton) [*c]GDBusInterfaceVTable;
pub extern fn _frida_g_dbus_interface_skeleton_get_properties(interface_: [*c]GDBusInterfaceSkeleton) ?*GVariant;
pub extern fn _frida_g_dbus_interface_skeleton_flush(interface_: [*c]GDBusInterfaceSkeleton) void;
pub extern fn _frida_g_dbus_interface_skeleton_export(interface_: [*c]GDBusInterfaceSkeleton, connection: ?*GDBusConnection, object_path: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_interface_skeleton_unexport(interface_: [*c]GDBusInterfaceSkeleton) void;
pub extern fn _frida_g_dbus_interface_skeleton_unexport_from_connection(interface_: [*c]GDBusInterfaceSkeleton, connection: ?*GDBusConnection) void;
pub extern fn _frida_g_dbus_interface_skeleton_get_connection(interface_: [*c]GDBusInterfaceSkeleton) ?*GDBusConnection;
pub extern fn _frida_g_dbus_interface_skeleton_get_connections(interface_: [*c]GDBusInterfaceSkeleton) [*c]GList;
pub extern fn _frida_g_dbus_interface_skeleton_has_connection(interface_: [*c]GDBusInterfaceSkeleton, connection: ?*GDBusConnection) gboolean;
pub extern fn _frida_g_dbus_interface_skeleton_get_object_path(interface_: [*c]GDBusInterfaceSkeleton) [*c]const gchar;
pub extern fn _frida_g_dbus_annotation_info_lookup(annotations: [*c][*c]GDBusAnnotationInfo, name: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_dbus_interface_info_lookup_method(info: [*c]GDBusInterfaceInfo, name: [*c]const gchar) [*c]GDBusMethodInfo;
pub extern fn _frida_g_dbus_interface_info_lookup_signal(info: [*c]GDBusInterfaceInfo, name: [*c]const gchar) [*c]GDBusSignalInfo;
pub extern fn _frida_g_dbus_interface_info_lookup_property(info: [*c]GDBusInterfaceInfo, name: [*c]const gchar) [*c]GDBusPropertyInfo;
pub extern fn _frida_g_dbus_interface_info_cache_build(info: [*c]GDBusInterfaceInfo) void;
pub extern fn _frida_g_dbus_interface_info_cache_release(info: [*c]GDBusInterfaceInfo) void;
pub extern fn _frida_g_dbus_interface_info_generate_xml(info: [*c]GDBusInterfaceInfo, indent: guint, string_builder: [*c]GString) void;
pub extern fn _frida_g_dbus_node_info_new_for_xml(xml_data: [*c]const gchar, @"error": [*c][*c]GError) [*c]GDBusNodeInfo;
pub extern fn _frida_g_dbus_node_info_lookup_interface(info: [*c]GDBusNodeInfo, name: [*c]const gchar) [*c]GDBusInterfaceInfo;
pub extern fn _frida_g_dbus_node_info_generate_xml(info: [*c]GDBusNodeInfo, indent: guint, string_builder: [*c]GString) void;
pub extern fn _frida_g_dbus_node_info_ref(info: [*c]GDBusNodeInfo) [*c]GDBusNodeInfo;
pub extern fn _frida_g_dbus_interface_info_ref(info: [*c]GDBusInterfaceInfo) [*c]GDBusInterfaceInfo;
pub extern fn _frida_g_dbus_method_info_ref(info: [*c]GDBusMethodInfo) [*c]GDBusMethodInfo;
pub extern fn _frida_g_dbus_signal_info_ref(info: [*c]GDBusSignalInfo) [*c]GDBusSignalInfo;
pub extern fn _frida_g_dbus_property_info_ref(info: [*c]GDBusPropertyInfo) [*c]GDBusPropertyInfo;
pub extern fn _frida_g_dbus_arg_info_ref(info: [*c]GDBusArgInfo) [*c]GDBusArgInfo;
pub extern fn _frida_g_dbus_annotation_info_ref(info: [*c]GDBusAnnotationInfo) [*c]GDBusAnnotationInfo;
pub extern fn _frida_g_dbus_node_info_unref(info: [*c]GDBusNodeInfo) void;
pub extern fn _frida_g_dbus_interface_info_unref(info: [*c]GDBusInterfaceInfo) void;
pub extern fn _frida_g_dbus_method_info_unref(info: [*c]GDBusMethodInfo) void;
pub extern fn _frida_g_dbus_signal_info_unref(info: [*c]GDBusSignalInfo) void;
pub extern fn _frida_g_dbus_property_info_unref(info: [*c]GDBusPropertyInfo) void;
pub extern fn _frida_g_dbus_arg_info_unref(info: [*c]GDBusArgInfo) void;
pub extern fn _frida_g_dbus_annotation_info_unref(info: [*c]GDBusAnnotationInfo) void;
pub extern fn _frida_g_dbus_node_info_get_type() GType;
pub extern fn _frida_g_dbus_interface_info_get_type() GType;
pub extern fn _frida_g_dbus_method_info_get_type() GType;
pub extern fn _frida_g_dbus_signal_info_get_type() GType;
pub extern fn _frida_g_dbus_property_info_get_type() GType;
pub extern fn _frida_g_dbus_arg_info_get_type() GType;
pub extern fn _frida_g_dbus_annotation_info_get_type() GType;
pub const struct__GDBusMenuModel = opaque {};
pub const GDBusMenuModel = struct__GDBusMenuModel;
pub extern fn _frida_g_dbus_menu_model_get_type() GType;
pub extern fn _frida_g_dbus_menu_model_get(connection: ?*GDBusConnection, bus_name: [*c]const gchar, object_path: [*c]const gchar) ?*GDBusMenuModel;
pub extern fn _frida_g_dbus_message_get_type() GType;
pub extern fn _frida_g_dbus_message_new() ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_new_signal(path: [*c]const gchar, interface_: [*c]const gchar, signal: [*c]const gchar) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_new_method_call(name: [*c]const gchar, path: [*c]const gchar, interface_: [*c]const gchar, method: [*c]const gchar) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_new_method_reply(method_call_message: ?*GDBusMessage) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_new_method_error(method_call_message: ?*GDBusMessage, error_name: [*c]const gchar, error_message_format: [*c]const gchar, ...) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_new_method_error_valist(method_call_message: ?*GDBusMessage, error_name: [*c]const gchar, error_message_format: [*c]const gchar, var_args: [*c]struct___va_list_tag) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_new_method_error_literal(method_call_message: ?*GDBusMessage, error_name: [*c]const gchar, error_message: [*c]const gchar) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_print(message: ?*GDBusMessage, indent: guint) [*c]gchar;
pub extern fn _frida_g_dbus_message_get_locked(message: ?*GDBusMessage) gboolean;
pub extern fn _frida_g_dbus_message_lock(message: ?*GDBusMessage) void;
pub extern fn _frida_g_dbus_message_copy(message: ?*GDBusMessage, @"error": [*c][*c]GError) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_get_byte_order(message: ?*GDBusMessage) GDBusMessageByteOrder;
pub extern fn _frida_g_dbus_message_set_byte_order(message: ?*GDBusMessage, byte_order: GDBusMessageByteOrder) void;
pub extern fn _frida_g_dbus_message_get_message_type(message: ?*GDBusMessage) GDBusMessageType;
pub extern fn _frida_g_dbus_message_set_message_type(message: ?*GDBusMessage, @"type": GDBusMessageType) void;
pub extern fn _frida_g_dbus_message_get_flags(message: ?*GDBusMessage) GDBusMessageFlags;
pub extern fn _frida_g_dbus_message_set_flags(message: ?*GDBusMessage, flags: GDBusMessageFlags) void;
pub extern fn _frida_g_dbus_message_get_serial(message: ?*GDBusMessage) guint32;
pub extern fn _frida_g_dbus_message_set_serial(message: ?*GDBusMessage, serial: guint32) void;
pub extern fn _frida_g_dbus_message_get_header(message: ?*GDBusMessage, header_field: GDBusMessageHeaderField) ?*GVariant;
pub extern fn _frida_g_dbus_message_set_header(message: ?*GDBusMessage, header_field: GDBusMessageHeaderField, value: ?*GVariant) void;
pub extern fn _frida_g_dbus_message_get_header_fields(message: ?*GDBusMessage) [*c]guchar;
pub extern fn _frida_g_dbus_message_get_body(message: ?*GDBusMessage) ?*GVariant;
pub extern fn _frida_g_dbus_message_set_body(message: ?*GDBusMessage, body: ?*GVariant) void;
pub extern fn _frida_g_dbus_message_get_unix_fd_list(message: ?*GDBusMessage) [*c]GUnixFDList;
pub extern fn _frida_g_dbus_message_set_unix_fd_list(message: ?*GDBusMessage, fd_list: [*c]GUnixFDList) void;
pub extern fn _frida_g_dbus_message_get_reply_serial(message: ?*GDBusMessage) guint32;
pub extern fn _frida_g_dbus_message_set_reply_serial(message: ?*GDBusMessage, value: guint32) void;
pub extern fn _frida_g_dbus_message_get_interface(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_set_interface(message: ?*GDBusMessage, value: [*c]const gchar) void;
pub extern fn _frida_g_dbus_message_get_member(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_set_member(message: ?*GDBusMessage, value: [*c]const gchar) void;
pub extern fn _frida_g_dbus_message_get_path(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_set_path(message: ?*GDBusMessage, value: [*c]const gchar) void;
pub extern fn _frida_g_dbus_message_get_sender(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_set_sender(message: ?*GDBusMessage, value: [*c]const gchar) void;
pub extern fn _frida_g_dbus_message_get_destination(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_set_destination(message: ?*GDBusMessage, value: [*c]const gchar) void;
pub extern fn _frida_g_dbus_message_get_error_name(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_set_error_name(message: ?*GDBusMessage, value: [*c]const gchar) void;
pub extern fn _frida_g_dbus_message_get_signature(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_set_signature(message: ?*GDBusMessage, value: [*c]const gchar) void;
pub extern fn _frida_g_dbus_message_get_num_unix_fds(message: ?*GDBusMessage) guint32;
pub extern fn _frida_g_dbus_message_set_num_unix_fds(message: ?*GDBusMessage, value: guint32) void;
pub extern fn _frida_g_dbus_message_get_arg0(message: ?*GDBusMessage) [*c]const gchar;
pub extern fn _frida_g_dbus_message_new_from_blob(blob: [*c]guchar, blob_len: gsize, capabilities: GDBusCapabilityFlags, @"error": [*c][*c]GError) ?*GDBusMessage;
pub extern fn _frida_g_dbus_message_bytes_needed(blob: [*c]guchar, blob_len: gsize, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_dbus_message_to_blob(message: ?*GDBusMessage, out_size: [*c]gsize, capabilities: GDBusCapabilityFlags, @"error": [*c][*c]GError) [*c]guchar;
pub extern fn _frida_g_dbus_message_to_gerror(message: ?*GDBusMessage, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dbus_method_invocation_get_type() GType;
pub extern fn _frida_g_dbus_method_invocation_get_sender(invocation: ?*GDBusMethodInvocation) [*c]const gchar;
pub extern fn _frida_g_dbus_method_invocation_get_object_path(invocation: ?*GDBusMethodInvocation) [*c]const gchar;
pub extern fn _frida_g_dbus_method_invocation_get_interface_name(invocation: ?*GDBusMethodInvocation) [*c]const gchar;
pub extern fn _frida_g_dbus_method_invocation_get_method_name(invocation: ?*GDBusMethodInvocation) [*c]const gchar;
pub extern fn _frida_g_dbus_method_invocation_get_method_info(invocation: ?*GDBusMethodInvocation) [*c]const GDBusMethodInfo;
pub extern fn _frida_g_dbus_method_invocation_get_property_info(invocation: ?*GDBusMethodInvocation) [*c]const GDBusPropertyInfo;
pub extern fn _frida_g_dbus_method_invocation_get_connection(invocation: ?*GDBusMethodInvocation) ?*GDBusConnection;
pub extern fn _frida_g_dbus_method_invocation_get_message(invocation: ?*GDBusMethodInvocation) ?*GDBusMessage;
pub extern fn _frida_g_dbus_method_invocation_get_parameters(invocation: ?*GDBusMethodInvocation) ?*GVariant;
pub extern fn _frida_g_dbus_method_invocation_get_user_data(invocation: ?*GDBusMethodInvocation) gpointer;
pub extern fn _frida_g_dbus_method_invocation_return_value(invocation: ?*GDBusMethodInvocation, parameters: ?*GVariant) void;
pub extern fn _frida_g_dbus_method_invocation_return_value_with_unix_fd_list(invocation: ?*GDBusMethodInvocation, parameters: ?*GVariant, fd_list: [*c]GUnixFDList) void;
pub extern fn _frida_g_dbus_method_invocation_return_error(invocation: ?*GDBusMethodInvocation, domain: GQuark, code: gint, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_dbus_method_invocation_return_error_valist(invocation: ?*GDBusMethodInvocation, domain: GQuark, code: gint, format: [*c]const gchar, var_args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_dbus_method_invocation_return_error_literal(invocation: ?*GDBusMethodInvocation, domain: GQuark, code: gint, message: [*c]const gchar) void;
pub extern fn _frida_g_dbus_method_invocation_return_gerror(invocation: ?*GDBusMethodInvocation, @"error": [*c]const GError) void;
pub extern fn _frida_g_dbus_method_invocation_take_error(invocation: ?*GDBusMethodInvocation, @"error": [*c]GError) void;
pub extern fn _frida_g_dbus_method_invocation_return_dbus_error(invocation: ?*GDBusMethodInvocation, error_name: [*c]const gchar, error_message: [*c]const gchar) void;
pub const GBusAcquiredCallback = ?*const fn (?*GDBusConnection, [*c]const gchar, gpointer) callconv(.C) void;
pub const GBusNameAcquiredCallback = ?*const fn (?*GDBusConnection, [*c]const gchar, gpointer) callconv(.C) void;
pub const GBusNameLostCallback = ?*const fn (?*GDBusConnection, [*c]const gchar, gpointer) callconv(.C) void;
pub extern fn _frida_g_bus_own_name(bus_type: GBusType, name: [*c]const gchar, flags: GBusNameOwnerFlags, bus_acquired_handler: GBusAcquiredCallback, name_acquired_handler: GBusNameAcquiredCallback, name_lost_handler: GBusNameLostCallback, user_data: gpointer, user_data_free_func: GDestroyNotify) guint;
pub extern fn _frida_g_bus_own_name_on_connection(connection: ?*GDBusConnection, name: [*c]const gchar, flags: GBusNameOwnerFlags, name_acquired_handler: GBusNameAcquiredCallback, name_lost_handler: GBusNameLostCallback, user_data: gpointer, user_data_free_func: GDestroyNotify) guint;
pub extern fn _frida_g_bus_own_name_with_closures(bus_type: GBusType, name: [*c]const gchar, flags: GBusNameOwnerFlags, bus_acquired_closure: ?*GClosure, name_acquired_closure: ?*GClosure, name_lost_closure: ?*GClosure) guint;
pub extern fn _frida_g_bus_own_name_on_connection_with_closures(connection: ?*GDBusConnection, name: [*c]const gchar, flags: GBusNameOwnerFlags, name_acquired_closure: ?*GClosure, name_lost_closure: ?*GClosure) guint;
pub extern fn _frida_g_bus_unown_name(owner_id: guint) void;
pub const GBusNameAppearedCallback = ?*const fn (?*GDBusConnection, [*c]const gchar, [*c]const gchar, gpointer) callconv(.C) void;
pub const GBusNameVanishedCallback = ?*const fn (?*GDBusConnection, [*c]const gchar, gpointer) callconv(.C) void;
pub extern fn _frida_g_bus_watch_name(bus_type: GBusType, name: [*c]const gchar, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback, name_vanished_handler: GBusNameVanishedCallback, user_data: gpointer, user_data_free_func: GDestroyNotify) guint;
pub extern fn _frida_g_bus_watch_name_on_connection(connection: ?*GDBusConnection, name: [*c]const gchar, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback, name_vanished_handler: GBusNameVanishedCallback, user_data: gpointer, user_data_free_func: GDestroyNotify) guint;
pub extern fn _frida_g_bus_watch_name_with_closures(bus_type: GBusType, name: [*c]const gchar, flags: GBusNameWatcherFlags, name_appeared_closure: ?*GClosure, name_vanished_closure: ?*GClosure) guint;
pub extern fn _frida_g_bus_watch_name_on_connection_with_closures(connection: ?*GDBusConnection, name: [*c]const gchar, flags: GBusNameWatcherFlags, name_appeared_closure: ?*GClosure, name_vanished_closure: ?*GClosure) guint;
pub extern fn _frida_g_bus_unwatch_name(watcher_id: guint) void;
pub const struct__GDBusObjectIface = extern struct {
    parent_iface: GTypeInterface,
    get_object_path: ?*const fn (?*GDBusObject) callconv(.C) [*c]const gchar,
    get_interfaces: ?*const fn (?*GDBusObject) callconv(.C) [*c]GList,
    get_interface: ?*const fn (?*GDBusObject, [*c]const gchar) callconv(.C) ?*GDBusInterface,
    interface_added: ?*const fn (?*GDBusObject, ?*GDBusInterface) callconv(.C) void,
    interface_removed: ?*const fn (?*GDBusObject, ?*GDBusInterface) callconv(.C) void,
};
pub const GDBusObjectIface = struct__GDBusObjectIface;
pub extern fn _frida_g_dbus_object_get_type() GType;
pub extern fn _frida_g_dbus_object_get_object_path(object: ?*GDBusObject) [*c]const gchar;
pub extern fn _frida_g_dbus_object_get_interfaces(object: ?*GDBusObject) [*c]GList;
pub extern fn _frida_g_dbus_object_get_interface(object: ?*GDBusObject, interface_name: [*c]const gchar) ?*GDBusInterface;
pub const struct__GDBusObjectManagerIface = extern struct {
    parent_iface: GTypeInterface,
    get_object_path: ?*const fn (?*GDBusObjectManager) callconv(.C) [*c]const gchar,
    get_objects: ?*const fn (?*GDBusObjectManager) callconv(.C) [*c]GList,
    get_object: ?*const fn (?*GDBusObjectManager, [*c]const gchar) callconv(.C) ?*GDBusObject,
    get_interface: ?*const fn (?*GDBusObjectManager, [*c]const gchar, [*c]const gchar) callconv(.C) ?*GDBusInterface,
    object_added: ?*const fn (?*GDBusObjectManager, ?*GDBusObject) callconv(.C) void,
    object_removed: ?*const fn (?*GDBusObjectManager, ?*GDBusObject) callconv(.C) void,
    interface_added: ?*const fn (?*GDBusObjectManager, ?*GDBusObject, ?*GDBusInterface) callconv(.C) void,
    interface_removed: ?*const fn (?*GDBusObjectManager, ?*GDBusObject, ?*GDBusInterface) callconv(.C) void,
};
pub const GDBusObjectManagerIface = struct__GDBusObjectManagerIface;
pub extern fn _frida_g_dbus_object_manager_get_type() GType;
pub extern fn _frida_g_dbus_object_manager_get_object_path(manager: ?*GDBusObjectManager) [*c]const gchar;
pub extern fn _frida_g_dbus_object_manager_get_objects(manager: ?*GDBusObjectManager) [*c]GList;
pub extern fn _frida_g_dbus_object_manager_get_object(manager: ?*GDBusObjectManager, object_path: [*c]const gchar) ?*GDBusObject;
pub extern fn _frida_g_dbus_object_manager_get_interface(manager: ?*GDBusObjectManager, object_path: [*c]const gchar, interface_name: [*c]const gchar) ?*GDBusInterface;
pub const struct__GDBusObjectManagerClientClass = extern struct {
    parent_class: GObjectClass,
    interface_proxy_signal: ?*const fn ([*c]GDBusObjectManagerClient, [*c]GDBusObjectProxy, [*c]GDBusProxy, [*c]const gchar, [*c]const gchar, ?*GVariant) callconv(.C) void,
    interface_proxy_properties_changed: ?*const fn ([*c]GDBusObjectManagerClient, [*c]GDBusObjectProxy, [*c]GDBusProxy, ?*GVariant, [*c]const [*c]const gchar) callconv(.C) void,
    padding: [8]gpointer,
};
pub const GDBusObjectManagerClientClass = struct__GDBusObjectManagerClientClass;
pub extern fn _frida_g_dbus_object_manager_client_get_type() GType;
pub extern fn _frida_g_dbus_object_manager_client_new(connection: ?*GDBusConnection, flags: GDBusObjectManagerClientFlags, name: [*c]const gchar, object_path: [*c]const gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_object_manager_client_new_finish(res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GDBusObjectManager;
pub extern fn _frida_g_dbus_object_manager_client_new_sync(connection: ?*GDBusConnection, flags: GDBusObjectManagerClientFlags, name: [*c]const gchar, object_path: [*c]const gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GDBusObjectManager;
pub extern fn _frida_g_dbus_object_manager_client_new_for_bus(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, name: [*c]const gchar, object_path: [*c]const gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_object_manager_client_new_for_bus_finish(res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GDBusObjectManager;
pub extern fn _frida_g_dbus_object_manager_client_new_for_bus_sync(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, name: [*c]const gchar, object_path: [*c]const gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GDBusObjectManager;
pub extern fn _frida_g_dbus_object_manager_client_get_connection(manager: [*c]GDBusObjectManagerClient) ?*GDBusConnection;
pub extern fn _frida_g_dbus_object_manager_client_get_flags(manager: [*c]GDBusObjectManagerClient) GDBusObjectManagerClientFlags;
pub extern fn _frida_g_dbus_object_manager_client_get_name(manager: [*c]GDBusObjectManagerClient) [*c]const gchar;
pub extern fn _frida_g_dbus_object_manager_client_get_name_owner(manager: [*c]GDBusObjectManagerClient) [*c]gchar;
pub const struct__GDBusObjectManagerServerClass = extern struct {
    parent_class: GObjectClass,
    padding: [8]gpointer,
};
pub const GDBusObjectManagerServerClass = struct__GDBusObjectManagerServerClass;
pub extern fn _frida_g_dbus_object_manager_server_get_type() GType;
pub extern fn _frida_g_dbus_object_manager_server_new(object_path: [*c]const gchar) [*c]GDBusObjectManagerServer;
pub extern fn _frida_g_dbus_object_manager_server_get_connection(manager: [*c]GDBusObjectManagerServer) ?*GDBusConnection;
pub extern fn _frida_g_dbus_object_manager_server_set_connection(manager: [*c]GDBusObjectManagerServer, connection: ?*GDBusConnection) void;
pub extern fn _frida_g_dbus_object_manager_server_export(manager: [*c]GDBusObjectManagerServer, object: [*c]GDBusObjectSkeleton) void;
pub extern fn _frida_g_dbus_object_manager_server_export_uniquely(manager: [*c]GDBusObjectManagerServer, object: [*c]GDBusObjectSkeleton) void;
pub extern fn _frida_g_dbus_object_manager_server_is_exported(manager: [*c]GDBusObjectManagerServer, object: [*c]GDBusObjectSkeleton) gboolean;
pub extern fn _frida_g_dbus_object_manager_server_unexport(manager: [*c]GDBusObjectManagerServer, object_path: [*c]const gchar) gboolean;
pub const struct__GDBusObjectProxyClass = extern struct {
    parent_class: GObjectClass,
    padding: [8]gpointer,
};
pub const GDBusObjectProxyClass = struct__GDBusObjectProxyClass;
pub extern fn _frida_g_dbus_object_proxy_get_type() GType;
pub extern fn _frida_g_dbus_object_proxy_new(connection: ?*GDBusConnection, object_path: [*c]const gchar) [*c]GDBusObjectProxy;
pub extern fn _frida_g_dbus_object_proxy_get_connection(proxy: [*c]GDBusObjectProxy) ?*GDBusConnection;
pub const struct__GDBusObjectSkeletonClass = extern struct {
    parent_class: GObjectClass,
    authorize_method: ?*const fn ([*c]GDBusObjectSkeleton, [*c]GDBusInterfaceSkeleton, ?*GDBusMethodInvocation) callconv(.C) gboolean,
    padding: [8]gpointer,
};
pub const GDBusObjectSkeletonClass = struct__GDBusObjectSkeletonClass;
pub extern fn _frida_g_dbus_object_skeleton_get_type() GType;
pub extern fn _frida_g_dbus_object_skeleton_new(object_path: [*c]const gchar) [*c]GDBusObjectSkeleton;
pub extern fn _frida_g_dbus_object_skeleton_flush(object: [*c]GDBusObjectSkeleton) void;
pub extern fn _frida_g_dbus_object_skeleton_add_interface(object: [*c]GDBusObjectSkeleton, interface_: [*c]GDBusInterfaceSkeleton) void;
pub extern fn _frida_g_dbus_object_skeleton_remove_interface(object: [*c]GDBusObjectSkeleton, interface_: [*c]GDBusInterfaceSkeleton) void;
pub extern fn _frida_g_dbus_object_skeleton_remove_interface_by_name(object: [*c]GDBusObjectSkeleton, interface_name: [*c]const gchar) void;
pub extern fn _frida_g_dbus_object_skeleton_set_object_path(object: [*c]GDBusObjectSkeleton, object_path: [*c]const gchar) void;
pub const struct__GDBusProxyClass = extern struct {
    parent_class: GObjectClass,
    g_properties_changed: ?*const fn ([*c]GDBusProxy, ?*GVariant, [*c]const [*c]const gchar) callconv(.C) void,
    g_signal: ?*const fn ([*c]GDBusProxy, [*c]const gchar, [*c]const gchar, ?*GVariant) callconv(.C) void,
    padding: [32]gpointer,
};
pub const GDBusProxyClass = struct__GDBusProxyClass;
pub extern fn _frida_g_dbus_proxy_get_type() GType;
pub extern fn _frida_g_dbus_proxy_new(connection: ?*GDBusConnection, flags: GDBusProxyFlags, info: [*c]GDBusInterfaceInfo, name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_proxy_new_finish(res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GDBusProxy;
pub extern fn _frida_g_dbus_proxy_new_sync(connection: ?*GDBusConnection, flags: GDBusProxyFlags, info: [*c]GDBusInterfaceInfo, name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GDBusProxy;
pub extern fn _frida_g_dbus_proxy_new_for_bus(bus_type: GBusType, flags: GDBusProxyFlags, info: [*c]GDBusInterfaceInfo, name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_proxy_new_for_bus_finish(res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GDBusProxy;
pub extern fn _frida_g_dbus_proxy_new_for_bus_sync(bus_type: GBusType, flags: GDBusProxyFlags, info: [*c]GDBusInterfaceInfo, name: [*c]const gchar, object_path: [*c]const gchar, interface_name: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GDBusProxy;
pub extern fn _frida_g_dbus_proxy_get_connection(proxy: [*c]GDBusProxy) ?*GDBusConnection;
pub extern fn _frida_g_dbus_proxy_get_flags(proxy: [*c]GDBusProxy) GDBusProxyFlags;
pub extern fn _frida_g_dbus_proxy_get_name(proxy: [*c]GDBusProxy) [*c]const gchar;
pub extern fn _frida_g_dbus_proxy_get_name_owner(proxy: [*c]GDBusProxy) [*c]gchar;
pub extern fn _frida_g_dbus_proxy_get_object_path(proxy: [*c]GDBusProxy) [*c]const gchar;
pub extern fn _frida_g_dbus_proxy_get_interface_name(proxy: [*c]GDBusProxy) [*c]const gchar;
pub extern fn _frida_g_dbus_proxy_get_default_timeout(proxy: [*c]GDBusProxy) gint;
pub extern fn _frida_g_dbus_proxy_set_default_timeout(proxy: [*c]GDBusProxy, timeout_msec: gint) void;
pub extern fn _frida_g_dbus_proxy_get_interface_info(proxy: [*c]GDBusProxy) [*c]GDBusInterfaceInfo;
pub extern fn _frida_g_dbus_proxy_set_interface_info(proxy: [*c]GDBusProxy, info: [*c]GDBusInterfaceInfo) void;
pub extern fn _frida_g_dbus_proxy_get_cached_property(proxy: [*c]GDBusProxy, property_name: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_dbus_proxy_set_cached_property(proxy: [*c]GDBusProxy, property_name: [*c]const gchar, value: ?*GVariant) void;
pub extern fn _frida_g_dbus_proxy_get_cached_property_names(proxy: [*c]GDBusProxy) [*c][*c]gchar;
pub extern fn _frida_g_dbus_proxy_call(proxy: [*c]GDBusProxy, method_name: [*c]const gchar, parameters: ?*GVariant, flags: GDBusCallFlags, timeout_msec: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_proxy_call_finish(proxy: [*c]GDBusProxy, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_proxy_call_sync(proxy: [*c]GDBusProxy, method_name: [*c]const gchar, parameters: ?*GVariant, flags: GDBusCallFlags, timeout_msec: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_proxy_call_with_unix_fd_list(proxy: [*c]GDBusProxy, method_name: [*c]const gchar, parameters: ?*GVariant, flags: GDBusCallFlags, timeout_msec: gint, fd_list: [*c]GUnixFDList, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dbus_proxy_call_with_unix_fd_list_finish(proxy: [*c]GDBusProxy, out_fd_list: [*c][*c]GUnixFDList, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_proxy_call_with_unix_fd_list_sync(proxy: [*c]GDBusProxy, method_name: [*c]const gchar, parameters: ?*GVariant, flags: GDBusCallFlags, timeout_msec: gint, fd_list: [*c]GUnixFDList, out_fd_list: [*c][*c]GUnixFDList, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_g_dbus_server_get_type() GType;
pub extern fn _frida_g_dbus_server_new_sync(address: [*c]const gchar, flags: GDBusServerFlags, guid: [*c]const gchar, observer: ?*GDBusAuthObserver, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GDBusServer;
pub extern fn _frida_g_dbus_server_get_client_address(server: ?*GDBusServer) [*c]const gchar;
pub extern fn _frida_g_dbus_server_get_guid(server: ?*GDBusServer) [*c]const gchar;
pub extern fn _frida_g_dbus_server_get_flags(server: ?*GDBusServer) GDBusServerFlags;
pub extern fn _frida_g_dbus_server_start(server: ?*GDBusServer) void;
pub extern fn _frida_g_dbus_server_stop(server: ?*GDBusServer) void;
pub extern fn _frida_g_dbus_server_is_active(server: ?*GDBusServer) gboolean;
pub extern fn _frida_g_dbus_is_guid(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_generate_guid() [*c]gchar;
pub extern fn _frida_g_dbus_is_name(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_is_unique_name(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_is_member_name(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_is_interface_name(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_is_error_name(string: [*c]const gchar) gboolean;
pub extern fn _frida_g_dbus_gvariant_to_gvalue(value: ?*GVariant, out_gvalue: [*c]GValue) void;
pub extern fn _frida_g_dbus_gvalue_to_gvariant(gvalue: [*c]const GValue, @"type": ?*const GVariantType) ?*GVariant;
pub extern fn _frida_g_dbus_escape_object_path_bytestring(bytes: [*c]const guint8) [*c]gchar;
pub extern fn _frida_g_dbus_escape_object_path(s: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_dbus_unescape_object_path(s: [*c]const gchar) [*c]guint8;
pub extern fn _frida_g_debug_controller_get_type() GType;
pub const struct__GDebugController = opaque {};
pub const GDebugController = struct__GDebugController;
pub const struct__GDebugControllerInterface = extern struct {
    g_iface: GTypeInterface,
};
pub const GDebugControllerInterface = struct__GDebugControllerInterface;
pub const GDebugController_autoptr = ?*GDebugController;
pub const GDebugController_listautoptr = [*c]GList;
pub const GDebugController_slistautoptr = [*c]GSList;
pub const GDebugController_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDebugController(arg__ptr: ?*GDebugController) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        glib_autoptr_clear_GObject(@ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), _ptr)));
    }
}
pub fn glib_autoptr_cleanup_GDebugController(arg__ptr: [*c]?*GDebugController) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDebugController(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDebugController(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_slistautoptr_cleanup_GDebugController(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_queueautoptr_cleanup_GDebugController(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
    }
}
pub fn g_debug_controller(arg_ptr: gpointer) callconv(.C) ?*GDebugController {
    var ptr = arg_ptr;
    return @ptrCast(?*GDebugController, @ptrCast(?*anyopaque, _frida_g_type_check_instance_cast(@ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)), _frida_g_debug_controller_get_type())));
}
pub fn g_IS_debug_controller(arg_ptr: gpointer) callconv(.C) gboolean {
    var ptr = arg_ptr;
    return blk: {
        var __inst: [*c]GTypeInstance = @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr));
        var __t: GType = _frida_g_debug_controller_get_type();
        var __r: gboolean = undefined;
        if (!(__inst != null)) {
            __r = @as(c_int, 0);
        } else if ((__inst.*.g_class != null) and (__inst.*.g_class.*.g_type == __t)) {
            __r = @boolToInt(!(@as(c_int, 0) != 0));
        } else {
            __r = _frida_g_type_check_instance_is_a(__inst, __t);
        }
        break :blk __r;
    };
}
pub fn g_debug_controller_GET_IFACE(arg_ptr: gpointer) callconv(.C) [*c]GDebugControllerInterface {
    var ptr = arg_ptr;
    return @ptrCast([*c]GDebugControllerInterface, @alignCast(@import("std").meta.alignment([*c]GDebugControllerInterface), _frida_g_type_interface_peek(@ptrCast(gpointer, @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)).*.g_class), _frida_g_debug_controller_get_type())));
}
pub extern fn _frida_g_debug_controller_get_debug_enabled(self: ?*GDebugController) gboolean;
pub extern fn _frida_g_debug_controller_set_debug_enabled(self: ?*GDebugController, debug_enabled: gboolean) void;
pub extern fn _frida_g_debug_controller_dbus_get_type() GType;
pub const struct__GDebugControllerDBus = extern struct {
    parent_instance: GObject,
};
pub const GDebugControllerDBus = struct__GDebugControllerDBus;
pub const struct__GDebugControllerDBusClass = extern struct {
    parent_class: GObjectClass,
    authorize: ?*const fn ([*c]GDebugControllerDBus, ?*GDBusMethodInvocation) callconv(.C) gboolean,
    padding: [12]gpointer,
};
pub const GDebugControllerDBusClass = struct__GDebugControllerDBusClass;
pub const GDebugControllerDBus_autoptr = [*c]GDebugControllerDBus;
pub const GDebugControllerDBus_listautoptr = [*c]GList;
pub const GDebugControllerDBus_slistautoptr = [*c]GSList;
pub const GDebugControllerDBus_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDebugControllerDBus(arg__ptr: [*c]GDebugControllerDBus) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        glib_autoptr_clear_GObject(@ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), _ptr)));
    }
}
pub fn glib_autoptr_cleanup_GDebugControllerDBus(arg__ptr: [*c][*c]GDebugControllerDBus) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDebugControllerDBus(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDebugControllerDBus(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_slistautoptr_cleanup_GDebugControllerDBus(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_queueautoptr_cleanup_GDebugControllerDBus(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
    }
}
pub const GDebugControllerDBusClass_autoptr = [*c]GDebugControllerDBusClass;
pub const GDebugControllerDBusClass_listautoptr = [*c]GList;
pub const GDebugControllerDBusClass_slistautoptr = [*c]GSList;
pub const GDebugControllerDBusClass_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDebugControllerDBusClass(arg__ptr: [*c]GDebugControllerDBusClass) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_type_class_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDebugControllerDBusClass(arg__ptr: [*c][*c]GDebugControllerDBusClass) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDebugControllerDBusClass(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDebugControllerDBusClass(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDebugControllerDBusClass(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDebugControllerDBusClass(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
    }
}
pub fn G_DEBUG_CONTROLLER_DBUS(arg_ptr: gpointer) callconv(.C) [*c]GDebugControllerDBus {
    var ptr = arg_ptr;
    return @ptrCast([*c]GDebugControllerDBus, @alignCast(@import("std").meta.alignment([*c]GDebugControllerDBus), @ptrCast(?*anyopaque, _frida_g_type_check_instance_cast(@ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)), _frida_g_debug_controller_dbus_get_type()))));
}
pub fn G_DEBUG_CONTROLLER_DBUS_CLASS(arg_ptr: gpointer) callconv(.C) [*c]GDebugControllerDBusClass {
    var ptr = arg_ptr;
    return @ptrCast([*c]GDebugControllerDBusClass, @alignCast(@import("std").meta.alignment([*c]GDebugControllerDBusClass), @ptrCast(?*anyopaque, _frida_g_type_check_class_cast(@ptrCast([*c]GTypeClass, @alignCast(@import("std").meta.alignment([*c]GTypeClass), ptr)), _frida_g_debug_controller_dbus_get_type()))));
}
pub fn G_IS_DEBUG_CONTROLLER_DBUS(arg_ptr: gpointer) callconv(.C) gboolean {
    var ptr = arg_ptr;
    return blk: {
        var __inst: [*c]GTypeInstance = @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr));
        var __t: GType = _frida_g_debug_controller_dbus_get_type();
        var __r: gboolean = undefined;
        if (!(__inst != null)) {
            __r = @as(c_int, 0);
        } else if ((__inst.*.g_class != null) and (__inst.*.g_class.*.g_type == __t)) {
            __r = @boolToInt(!(@as(c_int, 0) != 0));
        } else {
            __r = _frida_g_type_check_instance_is_a(__inst, __t);
        }
        break :blk __r;
    };
}
pub fn G_IS_DEBUG_CONTROLLER_DBUS_CLASS(arg_ptr: gpointer) callconv(.C) gboolean {
    var ptr = arg_ptr;
    return blk: {
        var __class: [*c]GTypeClass = @ptrCast([*c]GTypeClass, @alignCast(@import("std").meta.alignment([*c]GTypeClass), ptr));
        var __t: GType = _frida_g_debug_controller_dbus_get_type();
        var __r: gboolean = undefined;
        if (!(__class != null)) {
            __r = @as(c_int, 0);
        } else if (__class.*.g_type == __t) {
            __r = @boolToInt(!(@as(c_int, 0) != 0));
        } else {
            __r = _frida_g_type_check_class_is_a(__class, __t);
        }
        break :blk __r;
    };
}
pub fn G_DEBUG_CONTROLLER_DBUS_GET_CLASS(arg_ptr: gpointer) callconv(.C) [*c]GDebugControllerDBusClass {
    var ptr = arg_ptr;
    return @ptrCast([*c]GDebugControllerDBusClass, @alignCast(@import("std").meta.alignment([*c]GDebugControllerDBusClass), @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)).*.g_class));
}
pub extern fn _frida_g_debug_controller_dbus_new(connection: ?*GDBusConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GDebugControllerDBus;
pub extern fn _frida_g_debug_controller_dbus_stop(self: [*c]GDebugControllerDBus) void;
pub const struct__GDriveIface = extern struct {
    g_iface: GTypeInterface,
    changed: ?*const fn (?*GDrive) callconv(.C) void,
    disconnected: ?*const fn (?*GDrive) callconv(.C) void,
    eject_button: ?*const fn (?*GDrive) callconv(.C) void,
    get_name: ?*const fn (?*GDrive) callconv(.C) [*c]u8,
    get_icon: ?*const fn (?*GDrive) callconv(.C) ?*GIcon,
    has_volumes: ?*const fn (?*GDrive) callconv(.C) gboolean,
    get_volumes: ?*const fn (?*GDrive) callconv(.C) [*c]GList,
    is_media_removable: ?*const fn (?*GDrive) callconv(.C) gboolean,
    has_media: ?*const fn (?*GDrive) callconv(.C) gboolean,
    is_media_check_automatic: ?*const fn (?*GDrive) callconv(.C) gboolean,
    can_eject: ?*const fn (?*GDrive) callconv(.C) gboolean,
    can_poll_for_media: ?*const fn (?*GDrive) callconv(.C) gboolean,
    eject: ?*const fn (?*GDrive, GMountUnmountFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_finish: ?*const fn (?*GDrive, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    poll_for_media: ?*const fn (?*GDrive, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    poll_for_media_finish: ?*const fn (?*GDrive, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    get_identifier: ?*const fn (?*GDrive, [*c]const u8) callconv(.C) [*c]u8,
    enumerate_identifiers: ?*const fn (?*GDrive) callconv(.C) [*c][*c]u8,
    get_start_stop_type: ?*const fn (?*GDrive) callconv(.C) GDriveStartStopType,
    can_start: ?*const fn (?*GDrive) callconv(.C) gboolean,
    can_start_degraded: ?*const fn (?*GDrive) callconv(.C) gboolean,
    start: ?*const fn (?*GDrive, GDriveStartFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    start_finish: ?*const fn (?*GDrive, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    can_stop: ?*const fn (?*GDrive) callconv(.C) gboolean,
    stop: ?*const fn (?*GDrive, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    stop_finish: ?*const fn (?*GDrive, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    stop_button: ?*const fn (?*GDrive) callconv(.C) void,
    eject_with_operation: ?*const fn (?*GDrive, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_with_operation_finish: ?*const fn (?*GDrive, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    get_sort_key: ?*const fn (?*GDrive) callconv(.C) [*c]const gchar,
    get_symbolic_icon: ?*const fn (?*GDrive) callconv(.C) ?*GIcon,
    is_removable: ?*const fn (?*GDrive) callconv(.C) gboolean,
};
pub const GDriveIface = struct__GDriveIface;
pub extern fn _frida_g_drive_get_type() GType;
pub extern fn _frida_g_drive_get_name(drive: ?*GDrive) [*c]u8;
pub extern fn _frida_g_drive_get_icon(drive: ?*GDrive) ?*GIcon;
pub extern fn _frida_g_drive_get_symbolic_icon(drive: ?*GDrive) ?*GIcon;
pub extern fn _frida_g_drive_has_volumes(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_get_volumes(drive: ?*GDrive) [*c]GList;
pub extern fn _frida_g_drive_is_removable(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_is_media_removable(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_has_media(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_is_media_check_automatic(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_can_poll_for_media(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_can_eject(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_eject(drive: ?*GDrive, flags: GMountUnmountFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_drive_eject_finish(drive: ?*GDrive, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_drive_poll_for_media(drive: ?*GDrive, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_drive_poll_for_media_finish(drive: ?*GDrive, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_drive_get_identifier(drive: ?*GDrive, kind: [*c]const u8) [*c]u8;
pub extern fn _frida_g_drive_enumerate_identifiers(drive: ?*GDrive) [*c][*c]u8;
pub extern fn _frida_g_drive_get_start_stop_type(drive: ?*GDrive) GDriveStartStopType;
pub extern fn _frida_g_drive_can_start(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_can_start_degraded(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_start(drive: ?*GDrive, flags: GDriveStartFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_drive_start_finish(drive: ?*GDrive, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_drive_can_stop(drive: ?*GDrive) gboolean;
pub extern fn _frida_g_drive_stop(drive: ?*GDrive, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_drive_stop_finish(drive: ?*GDrive, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_drive_eject_with_operation(drive: ?*GDrive, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_drive_eject_with_operation_finish(drive: ?*GDrive, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_drive_get_sort_key(drive: ?*GDrive) [*c]const gchar;
pub const struct__GDtlsConnectionInterface = extern struct {
    g_iface: GTypeInterface,
    accept_certificate: ?*const fn (?*GDtlsConnection, [*c]GTlsCertificate, GTlsCertificateFlags) callconv(.C) gboolean,
    handshake: ?*const fn (?*GDtlsConnection, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    handshake_async: ?*const fn (?*GDtlsConnection, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    handshake_finish: ?*const fn (?*GDtlsConnection, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    shutdown: ?*const fn (?*GDtlsConnection, gboolean, gboolean, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    shutdown_async: ?*const fn (?*GDtlsConnection, gboolean, gboolean, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    shutdown_finish: ?*const fn (?*GDtlsConnection, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    set_advertised_protocols: ?*const fn (?*GDtlsConnection, [*c]const [*c]const gchar) callconv(.C) void,
    get_negotiated_protocol: ?*const fn (?*GDtlsConnection) callconv(.C) [*c]const gchar,
    get_binding_data: ?*const fn (?*GDtlsConnection, GTlsChannelBindingType, [*c]GByteArray, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GDtlsConnectionInterface = struct__GDtlsConnectionInterface;
pub extern fn _frida_g_dtls_connection_get_type() GType;
pub extern fn _frida_g_dtls_connection_set_database(conn: ?*GDtlsConnection, database: [*c]GTlsDatabase) void;
pub extern fn _frida_g_dtls_connection_get_database(conn: ?*GDtlsConnection) [*c]GTlsDatabase;
pub extern fn _frida_g_dtls_connection_set_certificate(conn: ?*GDtlsConnection, certificate: [*c]GTlsCertificate) void;
pub extern fn _frida_g_dtls_connection_get_certificate(conn: ?*GDtlsConnection) [*c]GTlsCertificate;
pub extern fn _frida_g_dtls_connection_set_interaction(conn: ?*GDtlsConnection, interaction: [*c]GTlsInteraction) void;
pub extern fn _frida_g_dtls_connection_get_interaction(conn: ?*GDtlsConnection) [*c]GTlsInteraction;
pub extern fn _frida_g_dtls_connection_get_peer_certificate(conn: ?*GDtlsConnection) [*c]GTlsCertificate;
pub extern fn _frida_g_dtls_connection_get_peer_certificate_errors(conn: ?*GDtlsConnection) GTlsCertificateFlags;
pub extern fn _frida_g_dtls_connection_set_require_close_notify(conn: ?*GDtlsConnection, require_close_notify: gboolean) void;
pub extern fn _frida_g_dtls_connection_get_require_close_notify(conn: ?*GDtlsConnection) gboolean;
pub extern fn _frida_g_dtls_connection_set_rehandshake_mode(conn: ?*GDtlsConnection, mode: GTlsRehandshakeMode) void;
pub extern fn _frida_g_dtls_connection_get_rehandshake_mode(conn: ?*GDtlsConnection) GTlsRehandshakeMode;
pub extern fn _frida_g_dtls_connection_handshake(conn: ?*GDtlsConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dtls_connection_handshake_async(conn: ?*GDtlsConnection, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dtls_connection_handshake_finish(conn: ?*GDtlsConnection, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dtls_connection_shutdown(conn: ?*GDtlsConnection, shutdown_read: gboolean, shutdown_write: gboolean, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dtls_connection_shutdown_async(conn: ?*GDtlsConnection, shutdown_read: gboolean, shutdown_write: gboolean, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dtls_connection_shutdown_finish(conn: ?*GDtlsConnection, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dtls_connection_close(conn: ?*GDtlsConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dtls_connection_close_async(conn: ?*GDtlsConnection, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_dtls_connection_close_finish(conn: ?*GDtlsConnection, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dtls_connection_emit_accept_certificate(conn: ?*GDtlsConnection, peer_cert: [*c]GTlsCertificate, errors: GTlsCertificateFlags) gboolean;
pub extern fn _frida_g_dtls_connection_set_advertised_protocols(conn: ?*GDtlsConnection, protocols: [*c]const [*c]const gchar) void;
pub extern fn _frida_g_dtls_connection_get_negotiated_protocol(conn: ?*GDtlsConnection) [*c]const gchar;
pub extern fn _frida_g_dtls_connection_get_channel_binding_data(conn: ?*GDtlsConnection, @"type": GTlsChannelBindingType, data: [*c]GByteArray, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_dtls_connection_get_protocol_version(conn: ?*GDtlsConnection) GTlsProtocolVersion;
pub extern fn _frida_g_dtls_connection_get_ciphersuite_name(conn: ?*GDtlsConnection) [*c]gchar;
pub const struct__GDtlsClientConnectionInterface = extern struct {
    g_iface: GTypeInterface,
};
pub const GDtlsClientConnectionInterface = struct__GDtlsClientConnectionInterface;
pub extern fn _frida_g_dtls_client_connection_get_type() GType;
pub extern fn _frida_g_dtls_client_connection_new(base_socket: ?*GDatagramBased, server_identity: ?*GSocketConnectable, @"error": [*c][*c]GError) ?*GDatagramBased;
pub extern fn _frida_g_dtls_client_connection_get_validation_flags(conn: ?*GDtlsClientConnection) GTlsCertificateFlags;
pub extern fn _frida_g_dtls_client_connection_set_validation_flags(conn: ?*GDtlsClientConnection, flags: GTlsCertificateFlags) void;
pub extern fn _frida_g_dtls_client_connection_get_server_identity(conn: ?*GDtlsClientConnection) ?*GSocketConnectable;
pub extern fn _frida_g_dtls_client_connection_set_server_identity(conn: ?*GDtlsClientConnection, identity: ?*GSocketConnectable) void;
pub extern fn _frida_g_dtls_client_connection_get_accepted_cas(conn: ?*GDtlsClientConnection) [*c]GList;
pub const struct__GDtlsServerConnectionInterface = extern struct {
    g_iface: GTypeInterface,
};
pub const GDtlsServerConnectionInterface = struct__GDtlsServerConnectionInterface;
pub extern fn _frida_g_dtls_server_connection_get_type() GType;
pub extern fn _frida_g_dtls_server_connection_new(base_socket: ?*GDatagramBased, certificate: [*c]GTlsCertificate, @"error": [*c][*c]GError) ?*GDatagramBased;
pub const struct__GIconIface = extern struct {
    g_iface: GTypeInterface,
    hash: ?*const fn (?*GIcon) callconv(.C) guint,
    equal: ?*const fn (?*GIcon, ?*GIcon) callconv(.C) gboolean,
    to_tokens: ?*const fn (?*GIcon, [*c]GPtrArray, [*c]gint) callconv(.C) gboolean,
    from_tokens: ?*const fn ([*c][*c]gchar, gint, gint, [*c][*c]GError) callconv(.C) ?*GIcon,
    serialize: ?*const fn (?*GIcon) callconv(.C) ?*GVariant,
};
pub const GIconIface = struct__GIconIface;
pub extern fn _frida_g_icon_get_type() GType;
pub extern fn _frida_g_icon_hash(icon: gconstpointer) guint;
pub extern fn _frida_g_icon_equal(icon1: ?*GIcon, icon2: ?*GIcon) gboolean;
pub extern fn _frida_g_icon_to_string(icon: ?*GIcon) [*c]gchar;
pub extern fn _frida_g_icon_new_for_string(str: [*c]const gchar, @"error": [*c][*c]GError) ?*GIcon;
pub extern fn _frida_g_icon_serialize(icon: ?*GIcon) ?*GVariant;
pub extern fn _frida_g_icon_deserialize(value: ?*GVariant) ?*GIcon;
pub const struct__GEmblem = opaque {};
pub const GEmblem = struct__GEmblem;
pub const struct__GEmblemClass = opaque {};
pub const GEmblemClass = struct__GEmblemClass;
pub extern fn _frida_g_emblem_get_type() GType;
pub extern fn _frida_g_emblem_new(icon: ?*GIcon) ?*GEmblem;
pub extern fn _frida_g_emblem_new_with_origin(icon: ?*GIcon, origin: GEmblemOrigin) ?*GEmblem;
pub extern fn _frida_g_emblem_get_icon(emblem: ?*GEmblem) ?*GIcon;
pub extern fn _frida_g_emblem_get_origin(emblem: ?*GEmblem) GEmblemOrigin;
pub const struct__GEmblemedIconPrivate = opaque {};
pub const GEmblemedIconPrivate = struct__GEmblemedIconPrivate;
pub const struct__GEmblemedIcon = extern struct {
    parent_instance: GObject,
    priv: ?*GEmblemedIconPrivate,
};
pub const GEmblemedIcon = struct__GEmblemedIcon;
pub const struct__GEmblemedIconClass = extern struct {
    parent_class: GObjectClass,
};
pub const GEmblemedIconClass = struct__GEmblemedIconClass;
pub extern fn _frida_g_emblemed_icon_get_type() GType;
pub extern fn _frida_g_emblemed_icon_new(icon: ?*GIcon, emblem: ?*GEmblem) ?*GIcon;
pub extern fn _frida_g_emblemed_icon_get_icon(emblemed: [*c]GEmblemedIcon) ?*GIcon;
pub extern fn _frida_g_emblemed_icon_get_emblems(emblemed: [*c]GEmblemedIcon) [*c]GList;
pub extern fn _frida_g_emblemed_icon_add_emblem(emblemed: [*c]GEmblemedIcon, emblem: ?*GEmblem) void;
pub extern fn _frida_g_emblemed_icon_clear_emblems(emblemed: [*c]GEmblemedIcon) void;
pub const struct__GFileIface = extern struct {
    g_iface: GTypeInterface,
    dup: ?*const fn (?*GFile) callconv(.C) ?*GFile,
    hash: ?*const fn (?*GFile) callconv(.C) guint,
    equal: ?*const fn (?*GFile, ?*GFile) callconv(.C) gboolean,
    is_native: ?*const fn (?*GFile) callconv(.C) gboolean,
    has_uri_scheme: ?*const fn (?*GFile, [*c]const u8) callconv(.C) gboolean,
    get_uri_scheme: ?*const fn (?*GFile) callconv(.C) [*c]u8,
    get_basename: ?*const fn (?*GFile) callconv(.C) [*c]u8,
    get_path: ?*const fn (?*GFile) callconv(.C) [*c]u8,
    get_uri: ?*const fn (?*GFile) callconv(.C) [*c]u8,
    get_parse_name: ?*const fn (?*GFile) callconv(.C) [*c]u8,
    get_parent: ?*const fn (?*GFile) callconv(.C) ?*GFile,
    prefix_matches: ?*const fn (?*GFile, ?*GFile) callconv(.C) gboolean,
    get_relative_path: ?*const fn (?*GFile, ?*GFile) callconv(.C) [*c]u8,
    resolve_relative_path: ?*const fn (?*GFile, [*c]const u8) callconv(.C) ?*GFile,
    get_child_for_display_name: ?*const fn (?*GFile, [*c]const u8, [*c][*c]GError) callconv(.C) ?*GFile,
    enumerate_children: ?*const fn (?*GFile, [*c]const u8, GFileQueryInfoFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileEnumerator,
    enumerate_children_async: ?*const fn (?*GFile, [*c]const u8, GFileQueryInfoFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    enumerate_children_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileEnumerator,
    query_info: ?*const fn (?*GFile, [*c]const u8, GFileQueryInfoFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    query_info_async: ?*const fn (?*GFile, [*c]const u8, GFileQueryInfoFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    query_info_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    query_filesystem_info: ?*const fn (?*GFile, [*c]const u8, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    query_filesystem_info_async: ?*const fn (?*GFile, [*c]const u8, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    query_filesystem_info_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    find_enclosing_mount: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GMount,
    find_enclosing_mount_async: ?*const fn (?*GFile, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    find_enclosing_mount_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GMount,
    set_display_name: ?*const fn (?*GFile, [*c]const u8, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GFile,
    set_display_name_async: ?*const fn (?*GFile, [*c]const u8, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    set_display_name_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GFile,
    query_settable_attributes: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileAttributeInfoList,
    _query_settable_attributes_async: ?*const fn () callconv(.C) void,
    _query_settable_attributes_finish: ?*const fn () callconv(.C) void,
    query_writable_namespaces: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileAttributeInfoList,
    _query_writable_namespaces_async: ?*const fn () callconv(.C) void,
    _query_writable_namespaces_finish: ?*const fn () callconv(.C) void,
    set_attribute: ?*const fn (?*GFile, [*c]const u8, GFileAttributeType, gpointer, GFileQueryInfoFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    set_attributes_from_info: ?*const fn (?*GFile, ?*GFileInfo, GFileQueryInfoFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    set_attributes_async: ?*const fn (?*GFile, ?*GFileInfo, GFileQueryInfoFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    set_attributes_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c]?*GFileInfo, [*c][*c]GError) callconv(.C) gboolean,
    read_fn: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileInputStream,
    read_async: ?*const fn (?*GFile, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    read_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileInputStream,
    append_to: ?*const fn (?*GFile, GFileCreateFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileOutputStream,
    append_to_async: ?*const fn (?*GFile, GFileCreateFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    append_to_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileOutputStream,
    create: ?*const fn (?*GFile, GFileCreateFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileOutputStream,
    create_async: ?*const fn (?*GFile, GFileCreateFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    create_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileOutputStream,
    replace: ?*const fn (?*GFile, [*c]const u8, gboolean, GFileCreateFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileOutputStream,
    replace_async: ?*const fn (?*GFile, [*c]const u8, gboolean, GFileCreateFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    replace_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileOutputStream,
    delete_file: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    delete_file_async: ?*const fn (?*GFile, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    delete_file_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    trash: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    trash_async: ?*const fn (?*GFile, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    trash_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    make_directory: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    make_directory_async: ?*const fn (?*GFile, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    make_directory_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    make_symbolic_link: ?*const fn (?*GFile, [*c]const u8, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    make_symbolic_link_async: ?*const fn (?*GFile, [*c]const u8, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    make_symbolic_link_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    copy: ?*const fn (?*GFile, ?*GFile, GFileCopyFlags, [*c]GCancellable, GFileProgressCallback, gpointer, [*c][*c]GError) callconv(.C) gboolean,
    copy_async: ?*const fn (?*GFile, ?*GFile, GFileCopyFlags, c_int, [*c]GCancellable, GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer) callconv(.C) void,
    copy_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    move: ?*const fn (?*GFile, ?*GFile, GFileCopyFlags, [*c]GCancellable, GFileProgressCallback, gpointer, [*c][*c]GError) callconv(.C) gboolean,
    move_async: ?*const fn (?*GFile, ?*GFile, GFileCopyFlags, c_int, [*c]GCancellable, GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer) callconv(.C) void,
    move_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    mount_mountable: ?*const fn (?*GFile, GMountMountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    mount_mountable_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GFile,
    unmount_mountable: ?*const fn (?*GFile, GMountUnmountFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    unmount_mountable_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    eject_mountable: ?*const fn (?*GFile, GMountUnmountFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_mountable_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    mount_enclosing_volume: ?*const fn (?*GFile, GMountMountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    mount_enclosing_volume_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    monitor_dir: ?*const fn (?*GFile, GFileMonitorFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileMonitor,
    monitor_file: ?*const fn (?*GFile, GFileMonitorFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileMonitor,
    open_readwrite: ?*const fn (?*GFile, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileIOStream,
    open_readwrite_async: ?*const fn (?*GFile, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    open_readwrite_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileIOStream,
    create_readwrite: ?*const fn (?*GFile, GFileCreateFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileIOStream,
    create_readwrite_async: ?*const fn (?*GFile, GFileCreateFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    create_readwrite_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileIOStream,
    replace_readwrite: ?*const fn (?*GFile, [*c]const u8, gboolean, GFileCreateFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GFileIOStream,
    replace_readwrite_async: ?*const fn (?*GFile, [*c]const u8, gboolean, GFileCreateFlags, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    replace_readwrite_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GFileIOStream,
    start_mountable: ?*const fn (?*GFile, GDriveStartFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    start_mountable_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    stop_mountable: ?*const fn (?*GFile, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    stop_mountable_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    supports_thread_contexts: gboolean,
    unmount_mountable_with_operation: ?*const fn (?*GFile, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    unmount_mountable_with_operation_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    eject_mountable_with_operation: ?*const fn (?*GFile, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_mountable_with_operation_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    poll_mountable: ?*const fn (?*GFile, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    poll_mountable_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    measure_disk_usage: ?*const fn (?*GFile, GFileMeasureFlags, [*c]GCancellable, GFileMeasureProgressCallback, gpointer, [*c]guint64, [*c]guint64, [*c]guint64, [*c][*c]GError) callconv(.C) gboolean,
    measure_disk_usage_async: ?*const fn (?*GFile, GFileMeasureFlags, gint, [*c]GCancellable, GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer) callconv(.C) void,
    measure_disk_usage_finish: ?*const fn (?*GFile, ?*GAsyncResult, [*c]guint64, [*c]guint64, [*c]guint64, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GFileIface = struct__GFileIface;
pub extern fn _frida_g_file_get_type() GType;
pub extern fn _frida_g_file_new_for_path(path: [*c]const u8) ?*GFile;
pub extern fn _frida_g_file_new_for_uri(uri: [*c]const u8) ?*GFile;
pub extern fn _frida_g_file_new_for_commandline_arg(arg: [*c]const u8) ?*GFile;
pub extern fn _frida_g_file_new_for_commandline_arg_and_cwd(arg: [*c]const gchar, cwd: [*c]const gchar) ?*GFile;
pub extern fn _frida_g_file_new_tmp(tmpl: [*c]const u8, iostream: [*c][*c]GFileIOStream, @"error": [*c][*c]GError) ?*GFile;
pub extern fn _frida_g_file_new_tmp_async(tmpl: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_new_tmp_finish(result: ?*GAsyncResult, iostream: [*c][*c]GFileIOStream, @"error": [*c][*c]GError) ?*GFile;
pub extern fn _frida_g_file_new_tmp_dir_async(tmpl: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_new_tmp_dir_finish(result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFile;
pub extern fn _frida_g_file_parse_name(parse_name: [*c]const u8) ?*GFile;
pub extern fn _frida_g_file_new_build_filename(first_element: [*c]const gchar, ...) ?*GFile;
pub extern fn _frida_g_file_dup(file: ?*GFile) ?*GFile;
pub extern fn _frida_g_file_hash(file: gconstpointer) guint;
pub extern fn _frida_g_file_equal(file1: ?*GFile, file2: ?*GFile) gboolean;
pub extern fn _frida_g_file_get_basename(file: ?*GFile) [*c]u8;
pub extern fn _frida_g_file_get_path(file: ?*GFile) [*c]u8;
pub extern fn _frida_g_file_peek_path(file: ?*GFile) [*c]const u8;
pub extern fn _frida_g_file_get_uri(file: ?*GFile) [*c]u8;
pub extern fn _frida_g_file_get_parse_name(file: ?*GFile) [*c]u8;
pub extern fn _frida_g_file_get_parent(file: ?*GFile) ?*GFile;
pub extern fn _frida_g_file_has_parent(file: ?*GFile, parent: ?*GFile) gboolean;
pub extern fn _frida_g_file_get_child(file: ?*GFile, name: [*c]const u8) ?*GFile;
pub extern fn _frida_g_file_get_child_for_display_name(file: ?*GFile, display_name: [*c]const u8, @"error": [*c][*c]GError) ?*GFile;
pub extern fn _frida_g_file_has_prefix(file: ?*GFile, prefix: ?*GFile) gboolean;
pub extern fn _frida_g_file_get_relative_path(parent: ?*GFile, descendant: ?*GFile) [*c]u8;
pub extern fn _frida_g_file_resolve_relative_path(file: ?*GFile, relative_path: [*c]const u8) ?*GFile;
pub extern fn _frida_g_file_is_native(file: ?*GFile) gboolean;
pub extern fn _frida_g_file_has_uri_scheme(file: ?*GFile, uri_scheme: [*c]const u8) gboolean;
pub extern fn _frida_g_file_get_uri_scheme(file: ?*GFile) [*c]u8;
pub extern fn _frida_g_file_read(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileInputStream;
pub extern fn _frida_g_file_read_async(file: ?*GFile, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_read_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileInputStream;
pub extern fn _frida_g_file_append_to(file: ?*GFile, flags: GFileCreateFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileOutputStream;
pub extern fn _frida_g_file_create(file: ?*GFile, flags: GFileCreateFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileOutputStream;
pub extern fn _frida_g_file_replace(file: ?*GFile, etag: [*c]const u8, make_backup: gboolean, flags: GFileCreateFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileOutputStream;
pub extern fn _frida_g_file_append_to_async(file: ?*GFile, flags: GFileCreateFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_append_to_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileOutputStream;
pub extern fn _frida_g_file_create_async(file: ?*GFile, flags: GFileCreateFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_create_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileOutputStream;
pub extern fn _frida_g_file_replace_async(file: ?*GFile, etag: [*c]const u8, make_backup: gboolean, flags: GFileCreateFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_replace_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileOutputStream;
pub extern fn _frida_g_file_open_readwrite(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileIOStream;
pub extern fn _frida_g_file_open_readwrite_async(file: ?*GFile, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_open_readwrite_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileIOStream;
pub extern fn _frida_g_file_create_readwrite(file: ?*GFile, flags: GFileCreateFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileIOStream;
pub extern fn _frida_g_file_create_readwrite_async(file: ?*GFile, flags: GFileCreateFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_create_readwrite_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileIOStream;
pub extern fn _frida_g_file_replace_readwrite(file: ?*GFile, etag: [*c]const u8, make_backup: gboolean, flags: GFileCreateFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileIOStream;
pub extern fn _frida_g_file_replace_readwrite_async(file: ?*GFile, etag: [*c]const u8, make_backup: gboolean, flags: GFileCreateFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_replace_readwrite_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileIOStream;
pub extern fn _frida_g_file_query_exists(file: ?*GFile, cancellable: [*c]GCancellable) gboolean;
pub extern fn _frida_g_file_query_file_type(file: ?*GFile, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable) GFileType;
pub extern fn _frida_g_file_query_info(file: ?*GFile, attributes: [*c]const u8, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_query_info_async(file: ?*GFile, attributes: [*c]const u8, flags: GFileQueryInfoFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_query_info_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_query_filesystem_info(file: ?*GFile, attributes: [*c]const u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_query_filesystem_info_async(file: ?*GFile, attributes: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_query_filesystem_info_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_find_enclosing_mount(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GMount;
pub extern fn _frida_g_file_find_enclosing_mount_async(file: ?*GFile, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_find_enclosing_mount_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GMount;
pub extern fn _frida_g_file_enumerate_children(file: ?*GFile, attributes: [*c]const u8, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileEnumerator;
pub extern fn _frida_g_file_enumerate_children_async(file: ?*GFile, attributes: [*c]const u8, flags: GFileQueryInfoFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_enumerate_children_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GFileEnumerator;
pub extern fn _frida_g_file_set_display_name(file: ?*GFile, display_name: [*c]const u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GFile;
pub extern fn _frida_g_file_set_display_name_async(file: ?*GFile, display_name: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_set_display_name_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFile;
pub extern fn _frida_g_file_delete(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_delete_async(file: ?*GFile, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_delete_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_trash(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_trash_async(file: ?*GFile, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_trash_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_copy(source: ?*GFile, destination: ?*GFile, flags: GFileCopyFlags, cancellable: [*c]GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_copy_async(source: ?*GFile, destination: ?*GFile, flags: GFileCopyFlags, io_priority: c_int, cancellable: [*c]GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_copy_finish(file: ?*GFile, res: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_move(source: ?*GFile, destination: ?*GFile, flags: GFileCopyFlags, cancellable: [*c]GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_move_async(source: ?*GFile, destination: ?*GFile, flags: GFileCopyFlags, io_priority: c_int, cancellable: [*c]GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_move_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_make_directory(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_make_directory_async(file: ?*GFile, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_make_directory_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_make_directory_with_parents(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_make_symbolic_link(file: ?*GFile, symlink_value: [*c]const u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_make_symbolic_link_async(file: ?*GFile, symlink_value: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_make_symbolic_link_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_query_settable_attributes(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileAttributeInfoList;
pub extern fn _frida_g_file_query_writable_namespaces(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileAttributeInfoList;
pub extern fn _frida_g_file_set_attribute(file: ?*GFile, attribute: [*c]const u8, @"type": GFileAttributeType, value_p: gpointer, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attributes_from_info(file: ?*GFile, info: ?*GFileInfo, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attributes_async(file: ?*GFile, info: ?*GFileInfo, flags: GFileQueryInfoFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_set_attributes_finish(file: ?*GFile, result: ?*GAsyncResult, info: [*c]?*GFileInfo, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attribute_string(file: ?*GFile, attribute: [*c]const u8, value: [*c]const u8, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attribute_byte_string(file: ?*GFile, attribute: [*c]const u8, value: [*c]const u8, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attribute_uint32(file: ?*GFile, attribute: [*c]const u8, value: guint32, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attribute_int32(file: ?*GFile, attribute: [*c]const u8, value: gint32, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attribute_uint64(file: ?*GFile, attribute: [*c]const u8, value: guint64, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_set_attribute_int64(file: ?*GFile, attribute: [*c]const u8, value: gint64, flags: GFileQueryInfoFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_mount_enclosing_volume(location: ?*GFile, flags: GMountMountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_mount_enclosing_volume_finish(location: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_mount_mountable(file: ?*GFile, flags: GMountMountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_mount_mountable_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFile;
pub extern fn _frida_g_file_unmount_mountable(file: ?*GFile, flags: GMountUnmountFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_unmount_mountable_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_unmount_mountable_with_operation(file: ?*GFile, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_unmount_mountable_with_operation_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_eject_mountable(file: ?*GFile, flags: GMountUnmountFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_eject_mountable_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_eject_mountable_with_operation(file: ?*GFile, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_eject_mountable_with_operation_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_build_attribute_list_for_copy(file: ?*GFile, flags: GFileCopyFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]u8;
pub extern fn _frida_g_file_copy_attributes(source: ?*GFile, destination: ?*GFile, flags: GFileCopyFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_monitor_directory(file: ?*GFile, flags: GFileMonitorFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileMonitor;
pub extern fn _frida_g_file_monitor_file(file: ?*GFile, flags: GFileMonitorFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileMonitor;
pub extern fn _frida_g_file_monitor(file: ?*GFile, flags: GFileMonitorFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GFileMonitor;
pub extern fn _frida_g_file_measure_disk_usage(file: ?*GFile, flags: GFileMeasureFlags, cancellable: [*c]GCancellable, progress_callback: GFileMeasureProgressCallback, progress_data: gpointer, disk_usage: [*c]guint64, num_dirs: [*c]guint64, num_files: [*c]guint64, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_measure_disk_usage_async(file: ?*GFile, flags: GFileMeasureFlags, io_priority: gint, cancellable: [*c]GCancellable, progress_callback: GFileMeasureProgressCallback, progress_data: gpointer, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_measure_disk_usage_finish(file: ?*GFile, result: ?*GAsyncResult, disk_usage: [*c]guint64, num_dirs: [*c]guint64, num_files: [*c]guint64, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_start_mountable(file: ?*GFile, flags: GDriveStartFlags, start_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_start_mountable_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_stop_mountable(file: ?*GFile, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_stop_mountable_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_poll_mountable(file: ?*GFile, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_poll_mountable_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_query_default_handler(file: ?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GAppInfo;
pub extern fn _frida_g_file_query_default_handler_async(file: ?*GFile, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_query_default_handler_finish(file: ?*GFile, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GAppInfo;
pub extern fn _frida_g_file_load_contents(file: ?*GFile, cancellable: [*c]GCancellable, contents: [*c][*c]u8, length: [*c]gsize, etag_out: [*c][*c]u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_load_contents_async(file: ?*GFile, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_load_contents_finish(file: ?*GFile, res: ?*GAsyncResult, contents: [*c][*c]u8, length: [*c]gsize, etag_out: [*c][*c]u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_load_partial_contents_async(file: ?*GFile, cancellable: [*c]GCancellable, read_more_callback: GFileReadMoreCallback, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_load_partial_contents_finish(file: ?*GFile, res: ?*GAsyncResult, contents: [*c][*c]u8, length: [*c]gsize, etag_out: [*c][*c]u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_replace_contents(file: ?*GFile, contents: [*c]const u8, length: gsize, etag: [*c]const u8, make_backup: gboolean, flags: GFileCreateFlags, new_etag: [*c][*c]u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_replace_contents_async(file: ?*GFile, contents: [*c]const u8, length: gsize, etag: [*c]const u8, make_backup: gboolean, flags: GFileCreateFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_replace_contents_bytes_async(file: ?*GFile, contents: ?*GBytes, etag: [*c]const u8, make_backup: gboolean, flags: GFileCreateFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_replace_contents_finish(file: ?*GFile, res: ?*GAsyncResult, new_etag: [*c][*c]u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_supports_thread_contexts(file: ?*GFile) gboolean;
pub extern fn _frida_g_file_load_bytes(file: ?*GFile, cancellable: [*c]GCancellable, etag_out: [*c][*c]gchar, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn _frida_g_file_load_bytes_async(file: ?*GFile, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_load_bytes_finish(file: ?*GFile, result: ?*GAsyncResult, etag_out: [*c][*c]gchar, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn _frida_g_file_attribute_info_list_get_type() GType;
pub extern fn _frida_g_file_attribute_info_list_new() [*c]GFileAttributeInfoList;
pub extern fn _frida_g_file_attribute_info_list_ref(list: [*c]GFileAttributeInfoList) [*c]GFileAttributeInfoList;
pub extern fn _frida_g_file_attribute_info_list_unref(list: [*c]GFileAttributeInfoList) void;
pub extern fn _frida_g_file_attribute_info_list_dup(list: [*c]GFileAttributeInfoList) [*c]GFileAttributeInfoList;
pub extern fn _frida_g_file_attribute_info_list_lookup(list: [*c]GFileAttributeInfoList, name: [*c]const u8) [*c]const GFileAttributeInfo;
pub extern fn _frida_g_file_attribute_info_list_add(list: [*c]GFileAttributeInfoList, name: [*c]const u8, @"type": GFileAttributeType, flags: GFileAttributeInfoFlags) void;
pub const struct__GFileEnumeratorClass = extern struct {
    parent_class: GObjectClass,
    next_file: ?*const fn ([*c]GFileEnumerator, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    close_fn: ?*const fn ([*c]GFileEnumerator, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    next_files_async: ?*const fn ([*c]GFileEnumerator, c_int, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    next_files_finish: ?*const fn ([*c]GFileEnumerator, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GList,
    close_async: ?*const fn ([*c]GFileEnumerator, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    close_finish: ?*const fn ([*c]GFileEnumerator, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
    _g_reserved7: ?*const fn () callconv(.C) void,
};
pub const GFileEnumeratorClass = struct__GFileEnumeratorClass;
pub extern fn _frida_g_file_enumerator_get_type() GType;
pub extern fn _frida_g_file_enumerator_next_file(enumerator: [*c]GFileEnumerator, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_enumerator_close(enumerator: [*c]GFileEnumerator, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_enumerator_next_files_async(enumerator: [*c]GFileEnumerator, num_files: c_int, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_enumerator_next_files_finish(enumerator: [*c]GFileEnumerator, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_file_enumerator_close_async(enumerator: [*c]GFileEnumerator, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_enumerator_close_finish(enumerator: [*c]GFileEnumerator, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_file_enumerator_is_closed(enumerator: [*c]GFileEnumerator) gboolean;
pub extern fn _frida_g_file_enumerator_has_pending(enumerator: [*c]GFileEnumerator) gboolean;
pub extern fn _frida_g_file_enumerator_set_pending(enumerator: [*c]GFileEnumerator, pending: gboolean) void;
pub extern fn _frida_g_file_enumerator_get_container(enumerator: [*c]GFileEnumerator) ?*GFile;
pub extern fn _frida_g_file_enumerator_get_child(enumerator: [*c]GFileEnumerator, info: ?*GFileInfo) ?*GFile;
pub extern fn _frida_g_file_enumerator_iterate(direnum: [*c]GFileEnumerator, out_info: [*c]?*GFileInfo, out_child: [*c]?*GFile, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub const struct__GFileIconClass = opaque {};
pub const GFileIconClass = struct__GFileIconClass;
pub extern fn _frida_g_file_icon_get_type() GType;
pub extern fn _frida_g_file_icon_new(file: ?*GFile) ?*GIcon;
pub extern fn _frida_g_file_icon_get_file(icon: ?*GFileIcon) ?*GFile;
pub const struct__GFileInfoClass = opaque {};
pub const GFileInfoClass = struct__GFileInfoClass;
pub extern fn _frida_g_file_info_get_type() GType;
pub extern fn _frida_g_file_info_new() ?*GFileInfo;
pub extern fn _frida_g_file_info_dup(other: ?*GFileInfo) ?*GFileInfo;
pub extern fn _frida_g_file_info_copy_into(src_info: ?*GFileInfo, dest_info: ?*GFileInfo) void;
pub extern fn _frida_g_file_info_has_attribute(info: ?*GFileInfo, attribute: [*c]const u8) gboolean;
pub extern fn _frida_g_file_info_has_namespace(info: ?*GFileInfo, name_space: [*c]const u8) gboolean;
pub extern fn _frida_g_file_info_list_attributes(info: ?*GFileInfo, name_space: [*c]const u8) [*c][*c]u8;
pub extern fn _frida_g_file_info_get_attribute_data(info: ?*GFileInfo, attribute: [*c]const u8, @"type": [*c]GFileAttributeType, value_pp: [*c]gpointer, status: [*c]GFileAttributeStatus) gboolean;
pub extern fn _frida_g_file_info_get_attribute_type(info: ?*GFileInfo, attribute: [*c]const u8) GFileAttributeType;
pub extern fn _frida_g_file_info_remove_attribute(info: ?*GFileInfo, attribute: [*c]const u8) void;
pub extern fn _frida_g_file_info_get_attribute_status(info: ?*GFileInfo, attribute: [*c]const u8) GFileAttributeStatus;
pub extern fn _frida_g_file_info_set_attribute_status(info: ?*GFileInfo, attribute: [*c]const u8, status: GFileAttributeStatus) gboolean;
pub extern fn _frida_g_file_info_get_attribute_as_string(info: ?*GFileInfo, attribute: [*c]const u8) [*c]u8;
pub extern fn _frida_g_file_info_get_attribute_string(info: ?*GFileInfo, attribute: [*c]const u8) [*c]const u8;
pub extern fn _frida_g_file_info_get_attribute_byte_string(info: ?*GFileInfo, attribute: [*c]const u8) [*c]const u8;
pub extern fn _frida_g_file_info_get_attribute_boolean(info: ?*GFileInfo, attribute: [*c]const u8) gboolean;
pub extern fn _frida_g_file_info_get_attribute_uint32(info: ?*GFileInfo, attribute: [*c]const u8) guint32;
pub extern fn _frida_g_file_info_get_attribute_int32(info: ?*GFileInfo, attribute: [*c]const u8) gint32;
pub extern fn _frida_g_file_info_get_attribute_uint64(info: ?*GFileInfo, attribute: [*c]const u8) guint64;
pub extern fn _frida_g_file_info_get_attribute_int64(info: ?*GFileInfo, attribute: [*c]const u8) gint64;
pub extern fn _frida_g_file_info_get_attribute_object(info: ?*GFileInfo, attribute: [*c]const u8) [*c]GObject;
pub extern fn _frida_g_file_info_get_attribute_stringv(info: ?*GFileInfo, attribute: [*c]const u8) [*c][*c]u8;
pub extern fn _frida_g_file_info_set_attribute(info: ?*GFileInfo, attribute: [*c]const u8, @"type": GFileAttributeType, value_p: gpointer) void;
pub extern fn _frida_g_file_info_set_attribute_string(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: [*c]const u8) void;
pub extern fn _frida_g_file_info_set_attribute_byte_string(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: [*c]const u8) void;
pub extern fn _frida_g_file_info_set_attribute_boolean(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: gboolean) void;
pub extern fn _frida_g_file_info_set_attribute_uint32(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: guint32) void;
pub extern fn _frida_g_file_info_set_attribute_int32(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: gint32) void;
pub extern fn _frida_g_file_info_set_attribute_uint64(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: guint64) void;
pub extern fn _frida_g_file_info_set_attribute_int64(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: gint64) void;
pub extern fn _frida_g_file_info_set_attribute_object(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: [*c]GObject) void;
pub extern fn _frida_g_file_info_set_attribute_stringv(info: ?*GFileInfo, attribute: [*c]const u8, attr_value: [*c][*c]u8) void;
pub extern fn _frida_g_file_info_clear_status(info: ?*GFileInfo) void;
pub extern fn _frida_g_file_info_get_deletion_date(info: ?*GFileInfo) ?*GDateTime;
pub extern fn _frida_g_file_info_get_file_type(info: ?*GFileInfo) GFileType;
pub extern fn _frida_g_file_info_get_is_hidden(info: ?*GFileInfo) gboolean;
pub extern fn _frida_g_file_info_get_is_backup(info: ?*GFileInfo) gboolean;
pub extern fn _frida_g_file_info_get_is_symlink(info: ?*GFileInfo) gboolean;
pub extern fn _frida_g_file_info_get_name(info: ?*GFileInfo) [*c]const u8;
pub extern fn _frida_g_file_info_get_display_name(info: ?*GFileInfo) [*c]const u8;
pub extern fn _frida_g_file_info_get_edit_name(info: ?*GFileInfo) [*c]const u8;
pub extern fn _frida_g_file_info_get_icon(info: ?*GFileInfo) ?*GIcon;
pub extern fn _frida_g_file_info_get_symbolic_icon(info: ?*GFileInfo) ?*GIcon;
pub extern fn _frida_g_file_info_get_content_type(info: ?*GFileInfo) [*c]const u8;
pub extern fn _frida_g_file_info_get_size(info: ?*GFileInfo) goffset;
pub extern fn _frida_g_file_info_get_modification_time(info: ?*GFileInfo, result: [*c]GTimeVal) void;
pub extern fn _frida_g_file_info_get_modification_date_time(info: ?*GFileInfo) ?*GDateTime;
pub extern fn _frida_g_file_info_get_access_date_time(info: ?*GFileInfo) ?*GDateTime;
pub extern fn _frida_g_file_info_get_creation_date_time(info: ?*GFileInfo) ?*GDateTime;
pub extern fn _frida_g_file_info_get_symlink_target(info: ?*GFileInfo) [*c]const u8;
pub extern fn _frida_g_file_info_get_etag(info: ?*GFileInfo) [*c]const u8;
pub extern fn _frida_g_file_info_get_sort_order(info: ?*GFileInfo) gint32;
pub extern fn _frida_g_file_info_set_attribute_mask(info: ?*GFileInfo, mask: ?*GFileAttributeMatcher) void;
pub extern fn _frida_g_file_info_unset_attribute_mask(info: ?*GFileInfo) void;
pub extern fn _frida_g_file_info_set_file_type(info: ?*GFileInfo, @"type": GFileType) void;
pub extern fn _frida_g_file_info_set_is_hidden(info: ?*GFileInfo, is_hidden: gboolean) void;
pub extern fn _frida_g_file_info_set_is_symlink(info: ?*GFileInfo, is_symlink: gboolean) void;
pub extern fn _frida_g_file_info_set_name(info: ?*GFileInfo, name: [*c]const u8) void;
pub extern fn _frida_g_file_info_set_display_name(info: ?*GFileInfo, display_name: [*c]const u8) void;
pub extern fn _frida_g_file_info_set_edit_name(info: ?*GFileInfo, edit_name: [*c]const u8) void;
pub extern fn _frida_g_file_info_set_icon(info: ?*GFileInfo, icon: ?*GIcon) void;
pub extern fn _frida_g_file_info_set_symbolic_icon(info: ?*GFileInfo, icon: ?*GIcon) void;
pub extern fn _frida_g_file_info_set_content_type(info: ?*GFileInfo, content_type: [*c]const u8) void;
pub extern fn _frida_g_file_info_set_size(info: ?*GFileInfo, size: goffset) void;
pub extern fn _frida_g_file_info_set_modification_time(info: ?*GFileInfo, mtime: [*c]GTimeVal) void;
pub extern fn _frida_g_file_info_set_modification_date_time(info: ?*GFileInfo, mtime: ?*GDateTime) void;
pub extern fn _frida_g_file_info_set_access_date_time(info: ?*GFileInfo, atime: ?*GDateTime) void;
pub extern fn _frida_g_file_info_set_creation_date_time(info: ?*GFileInfo, creation_time: ?*GDateTime) void;
pub extern fn _frida_g_file_info_set_symlink_target(info: ?*GFileInfo, symlink_target: [*c]const u8) void;
pub extern fn _frida_g_file_info_set_sort_order(info: ?*GFileInfo, sort_order: gint32) void;
pub extern fn _frida_g_file_attribute_matcher_get_type() GType;
pub extern fn _frida_g_file_attribute_matcher_new(attributes: [*c]const u8) ?*GFileAttributeMatcher;
pub extern fn _frida_g_file_attribute_matcher_ref(matcher: ?*GFileAttributeMatcher) ?*GFileAttributeMatcher;
pub extern fn _frida_g_file_attribute_matcher_unref(matcher: ?*GFileAttributeMatcher) void;
pub extern fn _frida_g_file_attribute_matcher_subtract(matcher: ?*GFileAttributeMatcher, subtract: ?*GFileAttributeMatcher) ?*GFileAttributeMatcher;
pub extern fn _frida_g_file_attribute_matcher_matches(matcher: ?*GFileAttributeMatcher, attribute: [*c]const u8) gboolean;
pub extern fn _frida_g_file_attribute_matcher_matches_only(matcher: ?*GFileAttributeMatcher, attribute: [*c]const u8) gboolean;
pub extern fn _frida_g_file_attribute_matcher_enumerate_namespace(matcher: ?*GFileAttributeMatcher, ns: [*c]const u8) gboolean;
pub extern fn _frida_g_file_attribute_matcher_enumerate_next(matcher: ?*GFileAttributeMatcher) [*c]const u8;
pub extern fn _frida_g_file_attribute_matcher_to_string(matcher: ?*GFileAttributeMatcher) [*c]u8;
pub const struct__GFileInputStreamClass = extern struct {
    parent_class: GInputStreamClass,
    tell: ?*const fn ([*c]GFileInputStream) callconv(.C) goffset,
    can_seek: ?*const fn ([*c]GFileInputStream) callconv(.C) gboolean,
    seek: ?*const fn ([*c]GFileInputStream, goffset, GSeekType, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    query_info: ?*const fn ([*c]GFileInputStream, [*c]const u8, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    query_info_async: ?*const fn ([*c]GFileInputStream, [*c]const u8, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    query_info_finish: ?*const fn ([*c]GFileInputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GFileInputStreamClass = struct__GFileInputStreamClass;
pub extern fn _frida_g_file_input_stream_get_type() GType;
pub extern fn _frida_g_file_input_stream_query_info(stream: [*c]GFileInputStream, attributes: [*c]const u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_input_stream_query_info_async(stream: [*c]GFileInputStream, attributes: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_input_stream_query_info_finish(stream: [*c]GFileInputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_io_error_quark() GQuark;
pub extern fn _frida_g_io_error_from_errno(err_no: gint) GIOErrorEnum;
pub extern fn _frida_g_io_error_from_file_error(file_error: GFileError) GIOErrorEnum;
pub const struct__GIOStreamClass = extern struct {
    parent_class: GObjectClass,
    get_input_stream: ?*const fn ([*c]GIOStream) callconv(.C) [*c]GInputStream,
    get_output_stream: ?*const fn ([*c]GIOStream) callconv(.C) [*c]GOutputStream,
    close_fn: ?*const fn ([*c]GIOStream, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    close_async: ?*const fn ([*c]GIOStream, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    close_finish: ?*const fn ([*c]GIOStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
    _g_reserved7: ?*const fn () callconv(.C) void,
    _g_reserved8: ?*const fn () callconv(.C) void,
    _g_reserved9: ?*const fn () callconv(.C) void,
    _g_reserved10: ?*const fn () callconv(.C) void,
};
pub const GIOStreamClass = struct__GIOStreamClass;
pub extern fn _frida_g_io_stream_get_type() GType;
pub extern fn _frida_g_io_stream_get_input_stream(stream: [*c]GIOStream) [*c]GInputStream;
pub extern fn _frida_g_io_stream_get_output_stream(stream: [*c]GIOStream) [*c]GOutputStream;
pub extern fn _frida_g_io_stream_splice_async(stream1: [*c]GIOStream, stream2: [*c]GIOStream, flags: GIOStreamSpliceFlags, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_io_stream_splice_finish(result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_io_stream_close(stream: [*c]GIOStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_io_stream_close_async(stream: [*c]GIOStream, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_io_stream_close_finish(stream: [*c]GIOStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_io_stream_is_closed(stream: [*c]GIOStream) gboolean;
pub extern fn _frida_g_io_stream_has_pending(stream: [*c]GIOStream) gboolean;
pub extern fn _frida_g_io_stream_set_pending(stream: [*c]GIOStream, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_io_stream_clear_pending(stream: [*c]GIOStream) void;
pub const struct__GFileIOStreamClass = extern struct {
    parent_class: GIOStreamClass,
    tell: ?*const fn ([*c]GFileIOStream) callconv(.C) goffset,
    can_seek: ?*const fn ([*c]GFileIOStream) callconv(.C) gboolean,
    seek: ?*const fn ([*c]GFileIOStream, goffset, GSeekType, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    can_truncate: ?*const fn ([*c]GFileIOStream) callconv(.C) gboolean,
    truncate_fn: ?*const fn ([*c]GFileIOStream, goffset, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    query_info: ?*const fn ([*c]GFileIOStream, [*c]const u8, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    query_info_async: ?*const fn ([*c]GFileIOStream, [*c]const u8, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    query_info_finish: ?*const fn ([*c]GFileIOStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    get_etag: ?*const fn ([*c]GFileIOStream) callconv(.C) [*c]u8,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GFileIOStreamClass = struct__GFileIOStreamClass;
pub extern fn _frida_g_file_io_stream_get_type() GType;
pub extern fn _frida_g_file_io_stream_query_info(stream: [*c]GFileIOStream, attributes: [*c]const u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_io_stream_query_info_async(stream: [*c]GFileIOStream, attributes: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_io_stream_query_info_finish(stream: [*c]GFileIOStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_io_stream_get_etag(stream: [*c]GFileIOStream) [*c]u8;
pub const struct__GFileMonitorClass = extern struct {
    parent_class: GObjectClass,
    changed: ?*const fn ([*c]GFileMonitor, ?*GFile, ?*GFile, GFileMonitorEvent) callconv(.C) void,
    cancel: ?*const fn ([*c]GFileMonitor) callconv(.C) gboolean,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GFileMonitorClass = struct__GFileMonitorClass;
pub extern fn _frida_g_file_monitor_get_type() GType;
pub extern fn _frida_g_file_monitor_cancel(monitor: [*c]GFileMonitor) gboolean;
pub extern fn _frida_g_file_monitor_is_cancelled(monitor: [*c]GFileMonitor) gboolean;
pub extern fn _frida_g_file_monitor_set_rate_limit(monitor: [*c]GFileMonitor, limit_msecs: gint) void;
pub extern fn _frida_g_file_monitor_emit_event(monitor: [*c]GFileMonitor, child: ?*GFile, other_file: ?*GFile, event_type: GFileMonitorEvent) void;
pub const struct__GFilenameCompleterClass = extern struct {
    parent_class: GObjectClass,
    got_completion_data: ?*const fn (?*GFilenameCompleter) callconv(.C) void,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
};
pub const GFilenameCompleterClass = struct__GFilenameCompleterClass;
pub extern fn _frida_g_filename_completer_get_type() GType;
pub extern fn _frida_g_filename_completer_new() ?*GFilenameCompleter;
pub extern fn _frida_g_filename_completer_get_completion_suffix(completer: ?*GFilenameCompleter, initial_text: [*c]const u8) [*c]u8;
pub extern fn _frida_g_filename_completer_get_completions(completer: ?*GFilenameCompleter, initial_text: [*c]const u8) [*c][*c]u8;
pub extern fn _frida_g_filename_completer_set_dirs_only(completer: ?*GFilenameCompleter, dirs_only: gboolean) void;
pub const struct__GFileOutputStreamClass = extern struct {
    parent_class: GOutputStreamClass,
    tell: ?*const fn ([*c]GFileOutputStream) callconv(.C) goffset,
    can_seek: ?*const fn ([*c]GFileOutputStream) callconv(.C) gboolean,
    seek: ?*const fn ([*c]GFileOutputStream, goffset, GSeekType, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    can_truncate: ?*const fn ([*c]GFileOutputStream) callconv(.C) gboolean,
    truncate_fn: ?*const fn ([*c]GFileOutputStream, goffset, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    query_info: ?*const fn ([*c]GFileOutputStream, [*c]const u8, [*c]GCancellable, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    query_info_async: ?*const fn ([*c]GFileOutputStream, [*c]const u8, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    query_info_finish: ?*const fn ([*c]GFileOutputStream, ?*GAsyncResult, [*c][*c]GError) callconv(.C) ?*GFileInfo,
    get_etag: ?*const fn ([*c]GFileOutputStream) callconv(.C) [*c]u8,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GFileOutputStreamClass = struct__GFileOutputStreamClass;
pub extern fn _frida_g_file_output_stream_get_type() GType;
pub extern fn _frida_g_file_output_stream_query_info(stream: [*c]GFileOutputStream, attributes: [*c]const u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_output_stream_query_info_async(stream: [*c]GFileOutputStream, attributes: [*c]const u8, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_file_output_stream_query_info_finish(stream: [*c]GFileOutputStream, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GFileInfo;
pub extern fn _frida_g_file_output_stream_get_etag(stream: [*c]GFileOutputStream) [*c]u8;
pub const struct__GInetAddressClass = extern struct {
    parent_class: GObjectClass,
    to_string: ?*const fn ([*c]GInetAddress) callconv(.C) [*c]gchar,
    to_bytes: ?*const fn ([*c]GInetAddress) callconv(.C) [*c]const guint8,
};
pub const GInetAddressClass = struct__GInetAddressClass;
pub extern fn _frida_g_inet_address_get_type() GType;
pub extern fn _frida_g_inet_address_new_from_string(string: [*c]const gchar) [*c]GInetAddress;
pub extern fn _frida_g_inet_address_new_from_bytes(bytes: [*c]const guint8, family: GSocketFamily) [*c]GInetAddress;
pub extern fn _frida_g_inet_address_new_loopback(family: GSocketFamily) [*c]GInetAddress;
pub extern fn _frida_g_inet_address_new_any(family: GSocketFamily) [*c]GInetAddress;
pub extern fn _frida_g_inet_address_equal(address: [*c]GInetAddress, other_address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_to_string(address: [*c]GInetAddress) [*c]gchar;
pub extern fn _frida_g_inet_address_to_bytes(address: [*c]GInetAddress) [*c]const guint8;
pub extern fn _frida_g_inet_address_get_native_size(address: [*c]GInetAddress) gsize;
pub extern fn _frida_g_inet_address_get_family(address: [*c]GInetAddress) GSocketFamily;
pub extern fn _frida_g_inet_address_get_is_any(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_loopback(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_link_local(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_site_local(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_multicast(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_mc_global(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_mc_link_local(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_mc_node_local(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_mc_org_local(address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_get_is_mc_site_local(address: [*c]GInetAddress) gboolean;
pub const struct__GInetAddressMaskClass = extern struct {
    parent_class: GObjectClass,
};
pub const GInetAddressMaskClass = struct__GInetAddressMaskClass;
pub extern fn _frida_g_inet_address_mask_get_type() GType;
pub extern fn _frida_g_inet_address_mask_new(addr: [*c]GInetAddress, length: guint, @"error": [*c][*c]GError) [*c]GInetAddressMask;
pub extern fn _frida_g_inet_address_mask_new_from_string(mask_string: [*c]const gchar, @"error": [*c][*c]GError) [*c]GInetAddressMask;
pub extern fn _frida_g_inet_address_mask_to_string(mask: [*c]GInetAddressMask) [*c]gchar;
pub extern fn _frida_g_inet_address_mask_get_family(mask: [*c]GInetAddressMask) GSocketFamily;
pub extern fn _frida_g_inet_address_mask_get_address(mask: [*c]GInetAddressMask) [*c]GInetAddress;
pub extern fn _frida_g_inet_address_mask_get_length(mask: [*c]GInetAddressMask) guint;
pub extern fn _frida_g_inet_address_mask_matches(mask: [*c]GInetAddressMask, address: [*c]GInetAddress) gboolean;
pub extern fn _frida_g_inet_address_mask_equal(mask: [*c]GInetAddressMask, mask2: [*c]GInetAddressMask) gboolean;
pub const struct__GSocketAddressClass = extern struct {
    parent_class: GObjectClass,
    get_family: ?*const fn ([*c]GSocketAddress) callconv(.C) GSocketFamily,
    get_native_size: ?*const fn ([*c]GSocketAddress) callconv(.C) gssize,
    to_native: ?*const fn ([*c]GSocketAddress, gpointer, gsize, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GSocketAddressClass = struct__GSocketAddressClass;
pub extern fn _frida_g_socket_address_get_type() GType;
pub extern fn _frida_g_socket_address_get_family(address: [*c]GSocketAddress) GSocketFamily;
pub extern fn _frida_g_socket_address_new_from_native(native: gpointer, len: gsize) [*c]GSocketAddress;
pub extern fn _frida_g_socket_address_to_native(address: [*c]GSocketAddress, dest: gpointer, destlen: gsize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_address_get_native_size(address: [*c]GSocketAddress) gssize;
pub const struct__GInetSocketAddressClass = extern struct {
    parent_class: GSocketAddressClass,
};
pub const GInetSocketAddressClass = struct__GInetSocketAddressClass;
pub extern fn _frida_g_inet_socket_address_get_type() GType;
pub extern fn _frida_g_inet_socket_address_new(address: [*c]GInetAddress, port: guint16) [*c]GSocketAddress;
pub extern fn _frida_g_inet_socket_address_new_from_string(address: [*c]const u8, port: guint) [*c]GSocketAddress;
pub extern fn _frida_g_inet_socket_address_get_address(address: [*c]GInetSocketAddress) [*c]GInetAddress;
pub extern fn _frida_g_inet_socket_address_get_port(address: [*c]GInetSocketAddress) guint16;
pub extern fn _frida_g_inet_socket_address_get_flowinfo(address: [*c]GInetSocketAddress) guint32;
pub extern fn _frida_g_inet_socket_address_get_scope_id(address: [*c]GInetSocketAddress) guint32;
pub extern fn _frida_g_app_info_create_flags_get_type() GType;
pub extern fn _frida_g_converter_flags_get_type() GType;
pub extern fn _frida_g_converter_result_get_type() GType;
pub extern fn _frida_g_data_stream_byte_order_get_type() GType;
pub extern fn _frida_g_data_stream_newline_type_get_type() GType;
pub extern fn _frida_g_file_attribute_type_get_type() GType;
pub extern fn _frida_g_file_attribute_info_flags_get_type() GType;
pub extern fn _frida_g_file_attribute_status_get_type() GType;
pub extern fn _frida_g_file_query_info_flags_get_type() GType;
pub extern fn _frida_g_file_create_flags_get_type() GType;
pub extern fn _frida_g_file_measure_flags_get_type() GType;
pub extern fn _frida_g_mount_mount_flags_get_type() GType;
pub extern fn _frida_g_mount_unmount_flags_get_type() GType;
pub extern fn _frida_g_drive_start_flags_get_type() GType;
pub extern fn _frida_g_drive_start_stop_type_get_type() GType;
pub extern fn _frida_g_file_copy_flags_get_type() GType;
pub extern fn _frida_g_file_monitor_flags_get_type() GType;
pub extern fn _frida_g_file_type_get_type() GType;
pub extern fn _frida_g_filesystem_preview_type_get_type() GType;
pub extern fn _frida_g_file_monitor_event_get_type() GType;
pub extern fn _frida_g_io_error_enum_get_type() GType;
pub extern fn _frida_g_ask_password_flags_get_type() GType;
pub extern fn _frida_g_password_save_get_type() GType;
pub extern fn _frida_g_mount_operation_result_get_type() GType;
pub extern fn _frida_g_output_stream_splice_flags_get_type() GType;
pub extern fn _frida_g_io_stream_splice_flags_get_type() GType;
pub extern fn _frida_g_emblem_origin_get_type() GType;
pub extern fn _frida_g_resolver_error_get_type() GType;
pub extern fn _frida_g_resolver_record_type_get_type() GType;
pub extern fn _frida_g_resource_error_get_type() GType;
pub extern fn _frida_g_resource_flags_get_type() GType;
pub extern fn _frida_g_resource_lookup_flags_get_type() GType;
pub extern fn _frida_g_socket_family_get_type() GType;
pub extern fn _frida_g_socket_type_get_type() GType;
pub extern fn _frida_g_socket_msg_flags_get_type() GType;
pub extern fn _frida_g_socket_protocol_get_type() GType;
pub extern fn _frida_g_zlib_compressor_format_get_type() GType;
pub extern fn _frida_g_unix_socket_address_type_get_type() GType;
pub extern fn _frida_g_bus_type_get_type() GType;
pub extern fn _frida_g_bus_name_owner_flags_get_type() GType;
pub extern fn _frida_g_bus_name_watcher_flags_get_type() GType;
pub extern fn _frida_g_dbus_proxy_flags_get_type() GType;
pub extern fn _frida_g_dbus_error_get_type() GType;
pub extern fn _frida_g_dbus_connection_flags_get_type() GType;
pub extern fn _frida_g_dbus_capability_flags_get_type() GType;
pub extern fn _frida_g_dbus_call_flags_get_type() GType;
pub extern fn _frida_g_dbus_message_type_get_type() GType;
pub extern fn _frida_g_dbus_message_flags_get_type() GType;
pub extern fn _frida_g_dbus_message_header_field_get_type() GType;
pub extern fn _frida_g_dbus_property_info_flags_get_type() GType;
pub extern fn _frida_g_dbus_subtree_flags_get_type() GType;
pub extern fn _frida_g_dbus_server_flags_get_type() GType;
pub extern fn _frida_g_dbus_signal_flags_get_type() GType;
pub extern fn _frida_g_dbus_send_message_flags_get_type() GType;
pub extern fn _frida_g_credentials_type_get_type() GType;
pub extern fn _frida_g_dbus_message_byte_order_get_type() GType;
pub extern fn _frida_g_application_flags_get_type() GType;
pub extern fn _frida_g_tls_error_get_type() GType;
pub extern fn _frida_g_tls_certificate_flags_get_type() GType;
pub extern fn _frida_g_tls_authentication_mode_get_type() GType;
pub extern fn _frida_g_tls_channel_binding_type_get_type() GType;
pub extern fn _frida_g_tls_channel_binding_error_get_type() GType;
pub extern fn _frida_g_tls_rehandshake_mode_get_type() GType;
pub extern fn _frida_g_tls_password_flags_get_type() GType;
pub extern fn _frida_g_tls_interaction_result_get_type() GType;
pub extern fn _frida_g_dbus_interface_skeleton_flags_get_type() GType;
pub extern fn _frida_g_dbus_object_manager_client_flags_get_type() GType;
pub extern fn _frida_g_tls_database_verify_flags_get_type() GType;
pub extern fn _frida_g_tls_database_lookup_flags_get_type() GType;
pub extern fn _frida_g_tls_certificate_request_flags_get_type() GType;
pub extern fn _frida_g_tls_protocol_version_get_type() GType;
pub extern fn _frida_g_io_module_scope_flags_get_type() GType;
pub extern fn _frida_g_socket_client_event_get_type() GType;
pub extern fn _frida_g_socket_listener_event_get_type() GType;
pub extern fn _frida_g_test_dbus_flags_get_type() GType;
pub extern fn _frida_g_subprocess_flags_get_type() GType;
pub extern fn _frida_g_notification_priority_get_type() GType;
pub extern fn _frida_g_network_connectivity_get_type() GType;
pub extern fn _frida_g_pollable_return_get_type() GType;
pub extern fn _frida_g_memory_monitor_warning_level_get_type() GType;
pub extern fn _frida_g_resolver_name_lookup_flags_get_type() GType;
pub extern fn _frida_g_settings_bind_flags_get_type() GType;
pub const G_MODULE_BIND_LAZY: c_int = 1;
pub const G_MODULE_BIND_LOCAL: c_int = 2;
pub const G_MODULE_BIND_MASK: c_int = 3;
pub const GModuleFlags = c_uint;
pub const struct__GModule = opaque {};
pub const GModule = struct__GModule;
pub const GModuleCheckInit = ?*const fn (?*GModule) callconv(.C) [*c]const gchar;
pub const GModuleUnload = ?*const fn (?*GModule) callconv(.C) void;
pub extern fn _frida_g_module_error_quark() GQuark;
pub const G_MODULE_ERROR_FAILED: c_int = 0;
pub const G_MODULE_ERROR_CHECK_FAILED: c_int = 1;
pub const GModuleError = c_uint;
pub extern fn _frida_g_module_supported() gboolean;
pub extern fn _frida_g_module_open(file_name: [*c]const gchar, flags: GModuleFlags) ?*GModule;
pub extern fn _frida_g_module_open_full(file_name: [*c]const gchar, flags: GModuleFlags, @"error": [*c][*c]GError) ?*GModule;
pub extern fn _frida_g_module_close(module: ?*GModule) gboolean;
pub extern fn _frida_g_module_make_resident(module: ?*GModule) void;
pub extern fn _frida_g_module_error() [*c]const gchar;
pub extern fn _frida_g_module_symbol(module: ?*GModule, symbol_name: [*c]const gchar, symbol: [*c]gpointer) gboolean;
pub extern fn _frida_g_module_name(module: ?*GModule) [*c]const gchar;
pub extern fn _frida_g_module_build_path(directory: [*c]const gchar, module_name: [*c]const gchar) [*c]gchar;
pub const struct__GIOModuleScope = opaque {};
pub const GIOModuleScope = struct__GIOModuleScope;
pub extern fn _frida_g_io_module_scope_new(flags: GIOModuleScopeFlags) ?*GIOModuleScope;
pub extern fn _frida_g_io_module_scope_free(scope: ?*GIOModuleScope) void;
pub extern fn _frida_g_io_module_scope_block(scope: ?*GIOModuleScope, basename: [*c]const gchar) void;
pub const struct__GIOModuleClass = opaque {};
pub const GIOModuleClass = struct__GIOModuleClass;
pub extern fn _frida_g_io_module_get_type() GType;
pub extern fn _frida_g_io_module_new(filename: [*c]const gchar) ?*GIOModule;
pub extern fn _frida_g_io_modules_scan_all_in_directory(dirname: [*c]const u8) void;
pub extern fn _frida_g_io_modules_load_all_in_directory(dirname: [*c]const gchar) [*c]GList;
pub extern fn _frida_g_io_modules_scan_all_in_directory_with_scope(dirname: [*c]const gchar, scope: ?*GIOModuleScope) void;
pub extern fn _frida_g_io_modules_load_all_in_directory_with_scope(dirname: [*c]const gchar, scope: ?*GIOModuleScope) [*c]GList;
pub extern fn _frida_g_io_extension_point_register(name: [*c]const u8) ?*GIOExtensionPoint;
pub extern fn _frida_g_io_extension_point_lookup(name: [*c]const u8) ?*GIOExtensionPoint;
pub extern fn _frida_g_io_extension_point_set_required_type(extension_point: ?*GIOExtensionPoint, @"type": GType) void;
pub extern fn _frida_g_io_extension_point_get_required_type(extension_point: ?*GIOExtensionPoint) GType;
pub extern fn _frida_g_io_extension_point_get_extensions(extension_point: ?*GIOExtensionPoint) [*c]GList;
pub extern fn _frida_g_io_extension_point_get_extension_by_name(extension_point: ?*GIOExtensionPoint, name: [*c]const u8) ?*GIOExtension;
pub extern fn _frida_g_io_extension_point_implement(extension_point_name: [*c]const u8, @"type": GType, extension_name: [*c]const u8, priority: gint) ?*GIOExtension;
pub extern fn _frida_g_io_extension_get_type(extension: ?*GIOExtension) GType;
pub extern fn _frida_g_io_extension_get_name(extension: ?*GIOExtension) [*c]const u8;
pub extern fn _frida_g_io_extension_get_priority(extension: ?*GIOExtension) gint;
pub extern fn _frida_g_io_extension_ref_class(extension: ?*GIOExtension) [*c]GTypeClass;
pub extern fn g_io_module_load(module: ?*GIOModule) void;
pub extern fn g_io_module_unload(module: ?*GIOModule) void;
pub extern fn g_io_module_query() [*c][*c]u8;
pub extern fn _frida_g_io_scheduler_push_job(job_func: GIOSchedulerJobFunc, user_data: gpointer, notify: GDestroyNotify, io_priority: gint, cancellable: [*c]GCancellable) void;
pub extern fn _frida_g_io_scheduler_cancel_all_jobs() void;
pub extern fn _frida_g_io_scheduler_job_send_to_mainloop(job: ?*GIOSchedulerJob, func: GSourceFunc, user_data: gpointer, notify: GDestroyNotify) gboolean;
pub extern fn _frida_g_io_scheduler_job_send_to_mainloop_async(job: ?*GIOSchedulerJob, func: GSourceFunc, user_data: gpointer, notify: GDestroyNotify) void;
pub extern fn _frida_g_list_model_get_type() GType;
pub const struct__GListModel = opaque {};
pub const GListModel = struct__GListModel;
pub const struct__GListModelInterface = extern struct {
    g_iface: GTypeInterface,
    get_item_type: ?*const fn (?*GListModel) callconv(.C) GType,
    get_n_items: ?*const fn (?*GListModel) callconv(.C) guint,
    get_item: ?*const fn (?*GListModel, guint) callconv(.C) gpointer,
};
pub const GListModelInterface = struct__GListModelInterface;
pub const GListModel_autoptr = ?*GListModel;
pub const GListModel_listautoptr = [*c]GList;
pub const GListModel_slistautoptr = [*c]GSList;
pub const GListModel_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GListModel(arg__ptr: ?*GListModel) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        glib_autoptr_clear_GObject(@ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), _ptr)));
    }
}
pub fn glib_autoptr_cleanup_GListModel(arg__ptr: [*c]?*GListModel) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GListModel(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GListModel(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_slistautoptr_cleanup_GListModel(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_queueautoptr_cleanup_GListModel(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
    }
}
pub fn G_LIST_MODEL(arg_ptr: gpointer) callconv(.C) ?*GListModel {
    var ptr = arg_ptr;
    return @ptrCast(?*GListModel, @ptrCast(?*anyopaque, _frida_g_type_check_instance_cast(@ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)), _frida_g_list_model_get_type())));
}
pub fn G_IS_LIST_MODEL(arg_ptr: gpointer) callconv(.C) gboolean {
    var ptr = arg_ptr;
    return blk: {
        var __inst: [*c]GTypeInstance = @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr));
        var __t: GType = _frida_g_list_model_get_type();
        var __r: gboolean = undefined;
        if (!(__inst != null)) {
            __r = @as(c_int, 0);
        } else if ((__inst.*.g_class != null) and (__inst.*.g_class.*.g_type == __t)) {
            __r = @boolToInt(!(@as(c_int, 0) != 0));
        } else {
            __r = _frida_g_type_check_instance_is_a(__inst, __t);
        }
        break :blk __r;
    };
}
pub fn G_LIST_MODEL_GET_IFACE(arg_ptr: gpointer) callconv(.C) [*c]GListModelInterface {
    var ptr = arg_ptr;
    return @ptrCast([*c]GListModelInterface, @alignCast(@import("std").meta.alignment([*c]GListModelInterface), _frida_g_type_interface_peek(@ptrCast(gpointer, @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)).*.g_class), _frida_g_list_model_get_type())));
}
pub extern fn _frida_g_list_model_get_item_type(list: ?*GListModel) GType;
pub extern fn _frida_g_list_model_get_n_items(list: ?*GListModel) guint;
pub extern fn _frida_g_list_model_get_item(list: ?*GListModel, position: guint) gpointer;
pub extern fn _frida_g_list_model_get_object(list: ?*GListModel, position: guint) [*c]GObject;
pub extern fn _frida_g_list_model_items_changed(list: ?*GListModel, position: guint, removed: guint, added: guint) void;
pub extern fn _frida_g_list_store_get_type() GType;
pub const struct__GListStore = opaque {};
pub const GListStore = struct__GListStore;
pub const GListStoreClass = extern struct {
    parent_class: GObjectClass,
};
pub const GListStore_autoptr = ?*GListStore;
pub const GListStore_listautoptr = [*c]GList;
pub const GListStore_slistautoptr = [*c]GSList;
pub const GListStore_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GListStore(arg__ptr: ?*GListStore) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        glib_autoptr_clear_GObject(@ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), _ptr)));
    }
}
pub fn glib_autoptr_cleanup_GListStore(arg__ptr: [*c]?*GListStore) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GListStore(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GListStore(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_slistautoptr_cleanup_GListStore(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_queueautoptr_cleanup_GListStore(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
    }
}
pub const GListStoreClass_autoptr = [*c]GListStoreClass;
pub const GListStoreClass_listautoptr = [*c]GList;
pub const GListStoreClass_slistautoptr = [*c]GSList;
pub const GListStoreClass_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GListStoreClass(arg__ptr: [*c]GListStoreClass) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_type_class_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GListStoreClass(arg__ptr: [*c][*c]GListStoreClass) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GListStoreClass(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GListStoreClass(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_slistautoptr_cleanup_GListStoreClass(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
}
pub fn glib_queueautoptr_cleanup_GListStoreClass(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_type_class_unref)))));
    }
}
pub fn G_LIST_STORE(arg_ptr: gpointer) callconv(.C) ?*GListStore {
    var ptr = arg_ptr;
    return @ptrCast(?*GListStore, @ptrCast(?*anyopaque, _frida_g_type_check_instance_cast(@ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)), _frida_g_list_store_get_type())));
}
pub fn G_IS_LIST_STORE(arg_ptr: gpointer) callconv(.C) gboolean {
    var ptr = arg_ptr;
    return blk: {
        var __inst: [*c]GTypeInstance = @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr));
        var __t: GType = _frida_g_list_store_get_type();
        var __r: gboolean = undefined;
        if (!(__inst != null)) {
            __r = @as(c_int, 0);
        } else if ((__inst.*.g_class != null) and (__inst.*.g_class.*.g_type == __t)) {
            __r = @boolToInt(!(@as(c_int, 0) != 0));
        } else {
            __r = _frida_g_type_check_instance_is_a(__inst, __t);
        }
        break :blk __r;
    };
}
pub extern fn _frida_g_list_store_new(item_type: GType) ?*GListStore;
pub extern fn _frida_g_list_store_insert(store: ?*GListStore, position: guint, item: gpointer) void;
pub extern fn _frida_g_list_store_insert_sorted(store: ?*GListStore, item: gpointer, compare_func: GCompareDataFunc, user_data: gpointer) guint;
pub extern fn _frida_g_list_store_sort(store: ?*GListStore, compare_func: GCompareDataFunc, user_data: gpointer) void;
pub extern fn _frida_g_list_store_append(store: ?*GListStore, item: gpointer) void;
pub extern fn _frida_g_list_store_remove(store: ?*GListStore, position: guint) void;
pub extern fn _frida_g_list_store_remove_all(store: ?*GListStore) void;
pub extern fn _frida_g_list_store_splice(store: ?*GListStore, position: guint, n_removals: guint, additions: [*c]gpointer, n_additions: guint) void;
pub extern fn _frida_g_list_store_find(store: ?*GListStore, item: gpointer, position: [*c]guint) gboolean;
pub extern fn _frida_g_list_store_find_with_equal_func(store: ?*GListStore, item: gpointer, equal_func: GEqualFunc, position: [*c]guint) gboolean;
pub extern fn _frida_g_list_store_find_with_equal_func_full(store: ?*GListStore, item: gpointer, equal_func: GEqualFuncFull, user_data: gpointer, position: [*c]guint) gboolean;
pub const struct__GLoadableIconIface = extern struct {
    g_iface: GTypeInterface,
    load: ?*const fn (?*GLoadableIcon, c_int, [*c][*c]u8, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GInputStream,
    load_async: ?*const fn (?*GLoadableIcon, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    load_finish: ?*const fn (?*GLoadableIcon, ?*GAsyncResult, [*c][*c]u8, [*c][*c]GError) callconv(.C) [*c]GInputStream,
};
pub const GLoadableIconIface = struct__GLoadableIconIface;
pub extern fn _frida_g_loadable_icon_get_type() GType;
pub extern fn _frida_g_loadable_icon_load(icon: ?*GLoadableIcon, size: c_int, @"type": [*c][*c]u8, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GInputStream;
pub extern fn _frida_g_loadable_icon_load_async(icon: ?*GLoadableIcon, size: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_loadable_icon_load_finish(icon: ?*GLoadableIcon, res: ?*GAsyncResult, @"type": [*c][*c]u8, @"error": [*c][*c]GError) [*c]GInputStream;
pub const struct__GMemoryInputStreamClass = extern struct {
    parent_class: GInputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GMemoryInputStreamClass = struct__GMemoryInputStreamClass;
pub extern fn _frida_g_memory_input_stream_get_type() GType;
pub extern fn _frida_g_memory_input_stream_new() [*c]GInputStream;
pub extern fn _frida_g_memory_input_stream_new_from_data(data: ?*const anyopaque, len: gssize, destroy: GDestroyNotify) [*c]GInputStream;
pub extern fn _frida_g_memory_input_stream_new_from_bytes(bytes: ?*GBytes) [*c]GInputStream;
pub extern fn _frida_g_memory_input_stream_add_data(stream: [*c]GMemoryInputStream, data: ?*const anyopaque, len: gssize, destroy: GDestroyNotify) void;
pub extern fn _frida_g_memory_input_stream_add_bytes(stream: [*c]GMemoryInputStream, bytes: ?*GBytes) void;
pub extern fn _frida_g_memory_monitor_get_type() GType;
pub const struct__GMemoryMonitor = opaque {};
pub const GMemoryMonitor = struct__GMemoryMonitor;
pub const struct__GMemoryMonitorInterface = extern struct {
    g_iface: GTypeInterface,
    low_memory_warning: ?*const fn (?*GMemoryMonitor, GMemoryMonitorWarningLevel) callconv(.C) void,
};
pub const GMemoryMonitorInterface = struct__GMemoryMonitorInterface;
pub const GMemoryMonitor_autoptr = ?*GMemoryMonitor;
pub const GMemoryMonitor_listautoptr = [*c]GList;
pub const GMemoryMonitor_slistautoptr = [*c]GSList;
pub const GMemoryMonitor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMemoryMonitor(arg__ptr: ?*GMemoryMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        glib_autoptr_clear_GObject(@ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), _ptr)));
    }
}
pub fn glib_autoptr_cleanup_GMemoryMonitor(arg__ptr: [*c]?*GMemoryMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMemoryMonitor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMemoryMonitor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_slistautoptr_cleanup_GMemoryMonitor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_queueautoptr_cleanup_GMemoryMonitor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
    }
}
pub fn g_memory_monitor(arg_ptr: gpointer) callconv(.C) ?*GMemoryMonitor {
    var ptr = arg_ptr;
    return @ptrCast(?*GMemoryMonitor, @ptrCast(?*anyopaque, _frida_g_type_check_instance_cast(@ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)), _frida_g_memory_monitor_get_type())));
}
pub fn g_IS_memory_monitor(arg_ptr: gpointer) callconv(.C) gboolean {
    var ptr = arg_ptr;
    return blk: {
        var __inst: [*c]GTypeInstance = @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr));
        var __t: GType = _frida_g_memory_monitor_get_type();
        var __r: gboolean = undefined;
        if (!(__inst != null)) {
            __r = @as(c_int, 0);
        } else if ((__inst.*.g_class != null) and (__inst.*.g_class.*.g_type == __t)) {
            __r = @boolToInt(!(@as(c_int, 0) != 0));
        } else {
            __r = _frida_g_type_check_instance_is_a(__inst, __t);
        }
        break :blk __r;
    };
}
pub fn g_memory_monitor_GET_IFACE(arg_ptr: gpointer) callconv(.C) [*c]GMemoryMonitorInterface {
    var ptr = arg_ptr;
    return @ptrCast([*c]GMemoryMonitorInterface, @alignCast(@import("std").meta.alignment([*c]GMemoryMonitorInterface), _frida_g_type_interface_peek(@ptrCast(gpointer, @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)).*.g_class), _frida_g_memory_monitor_get_type())));
}
pub extern fn _frida_g_memory_monitor_dup_default() ?*GMemoryMonitor;
pub const struct__GMemoryOutputStreamClass = extern struct {
    parent_class: GOutputStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GMemoryOutputStreamClass = struct__GMemoryOutputStreamClass;
pub const GReallocFunc = ?*const fn (gpointer, gsize) callconv(.C) gpointer;
pub extern fn _frida_g_memory_output_stream_get_type() GType;
pub extern fn _frida_g_memory_output_stream_new(data: gpointer, size: gsize, realloc_function: GReallocFunc, destroy_function: GDestroyNotify) [*c]GOutputStream;
pub extern fn _frida_g_memory_output_stream_new_resizable() [*c]GOutputStream;
pub extern fn _frida_g_memory_output_stream_get_data(ostream: [*c]GMemoryOutputStream) gpointer;
pub extern fn _frida_g_memory_output_stream_get_size(ostream: [*c]GMemoryOutputStream) gsize;
pub extern fn _frida_g_memory_output_stream_get_data_size(ostream: [*c]GMemoryOutputStream) gsize;
pub extern fn _frida_g_memory_output_stream_steal_data(ostream: [*c]GMemoryOutputStream) gpointer;
pub extern fn _frida_g_memory_output_stream_steal_as_bytes(ostream: [*c]GMemoryOutputStream) ?*GBytes;
pub const struct__GMenuAttributeIterPrivate = opaque {};
pub const GMenuAttributeIterPrivate = struct__GMenuAttributeIterPrivate;
pub const struct__GMenuAttributeIter = extern struct {
    parent_instance: GObject,
    priv: ?*GMenuAttributeIterPrivate,
};
pub const GMenuAttributeIter = struct__GMenuAttributeIter;
pub const struct__GMenuLinkIterPrivate = opaque {};
pub const GMenuLinkIterPrivate = struct__GMenuLinkIterPrivate;
pub const struct__GMenuLinkIter = extern struct {
    parent_instance: GObject,
    priv: ?*GMenuLinkIterPrivate,
};
pub const GMenuLinkIter = struct__GMenuLinkIter;
pub const struct__GMenuModelClass = extern struct {
    parent_class: GObjectClass,
    is_mutable: ?*const fn ([*c]GMenuModel) callconv(.C) gboolean,
    get_n_items: ?*const fn ([*c]GMenuModel) callconv(.C) gint,
    get_item_attributes: ?*const fn ([*c]GMenuModel, gint, [*c]?*GHashTable) callconv(.C) void,
    iterate_item_attributes: ?*const fn ([*c]GMenuModel, gint) callconv(.C) [*c]GMenuAttributeIter,
    get_item_attribute_value: ?*const fn ([*c]GMenuModel, gint, [*c]const gchar, ?*const GVariantType) callconv(.C) ?*GVariant,
    get_item_links: ?*const fn ([*c]GMenuModel, gint, [*c]?*GHashTable) callconv(.C) void,
    iterate_item_links: ?*const fn ([*c]GMenuModel, gint) callconv(.C) [*c]GMenuLinkIter,
    get_item_link: ?*const fn ([*c]GMenuModel, gint, [*c]const gchar) callconv(.C) [*c]GMenuModel,
};
pub const GMenuModelClass = struct__GMenuModelClass;
pub const struct__GMenuAttributeIterClass = extern struct {
    parent_class: GObjectClass,
    get_next: ?*const fn ([*c]GMenuAttributeIter, [*c][*c]const gchar, [*c]?*GVariant) callconv(.C) gboolean,
};
pub const GMenuAttributeIterClass = struct__GMenuAttributeIterClass;
pub const struct__GMenuLinkIterClass = extern struct {
    parent_class: GObjectClass,
    get_next: ?*const fn ([*c]GMenuLinkIter, [*c][*c]const gchar, [*c][*c]GMenuModel) callconv(.C) gboolean,
};
pub const GMenuLinkIterClass = struct__GMenuLinkIterClass;
pub extern fn _frida_g_menu_model_get_type() GType;
pub extern fn _frida_g_menu_model_is_mutable(model: [*c]GMenuModel) gboolean;
pub extern fn _frida_g_menu_model_get_n_items(model: [*c]GMenuModel) gint;
pub extern fn _frida_g_menu_model_iterate_item_attributes(model: [*c]GMenuModel, item_index: gint) [*c]GMenuAttributeIter;
pub extern fn _frida_g_menu_model_get_item_attribute_value(model: [*c]GMenuModel, item_index: gint, attribute: [*c]const gchar, expected_type: ?*const GVariantType) ?*GVariant;
pub extern fn _frida_g_menu_model_get_item_attribute(model: [*c]GMenuModel, item_index: gint, attribute: [*c]const gchar, format_string: [*c]const gchar, ...) gboolean;
pub extern fn _frida_g_menu_model_iterate_item_links(model: [*c]GMenuModel, item_index: gint) [*c]GMenuLinkIter;
pub extern fn _frida_g_menu_model_get_item_link(model: [*c]GMenuModel, item_index: gint, link: [*c]const gchar) [*c]GMenuModel;
pub extern fn _frida_g_menu_model_items_changed(model: [*c]GMenuModel, position: gint, removed: gint, added: gint) void;
pub extern fn _frida_g_menu_attribute_iter_get_type() GType;
pub extern fn _frida_g_menu_attribute_iter_get_next(iter: [*c]GMenuAttributeIter, out_name: [*c][*c]const gchar, value: [*c]?*GVariant) gboolean;
pub extern fn _frida_g_menu_attribute_iter_next(iter: [*c]GMenuAttributeIter) gboolean;
pub extern fn _frida_g_menu_attribute_iter_get_name(iter: [*c]GMenuAttributeIter) [*c]const gchar;
pub extern fn _frida_g_menu_attribute_iter_get_value(iter: [*c]GMenuAttributeIter) ?*GVariant;
pub extern fn _frida_g_menu_link_iter_get_type() GType;
pub extern fn _frida_g_menu_link_iter_get_next(iter: [*c]GMenuLinkIter, out_link: [*c][*c]const gchar, value: [*c][*c]GMenuModel) gboolean;
pub extern fn _frida_g_menu_link_iter_next(iter: [*c]GMenuLinkIter) gboolean;
pub extern fn _frida_g_menu_link_iter_get_name(iter: [*c]GMenuLinkIter) [*c]const gchar;
pub extern fn _frida_g_menu_link_iter_get_value(iter: [*c]GMenuLinkIter) [*c]GMenuModel;
pub const struct__GMenuItem = opaque {};
pub const GMenuItem = struct__GMenuItem;
pub const struct__GMenu = opaque {};
pub const GMenu = struct__GMenu;
pub extern fn _frida_g_menu_get_type() GType;
pub extern fn _frida_g_menu_new() ?*GMenu;
pub extern fn _frida_g_menu_freeze(menu: ?*GMenu) void;
pub extern fn _frida_g_menu_insert_item(menu: ?*GMenu, position: gint, item: ?*GMenuItem) void;
pub extern fn _frida_g_menu_prepend_item(menu: ?*GMenu, item: ?*GMenuItem) void;
pub extern fn _frida_g_menu_append_item(menu: ?*GMenu, item: ?*GMenuItem) void;
pub extern fn _frida_g_menu_remove(menu: ?*GMenu, position: gint) void;
pub extern fn _frida_g_menu_remove_all(menu: ?*GMenu) void;
pub extern fn _frida_g_menu_insert(menu: ?*GMenu, position: gint, label: [*c]const gchar, detailed_action: [*c]const gchar) void;
pub extern fn _frida_g_menu_prepend(menu: ?*GMenu, label: [*c]const gchar, detailed_action: [*c]const gchar) void;
pub extern fn _frida_g_menu_append(menu: ?*GMenu, label: [*c]const gchar, detailed_action: [*c]const gchar) void;
pub extern fn _frida_g_menu_insert_section(menu: ?*GMenu, position: gint, label: [*c]const gchar, section: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_prepend_section(menu: ?*GMenu, label: [*c]const gchar, section: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_append_section(menu: ?*GMenu, label: [*c]const gchar, section: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_insert_submenu(menu: ?*GMenu, position: gint, label: [*c]const gchar, submenu: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_prepend_submenu(menu: ?*GMenu, label: [*c]const gchar, submenu: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_append_submenu(menu: ?*GMenu, label: [*c]const gchar, submenu: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_item_get_type() GType;
pub extern fn _frida_g_menu_item_new(label: [*c]const gchar, detailed_action: [*c]const gchar) ?*GMenuItem;
pub extern fn _frida_g_menu_item_new_from_model(model: [*c]GMenuModel, item_index: gint) ?*GMenuItem;
pub extern fn _frida_g_menu_item_new_submenu(label: [*c]const gchar, submenu: [*c]GMenuModel) ?*GMenuItem;
pub extern fn _frida_g_menu_item_new_section(label: [*c]const gchar, section: [*c]GMenuModel) ?*GMenuItem;
pub extern fn _frida_g_menu_item_get_attribute_value(menu_item: ?*GMenuItem, attribute: [*c]const gchar, expected_type: ?*const GVariantType) ?*GVariant;
pub extern fn _frida_g_menu_item_get_attribute(menu_item: ?*GMenuItem, attribute: [*c]const gchar, format_string: [*c]const gchar, ...) gboolean;
pub extern fn _frida_g_menu_item_get_link(menu_item: ?*GMenuItem, link: [*c]const gchar) [*c]GMenuModel;
pub extern fn _frida_g_menu_item_set_attribute_value(menu_item: ?*GMenuItem, attribute: [*c]const gchar, value: ?*GVariant) void;
pub extern fn _frida_g_menu_item_set_attribute(menu_item: ?*GMenuItem, attribute: [*c]const gchar, format_string: [*c]const gchar, ...) void;
pub extern fn _frida_g_menu_item_set_link(menu_item: ?*GMenuItem, link: [*c]const gchar, model: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_item_set_label(menu_item: ?*GMenuItem, label: [*c]const gchar) void;
pub extern fn _frida_g_menu_item_set_submenu(menu_item: ?*GMenuItem, submenu: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_item_set_section(menu_item: ?*GMenuItem, section: [*c]GMenuModel) void;
pub extern fn _frida_g_menu_item_set_action_and_target_value(menu_item: ?*GMenuItem, action: [*c]const gchar, target_value: ?*GVariant) void;
pub extern fn _frida_g_menu_item_set_action_and_target(menu_item: ?*GMenuItem, action: [*c]const gchar, format_string: [*c]const gchar, ...) void;
pub extern fn _frida_g_menu_item_set_detailed_action(menu_item: ?*GMenuItem, detailed_action: [*c]const gchar) void;
pub extern fn _frida_g_menu_item_set_icon(menu_item: ?*GMenuItem, icon: ?*GIcon) void;
pub extern fn _frida_g_dbus_connection_export_menu_model(connection: ?*GDBusConnection, object_path: [*c]const gchar, menu: [*c]GMenuModel, @"error": [*c][*c]GError) guint;
pub extern fn _frida_g_dbus_connection_unexport_menu_model(connection: ?*GDBusConnection, export_id: guint) void;
pub const struct__GMountIface = extern struct {
    g_iface: GTypeInterface,
    changed: ?*const fn (?*GMount) callconv(.C) void,
    unmounted: ?*const fn (?*GMount) callconv(.C) void,
    get_root: ?*const fn (?*GMount) callconv(.C) ?*GFile,
    get_name: ?*const fn (?*GMount) callconv(.C) [*c]u8,
    get_icon: ?*const fn (?*GMount) callconv(.C) ?*GIcon,
    get_uuid: ?*const fn (?*GMount) callconv(.C) [*c]u8,
    get_volume: ?*const fn (?*GMount) callconv(.C) ?*GVolume,
    get_drive: ?*const fn (?*GMount) callconv(.C) ?*GDrive,
    can_unmount: ?*const fn (?*GMount) callconv(.C) gboolean,
    can_eject: ?*const fn (?*GMount) callconv(.C) gboolean,
    unmount: ?*const fn (?*GMount, GMountUnmountFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    unmount_finish: ?*const fn (?*GMount, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    eject: ?*const fn (?*GMount, GMountUnmountFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_finish: ?*const fn (?*GMount, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    remount: ?*const fn (?*GMount, GMountMountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    remount_finish: ?*const fn (?*GMount, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    guess_content_type: ?*const fn (?*GMount, gboolean, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    guess_content_type_finish: ?*const fn (?*GMount, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c][*c]gchar,
    guess_content_type_sync: ?*const fn (?*GMount, gboolean, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c][*c]gchar,
    pre_unmount: ?*const fn (?*GMount) callconv(.C) void,
    unmount_with_operation: ?*const fn (?*GMount, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    unmount_with_operation_finish: ?*const fn (?*GMount, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    eject_with_operation: ?*const fn (?*GMount, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_with_operation_finish: ?*const fn (?*GMount, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    get_default_location: ?*const fn (?*GMount) callconv(.C) ?*GFile,
    get_sort_key: ?*const fn (?*GMount) callconv(.C) [*c]const gchar,
    get_symbolic_icon: ?*const fn (?*GMount) callconv(.C) ?*GIcon,
};
pub const GMountIface = struct__GMountIface;
pub extern fn _frida_g_mount_get_type() GType;
pub extern fn _frida_g_mount_get_root(mount: ?*GMount) ?*GFile;
pub extern fn _frida_g_mount_get_default_location(mount: ?*GMount) ?*GFile;
pub extern fn _frida_g_mount_get_name(mount: ?*GMount) [*c]u8;
pub extern fn _frida_g_mount_get_icon(mount: ?*GMount) ?*GIcon;
pub extern fn _frida_g_mount_get_symbolic_icon(mount: ?*GMount) ?*GIcon;
pub extern fn _frida_g_mount_get_uuid(mount: ?*GMount) [*c]u8;
pub extern fn _frida_g_mount_get_volume(mount: ?*GMount) ?*GVolume;
pub extern fn _frida_g_mount_get_drive(mount: ?*GMount) ?*GDrive;
pub extern fn _frida_g_mount_can_unmount(mount: ?*GMount) gboolean;
pub extern fn _frida_g_mount_can_eject(mount: ?*GMount) gboolean;
pub extern fn _frida_g_mount_unmount(mount: ?*GMount, flags: GMountUnmountFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_mount_unmount_finish(mount: ?*GMount, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_mount_eject(mount: ?*GMount, flags: GMountUnmountFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_mount_eject_finish(mount: ?*GMount, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_mount_remount(mount: ?*GMount, flags: GMountMountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_mount_remount_finish(mount: ?*GMount, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_mount_guess_content_type(mount: ?*GMount, force_rescan: gboolean, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_mount_guess_content_type_finish(mount: ?*GMount, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_mount_guess_content_type_sync(mount: ?*GMount, force_rescan: gboolean, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_mount_is_shadowed(mount: ?*GMount) gboolean;
pub extern fn _frida_g_mount_shadow(mount: ?*GMount) void;
pub extern fn _frida_g_mount_unshadow(mount: ?*GMount) void;
pub extern fn _frida_g_mount_unmount_with_operation(mount: ?*GMount, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_mount_unmount_with_operation_finish(mount: ?*GMount, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_mount_eject_with_operation(mount: ?*GMount, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_mount_eject_with_operation_finish(mount: ?*GMount, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_mount_get_sort_key(mount: ?*GMount) [*c]const gchar;
pub const struct__GMountOperationClass = extern struct {
    parent_class: GObjectClass,
    ask_password: ?*const fn ([*c]GMountOperation, [*c]const u8, [*c]const u8, [*c]const u8, GAskPasswordFlags) callconv(.C) void,
    ask_question: ?*const fn ([*c]GMountOperation, [*c]const u8, [*c][*c]const u8) callconv(.C) void,
    reply: ?*const fn ([*c]GMountOperation, GMountOperationResult) callconv(.C) void,
    aborted: ?*const fn ([*c]GMountOperation) callconv(.C) void,
    show_processes: ?*const fn ([*c]GMountOperation, [*c]const gchar, [*c]GArray, [*c][*c]const gchar) callconv(.C) void,
    show_unmount_progress: ?*const fn ([*c]GMountOperation, [*c]const gchar, gint64, gint64) callconv(.C) void,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
    _g_reserved7: ?*const fn () callconv(.C) void,
    _g_reserved8: ?*const fn () callconv(.C) void,
    _g_reserved9: ?*const fn () callconv(.C) void,
};
pub const GMountOperationClass = struct__GMountOperationClass;
pub extern fn _frida_g_mount_operation_get_type() GType;
pub extern fn _frida_g_mount_operation_new() [*c]GMountOperation;
pub extern fn _frida_g_mount_operation_get_username(op: [*c]GMountOperation) [*c]const u8;
pub extern fn _frida_g_mount_operation_set_username(op: [*c]GMountOperation, username: [*c]const u8) void;
pub extern fn _frida_g_mount_operation_get_password(op: [*c]GMountOperation) [*c]const u8;
pub extern fn _frida_g_mount_operation_set_password(op: [*c]GMountOperation, password: [*c]const u8) void;
pub extern fn _frida_g_mount_operation_get_anonymous(op: [*c]GMountOperation) gboolean;
pub extern fn _frida_g_mount_operation_set_anonymous(op: [*c]GMountOperation, anonymous: gboolean) void;
pub extern fn _frida_g_mount_operation_get_domain(op: [*c]GMountOperation) [*c]const u8;
pub extern fn _frida_g_mount_operation_set_domain(op: [*c]GMountOperation, domain: [*c]const u8) void;
pub extern fn _frida_g_mount_operation_get_password_save(op: [*c]GMountOperation) GPasswordSave;
pub extern fn _frida_g_mount_operation_set_password_save(op: [*c]GMountOperation, save: GPasswordSave) void;
pub extern fn _frida_g_mount_operation_get_choice(op: [*c]GMountOperation) c_int;
pub extern fn _frida_g_mount_operation_set_choice(op: [*c]GMountOperation, choice: c_int) void;
pub extern fn _frida_g_mount_operation_reply(op: [*c]GMountOperation, result: GMountOperationResult) void;
pub extern fn _frida_g_mount_operation_get_is_tcrypt_hidden_volume(op: [*c]GMountOperation) gboolean;
pub extern fn _frida_g_mount_operation_set_is_tcrypt_hidden_volume(op: [*c]GMountOperation, hidden_volume: gboolean) void;
pub extern fn _frida_g_mount_operation_get_is_tcrypt_system_volume(op: [*c]GMountOperation) gboolean;
pub extern fn _frida_g_mount_operation_set_is_tcrypt_system_volume(op: [*c]GMountOperation, system_volume: gboolean) void;
pub extern fn _frida_g_mount_operation_get_pim(op: [*c]GMountOperation) guint;
pub extern fn _frida_g_mount_operation_set_pim(op: [*c]GMountOperation, pim: guint) void;
pub const struct__GNativeSocketAddressClass = extern struct {
    parent_class: GSocketAddressClass,
};
pub const GNativeSocketAddressClass = struct__GNativeSocketAddressClass;
pub extern fn _frida_g_native_socket_address_get_type() GType;
pub extern fn _frida_g_native_socket_address_new(native: gpointer, len: gsize) [*c]GSocketAddress;
pub const struct__GVolumeMonitorClass = extern struct {
    parent_class: GObjectClass,
    volume_added: ?*const fn ([*c]GVolumeMonitor, ?*GVolume) callconv(.C) void,
    volume_removed: ?*const fn ([*c]GVolumeMonitor, ?*GVolume) callconv(.C) void,
    volume_changed: ?*const fn ([*c]GVolumeMonitor, ?*GVolume) callconv(.C) void,
    mount_added: ?*const fn ([*c]GVolumeMonitor, ?*GMount) callconv(.C) void,
    mount_removed: ?*const fn ([*c]GVolumeMonitor, ?*GMount) callconv(.C) void,
    mount_pre_unmount: ?*const fn ([*c]GVolumeMonitor, ?*GMount) callconv(.C) void,
    mount_changed: ?*const fn ([*c]GVolumeMonitor, ?*GMount) callconv(.C) void,
    drive_connected: ?*const fn ([*c]GVolumeMonitor, ?*GDrive) callconv(.C) void,
    drive_disconnected: ?*const fn ([*c]GVolumeMonitor, ?*GDrive) callconv(.C) void,
    drive_changed: ?*const fn ([*c]GVolumeMonitor, ?*GDrive) callconv(.C) void,
    is_supported: ?*const fn () callconv(.C) gboolean,
    get_connected_drives: ?*const fn ([*c]GVolumeMonitor) callconv(.C) [*c]GList,
    get_volumes: ?*const fn ([*c]GVolumeMonitor) callconv(.C) [*c]GList,
    get_mounts: ?*const fn ([*c]GVolumeMonitor) callconv(.C) [*c]GList,
    get_volume_for_uuid: ?*const fn ([*c]GVolumeMonitor, [*c]const u8) callconv(.C) ?*GVolume,
    get_mount_for_uuid: ?*const fn ([*c]GVolumeMonitor, [*c]const u8) callconv(.C) ?*GMount,
    adopt_orphan_mount: ?*const fn (?*GMount, [*c]GVolumeMonitor) callconv(.C) ?*GVolume,
    drive_eject_button: ?*const fn ([*c]GVolumeMonitor, ?*GDrive) callconv(.C) void,
    drive_stop_button: ?*const fn ([*c]GVolumeMonitor, ?*GDrive) callconv(.C) void,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
};
pub const GVolumeMonitorClass = struct__GVolumeMonitorClass;
pub extern fn _frida_g_volume_monitor_get_type() GType;
pub extern fn _frida_g_volume_monitor_get() [*c]GVolumeMonitor;
pub extern fn _frida_g_volume_monitor_get_connected_drives(volume_monitor: [*c]GVolumeMonitor) [*c]GList;
pub extern fn _frida_g_volume_monitor_get_volumes(volume_monitor: [*c]GVolumeMonitor) [*c]GList;
pub extern fn _frida_g_volume_monitor_get_mounts(volume_monitor: [*c]GVolumeMonitor) [*c]GList;
pub extern fn _frida_g_volume_monitor_get_volume_for_uuid(volume_monitor: [*c]GVolumeMonitor, uuid: [*c]const u8) ?*GVolume;
pub extern fn _frida_g_volume_monitor_get_mount_for_uuid(volume_monitor: [*c]GVolumeMonitor, uuid: [*c]const u8) ?*GMount;
pub extern fn _frida_g_volume_monitor_adopt_orphan_mount(mount: ?*GMount) ?*GVolume;
pub const struct__GNativeVolumeMonitor = extern struct {
    parent_instance: GVolumeMonitor,
};
pub const GNativeVolumeMonitor = struct__GNativeVolumeMonitor;
pub const struct__GNativeVolumeMonitorClass = extern struct {
    parent_class: GVolumeMonitorClass,
    get_mount_for_mount_path: ?*const fn ([*c]const u8, [*c]GCancellable) callconv(.C) ?*GMount,
};
pub const GNativeVolumeMonitorClass = struct__GNativeVolumeMonitorClass;
pub extern fn _frida_g_native_volume_monitor_get_type() GType;
pub const struct__GNetworkAddressClass = extern struct {
    parent_class: GObjectClass,
};
pub const GNetworkAddressClass = struct__GNetworkAddressClass;
pub extern fn _frida_g_network_address_get_type() GType;
pub extern fn _frida_g_network_address_new(hostname: [*c]const gchar, port: guint16) ?*GSocketConnectable;
pub extern fn _frida_g_network_address_new_loopback(port: guint16) ?*GSocketConnectable;
pub extern fn _frida_g_network_address_parse(host_and_port: [*c]const gchar, default_port: guint16, @"error": [*c][*c]GError) ?*GSocketConnectable;
pub extern fn _frida_g_network_address_parse_uri(uri: [*c]const gchar, default_port: guint16, @"error": [*c][*c]GError) ?*GSocketConnectable;
pub extern fn _frida_g_network_address_get_hostname(addr: [*c]GNetworkAddress) [*c]const gchar;
pub extern fn _frida_g_network_address_get_port(addr: [*c]GNetworkAddress) guint16;
pub extern fn _frida_g_network_address_get_scheme(addr: [*c]GNetworkAddress) [*c]const gchar;
pub const struct__GNetworkMonitorInterface = extern struct {
    g_iface: GTypeInterface,
    network_changed: ?*const fn (?*GNetworkMonitor, gboolean) callconv(.C) void,
    can_reach: ?*const fn (?*GNetworkMonitor, ?*GSocketConnectable, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    can_reach_async: ?*const fn (?*GNetworkMonitor, ?*GSocketConnectable, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    can_reach_finish: ?*const fn (?*GNetworkMonitor, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GNetworkMonitorInterface = struct__GNetworkMonitorInterface;
pub extern fn _frida_g_network_monitor_get_type() GType;
pub extern fn _frida_g_network_monitor_get_default() ?*GNetworkMonitor;
pub extern fn _frida_g_network_monitor_get_network_available(monitor: ?*GNetworkMonitor) gboolean;
pub extern fn _frida_g_network_monitor_get_network_metered(monitor: ?*GNetworkMonitor) gboolean;
pub extern fn _frida_g_network_monitor_get_connectivity(monitor: ?*GNetworkMonitor) GNetworkConnectivity;
pub extern fn _frida_g_network_monitor_can_reach(monitor: ?*GNetworkMonitor, connectable: ?*GSocketConnectable, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_network_monitor_can_reach_async(monitor: ?*GNetworkMonitor, connectable: ?*GSocketConnectable, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_network_monitor_can_reach_finish(monitor: ?*GNetworkMonitor, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub const struct__GNetworkServiceClass = extern struct {
    parent_class: GObjectClass,
};
pub const GNetworkServiceClass = struct__GNetworkServiceClass;
pub extern fn _frida_g_network_service_get_type() GType;
pub extern fn _frida_g_network_service_new(service: [*c]const gchar, protocol: [*c]const gchar, domain: [*c]const gchar) ?*GSocketConnectable;
pub extern fn _frida_g_network_service_get_service(srv: [*c]GNetworkService) [*c]const gchar;
pub extern fn _frida_g_network_service_get_protocol(srv: [*c]GNetworkService) [*c]const gchar;
pub extern fn _frida_g_network_service_get_domain(srv: [*c]GNetworkService) [*c]const gchar;
pub extern fn _frida_g_network_service_get_scheme(srv: [*c]GNetworkService) [*c]const gchar;
pub extern fn _frida_g_network_service_set_scheme(srv: [*c]GNetworkService, scheme: [*c]const gchar) void;
pub extern fn _frida_g_notification_get_type() GType;
pub extern fn _frida_g_notification_new(title: [*c]const gchar) ?*GNotification;
pub extern fn _frida_g_notification_set_title(notification: ?*GNotification, title: [*c]const gchar) void;
pub extern fn _frida_g_notification_set_body(notification: ?*GNotification, body: [*c]const gchar) void;
pub extern fn _frida_g_notification_set_icon(notification: ?*GNotification, icon: ?*GIcon) void;
pub extern fn _frida_g_notification_set_urgent(notification: ?*GNotification, urgent: gboolean) void;
pub extern fn _frida_g_notification_set_priority(notification: ?*GNotification, priority: GNotificationPriority) void;
pub extern fn _frida_g_notification_set_category(notification: ?*GNotification, category: [*c]const gchar) void;
pub extern fn _frida_g_notification_add_button(notification: ?*GNotification, label: [*c]const gchar, detailed_action: [*c]const gchar) void;
pub extern fn _frida_g_notification_add_button_with_target(notification: ?*GNotification, label: [*c]const gchar, action: [*c]const gchar, target_format: [*c]const gchar, ...) void;
pub extern fn _frida_g_notification_add_button_with_target_value(notification: ?*GNotification, label: [*c]const gchar, action: [*c]const gchar, target: ?*GVariant) void;
pub extern fn _frida_g_notification_set_default_action(notification: ?*GNotification, detailed_action: [*c]const gchar) void;
pub extern fn _frida_g_notification_set_default_action_and_target(notification: ?*GNotification, action: [*c]const gchar, target_format: [*c]const gchar, ...) void;
pub extern fn _frida_g_notification_set_default_action_and_target_value(notification: ?*GNotification, action: [*c]const gchar, target: ?*GVariant) void;
pub const struct__GPermissionClass = extern struct {
    parent_class: GObjectClass,
    acquire: ?*const fn ([*c]GPermission, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    acquire_async: ?*const fn ([*c]GPermission, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    acquire_finish: ?*const fn ([*c]GPermission, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    release: ?*const fn ([*c]GPermission, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    release_async: ?*const fn ([*c]GPermission, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    release_finish: ?*const fn ([*c]GPermission, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    reserved: [16]gpointer,
};
pub const GPermissionClass = struct__GPermissionClass;
pub extern fn _frida_g_permission_get_type() GType;
pub extern fn _frida_g_permission_acquire(permission: [*c]GPermission, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_permission_acquire_async(permission: [*c]GPermission, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_permission_acquire_finish(permission: [*c]GPermission, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_permission_release(permission: [*c]GPermission, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_permission_release_async(permission: [*c]GPermission, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_permission_release_finish(permission: [*c]GPermission, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_permission_get_allowed(permission: [*c]GPermission) gboolean;
pub extern fn _frida_g_permission_get_can_acquire(permission: [*c]GPermission) gboolean;
pub extern fn _frida_g_permission_get_can_release(permission: [*c]GPermission) gboolean;
pub extern fn _frida_g_permission_impl_update(permission: [*c]GPermission, allowed: gboolean, can_acquire: gboolean, can_release: gboolean) void;
pub const struct__GPollableInputStreamInterface = extern struct {
    g_iface: GTypeInterface,
    can_poll: ?*const fn (?*GPollableInputStream) callconv(.C) gboolean,
    is_readable: ?*const fn (?*GPollableInputStream) callconv(.C) gboolean,
    create_source: ?*const fn (?*GPollableInputStream, [*c]GCancellable) callconv(.C) [*c]GSource,
    read_nonblocking: ?*const fn (?*GPollableInputStream, ?*anyopaque, gsize, [*c][*c]GError) callconv(.C) gssize,
};
pub const GPollableInputStreamInterface = struct__GPollableInputStreamInterface;
pub extern fn _frida_g_pollable_input_stream_get_type() GType;
pub extern fn _frida_g_pollable_input_stream_can_poll(stream: ?*GPollableInputStream) gboolean;
pub extern fn _frida_g_pollable_input_stream_is_readable(stream: ?*GPollableInputStream) gboolean;
pub extern fn _frida_g_pollable_input_stream_create_source(stream: ?*GPollableInputStream, cancellable: [*c]GCancellable) [*c]GSource;
pub extern fn _frida_g_pollable_input_stream_read_nonblocking(stream: ?*GPollableInputStream, buffer: ?*anyopaque, count: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub const struct__GPollableOutputStreamInterface = extern struct {
    g_iface: GTypeInterface,
    can_poll: ?*const fn (?*GPollableOutputStream) callconv(.C) gboolean,
    is_writable: ?*const fn (?*GPollableOutputStream) callconv(.C) gboolean,
    create_source: ?*const fn (?*GPollableOutputStream, [*c]GCancellable) callconv(.C) [*c]GSource,
    write_nonblocking: ?*const fn (?*GPollableOutputStream, ?*const anyopaque, gsize, [*c][*c]GError) callconv(.C) gssize,
    writev_nonblocking: ?*const fn (?*GPollableOutputStream, [*c]const GOutputVector, gsize, [*c]gsize, [*c][*c]GError) callconv(.C) GPollableReturn,
};
pub const GPollableOutputStreamInterface = struct__GPollableOutputStreamInterface;
pub extern fn _frida_g_pollable_output_stream_get_type() GType;
pub extern fn _frida_g_pollable_output_stream_can_poll(stream: ?*GPollableOutputStream) gboolean;
pub extern fn _frida_g_pollable_output_stream_is_writable(stream: ?*GPollableOutputStream) gboolean;
pub extern fn _frida_g_pollable_output_stream_create_source(stream: ?*GPollableOutputStream, cancellable: [*c]GCancellable) [*c]GSource;
pub extern fn _frida_g_pollable_output_stream_write_nonblocking(stream: ?*GPollableOutputStream, buffer: ?*const anyopaque, count: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_pollable_output_stream_writev_nonblocking(stream: ?*GPollableOutputStream, vectors: [*c]const GOutputVector, n_vectors: gsize, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) GPollableReturn;
pub extern fn _frida_g_pollable_source_new(pollable_stream: [*c]GObject) [*c]GSource;
pub extern fn _frida_g_pollable_source_new_full(pollable_stream: gpointer, child_source: [*c]GSource, cancellable: [*c]GCancellable) [*c]GSource;
pub extern fn _frida_g_pollable_stream_read(stream: [*c]GInputStream, buffer: ?*anyopaque, count: gsize, blocking: gboolean, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_pollable_stream_write(stream: [*c]GOutputStream, buffer: ?*const anyopaque, count: gsize, blocking: gboolean, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_pollable_stream_write_all(stream: [*c]GOutputStream, buffer: ?*const anyopaque, count: gsize, blocking: gboolean, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_power_profile_monitor_get_type() GType;
pub const struct__GPowerProfileMonitor = opaque {};
pub const GPowerProfileMonitor = struct__GPowerProfileMonitor;
pub const struct__GPowerProfileMonitorInterface = extern struct {
    g_iface: GTypeInterface,
};
pub const GPowerProfileMonitorInterface = struct__GPowerProfileMonitorInterface;
pub const GPowerProfileMonitor_autoptr = ?*GPowerProfileMonitor;
pub const GPowerProfileMonitor_listautoptr = [*c]GList;
pub const GPowerProfileMonitor_slistautoptr = [*c]GSList;
pub const GPowerProfileMonitor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GPowerProfileMonitor(arg__ptr: ?*GPowerProfileMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        glib_autoptr_clear_GObject(@ptrCast([*c]GObject, @alignCast(@import("std").meta.alignment([*c]GObject), _ptr)));
    }
}
pub fn glib_autoptr_cleanup_GPowerProfileMonitor(arg__ptr: [*c]?*GPowerProfileMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GPowerProfileMonitor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GPowerProfileMonitor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_slistautoptr_cleanup_GPowerProfileMonitor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
}
pub fn glib_queueautoptr_cleanup_GPowerProfileMonitor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &glib_autoptr_clear_GObject)))));
    }
}
pub fn g_power_profile_monitor(arg_ptr: gpointer) callconv(.C) ?*GPowerProfileMonitor {
    var ptr = arg_ptr;
    return @ptrCast(?*GPowerProfileMonitor, @ptrCast(?*anyopaque, _frida_g_type_check_instance_cast(@ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)), _frida_g_power_profile_monitor_get_type())));
}
pub fn g_IS_power_profile_monitor(arg_ptr: gpointer) callconv(.C) gboolean {
    var ptr = arg_ptr;
    return blk: {
        var __inst: [*c]GTypeInstance = @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr));
        var __t: GType = _frida_g_power_profile_monitor_get_type();
        var __r: gboolean = undefined;
        if (!(__inst != null)) {
            __r = @as(c_int, 0);
        } else if ((__inst.*.g_class != null) and (__inst.*.g_class.*.g_type == __t)) {
            __r = @boolToInt(!(@as(c_int, 0) != 0));
        } else {
            __r = _frida_g_type_check_instance_is_a(__inst, __t);
        }
        break :blk __r;
    };
}
pub fn g_power_profile_monitor_GET_IFACE(arg_ptr: gpointer) callconv(.C) [*c]GPowerProfileMonitorInterface {
    var ptr = arg_ptr;
    return @ptrCast([*c]GPowerProfileMonitorInterface, @alignCast(@import("std").meta.alignment([*c]GPowerProfileMonitorInterface), _frida_g_type_interface_peek(@ptrCast(gpointer, @ptrCast([*c]GTypeInstance, @alignCast(@import("std").meta.alignment([*c]GTypeInstance), ptr)).*.g_class), _frida_g_power_profile_monitor_get_type())));
}
pub extern fn _frida_g_power_profile_monitor_dup_default() ?*GPowerProfileMonitor;
pub extern fn _frida_g_power_profile_monitor_get_power_saver_enabled(monitor: ?*GPowerProfileMonitor) gboolean;
pub extern fn _frida_g_property_action_get_type() GType;
pub extern fn _frida_g_property_action_new(name: [*c]const gchar, object: gpointer, property_name: [*c]const gchar) ?*GPropertyAction;
pub const struct__GProxyInterface = extern struct {
    g_iface: GTypeInterface,
    connect: ?*const fn (?*GProxy, [*c]GIOStream, [*c]GProxyAddress, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GIOStream,
    connect_async: ?*const fn (?*GProxy, [*c]GIOStream, [*c]GProxyAddress, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    connect_finish: ?*const fn (?*GProxy, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GIOStream,
    supports_hostname: ?*const fn (?*GProxy) callconv(.C) gboolean,
};
pub const GProxyInterface = struct__GProxyInterface;
pub extern fn _frida_g_proxy_get_type() GType;
pub extern fn _frida_g_proxy_get_default_for_protocol(protocol: [*c]const gchar) ?*GProxy;
pub extern fn _frida_g_proxy_connect(proxy: ?*GProxy, connection: [*c]GIOStream, proxy_address: [*c]GProxyAddress, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GIOStream;
pub extern fn _frida_g_proxy_connect_async(proxy: ?*GProxy, connection: [*c]GIOStream, proxy_address: [*c]GProxyAddress, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_proxy_connect_finish(proxy: ?*GProxy, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GIOStream;
pub extern fn _frida_g_proxy_supports_hostname(proxy: ?*GProxy) gboolean;
pub const struct__GProxyAddressClass = extern struct {
    parent_class: GInetSocketAddressClass,
};
pub const GProxyAddressClass = struct__GProxyAddressClass;
pub extern fn _frida_g_proxy_address_get_type() GType;
pub extern fn _frida_g_proxy_address_new(inetaddr: [*c]GInetAddress, port: guint16, protocol: [*c]const gchar, dest_hostname: [*c]const gchar, dest_port: guint16, username: [*c]const gchar, password: [*c]const gchar) [*c]GSocketAddress;
pub extern fn _frida_g_proxy_address_get_protocol(proxy: [*c]GProxyAddress) [*c]const gchar;
pub extern fn _frida_g_proxy_address_get_destination_protocol(proxy: [*c]GProxyAddress) [*c]const gchar;
pub extern fn _frida_g_proxy_address_get_destination_hostname(proxy: [*c]GProxyAddress) [*c]const gchar;
pub extern fn _frida_g_proxy_address_get_destination_port(proxy: [*c]GProxyAddress) guint16;
pub extern fn _frida_g_proxy_address_get_username(proxy: [*c]GProxyAddress) [*c]const gchar;
pub extern fn _frida_g_proxy_address_get_password(proxy: [*c]GProxyAddress) [*c]const gchar;
pub extern fn _frida_g_proxy_address_get_uri(proxy: [*c]GProxyAddress) [*c]const gchar;
pub const struct__GSocketAddressEnumeratorClass = extern struct {
    parent_class: GObjectClass,
    next: ?*const fn ([*c]GSocketAddressEnumerator, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GSocketAddress,
    next_async: ?*const fn ([*c]GSocketAddressEnumerator, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    next_finish: ?*const fn ([*c]GSocketAddressEnumerator, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GSocketAddress,
};
pub const GSocketAddressEnumeratorClass = struct__GSocketAddressEnumeratorClass;
pub extern fn _frida_g_socket_address_enumerator_get_type() GType;
pub extern fn _frida_g_socket_address_enumerator_next(enumerator: [*c]GSocketAddressEnumerator, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocketAddress;
pub extern fn _frida_g_socket_address_enumerator_next_async(enumerator: [*c]GSocketAddressEnumerator, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_address_enumerator_next_finish(enumerator: [*c]GSocketAddressEnumerator, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GSocketAddress;
pub const struct__GProxyAddressEnumeratorClass = extern struct {
    parent_class: GSocketAddressEnumeratorClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
    _g_reserved7: ?*const fn () callconv(.C) void,
};
pub const GProxyAddressEnumeratorClass = struct__GProxyAddressEnumeratorClass;
pub extern fn _frida_g_proxy_address_enumerator_get_type() GType;
pub const struct__GProxyResolverInterface = extern struct {
    g_iface: GTypeInterface,
    is_supported: ?*const fn (?*GProxyResolver) callconv(.C) gboolean,
    lookup: ?*const fn (?*GProxyResolver, [*c]const gchar, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c][*c]gchar,
    lookup_async: ?*const fn (?*GProxyResolver, [*c]const gchar, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_finish: ?*const fn (?*GProxyResolver, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c][*c]gchar,
};
pub const GProxyResolverInterface = struct__GProxyResolverInterface;
pub extern fn _frida_g_proxy_resolver_get_type() GType;
pub extern fn _frida_g_proxy_resolver_get_default() ?*GProxyResolver;
pub extern fn _frida_g_proxy_resolver_is_supported(resolver: ?*GProxyResolver) gboolean;
pub extern fn _frida_g_proxy_resolver_lookup(resolver: ?*GProxyResolver, uri: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c][*c]gchar;
pub extern fn _frida_g_proxy_resolver_lookup_async(resolver: ?*GProxyResolver, uri: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_proxy_resolver_lookup_finish(resolver: ?*GProxyResolver, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c][*c]gchar;
pub const struct__GRemoteActionGroupInterface = extern struct {
    g_iface: GTypeInterface,
    activate_action_full: ?*const fn (?*GRemoteActionGroup, [*c]const gchar, ?*GVariant, ?*GVariant) callconv(.C) void,
    change_action_state_full: ?*const fn (?*GRemoteActionGroup, [*c]const gchar, ?*GVariant, ?*GVariant) callconv(.C) void,
};
pub const GRemoteActionGroupInterface = struct__GRemoteActionGroupInterface;
pub extern fn _frida_g_remote_action_group_get_type() GType;
pub extern fn _frida_g_remote_action_group_activate_action_full(remote: ?*GRemoteActionGroup, action_name: [*c]const gchar, parameter: ?*GVariant, platform_data: ?*GVariant) void;
pub extern fn _frida_g_remote_action_group_change_action_state_full(remote: ?*GRemoteActionGroup, action_name: [*c]const gchar, value: ?*GVariant, platform_data: ?*GVariant) void;
pub const struct__GResolverClass = extern struct {
    parent_class: GObjectClass,
    reload: ?*const fn ([*c]GResolver) callconv(.C) void,
    lookup_by_name: ?*const fn ([*c]GResolver, [*c]const gchar, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_by_name_async: ?*const fn ([*c]GResolver, [*c]const gchar, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_by_name_finish: ?*const fn ([*c]GResolver, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_by_address: ?*const fn ([*c]GResolver, [*c]GInetAddress, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]gchar,
    lookup_by_address_async: ?*const fn ([*c]GResolver, [*c]GInetAddress, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_by_address_finish: ?*const fn ([*c]GResolver, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]gchar,
    lookup_service: ?*const fn ([*c]GResolver, [*c]const gchar, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_service_async: ?*const fn ([*c]GResolver, [*c]const gchar, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_service_finish: ?*const fn ([*c]GResolver, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_records: ?*const fn ([*c]GResolver, [*c]const gchar, GResolverRecordType, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_records_async: ?*const fn ([*c]GResolver, [*c]const gchar, GResolverRecordType, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_records_finish: ?*const fn ([*c]GResolver, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_by_name_with_flags_async: ?*const fn ([*c]GResolver, [*c]const gchar, GResolverNameLookupFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_by_name_with_flags_finish: ?*const fn ([*c]GResolver, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_by_name_with_flags: ?*const fn ([*c]GResolver, [*c]const gchar, GResolverNameLookupFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GList,
};
pub const GResolverClass = struct__GResolverClass;
pub const G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT: c_int = 0;
pub const G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY: c_int = 1;
pub const G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY: c_int = 2;
pub const GResolverNameLookupFlags = c_uint;
pub extern fn _frida_g_resolver_get_type() GType;
pub extern fn _frida_g_resolver_get_default() [*c]GResolver;
pub extern fn _frida_g_resolver_set_default(resolver: [*c]GResolver) void;
pub extern fn _frida_g_resolver_lookup_by_name(resolver: [*c]GResolver, hostname: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_lookup_by_name_async(resolver: [*c]GResolver, hostname: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_resolver_lookup_by_name_finish(resolver: [*c]GResolver, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_lookup_by_name_with_flags_async(resolver: [*c]GResolver, hostname: [*c]const gchar, flags: GResolverNameLookupFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_resolver_lookup_by_name_with_flags_finish(resolver: [*c]GResolver, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_lookup_by_name_with_flags(resolver: [*c]GResolver, hostname: [*c]const gchar, flags: GResolverNameLookupFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_free_addresses(addresses: [*c]GList) void;
pub extern fn _frida_g_resolver_lookup_by_address(resolver: [*c]GResolver, address: [*c]GInetAddress, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_resolver_lookup_by_address_async(resolver: [*c]GResolver, address: [*c]GInetAddress, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_resolver_lookup_by_address_finish(resolver: [*c]GResolver, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn _frida_g_resolver_lookup_service(resolver: [*c]GResolver, service: [*c]const gchar, protocol: [*c]const gchar, domain: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_lookup_service_async(resolver: [*c]GResolver, service: [*c]const gchar, protocol: [*c]const gchar, domain: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_resolver_lookup_service_finish(resolver: [*c]GResolver, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_lookup_records(resolver: [*c]GResolver, rrname: [*c]const gchar, record_type: GResolverRecordType, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_lookup_records_async(resolver: [*c]GResolver, rrname: [*c]const gchar, record_type: GResolverRecordType, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_resolver_lookup_records_finish(resolver: [*c]GResolver, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_resolver_free_targets(targets: [*c]GList) void;
pub extern fn _frida_g_resolver_error_quark() GQuark;
pub extern fn _frida_g_resource_error_quark() GQuark;
pub const GStaticResource = struct__GStaticResource;
pub const struct__GStaticResource = extern struct {
    data: [*c]const guint8,
    data_len: gsize,
    resource: ?*GResource,
    next: [*c]GStaticResource,
    padding: gpointer,
};
pub extern fn _frida_g_resource_get_type() GType;
pub extern fn _frida_g_resource_new_from_data(data: ?*GBytes, @"error": [*c][*c]GError) ?*GResource;
pub extern fn _frida_g_resource_ref(resource: ?*GResource) ?*GResource;
pub extern fn _frida_g_resource_unref(resource: ?*GResource) void;
pub extern fn _frida_g_resource_load(filename: [*c]const gchar, @"error": [*c][*c]GError) ?*GResource;
pub extern fn _frida_g_resource_open_stream(resource: ?*GResource, path: [*c]const u8, lookup_flags: GResourceLookupFlags, @"error": [*c][*c]GError) [*c]GInputStream;
pub extern fn _frida_g_resource_lookup_data(resource: ?*GResource, path: [*c]const u8, lookup_flags: GResourceLookupFlags, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn _frida_g_resource_enumerate_children(resource: ?*GResource, path: [*c]const u8, lookup_flags: GResourceLookupFlags, @"error": [*c][*c]GError) [*c][*c]u8;
pub extern fn _frida_g_resource_get_info(resource: ?*GResource, path: [*c]const u8, lookup_flags: GResourceLookupFlags, size: [*c]gsize, flags: [*c]guint32, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_resources_register(resource: ?*GResource) void;
pub extern fn _frida_g_resources_unregister(resource: ?*GResource) void;
pub extern fn _frida_g_resources_open_stream(path: [*c]const u8, lookup_flags: GResourceLookupFlags, @"error": [*c][*c]GError) [*c]GInputStream;
pub extern fn _frida_g_resources_lookup_data(path: [*c]const u8, lookup_flags: GResourceLookupFlags, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn _frida_g_resources_enumerate_children(path: [*c]const u8, lookup_flags: GResourceLookupFlags, @"error": [*c][*c]GError) [*c][*c]u8;
pub extern fn _frida_g_resources_get_info(path: [*c]const u8, lookup_flags: GResourceLookupFlags, size: [*c]gsize, flags: [*c]guint32, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_static_resource_init(static_resource: [*c]GStaticResource) void;
pub extern fn _frida_g_static_resource_fini(static_resource: [*c]GStaticResource) void;
pub extern fn _frida_g_static_resource_get_resource(static_resource: [*c]GStaticResource) ?*GResource;
pub const struct__GSeekableIface = extern struct {
    g_iface: GTypeInterface,
    tell: ?*const fn (?*GSeekable) callconv(.C) goffset,
    can_seek: ?*const fn (?*GSeekable) callconv(.C) gboolean,
    seek: ?*const fn (?*GSeekable, goffset, GSeekType, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    can_truncate: ?*const fn (?*GSeekable) callconv(.C) gboolean,
    truncate_fn: ?*const fn (?*GSeekable, goffset, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
};
pub const GSeekableIface = struct__GSeekableIface;
pub extern fn _frida_g_seekable_get_type() GType;
pub extern fn _frida_g_seekable_tell(seekable: ?*GSeekable) goffset;
pub extern fn _frida_g_seekable_can_seek(seekable: ?*GSeekable) gboolean;
pub extern fn _frida_g_seekable_seek(seekable: ?*GSeekable, offset: goffset, @"type": GSeekType, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_seekable_can_truncate(seekable: ?*GSeekable) gboolean;
pub extern fn _frida_g_seekable_truncate(seekable: ?*GSeekable, offset: goffset, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub const struct__GSettingsSchemaSource = opaque {};
pub const GSettingsSchemaSource = struct__GSettingsSchemaSource;
pub const struct__GSettingsSchema = opaque {};
pub const GSettingsSchema = struct__GSettingsSchema;
pub const struct__GSettingsSchemaKey = opaque {};
pub const GSettingsSchemaKey = struct__GSettingsSchemaKey;
pub extern fn _frida_g_settings_schema_source_get_type() GType;
pub extern fn _frida_g_settings_schema_source_get_default() ?*GSettingsSchemaSource;
pub extern fn _frida_g_settings_schema_source_ref(source: ?*GSettingsSchemaSource) ?*GSettingsSchemaSource;
pub extern fn _frida_g_settings_schema_source_unref(source: ?*GSettingsSchemaSource) void;
pub extern fn _frida_g_settings_schema_source_new_from_directory(directory: [*c]const gchar, parent: ?*GSettingsSchemaSource, trusted: gboolean, @"error": [*c][*c]GError) ?*GSettingsSchemaSource;
pub extern fn _frida_g_settings_schema_source_lookup(source: ?*GSettingsSchemaSource, schema_id: [*c]const gchar, recursive: gboolean) ?*GSettingsSchema;
pub extern fn _frida_g_settings_schema_source_list_schemas(source: ?*GSettingsSchemaSource, recursive: gboolean, non_relocatable: [*c][*c][*c]gchar, relocatable: [*c][*c][*c]gchar) void;
pub extern fn _frida_g_settings_schema_get_type() GType;
pub extern fn _frida_g_settings_schema_ref(schema: ?*GSettingsSchema) ?*GSettingsSchema;
pub extern fn _frida_g_settings_schema_unref(schema: ?*GSettingsSchema) void;
pub extern fn _frida_g_settings_schema_get_id(schema: ?*GSettingsSchema) [*c]const gchar;
pub extern fn _frida_g_settings_schema_get_path(schema: ?*GSettingsSchema) [*c]const gchar;
pub extern fn _frida_g_settings_schema_get_key(schema: ?*GSettingsSchema, name: [*c]const gchar) ?*GSettingsSchemaKey;
pub extern fn _frida_g_settings_schema_has_key(schema: ?*GSettingsSchema, name: [*c]const gchar) gboolean;
pub extern fn _frida_g_settings_schema_list_keys(schema: ?*GSettingsSchema) [*c][*c]gchar;
pub extern fn _frida_g_settings_schema_list_children(schema: ?*GSettingsSchema) [*c][*c]gchar;
pub extern fn _frida_g_settings_schema_key_get_type() GType;
pub extern fn _frida_g_settings_schema_key_ref(key: ?*GSettingsSchemaKey) ?*GSettingsSchemaKey;
pub extern fn _frida_g_settings_schema_key_unref(key: ?*GSettingsSchemaKey) void;
pub extern fn _frida_g_settings_schema_key_get_value_type(key: ?*GSettingsSchemaKey) ?*const GVariantType;
pub extern fn _frida_g_settings_schema_key_get_default_value(key: ?*GSettingsSchemaKey) ?*GVariant;
pub extern fn _frida_g_settings_schema_key_get_range(key: ?*GSettingsSchemaKey) ?*GVariant;
pub extern fn _frida_g_settings_schema_key_range_check(key: ?*GSettingsSchemaKey, value: ?*GVariant) gboolean;
pub extern fn _frida_g_settings_schema_key_get_name(key: ?*GSettingsSchemaKey) [*c]const gchar;
pub extern fn _frida_g_settings_schema_key_get_summary(key: ?*GSettingsSchemaKey) [*c]const gchar;
pub extern fn _frida_g_settings_schema_key_get_description(key: ?*GSettingsSchemaKey) [*c]const gchar;
pub const struct__GSettingsClass = extern struct {
    parent_class: GObjectClass,
    writable_changed: ?*const fn ([*c]GSettings, [*c]const gchar) callconv(.C) void,
    changed: ?*const fn ([*c]GSettings, [*c]const gchar) callconv(.C) void,
    writable_change_event: ?*const fn ([*c]GSettings, GQuark) callconv(.C) gboolean,
    change_event: ?*const fn ([*c]GSettings, [*c]const GQuark, gint) callconv(.C) gboolean,
    padding: [20]gpointer,
};
pub const GSettingsClass = struct__GSettingsClass;
pub extern fn _frida_g_settings_get_type() GType;
pub extern fn _frida_g_settings_list_schemas() [*c]const [*c]const gchar;
pub extern fn _frida_g_settings_list_relocatable_schemas() [*c]const [*c]const gchar;
pub extern fn _frida_g_settings_new(schema_id: [*c]const gchar) [*c]GSettings;
pub extern fn _frida_g_settings_new_with_path(schema_id: [*c]const gchar, path: [*c]const gchar) [*c]GSettings;
pub extern fn _frida_g_settings_new_with_backend(schema_id: [*c]const gchar, backend: ?*GSettingsBackend) [*c]GSettings;
pub extern fn _frida_g_settings_new_with_backend_and_path(schema_id: [*c]const gchar, backend: ?*GSettingsBackend, path: [*c]const gchar) [*c]GSettings;
pub extern fn _frida_g_settings_new_full(schema: ?*GSettingsSchema, backend: ?*GSettingsBackend, path: [*c]const gchar) [*c]GSettings;
pub extern fn _frida_g_settings_list_children(settings: [*c]GSettings) [*c][*c]gchar;
pub extern fn _frida_g_settings_list_keys(settings: [*c]GSettings) [*c][*c]gchar;
pub extern fn _frida_g_settings_get_range(settings: [*c]GSettings, key: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_settings_range_check(settings: [*c]GSettings, key: [*c]const gchar, value: ?*GVariant) gboolean;
pub extern fn _frida_g_settings_set_value(settings: [*c]GSettings, key: [*c]const gchar, value: ?*GVariant) gboolean;
pub extern fn _frida_g_settings_get_value(settings: [*c]GSettings, key: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_settings_get_user_value(settings: [*c]GSettings, key: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_settings_get_default_value(settings: [*c]GSettings, key: [*c]const gchar) ?*GVariant;
pub extern fn _frida_g_settings_set(settings: [*c]GSettings, key: [*c]const gchar, format: [*c]const gchar, ...) gboolean;
pub extern fn _frida_g_settings_get(settings: [*c]GSettings, key: [*c]const gchar, format: [*c]const gchar, ...) void;
pub extern fn _frida_g_settings_reset(settings: [*c]GSettings, key: [*c]const gchar) void;
pub extern fn _frida_g_settings_get_int(settings: [*c]GSettings, key: [*c]const gchar) gint;
pub extern fn _frida_g_settings_set_int(settings: [*c]GSettings, key: [*c]const gchar, value: gint) gboolean;
pub extern fn _frida_g_settings_get_int64(settings: [*c]GSettings, key: [*c]const gchar) gint64;
pub extern fn _frida_g_settings_set_int64(settings: [*c]GSettings, key: [*c]const gchar, value: gint64) gboolean;
pub extern fn _frida_g_settings_get_uint(settings: [*c]GSettings, key: [*c]const gchar) guint;
pub extern fn _frida_g_settings_set_uint(settings: [*c]GSettings, key: [*c]const gchar, value: guint) gboolean;
pub extern fn _frida_g_settings_get_uint64(settings: [*c]GSettings, key: [*c]const gchar) guint64;
pub extern fn _frida_g_settings_set_uint64(settings: [*c]GSettings, key: [*c]const gchar, value: guint64) gboolean;
pub extern fn _frida_g_settings_get_string(settings: [*c]GSettings, key: [*c]const gchar) [*c]gchar;
pub extern fn _frida_g_settings_set_string(settings: [*c]GSettings, key: [*c]const gchar, value: [*c]const gchar) gboolean;
pub extern fn _frida_g_settings_get_boolean(settings: [*c]GSettings, key: [*c]const gchar) gboolean;
pub extern fn _frida_g_settings_set_boolean(settings: [*c]GSettings, key: [*c]const gchar, value: gboolean) gboolean;
pub extern fn _frida_g_settings_get_double(settings: [*c]GSettings, key: [*c]const gchar) gdouble;
pub extern fn _frida_g_settings_set_double(settings: [*c]GSettings, key: [*c]const gchar, value: gdouble) gboolean;
pub extern fn _frida_g_settings_get_strv(settings: [*c]GSettings, key: [*c]const gchar) [*c][*c]gchar;
pub extern fn _frida_g_settings_set_strv(settings: [*c]GSettings, key: [*c]const gchar, value: [*c]const [*c]const gchar) gboolean;
pub extern fn _frida_g_settings_get_enum(settings: [*c]GSettings, key: [*c]const gchar) gint;
pub extern fn _frida_g_settings_set_enum(settings: [*c]GSettings, key: [*c]const gchar, value: gint) gboolean;
pub extern fn _frida_g_settings_get_flags(settings: [*c]GSettings, key: [*c]const gchar) guint;
pub extern fn _frida_g_settings_set_flags(settings: [*c]GSettings, key: [*c]const gchar, value: guint) gboolean;
pub extern fn _frida_g_settings_get_child(settings: [*c]GSettings, name: [*c]const gchar) [*c]GSettings;
pub extern fn _frida_g_settings_is_writable(settings: [*c]GSettings, name: [*c]const gchar) gboolean;
pub extern fn _frida_g_settings_delay(settings: [*c]GSettings) void;
pub extern fn _frida_g_settings_apply(settings: [*c]GSettings) void;
pub extern fn _frida_g_settings_revert(settings: [*c]GSettings) void;
pub extern fn _frida_g_settings_get_has_unapplied(settings: [*c]GSettings) gboolean;
pub extern fn _frida_g_settings_sync() void;
pub const GSettingsBindSetMapping = ?*const fn ([*c]const GValue, ?*const GVariantType, gpointer) callconv(.C) ?*GVariant;
pub const GSettingsBindGetMapping = ?*const fn ([*c]GValue, ?*GVariant, gpointer) callconv(.C) gboolean;
pub const GSettingsGetMapping = ?*const fn (?*GVariant, [*c]gpointer, gpointer) callconv(.C) gboolean;
pub const G_SETTINGS_BIND_DEFAULT: c_int = 0;
pub const G_SETTINGS_BIND_GET: c_int = 1;
pub const G_SETTINGS_BIND_SET: c_int = 2;
pub const G_SETTINGS_BIND_NO_SENSITIVITY: c_int = 4;
pub const G_SETTINGS_BIND_GET_NO_CHANGES: c_int = 8;
pub const G_SETTINGS_BIND_INVERT_BOOLEAN: c_int = 16;
pub const GSettingsBindFlags = c_uint;
pub extern fn _frida_g_settings_bind(settings: [*c]GSettings, key: [*c]const gchar, object: gpointer, property: [*c]const gchar, flags: GSettingsBindFlags) void;
pub extern fn _frida_g_settings_bind_with_mapping(settings: [*c]GSettings, key: [*c]const gchar, object: gpointer, property: [*c]const gchar, flags: GSettingsBindFlags, get_mapping: GSettingsBindGetMapping, set_mapping: GSettingsBindSetMapping, user_data: gpointer, destroy: GDestroyNotify) void;
pub extern fn _frida_g_settings_bind_writable(settings: [*c]GSettings, key: [*c]const gchar, object: gpointer, property: [*c]const gchar, inverted: gboolean) void;
pub extern fn _frida_g_settings_unbind(object: gpointer, property: [*c]const gchar) void;
pub extern fn _frida_g_settings_create_action(settings: [*c]GSettings, key: [*c]const gchar) ?*GAction;
pub extern fn _frida_g_settings_get_mapped(settings: [*c]GSettings, key: [*c]const gchar, mapping: GSettingsGetMapping, user_data: gpointer) gpointer;
pub extern fn _frida_g_simple_action_get_type() GType;
pub extern fn _frida_g_simple_action_new(name: [*c]const gchar, parameter_type: ?*const GVariantType) ?*GSimpleAction;
pub extern fn _frida_g_simple_action_new_stateful(name: [*c]const gchar, parameter_type: ?*const GVariantType, state: ?*GVariant) ?*GSimpleAction;
pub extern fn _frida_g_simple_action_set_enabled(simple: ?*GSimpleAction, enabled: gboolean) void;
pub extern fn _frida_g_simple_action_set_state(simple: ?*GSimpleAction, value: ?*GVariant) void;
pub extern fn _frida_g_simple_action_set_state_hint(simple: ?*GSimpleAction, state_hint: ?*GVariant) void;
pub const struct__GSimpleActionGroupClass = extern struct {
    parent_class: GObjectClass,
    padding: [12]gpointer,
};
pub const GSimpleActionGroupClass = struct__GSimpleActionGroupClass;
pub extern fn _frida_g_simple_action_group_get_type() GType;
pub extern fn _frida_g_simple_action_group_new() [*c]GSimpleActionGroup;
pub extern fn _frida_g_simple_action_group_lookup(simple: [*c]GSimpleActionGroup, action_name: [*c]const gchar) ?*GAction;
pub extern fn _frida_g_simple_action_group_insert(simple: [*c]GSimpleActionGroup, action: ?*GAction) void;
pub extern fn _frida_g_simple_action_group_remove(simple: [*c]GSimpleActionGroup, action_name: [*c]const gchar) void;
pub extern fn _frida_g_simple_action_group_add_entries(simple: [*c]GSimpleActionGroup, entries: [*c]const GActionEntry, n_entries: gint, user_data: gpointer) void;
pub const struct__GSimpleAsyncResultClass = opaque {};
pub const GSimpleAsyncResultClass = struct__GSimpleAsyncResultClass;
pub extern fn _frida_g_simple_async_result_get_type() GType;
pub extern fn _frida_g_simple_async_result_new(source_object: [*c]GObject, callback: GAsyncReadyCallback, user_data: gpointer, source_tag: gpointer) ?*GSimpleAsyncResult;
pub extern fn _frida_g_simple_async_result_new_error(source_object: [*c]GObject, callback: GAsyncReadyCallback, user_data: gpointer, domain: GQuark, code: gint, format: [*c]const u8, ...) ?*GSimpleAsyncResult;
pub extern fn _frida_g_simple_async_result_new_from_error(source_object: [*c]GObject, callback: GAsyncReadyCallback, user_data: gpointer, @"error": [*c]const GError) ?*GSimpleAsyncResult;
pub extern fn _frida_g_simple_async_result_new_take_error(source_object: [*c]GObject, callback: GAsyncReadyCallback, user_data: gpointer, @"error": [*c]GError) ?*GSimpleAsyncResult;
pub extern fn _frida_g_simple_async_result_set_op_res_gpointer(simple: ?*GSimpleAsyncResult, op_res: gpointer, destroy_op_res: GDestroyNotify) void;
pub extern fn _frida_g_simple_async_result_get_op_res_gpointer(simple: ?*GSimpleAsyncResult) gpointer;
pub extern fn _frida_g_simple_async_result_set_op_res_gssize(simple: ?*GSimpleAsyncResult, op_res: gssize) void;
pub extern fn _frida_g_simple_async_result_get_op_res_gssize(simple: ?*GSimpleAsyncResult) gssize;
pub extern fn _frida_g_simple_async_result_set_op_res_gboolean(simple: ?*GSimpleAsyncResult, op_res: gboolean) void;
pub extern fn _frida_g_simple_async_result_get_op_res_gboolean(simple: ?*GSimpleAsyncResult) gboolean;
pub extern fn _frida_g_simple_async_result_set_check_cancellable(simple: ?*GSimpleAsyncResult, check_cancellable: [*c]GCancellable) void;
pub extern fn _frida_g_simple_async_result_get_source_tag(simple: ?*GSimpleAsyncResult) gpointer;
pub extern fn _frida_g_simple_async_result_set_handle_cancellation(simple: ?*GSimpleAsyncResult, handle_cancellation: gboolean) void;
pub extern fn _frida_g_simple_async_result_complete(simple: ?*GSimpleAsyncResult) void;
pub extern fn _frida_g_simple_async_result_complete_in_idle(simple: ?*GSimpleAsyncResult) void;
pub extern fn _frida_g_simple_async_result_run_in_thread(simple: ?*GSimpleAsyncResult, func: GSimpleAsyncThreadFunc, io_priority: c_int, cancellable: [*c]GCancellable) void;
pub extern fn _frida_g_simple_async_result_set_from_error(simple: ?*GSimpleAsyncResult, @"error": [*c]const GError) void;
pub extern fn _frida_g_simple_async_result_take_error(simple: ?*GSimpleAsyncResult, @"error": [*c]GError) void;
pub extern fn _frida_g_simple_async_result_propagate_error(simple: ?*GSimpleAsyncResult, dest: [*c][*c]GError) gboolean;
pub extern fn _frida_g_simple_async_result_set_error(simple: ?*GSimpleAsyncResult, domain: GQuark, code: gint, format: [*c]const u8, ...) void;
pub extern fn _frida_g_simple_async_result_set_error_va(simple: ?*GSimpleAsyncResult, domain: GQuark, code: gint, format: [*c]const u8, args: [*c]struct___va_list_tag) void;
pub extern fn _frida_g_simple_async_result_is_valid(result: ?*GAsyncResult, source: [*c]GObject, source_tag: gpointer) gboolean;
pub extern fn _frida_g_simple_async_report_error_in_idle(object: [*c]GObject, callback: GAsyncReadyCallback, user_data: gpointer, domain: GQuark, code: gint, format: [*c]const u8, ...) void;
pub extern fn _frida_g_simple_async_report_gerror_in_idle(object: [*c]GObject, callback: GAsyncReadyCallback, user_data: gpointer, @"error": [*c]const GError) void;
pub extern fn _frida_g_simple_async_report_take_gerror_in_idle(object: [*c]GObject, callback: GAsyncReadyCallback, user_data: gpointer, @"error": [*c]GError) void;
pub extern fn _frida_g_simple_io_stream_get_type() GType;
pub extern fn _frida_g_simple_io_stream_new(input_stream: [*c]GInputStream, output_stream: [*c]GOutputStream) [*c]GIOStream;
pub extern fn _frida_g_simple_permission_get_type() GType;
pub extern fn _frida_g_simple_permission_new(allowed: gboolean) [*c]GPermission;
pub const struct__GSimpleProxyResolverPrivate = opaque {};
pub const GSimpleProxyResolverPrivate = struct__GSimpleProxyResolverPrivate;
pub const struct__GSimpleProxyResolver = extern struct {
    parent_instance: GObject,
    priv: ?*GSimpleProxyResolverPrivate,
};
pub const GSimpleProxyResolver = struct__GSimpleProxyResolver;
pub const struct__GSimpleProxyResolverClass = extern struct {
    parent_class: GObjectClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GSimpleProxyResolverClass = struct__GSimpleProxyResolverClass;
pub extern fn _frida_g_simple_proxy_resolver_get_type() GType;
pub extern fn _frida_g_simple_proxy_resolver_new(default_proxy: [*c]const gchar, ignore_hosts: [*c][*c]gchar) ?*GProxyResolver;
pub extern fn _frida_g_simple_proxy_resolver_set_default_proxy(resolver: [*c]GSimpleProxyResolver, default_proxy: [*c]const gchar) void;
pub extern fn _frida_g_simple_proxy_resolver_set_ignore_hosts(resolver: [*c]GSimpleProxyResolver, ignore_hosts: [*c][*c]gchar) void;
pub extern fn _frida_g_simple_proxy_resolver_set_uri_proxy(resolver: [*c]GSimpleProxyResolver, uri_scheme: [*c]const gchar, proxy: [*c]const gchar) void;
pub const struct__GSocketClass = extern struct {
    parent_class: GObjectClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
    _g_reserved7: ?*const fn () callconv(.C) void,
    _g_reserved8: ?*const fn () callconv(.C) void,
    _g_reserved9: ?*const fn () callconv(.C) void,
    _g_reserved10: ?*const fn () callconv(.C) void,
};
pub const GSocketClass = struct__GSocketClass;
pub extern fn _frida_g_socket_get_type() GType;
pub extern fn _frida_g_socket_new(family: GSocketFamily, @"type": GSocketType, protocol: GSocketProtocol, @"error": [*c][*c]GError) [*c]GSocket;
pub extern fn _frida_g_socket_new_from_fd(fd: gint, @"error": [*c][*c]GError) [*c]GSocket;
pub extern fn _frida_g_socket_get_fd(socket: [*c]GSocket) c_int;
pub extern fn _frida_g_socket_get_family(socket: [*c]GSocket) GSocketFamily;
pub extern fn _frida_g_socket_get_socket_type(socket: [*c]GSocket) GSocketType;
pub extern fn _frida_g_socket_get_protocol(socket: [*c]GSocket) GSocketProtocol;
pub extern fn _frida_g_socket_get_local_address(socket: [*c]GSocket, @"error": [*c][*c]GError) [*c]GSocketAddress;
pub extern fn _frida_g_socket_get_remote_address(socket: [*c]GSocket, @"error": [*c][*c]GError) [*c]GSocketAddress;
pub extern fn _frida_g_socket_set_blocking(socket: [*c]GSocket, blocking: gboolean) void;
pub extern fn _frida_g_socket_get_blocking(socket: [*c]GSocket) gboolean;
pub extern fn _frida_g_socket_set_keepalive(socket: [*c]GSocket, keepalive: gboolean) void;
pub extern fn _frida_g_socket_get_keepalive(socket: [*c]GSocket) gboolean;
pub extern fn _frida_g_socket_get_listen_backlog(socket: [*c]GSocket) gint;
pub extern fn _frida_g_socket_set_listen_backlog(socket: [*c]GSocket, backlog: gint) void;
pub extern fn _frida_g_socket_get_timeout(socket: [*c]GSocket) guint;
pub extern fn _frida_g_socket_set_timeout(socket: [*c]GSocket, timeout: guint) void;
pub extern fn _frida_g_socket_get_ttl(socket: [*c]GSocket) guint;
pub extern fn _frida_g_socket_set_ttl(socket: [*c]GSocket, ttl: guint) void;
pub extern fn _frida_g_socket_get_broadcast(socket: [*c]GSocket) gboolean;
pub extern fn _frida_g_socket_set_broadcast(socket: [*c]GSocket, broadcast: gboolean) void;
pub extern fn _frida_g_socket_get_multicast_loopback(socket: [*c]GSocket) gboolean;
pub extern fn _frida_g_socket_set_multicast_loopback(socket: [*c]GSocket, loopback: gboolean) void;
pub extern fn _frida_g_socket_get_multicast_ttl(socket: [*c]GSocket) guint;
pub extern fn _frida_g_socket_set_multicast_ttl(socket: [*c]GSocket, ttl: guint) void;
pub extern fn _frida_g_socket_is_connected(socket: [*c]GSocket) gboolean;
pub extern fn _frida_g_socket_bind(socket: [*c]GSocket, address: [*c]GSocketAddress, allow_reuse: gboolean, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_join_multicast_group(socket: [*c]GSocket, group: [*c]GInetAddress, source_specific: gboolean, iface: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_leave_multicast_group(socket: [*c]GSocket, group: [*c]GInetAddress, source_specific: gboolean, iface: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_join_multicast_group_ssm(socket: [*c]GSocket, group: [*c]GInetAddress, source_specific: [*c]GInetAddress, iface: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_leave_multicast_group_ssm(socket: [*c]GSocket, group: [*c]GInetAddress, source_specific: [*c]GInetAddress, iface: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_connect(socket: [*c]GSocket, address: [*c]GSocketAddress, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_check_connect_result(socket: [*c]GSocket, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_get_available_bytes(socket: [*c]GSocket) gssize;
pub extern fn _frida_g_socket_condition_check(socket: [*c]GSocket, condition: GIOCondition) GIOCondition;
pub extern fn _frida_g_socket_condition_wait(socket: [*c]GSocket, condition: GIOCondition, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_condition_timed_wait(socket: [*c]GSocket, condition: GIOCondition, timeout_us: gint64, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_accept(socket: [*c]GSocket, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocket;
pub extern fn _frida_g_socket_listen(socket: [*c]GSocket, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_receive(socket: [*c]GSocket, buffer: [*c]gchar, size: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_receive_from(socket: [*c]GSocket, address: [*c][*c]GSocketAddress, buffer: [*c]gchar, size: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_send(socket: [*c]GSocket, buffer: [*c]const gchar, size: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_send_to(socket: [*c]GSocket, address: [*c]GSocketAddress, buffer: [*c]const gchar, size: gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_receive_message(socket: [*c]GSocket, address: [*c][*c]GSocketAddress, vectors: [*c]GInputVector, num_vectors: gint, messages: [*c][*c][*c]GSocketControlMessage, num_messages: [*c]gint, flags: [*c]gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_send_message(socket: [*c]GSocket, address: [*c]GSocketAddress, vectors: [*c]GOutputVector, num_vectors: gint, messages: [*c][*c]GSocketControlMessage, num_messages: gint, flags: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_receive_messages(socket: [*c]GSocket, messages: [*c]GInputMessage, num_messages: guint, flags: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_socket_send_messages(socket: [*c]GSocket, messages: [*c]GOutputMessage, num_messages: guint, flags: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_socket_close(socket: [*c]GSocket, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_shutdown(socket: [*c]GSocket, shutdown_read: gboolean, shutdown_write: gboolean, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_is_closed(socket: [*c]GSocket) gboolean;
pub extern fn _frida_g_socket_create_source(socket: [*c]GSocket, condition: GIOCondition, cancellable: [*c]GCancellable) [*c]GSource;
pub extern fn _frida_g_socket_speaks_ipv4(socket: [*c]GSocket) gboolean;
pub extern fn _frida_g_socket_get_credentials(socket: [*c]GSocket, @"error": [*c][*c]GError) ?*GCredentials;
pub extern fn _frida_g_socket_receive_with_blocking(socket: [*c]GSocket, buffer: [*c]gchar, size: gsize, blocking: gboolean, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_send_with_blocking(socket: [*c]GSocket, buffer: [*c]const gchar, size: gsize, blocking: gboolean, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_socket_send_message_with_timeout(socket: [*c]GSocket, address: [*c]GSocketAddress, vectors: [*c]const GOutputVector, num_vectors: gint, messages: [*c][*c]GSocketControlMessage, num_messages: gint, flags: gint, timeout_us: gint64, bytes_written: [*c]gsize, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) GPollableReturn;
pub extern fn _frida_g_socket_get_option(socket: [*c]GSocket, level: gint, optname: gint, value: [*c]gint, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_set_option(socket: [*c]GSocket, level: gint, optname: gint, value: gint, @"error": [*c][*c]GError) gboolean;
pub const struct__GSocketClientClass = extern struct {
    parent_class: GObjectClass,
    event: ?*const fn ([*c]GSocketClient, GSocketClientEvent, ?*GSocketConnectable, [*c]GIOStream) callconv(.C) void,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
};
pub const GSocketClientClass = struct__GSocketClientClass;
pub extern fn _frida_g_socket_client_get_type() GType;
pub extern fn _frida_g_socket_client_new() [*c]GSocketClient;
pub extern fn _frida_g_socket_client_get_family(client: [*c]GSocketClient) GSocketFamily;
pub extern fn _frida_g_socket_client_set_family(client: [*c]GSocketClient, family: GSocketFamily) void;
pub extern fn _frida_g_socket_client_get_socket_type(client: [*c]GSocketClient) GSocketType;
pub extern fn _frida_g_socket_client_set_socket_type(client: [*c]GSocketClient, @"type": GSocketType) void;
pub extern fn _frida_g_socket_client_get_protocol(client: [*c]GSocketClient) GSocketProtocol;
pub extern fn _frida_g_socket_client_set_protocol(client: [*c]GSocketClient, protocol: GSocketProtocol) void;
pub extern fn _frida_g_socket_client_get_local_address(client: [*c]GSocketClient) [*c]GSocketAddress;
pub extern fn _frida_g_socket_client_set_local_address(client: [*c]GSocketClient, address: [*c]GSocketAddress) void;
pub extern fn _frida_g_socket_client_get_timeout(client: [*c]GSocketClient) guint;
pub extern fn _frida_g_socket_client_set_timeout(client: [*c]GSocketClient, timeout: guint) void;
pub extern fn _frida_g_socket_client_get_enable_proxy(client: [*c]GSocketClient) gboolean;
pub extern fn _frida_g_socket_client_set_enable_proxy(client: [*c]GSocketClient, enable: gboolean) void;
pub extern fn _frida_g_socket_client_get_tls(client: [*c]GSocketClient) gboolean;
pub extern fn _frida_g_socket_client_set_tls(client: [*c]GSocketClient, tls: gboolean) void;
pub extern fn _frida_g_socket_client_get_tls_validation_flags(client: [*c]GSocketClient) GTlsCertificateFlags;
pub extern fn _frida_g_socket_client_set_tls_validation_flags(client: [*c]GSocketClient, flags: GTlsCertificateFlags) void;
pub extern fn _frida_g_socket_client_get_proxy_resolver(client: [*c]GSocketClient) ?*GProxyResolver;
pub extern fn _frida_g_socket_client_set_proxy_resolver(client: [*c]GSocketClient, proxy_resolver: ?*GProxyResolver) void;
pub extern fn _frida_g_socket_client_connect(client: [*c]GSocketClient, connectable: ?*GSocketConnectable, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_connect_to_host(client: [*c]GSocketClient, host_and_port: [*c]const gchar, default_port: guint16, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_connect_to_service(client: [*c]GSocketClient, domain: [*c]const gchar, service: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_connect_to_uri(client: [*c]GSocketClient, uri: [*c]const gchar, default_port: guint16, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_connect_async(client: [*c]GSocketClient, connectable: ?*GSocketConnectable, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_client_connect_finish(client: [*c]GSocketClient, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_connect_to_host_async(client: [*c]GSocketClient, host_and_port: [*c]const gchar, default_port: guint16, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_client_connect_to_host_finish(client: [*c]GSocketClient, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_connect_to_service_async(client: [*c]GSocketClient, domain: [*c]const gchar, service: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_client_connect_to_service_finish(client: [*c]GSocketClient, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_connect_to_uri_async(client: [*c]GSocketClient, uri: [*c]const gchar, default_port: guint16, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_client_connect_to_uri_finish(client: [*c]GSocketClient, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_client_add_application_proxy(client: [*c]GSocketClient, protocol: [*c]const gchar) void;
pub const struct__GSocketConnectableIface = extern struct {
    g_iface: GTypeInterface,
    enumerate: ?*const fn (?*GSocketConnectable) callconv(.C) [*c]GSocketAddressEnumerator,
    proxy_enumerate: ?*const fn (?*GSocketConnectable) callconv(.C) [*c]GSocketAddressEnumerator,
    to_string: ?*const fn (?*GSocketConnectable) callconv(.C) [*c]gchar,
};
pub const GSocketConnectableIface = struct__GSocketConnectableIface;
pub extern fn _frida_g_socket_connectable_get_type() GType;
pub extern fn _frida_g_socket_connectable_enumerate(connectable: ?*GSocketConnectable) [*c]GSocketAddressEnumerator;
pub extern fn _frida_g_socket_connectable_proxy_enumerate(connectable: ?*GSocketConnectable) [*c]GSocketAddressEnumerator;
pub extern fn _frida_g_socket_connectable_to_string(connectable: ?*GSocketConnectable) [*c]gchar;
pub const struct__GSocketConnectionClass = extern struct {
    parent_class: GIOStreamClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
};
pub const GSocketConnectionClass = struct__GSocketConnectionClass;
pub extern fn _frida_g_socket_connection_get_type() GType;
pub extern fn _frida_g_socket_connection_is_connected(connection: [*c]GSocketConnection) gboolean;
pub extern fn _frida_g_socket_connection_connect(connection: [*c]GSocketConnection, address: [*c]GSocketAddress, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_connection_connect_async(connection: [*c]GSocketConnection, address: [*c]GSocketAddress, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_connection_connect_finish(connection: [*c]GSocketConnection, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_connection_get_socket(connection: [*c]GSocketConnection) [*c]GSocket;
pub extern fn _frida_g_socket_connection_get_local_address(connection: [*c]GSocketConnection, @"error": [*c][*c]GError) [*c]GSocketAddress;
pub extern fn _frida_g_socket_connection_get_remote_address(connection: [*c]GSocketConnection, @"error": [*c][*c]GError) [*c]GSocketAddress;
pub extern fn _frida_g_socket_connection_factory_register_type(g_type: GType, family: GSocketFamily, @"type": GSocketType, protocol: gint) void;
pub extern fn _frida_g_socket_connection_factory_lookup_type(family: GSocketFamily, @"type": GSocketType, protocol_id: gint) GType;
pub extern fn _frida_g_socket_connection_factory_create_connection(socket: [*c]GSocket) [*c]GSocketConnection;
pub const struct__GSocketControlMessageClass = extern struct {
    parent_class: GObjectClass,
    get_size: ?*const fn ([*c]GSocketControlMessage) callconv(.C) gsize,
    get_level: ?*const fn ([*c]GSocketControlMessage) callconv(.C) c_int,
    get_type: ?*const fn ([*c]GSocketControlMessage) callconv(.C) c_int,
    serialize: ?*const fn ([*c]GSocketControlMessage, gpointer) callconv(.C) void,
    deserialize: ?*const fn (c_int, c_int, gsize, gpointer) callconv(.C) [*c]GSocketControlMessage,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GSocketControlMessageClass = struct__GSocketControlMessageClass;
pub extern fn _frida_g_socket_control_message_get_type() GType;
pub extern fn _frida_g_socket_control_message_get_size(message: [*c]GSocketControlMessage) gsize;
pub extern fn _frida_g_socket_control_message_get_level(message: [*c]GSocketControlMessage) c_int;
pub extern fn _frida_g_socket_control_message_get_msg_type(message: [*c]GSocketControlMessage) c_int;
pub extern fn _frida_g_socket_control_message_serialize(message: [*c]GSocketControlMessage, data: gpointer) void;
pub extern fn _frida_g_socket_control_message_deserialize(level: c_int, @"type": c_int, size: gsize, data: gpointer) [*c]GSocketControlMessage;
pub const struct__GSocketListenerClass = extern struct {
    parent_class: GObjectClass,
    changed: ?*const fn ([*c]GSocketListener) callconv(.C) void,
    event: ?*const fn ([*c]GSocketListener, GSocketListenerEvent, [*c]GSocket) callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
};
pub const GSocketListenerClass = struct__GSocketListenerClass;
pub extern fn _frida_g_socket_listener_get_type() GType;
pub extern fn _frida_g_socket_listener_new() [*c]GSocketListener;
pub extern fn _frida_g_socket_listener_set_backlog(listener: [*c]GSocketListener, listen_backlog: c_int) void;
pub extern fn _frida_g_socket_listener_add_socket(listener: [*c]GSocketListener, socket: [*c]GSocket, source_object: [*c]GObject, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_listener_add_address(listener: [*c]GSocketListener, address: [*c]GSocketAddress, @"type": GSocketType, protocol: GSocketProtocol, source_object: [*c]GObject, effective_address: [*c][*c]GSocketAddress, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_listener_add_inet_port(listener: [*c]GSocketListener, port: guint16, source_object: [*c]GObject, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_socket_listener_add_any_inet_port(listener: [*c]GSocketListener, source_object: [*c]GObject, @"error": [*c][*c]GError) guint16;
pub extern fn _frida_g_socket_listener_accept_socket(listener: [*c]GSocketListener, source_object: [*c][*c]GObject, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocket;
pub extern fn _frida_g_socket_listener_accept_socket_async(listener: [*c]GSocketListener, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_listener_accept_socket_finish(listener: [*c]GSocketListener, result: ?*GAsyncResult, source_object: [*c][*c]GObject, @"error": [*c][*c]GError) [*c]GSocket;
pub extern fn _frida_g_socket_listener_accept(listener: [*c]GSocketListener, source_object: [*c][*c]GObject, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_listener_accept_async(listener: [*c]GSocketListener, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_socket_listener_accept_finish(listener: [*c]GSocketListener, result: ?*GAsyncResult, source_object: [*c][*c]GObject, @"error": [*c][*c]GError) [*c]GSocketConnection;
pub extern fn _frida_g_socket_listener_close(listener: [*c]GSocketListener) void;
pub const struct__GSocketServiceClass = extern struct {
    parent_class: GSocketListenerClass,
    incoming: ?*const fn ([*c]GSocketService, [*c]GSocketConnection, [*c]GObject) callconv(.C) gboolean,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
};
pub const GSocketServiceClass = struct__GSocketServiceClass;
pub extern fn _frida_g_socket_service_get_type() GType;
pub extern fn _frida_g_socket_service_new() [*c]GSocketService;
pub extern fn _frida_g_socket_service_start(service: [*c]GSocketService) void;
pub extern fn _frida_g_socket_service_stop(service: [*c]GSocketService) void;
pub extern fn _frida_g_socket_service_is_active(service: [*c]GSocketService) gboolean;
pub extern fn _frida_g_srv_target_get_type() GType;
pub extern fn _frida_g_srv_target_new(hostname: [*c]const gchar, port: guint16, priority: guint16, weight: guint16) ?*GSrvTarget;
pub extern fn _frida_g_srv_target_copy(target: ?*GSrvTarget) ?*GSrvTarget;
pub extern fn _frida_g_srv_target_free(target: ?*GSrvTarget) void;
pub extern fn _frida_g_srv_target_get_hostname(target: ?*GSrvTarget) [*c]const gchar;
pub extern fn _frida_g_srv_target_get_port(target: ?*GSrvTarget) guint16;
pub extern fn _frida_g_srv_target_get_priority(target: ?*GSrvTarget) guint16;
pub extern fn _frida_g_srv_target_get_weight(target: ?*GSrvTarget) guint16;
pub extern fn _frida_g_srv_target_list_sort(targets: [*c]GList) [*c]GList;
pub extern fn _frida_g_subprocess_get_type() GType;
pub extern fn _frida_g_subprocess_new(flags: GSubprocessFlags, @"error": [*c][*c]GError, argv0: [*c]const gchar, ...) ?*GSubprocess;
pub extern fn _frida_g_subprocess_newv(argv: [*c]const [*c]const gchar, flags: GSubprocessFlags, @"error": [*c][*c]GError) ?*GSubprocess;
pub extern fn _frida_g_subprocess_get_stdin_pipe(subprocess: ?*GSubprocess) [*c]GOutputStream;
pub extern fn _frida_g_subprocess_get_stdout_pipe(subprocess: ?*GSubprocess) [*c]GInputStream;
pub extern fn _frida_g_subprocess_get_stderr_pipe(subprocess: ?*GSubprocess) [*c]GInputStream;
pub extern fn _frida_g_subprocess_get_identifier(subprocess: ?*GSubprocess) [*c]const gchar;
pub extern fn _frida_g_subprocess_send_signal(subprocess: ?*GSubprocess, signal_num: gint) void;
pub extern fn _frida_g_subprocess_force_exit(subprocess: ?*GSubprocess) void;
pub extern fn _frida_g_subprocess_wait(subprocess: ?*GSubprocess, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_wait_async(subprocess: ?*GSubprocess, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_subprocess_wait_finish(subprocess: ?*GSubprocess, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_wait_check(subprocess: ?*GSubprocess, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_wait_check_async(subprocess: ?*GSubprocess, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_subprocess_wait_check_finish(subprocess: ?*GSubprocess, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_get_status(subprocess: ?*GSubprocess) gint;
pub extern fn _frida_g_subprocess_get_successful(subprocess: ?*GSubprocess) gboolean;
pub extern fn _frida_g_subprocess_get_if_exited(subprocess: ?*GSubprocess) gboolean;
pub extern fn _frida_g_subprocess_get_exit_status(subprocess: ?*GSubprocess) gint;
pub extern fn _frida_g_subprocess_get_if_signaled(subprocess: ?*GSubprocess) gboolean;
pub extern fn _frida_g_subprocess_get_term_sig(subprocess: ?*GSubprocess) gint;
pub extern fn _frida_g_subprocess_communicate(subprocess: ?*GSubprocess, stdin_buf: ?*GBytes, cancellable: [*c]GCancellable, stdout_buf: [*c]?*GBytes, stderr_buf: [*c]?*GBytes, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_communicate_async(subprocess: ?*GSubprocess, stdin_buf: ?*GBytes, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_subprocess_communicate_finish(subprocess: ?*GSubprocess, result: ?*GAsyncResult, stdout_buf: [*c]?*GBytes, stderr_buf: [*c]?*GBytes, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_communicate_utf8(subprocess: ?*GSubprocess, stdin_buf: [*c]const u8, cancellable: [*c]GCancellable, stdout_buf: [*c][*c]u8, stderr_buf: [*c][*c]u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_communicate_utf8_async(subprocess: ?*GSubprocess, stdin_buf: [*c]const u8, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_subprocess_communicate_utf8_finish(subprocess: ?*GSubprocess, result: ?*GAsyncResult, stdout_buf: [*c][*c]u8, stderr_buf: [*c][*c]u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_subprocess_launcher_get_type() GType;
pub extern fn _frida_g_subprocess_launcher_new(flags: GSubprocessFlags) ?*GSubprocessLauncher;
pub extern fn _frida_g_subprocess_launcher_spawn(self: ?*GSubprocessLauncher, @"error": [*c][*c]GError, argv0: [*c]const gchar, ...) ?*GSubprocess;
pub extern fn _frida_g_subprocess_launcher_spawnv(self: ?*GSubprocessLauncher, argv: [*c]const [*c]const gchar, @"error": [*c][*c]GError) ?*GSubprocess;
pub extern fn _frida_g_subprocess_launcher_set_environ(self: ?*GSubprocessLauncher, env: [*c][*c]gchar) void;
pub extern fn _frida_g_subprocess_launcher_setenv(self: ?*GSubprocessLauncher, variable: [*c]const gchar, value: [*c]const gchar, overwrite: gboolean) void;
pub extern fn _frida_g_subprocess_launcher_unsetenv(self: ?*GSubprocessLauncher, variable: [*c]const gchar) void;
pub extern fn _frida_g_subprocess_launcher_getenv(self: ?*GSubprocessLauncher, variable: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_g_subprocess_launcher_set_cwd(self: ?*GSubprocessLauncher, cwd: [*c]const gchar) void;
pub extern fn _frida_g_subprocess_launcher_set_flags(self: ?*GSubprocessLauncher, flags: GSubprocessFlags) void;
pub extern fn _frida_g_subprocess_launcher_set_stdin_file_path(self: ?*GSubprocessLauncher, path: [*c]const gchar) void;
pub extern fn _frida_g_subprocess_launcher_take_stdin_fd(self: ?*GSubprocessLauncher, fd: gint) void;
pub extern fn _frida_g_subprocess_launcher_set_stdout_file_path(self: ?*GSubprocessLauncher, path: [*c]const gchar) void;
pub extern fn _frida_g_subprocess_launcher_take_stdout_fd(self: ?*GSubprocessLauncher, fd: gint) void;
pub extern fn _frida_g_subprocess_launcher_set_stderr_file_path(self: ?*GSubprocessLauncher, path: [*c]const gchar) void;
pub extern fn _frida_g_subprocess_launcher_take_stderr_fd(self: ?*GSubprocessLauncher, fd: gint) void;
pub extern fn _frida_g_subprocess_launcher_take_fd(self: ?*GSubprocessLauncher, source_fd: gint, target_fd: gint) void;
pub extern fn _frida_g_subprocess_launcher_close(self: ?*GSubprocessLauncher) void;
pub extern fn _frida_g_subprocess_launcher_set_child_setup(self: ?*GSubprocessLauncher, child_setup: GSpawnChildSetupFunc, user_data: gpointer, destroy_notify: GDestroyNotify) void;
pub const struct__GTaskClass = opaque {};
pub const GTaskClass = struct__GTaskClass;
pub extern fn _frida_g_task_get_type() GType;
pub extern fn _frida_g_task_new(source_object: gpointer, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, callback_data: gpointer) ?*GTask;
pub extern fn _frida_g_task_report_error(source_object: gpointer, callback: GAsyncReadyCallback, callback_data: gpointer, source_tag: gpointer, @"error": [*c]GError) void;
pub extern fn _frida_g_task_report_new_error(source_object: gpointer, callback: GAsyncReadyCallback, callback_data: gpointer, source_tag: gpointer, domain: GQuark, code: gint, format: [*c]const u8, ...) void;
pub extern fn _frida_g_task_set_task_data(task: ?*GTask, task_data: gpointer, task_data_destroy: GDestroyNotify) void;
pub extern fn _frida_g_task_set_priority(task: ?*GTask, priority: gint) void;
pub extern fn _frida_g_task_set_check_cancellable(task: ?*GTask, check_cancellable: gboolean) void;
pub extern fn _frida_g_task_set_source_tag(task: ?*GTask, source_tag: gpointer) void;
pub extern fn _frida_g_task_set_name(task: ?*GTask, name: [*c]const gchar) void;
pub extern fn _frida_g_task_set_static_name(task: ?*GTask, name: [*c]const gchar) void;
pub extern fn _frida_g_task_get_source_object(task: ?*GTask) gpointer;
pub extern fn _frida_g_task_get_task_data(task: ?*GTask) gpointer;
pub extern fn _frida_g_task_get_priority(task: ?*GTask) gint;
pub extern fn _frida_g_task_get_context(task: ?*GTask) ?*GMainContext;
pub extern fn _frida_g_task_get_cancellable(task: ?*GTask) [*c]GCancellable;
pub extern fn _frida_g_task_get_check_cancellable(task: ?*GTask) gboolean;
pub extern fn _frida_g_task_get_source_tag(task: ?*GTask) gpointer;
pub extern fn _frida_g_task_get_name(task: ?*GTask) [*c]const gchar;
pub extern fn _frida_g_task_is_valid(result: gpointer, source_object: gpointer) gboolean;
pub const GTaskThreadFunc = ?*const fn (?*GTask, gpointer, gpointer, [*c]GCancellable) callconv(.C) void;
pub extern fn _frida_g_task_run_in_thread(task: ?*GTask, task_func: GTaskThreadFunc) void;
pub extern fn _frida_g_task_run_in_thread_sync(task: ?*GTask, task_func: GTaskThreadFunc) void;
pub extern fn _frida_g_task_set_return_on_cancel(task: ?*GTask, return_on_cancel: gboolean) gboolean;
pub extern fn _frida_g_task_get_return_on_cancel(task: ?*GTask) gboolean;
pub extern fn _frida_g_task_attach_source(task: ?*GTask, source: [*c]GSource, callback: GSourceFunc) void;
pub extern fn _frida_g_task_return_pointer(task: ?*GTask, result: gpointer, result_destroy: GDestroyNotify) void;
pub extern fn _frida_g_task_return_boolean(task: ?*GTask, result: gboolean) void;
pub extern fn _frida_g_task_return_int(task: ?*GTask, result: gssize) void;
pub extern fn _frida_g_task_return_error(task: ?*GTask, @"error": [*c]GError) void;
pub extern fn _frida_g_task_return_new_error(task: ?*GTask, domain: GQuark, code: gint, format: [*c]const u8, ...) void;
pub extern fn _frida_g_task_return_value(task: ?*GTask, result: [*c]GValue) void;
pub extern fn _frida_g_task_return_error_if_cancelled(task: ?*GTask) gboolean;
pub extern fn _frida_g_task_propagate_pointer(task: ?*GTask, @"error": [*c][*c]GError) gpointer;
pub extern fn _frida_g_task_propagate_boolean(task: ?*GTask, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_task_propagate_int(task: ?*GTask, @"error": [*c][*c]GError) gssize;
pub extern fn _frida_g_task_propagate_value(task: ?*GTask, value: [*c]GValue, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_task_had_error(task: ?*GTask) gboolean;
pub extern fn _frida_g_task_get_completed(task: ?*GTask) gboolean;
pub const struct__GTcpConnectionClass = extern struct {
    parent_class: GSocketConnectionClass,
};
pub const GTcpConnectionClass = struct__GTcpConnectionClass;
pub extern fn _frida_g_tcp_connection_get_type() GType;
pub extern fn _frida_g_tcp_connection_set_graceful_disconnect(connection: [*c]GTcpConnection, graceful_disconnect: gboolean) void;
pub extern fn _frida_g_tcp_connection_get_graceful_disconnect(connection: [*c]GTcpConnection) gboolean;
pub const struct__GTcpWrapperConnectionClass = extern struct {
    parent_class: GTcpConnectionClass,
};
pub const GTcpWrapperConnectionClass = struct__GTcpWrapperConnectionClass;
pub extern fn _frida_g_tcp_wrapper_connection_get_type() GType;
pub extern fn _frida_g_tcp_wrapper_connection_new(base_io_stream: [*c]GIOStream, socket: [*c]GSocket) [*c]GSocketConnection;
pub extern fn _frida_g_tcp_wrapper_connection_get_base_io_stream(conn: [*c]GTcpWrapperConnection) [*c]GIOStream;
pub extern fn _frida_g_test_dbus_get_type() GType;
pub extern fn _frida_g_test_dbus_new(flags: GTestDBusFlags) ?*GTestDBus;
pub extern fn _frida_g_test_dbus_get_flags(self: ?*GTestDBus) GTestDBusFlags;
pub extern fn _frida_g_test_dbus_get_bus_address(self: ?*GTestDBus) [*c]const gchar;
pub extern fn _frida_g_test_dbus_add_service_dir(self: ?*GTestDBus, path: [*c]const gchar) void;
pub extern fn _frida_g_test_dbus_up(self: ?*GTestDBus) void;
pub extern fn _frida_g_test_dbus_stop(self: ?*GTestDBus) void;
pub extern fn _frida_g_test_dbus_down(self: ?*GTestDBus) void;
pub extern fn _frida_g_test_dbus_unset() void;
pub const struct__GThemedIconClass = opaque {};
pub const GThemedIconClass = struct__GThemedIconClass;
pub extern fn _frida_g_themed_icon_get_type() GType;
pub extern fn _frida_g_themed_icon_new(iconname: [*c]const u8) ?*GIcon;
pub extern fn _frida_g_themed_icon_new_with_default_fallbacks(iconname: [*c]const u8) ?*GIcon;
pub extern fn _frida_g_themed_icon_new_from_names(iconnames: [*c][*c]u8, len: c_int) ?*GIcon;
pub extern fn _frida_g_themed_icon_prepend_name(icon: ?*GThemedIcon, iconname: [*c]const u8) void;
pub extern fn _frida_g_themed_icon_append_name(icon: ?*GThemedIcon, iconname: [*c]const u8) void;
pub extern fn _frida_g_themed_icon_get_names(icon: ?*GThemedIcon) [*c]const [*c]const gchar;
pub const struct__GThreadedSocketServiceClass = extern struct {
    parent_class: GSocketServiceClass,
    run: ?*const fn ([*c]GThreadedSocketService, [*c]GSocketConnection, [*c]GObject) callconv(.C) gboolean,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GThreadedSocketServiceClass = struct__GThreadedSocketServiceClass;
pub extern fn _frida_g_threaded_socket_service_get_type() GType;
pub extern fn _frida_g_threaded_socket_service_new(max_threads: c_int) [*c]GSocketService;
pub const struct__GTlsBackend = opaque {};
pub const GTlsBackend = struct__GTlsBackend;
pub const struct__GTlsBackendInterface = extern struct {
    g_iface: GTypeInterface,
    supports_tls: ?*const fn (?*GTlsBackend) callconv(.C) gboolean,
    get_certificate_type: ?*const fn () callconv(.C) GType,
    get_client_connection_type: ?*const fn () callconv(.C) GType,
    get_server_connection_type: ?*const fn () callconv(.C) GType,
    get_file_database_type: ?*const fn () callconv(.C) GType,
    get_default_database: ?*const fn (?*GTlsBackend) callconv(.C) [*c]GTlsDatabase,
    supports_dtls: ?*const fn (?*GTlsBackend) callconv(.C) gboolean,
    get_dtls_client_connection_type: ?*const fn () callconv(.C) GType,
    get_dtls_server_connection_type: ?*const fn () callconv(.C) GType,
};
pub const GTlsBackendInterface = struct__GTlsBackendInterface;
pub extern fn _frida_g_tls_backend_get_type() GType;
pub extern fn _frida_g_tls_backend_get_default() ?*GTlsBackend;
pub extern fn _frida_g_tls_backend_get_default_database(backend: ?*GTlsBackend) [*c]GTlsDatabase;
pub extern fn _frida_g_tls_backend_set_default_database(backend: ?*GTlsBackend, database: [*c]GTlsDatabase) void;
pub extern fn _frida_g_tls_backend_supports_tls(backend: ?*GTlsBackend) gboolean;
pub extern fn _frida_g_tls_backend_supports_dtls(backend: ?*GTlsBackend) gboolean;
pub extern fn _frida_g_tls_backend_get_certificate_type(backend: ?*GTlsBackend) GType;
pub extern fn _frida_g_tls_backend_get_client_connection_type(backend: ?*GTlsBackend) GType;
pub extern fn _frida_g_tls_backend_get_server_connection_type(backend: ?*GTlsBackend) GType;
pub extern fn _frida_g_tls_backend_get_file_database_type(backend: ?*GTlsBackend) GType;
pub extern fn _frida_g_tls_backend_get_dtls_client_connection_type(backend: ?*GTlsBackend) GType;
pub extern fn _frida_g_tls_backend_get_dtls_server_connection_type(backend: ?*GTlsBackend) GType;
pub const struct__GTlsCertificateClass = extern struct {
    parent_class: GObjectClass,
    verify: ?*const fn ([*c]GTlsCertificate, ?*GSocketConnectable, [*c]GTlsCertificate) callconv(.C) GTlsCertificateFlags,
    padding: [8]gpointer,
};
pub const GTlsCertificateClass = struct__GTlsCertificateClass;
pub extern fn _frida_g_tls_certificate_get_type() GType;
pub extern fn _frida_g_tls_certificate_new_from_pem(data: [*c]const gchar, length: gssize, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_certificate_new_from_pkcs12(data: [*c]const guint8, length: gsize, password: [*c]const gchar, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_certificate_new_from_file_with_password(file: [*c]const gchar, password: [*c]const gchar, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_certificate_new_from_file(file: [*c]const gchar, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_certificate_new_from_files(cert_file: [*c]const gchar, key_file: [*c]const gchar, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_certificate_new_from_pkcs11_uris(pkcs11_uri: [*c]const gchar, private_key_pkcs11_uri: [*c]const gchar, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_certificate_list_new_from_file(file: [*c]const gchar, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_tls_certificate_get_issuer(cert: [*c]GTlsCertificate) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_certificate_verify(cert: [*c]GTlsCertificate, identity: ?*GSocketConnectable, trusted_ca: [*c]GTlsCertificate) GTlsCertificateFlags;
pub extern fn _frida_g_tls_certificate_is_same(cert_one: [*c]GTlsCertificate, cert_two: [*c]GTlsCertificate) gboolean;
pub extern fn _frida_g_tls_certificate_get_not_valid_before(cert: [*c]GTlsCertificate) ?*GDateTime;
pub extern fn _frida_g_tls_certificate_get_not_valid_after(cert: [*c]GTlsCertificate) ?*GDateTime;
pub extern fn _frida_g_tls_certificate_get_subject_name(cert: [*c]GTlsCertificate) [*c]gchar;
pub extern fn _frida_g_tls_certificate_get_issuer_name(cert: [*c]GTlsCertificate) [*c]gchar;
pub extern fn _frida_g_tls_certificate_get_dns_names(cert: [*c]GTlsCertificate) [*c]GPtrArray;
pub extern fn _frida_g_tls_certificate_get_ip_addresses(cert: [*c]GTlsCertificate) [*c]GPtrArray;
pub const struct__GTlsConnectionClass = extern struct {
    parent_class: GIOStreamClass,
    accept_certificate: ?*const fn ([*c]GTlsConnection, [*c]GTlsCertificate, GTlsCertificateFlags) callconv(.C) gboolean,
    handshake: ?*const fn ([*c]GTlsConnection, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    handshake_async: ?*const fn ([*c]GTlsConnection, c_int, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    handshake_finish: ?*const fn ([*c]GTlsConnection, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    get_binding_data: ?*const fn ([*c]GTlsConnection, GTlsChannelBindingType, [*c]GByteArray, [*c][*c]GError) callconv(.C) gboolean,
    get_negotiated_protocol: ?*const fn ([*c]GTlsConnection) callconv(.C) [*c]const gchar,
    padding: [6]gpointer,
};
pub const GTlsConnectionClass = struct__GTlsConnectionClass;
pub extern fn _frida_g_tls_connection_get_type() GType;
pub extern fn _frida_g_tls_connection_set_use_system_certdb(conn: [*c]GTlsConnection, use_system_certdb: gboolean) void;
pub extern fn _frida_g_tls_connection_get_use_system_certdb(conn: [*c]GTlsConnection) gboolean;
pub extern fn _frida_g_tls_connection_set_database(conn: [*c]GTlsConnection, database: [*c]GTlsDatabase) void;
pub extern fn _frida_g_tls_connection_get_database(conn: [*c]GTlsConnection) [*c]GTlsDatabase;
pub extern fn _frida_g_tls_connection_set_certificate(conn: [*c]GTlsConnection, certificate: [*c]GTlsCertificate) void;
pub extern fn _frida_g_tls_connection_get_certificate(conn: [*c]GTlsConnection) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_connection_set_interaction(conn: [*c]GTlsConnection, interaction: [*c]GTlsInteraction) void;
pub extern fn _frida_g_tls_connection_get_interaction(conn: [*c]GTlsConnection) [*c]GTlsInteraction;
pub extern fn _frida_g_tls_connection_get_peer_certificate(conn: [*c]GTlsConnection) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_connection_get_peer_certificate_errors(conn: [*c]GTlsConnection) GTlsCertificateFlags;
pub extern fn _frida_g_tls_connection_set_require_close_notify(conn: [*c]GTlsConnection, require_close_notify: gboolean) void;
pub extern fn _frida_g_tls_connection_get_require_close_notify(conn: [*c]GTlsConnection) gboolean;
pub extern fn _frida_g_tls_connection_set_rehandshake_mode(conn: [*c]GTlsConnection, mode: GTlsRehandshakeMode) void;
pub extern fn _frida_g_tls_connection_get_rehandshake_mode(conn: [*c]GTlsConnection) GTlsRehandshakeMode;
pub extern fn _frida_g_tls_connection_set_advertised_protocols(conn: [*c]GTlsConnection, protocols: [*c]const [*c]const gchar) void;
pub extern fn _frida_g_tls_connection_get_negotiated_protocol(conn: [*c]GTlsConnection) [*c]const gchar;
pub extern fn _frida_g_tls_connection_get_channel_binding_data(conn: [*c]GTlsConnection, @"type": GTlsChannelBindingType, data: [*c]GByteArray, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_tls_connection_handshake(conn: [*c]GTlsConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_tls_connection_handshake_async(conn: [*c]GTlsConnection, io_priority: c_int, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_tls_connection_handshake_finish(conn: [*c]GTlsConnection, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_tls_connection_get_protocol_version(conn: [*c]GTlsConnection) GTlsProtocolVersion;
pub extern fn _frida_g_tls_connection_get_ciphersuite_name(conn: [*c]GTlsConnection) [*c]gchar;
pub extern fn _frida_g_tls_error_quark() GQuark;
pub extern fn _frida_g_tls_channel_binding_error_quark() GQuark;
pub extern fn _frida_g_tls_connection_emit_accept_certificate(conn: [*c]GTlsConnection, peer_cert: [*c]GTlsCertificate, errors: GTlsCertificateFlags) gboolean;
pub const struct__GTlsClientConnectionInterface = extern struct {
    g_iface: GTypeInterface,
    copy_session_state: ?*const fn (?*GTlsClientConnection, ?*GTlsClientConnection) callconv(.C) void,
};
pub const GTlsClientConnectionInterface = struct__GTlsClientConnectionInterface;
pub extern fn _frida_g_tls_client_connection_get_type() GType;
pub extern fn _frida_g_tls_client_connection_new(base_io_stream: [*c]GIOStream, server_identity: ?*GSocketConnectable, @"error": [*c][*c]GError) [*c]GIOStream;
pub extern fn _frida_g_tls_client_connection_get_validation_flags(conn: ?*GTlsClientConnection) GTlsCertificateFlags;
pub extern fn _frida_g_tls_client_connection_set_validation_flags(conn: ?*GTlsClientConnection, flags: GTlsCertificateFlags) void;
pub extern fn _frida_g_tls_client_connection_get_server_identity(conn: ?*GTlsClientConnection) ?*GSocketConnectable;
pub extern fn _frida_g_tls_client_connection_set_server_identity(conn: ?*GTlsClientConnection, identity: ?*GSocketConnectable) void;
pub extern fn _frida_g_tls_client_connection_get_use_ssl3(conn: ?*GTlsClientConnection) gboolean;
pub extern fn _frida_g_tls_client_connection_set_use_ssl3(conn: ?*GTlsClientConnection, use_ssl3: gboolean) void;
pub extern fn _frida_g_tls_client_connection_get_accepted_cas(conn: ?*GTlsClientConnection) [*c]GList;
pub extern fn _frida_g_tls_client_connection_copy_session_state(conn: ?*GTlsClientConnection, source: ?*GTlsClientConnection) void;
pub const struct__GTlsDatabaseClass = extern struct {
    parent_class: GObjectClass,
    verify_chain: ?*const fn ([*c]GTlsDatabase, [*c]GTlsCertificate, [*c]const gchar, ?*GSocketConnectable, [*c]GTlsInteraction, GTlsDatabaseVerifyFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) GTlsCertificateFlags,
    verify_chain_async: ?*const fn ([*c]GTlsDatabase, [*c]GTlsCertificate, [*c]const gchar, ?*GSocketConnectable, [*c]GTlsInteraction, GTlsDatabaseVerifyFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    verify_chain_finish: ?*const fn ([*c]GTlsDatabase, ?*GAsyncResult, [*c][*c]GError) callconv(.C) GTlsCertificateFlags,
    create_certificate_handle: ?*const fn ([*c]GTlsDatabase, [*c]GTlsCertificate) callconv(.C) [*c]gchar,
    lookup_certificate_for_handle: ?*const fn ([*c]GTlsDatabase, [*c]const gchar, [*c]GTlsInteraction, GTlsDatabaseLookupFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GTlsCertificate,
    lookup_certificate_for_handle_async: ?*const fn ([*c]GTlsDatabase, [*c]const gchar, [*c]GTlsInteraction, GTlsDatabaseLookupFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_certificate_for_handle_finish: ?*const fn ([*c]GTlsDatabase, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GTlsCertificate,
    lookup_certificate_issuer: ?*const fn ([*c]GTlsDatabase, [*c]GTlsCertificate, [*c]GTlsInteraction, GTlsDatabaseLookupFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GTlsCertificate,
    lookup_certificate_issuer_async: ?*const fn ([*c]GTlsDatabase, [*c]GTlsCertificate, [*c]GTlsInteraction, GTlsDatabaseLookupFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_certificate_issuer_finish: ?*const fn ([*c]GTlsDatabase, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GTlsCertificate,
    lookup_certificates_issued_by: ?*const fn ([*c]GTlsDatabase, [*c]GByteArray, [*c]GTlsInteraction, GTlsDatabaseLookupFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) [*c]GList,
    lookup_certificates_issued_by_async: ?*const fn ([*c]GTlsDatabase, [*c]GByteArray, [*c]GTlsInteraction, GTlsDatabaseLookupFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    lookup_certificates_issued_by_finish: ?*const fn ([*c]GTlsDatabase, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]GList,
    padding: [16]gpointer,
};
pub const GTlsDatabaseClass = struct__GTlsDatabaseClass;
pub extern fn _frida_g_tls_database_get_type() GType;
pub extern fn _frida_g_tls_database_verify_chain(self: [*c]GTlsDatabase, chain: [*c]GTlsCertificate, purpose: [*c]const gchar, identity: ?*GSocketConnectable, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseVerifyFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) GTlsCertificateFlags;
pub extern fn _frida_g_tls_database_verify_chain_async(self: [*c]GTlsDatabase, chain: [*c]GTlsCertificate, purpose: [*c]const gchar, identity: ?*GSocketConnectable, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseVerifyFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_tls_database_verify_chain_finish(self: [*c]GTlsDatabase, result: ?*GAsyncResult, @"error": [*c][*c]GError) GTlsCertificateFlags;
pub extern fn _frida_g_tls_database_create_certificate_handle(self: [*c]GTlsDatabase, certificate: [*c]GTlsCertificate) [*c]gchar;
pub extern fn _frida_g_tls_database_lookup_certificate_for_handle(self: [*c]GTlsDatabase, handle: [*c]const gchar, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_database_lookup_certificate_for_handle_async(self: [*c]GTlsDatabase, handle: [*c]const gchar, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_tls_database_lookup_certificate_for_handle_finish(self: [*c]GTlsDatabase, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_database_lookup_certificate_issuer(self: [*c]GTlsDatabase, certificate: [*c]GTlsCertificate, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_database_lookup_certificate_issuer_async(self: [*c]GTlsDatabase, certificate: [*c]GTlsCertificate, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_tls_database_lookup_certificate_issuer_finish(self: [*c]GTlsDatabase, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GTlsCertificate;
pub extern fn _frida_g_tls_database_lookup_certificates_issued_by(self: [*c]GTlsDatabase, issuer_raw_dn: [*c]GByteArray, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GList;
pub extern fn _frida_g_tls_database_lookup_certificates_issued_by_async(self: [*c]GTlsDatabase, issuer_raw_dn: [*c]GByteArray, interaction: [*c]GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_tls_database_lookup_certificates_issued_by_finish(self: [*c]GTlsDatabase, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GList;
pub const struct__GTlsFileDatabaseInterface = extern struct {
    g_iface: GTypeInterface,
    padding: [8]gpointer,
};
pub const GTlsFileDatabaseInterface = struct__GTlsFileDatabaseInterface;
pub extern fn _frida_g_tls_file_database_get_type() GType;
pub extern fn _frida_g_tls_file_database_new(anchors: [*c]const gchar, @"error": [*c][*c]GError) [*c]GTlsDatabase;
pub const struct__GTlsInteractionClass = extern struct {
    parent_class: GObjectClass,
    ask_password: ?*const fn ([*c]GTlsInteraction, [*c]GTlsPassword, [*c]GCancellable, [*c][*c]GError) callconv(.C) GTlsInteractionResult,
    ask_password_async: ?*const fn ([*c]GTlsInteraction, [*c]GTlsPassword, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    ask_password_finish: ?*const fn ([*c]GTlsInteraction, ?*GAsyncResult, [*c][*c]GError) callconv(.C) GTlsInteractionResult,
    request_certificate: ?*const fn ([*c]GTlsInteraction, [*c]GTlsConnection, GTlsCertificateRequestFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) GTlsInteractionResult,
    request_certificate_async: ?*const fn ([*c]GTlsInteraction, [*c]GTlsConnection, GTlsCertificateRequestFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    request_certificate_finish: ?*const fn ([*c]GTlsInteraction, ?*GAsyncResult, [*c][*c]GError) callconv(.C) GTlsInteractionResult,
    padding: [21]gpointer,
};
pub const GTlsInteractionClass = struct__GTlsInteractionClass;
pub extern fn _frida_g_tls_interaction_get_type() GType;
pub extern fn _frida_g_tls_interaction_invoke_ask_password(interaction: [*c]GTlsInteraction, password: [*c]GTlsPassword, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) GTlsInteractionResult;
pub extern fn _frida_g_tls_interaction_ask_password(interaction: [*c]GTlsInteraction, password: [*c]GTlsPassword, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) GTlsInteractionResult;
pub extern fn _frida_g_tls_interaction_ask_password_async(interaction: [*c]GTlsInteraction, password: [*c]GTlsPassword, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_tls_interaction_ask_password_finish(interaction: [*c]GTlsInteraction, result: ?*GAsyncResult, @"error": [*c][*c]GError) GTlsInteractionResult;
pub extern fn _frida_g_tls_interaction_invoke_request_certificate(interaction: [*c]GTlsInteraction, connection: [*c]GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) GTlsInteractionResult;
pub extern fn _frida_g_tls_interaction_request_certificate(interaction: [*c]GTlsInteraction, connection: [*c]GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) GTlsInteractionResult;
pub extern fn _frida_g_tls_interaction_request_certificate_async(interaction: [*c]GTlsInteraction, connection: [*c]GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_tls_interaction_request_certificate_finish(interaction: [*c]GTlsInteraction, result: ?*GAsyncResult, @"error": [*c][*c]GError) GTlsInteractionResult;
pub const struct__GTlsPasswordClass = extern struct {
    parent_class: GObjectClass,
    get_value: ?*const fn ([*c]GTlsPassword, [*c]gsize) callconv(.C) [*c]const guchar,
    set_value: ?*const fn ([*c]GTlsPassword, [*c]guchar, gssize, GDestroyNotify) callconv(.C) void,
    get_default_warning: ?*const fn ([*c]GTlsPassword) callconv(.C) [*c]const gchar,
    padding: [4]gpointer,
};
pub const GTlsPasswordClass = struct__GTlsPasswordClass;
pub extern fn _frida_g_tls_password_get_type() GType;
pub extern fn _frida_g_tls_password_new(flags: GTlsPasswordFlags, description: [*c]const gchar) [*c]GTlsPassword;
pub extern fn _frida_g_tls_password_get_value(password: [*c]GTlsPassword, length: [*c]gsize) [*c]const guchar;
pub extern fn _frida_g_tls_password_set_value(password: [*c]GTlsPassword, value: [*c]const guchar, length: gssize) void;
pub extern fn _frida_g_tls_password_set_value_full(password: [*c]GTlsPassword, value: [*c]guchar, length: gssize, destroy: GDestroyNotify) void;
pub extern fn _frida_g_tls_password_get_flags(password: [*c]GTlsPassword) GTlsPasswordFlags;
pub extern fn _frida_g_tls_password_set_flags(password: [*c]GTlsPassword, flags: GTlsPasswordFlags) void;
pub extern fn _frida_g_tls_password_get_description(password: [*c]GTlsPassword) [*c]const gchar;
pub extern fn _frida_g_tls_password_set_description(password: [*c]GTlsPassword, description: [*c]const gchar) void;
pub extern fn _frida_g_tls_password_get_warning(password: [*c]GTlsPassword) [*c]const gchar;
pub extern fn _frida_g_tls_password_set_warning(password: [*c]GTlsPassword, warning: [*c]const gchar) void;
pub const struct__GTlsServerConnectionInterface = extern struct {
    g_iface: GTypeInterface,
};
pub const GTlsServerConnectionInterface = struct__GTlsServerConnectionInterface;
pub extern fn _frida_g_tls_server_connection_get_type() GType;
pub extern fn _frida_g_tls_server_connection_new(base_io_stream: [*c]GIOStream, certificate: [*c]GTlsCertificate, @"error": [*c][*c]GError) [*c]GIOStream;
pub const struct__GUnixConnectionPrivate = opaque {};
pub const GUnixConnectionPrivate = struct__GUnixConnectionPrivate;
pub const struct__GUnixConnection = extern struct {
    parent_instance: GSocketConnection,
    priv: ?*GUnixConnectionPrivate,
};
pub const GUnixConnection = struct__GUnixConnection;
pub const struct__GUnixConnectionClass = extern struct {
    parent_class: GSocketConnectionClass,
};
pub const GUnixConnectionClass = struct__GUnixConnectionClass;
pub const GUnixConnection_autoptr = [*c]GUnixConnection;
pub const GUnixConnection_listautoptr = [*c]GList;
pub const GUnixConnection_slistautoptr = [*c]GSList;
pub const GUnixConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GUnixConnection(arg__ptr: [*c]GUnixConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GUnixConnection(arg__ptr: [*c][*c]GUnixConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GUnixConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GUnixConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GUnixConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GUnixConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub extern fn _frida_g_unix_connection_get_type() GType;
pub extern fn _frida_g_unix_connection_send_fd(connection: [*c]GUnixConnection, fd: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_unix_connection_receive_fd(connection: [*c]GUnixConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_unix_connection_send_credentials(connection: [*c]GUnixConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_unix_connection_send_credentials_async(connection: [*c]GUnixConnection, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_unix_connection_send_credentials_finish(connection: [*c]GUnixConnection, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_unix_connection_receive_credentials(connection: [*c]GUnixConnection, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GCredentials;
pub extern fn _frida_g_unix_connection_receive_credentials_async(connection: [*c]GUnixConnection, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_unix_connection_receive_credentials_finish(connection: [*c]GUnixConnection, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GCredentials;
pub const struct__GUnixCredentialsMessageClass = extern struct {
    parent_class: GSocketControlMessageClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
};
pub const GUnixCredentialsMessageClass = struct__GUnixCredentialsMessageClass;
pub const GUnixCredentialsMessage_autoptr = [*c]GUnixCredentialsMessage;
pub const GUnixCredentialsMessage_listautoptr = [*c]GList;
pub const GUnixCredentialsMessage_slistautoptr = [*c]GSList;
pub const GUnixCredentialsMessage_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GUnixCredentialsMessage(arg__ptr: [*c]GUnixCredentialsMessage) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GUnixCredentialsMessage(arg__ptr: [*c][*c]GUnixCredentialsMessage) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GUnixCredentialsMessage(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GUnixCredentialsMessage(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GUnixCredentialsMessage(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GUnixCredentialsMessage(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub extern fn _frida_g_unix_credentials_message_get_type() GType;
pub extern fn _frida_g_unix_credentials_message_new() [*c]GSocketControlMessage;
pub extern fn _frida_g_unix_credentials_message_new_with_credentials(credentials: ?*GCredentials) [*c]GSocketControlMessage;
pub extern fn _frida_g_unix_credentials_message_get_credentials(message: [*c]GUnixCredentialsMessage) ?*GCredentials;
pub extern fn _frida_g_unix_credentials_message_is_supported() gboolean;
pub const GUnixFDList_autoptr = [*c]GUnixFDList;
pub const GUnixFDList_listautoptr = [*c]GList;
pub const GUnixFDList_slistautoptr = [*c]GSList;
pub const GUnixFDList_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GUnixFDList(arg__ptr: [*c]GUnixFDList) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GUnixFDList(arg__ptr: [*c][*c]GUnixFDList) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GUnixFDList(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GUnixFDList(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GUnixFDList(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GUnixFDList(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const struct__GUnixFDListClass = extern struct {
    parent_class: GObjectClass,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
};
pub const GUnixFDListClass = struct__GUnixFDListClass;
pub extern fn _frida_g_unix_fd_list_get_type() GType;
pub extern fn _frida_g_unix_fd_list_new() [*c]GUnixFDList;
pub extern fn _frida_g_unix_fd_list_new_from_array(fds: [*c]const gint, n_fds: gint) [*c]GUnixFDList;
pub extern fn _frida_g_unix_fd_list_append(list: [*c]GUnixFDList, fd: gint, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_unix_fd_list_get_length(list: [*c]GUnixFDList) gint;
pub extern fn _frida_g_unix_fd_list_get(list: [*c]GUnixFDList, index_: gint, @"error": [*c][*c]GError) gint;
pub extern fn _frida_g_unix_fd_list_peek_fds(list: [*c]GUnixFDList, length: [*c]gint) [*c]const gint;
pub extern fn _frida_g_unix_fd_list_steal_fds(list: [*c]GUnixFDList, length: [*c]gint) [*c]gint;
pub const struct__GUnixSocketAddressPrivate = opaque {};
pub const GUnixSocketAddressPrivate = struct__GUnixSocketAddressPrivate;
pub const struct__GUnixSocketAddress = extern struct {
    parent_instance: GSocketAddress,
    priv: ?*GUnixSocketAddressPrivate,
};
pub const GUnixSocketAddress = struct__GUnixSocketAddress;
pub const struct__GUnixSocketAddressClass = extern struct {
    parent_class: GSocketAddressClass,
};
pub const GUnixSocketAddressClass = struct__GUnixSocketAddressClass;
pub const GUnixSocketAddress_autoptr = [*c]GUnixSocketAddress;
pub const GUnixSocketAddress_listautoptr = [*c]GList;
pub const GUnixSocketAddress_slistautoptr = [*c]GSList;
pub const GUnixSocketAddress_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GUnixSocketAddress(arg__ptr: [*c]GUnixSocketAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GUnixSocketAddress(arg__ptr: [*c][*c]GUnixSocketAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GUnixSocketAddress(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GUnixSocketAddress(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GUnixSocketAddress(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GUnixSocketAddress(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub extern fn _frida_g_unix_socket_address_get_type() GType;
pub extern fn _frida_g_unix_socket_address_new(path: [*c]const gchar) [*c]GSocketAddress;
pub extern fn _frida_g_unix_socket_address_new_abstract(path: [*c]const gchar, path_len: gint) [*c]GSocketAddress;
pub extern fn _frida_g_unix_socket_address_new_with_type(path: [*c]const gchar, path_len: gint, @"type": GUnixSocketAddressType) [*c]GSocketAddress;
pub extern fn _frida_g_unix_socket_address_get_path(address: [*c]GUnixSocketAddress) [*c]const u8;
pub extern fn _frida_g_unix_socket_address_get_path_len(address: [*c]GUnixSocketAddress) gsize;
pub extern fn _frida_g_unix_socket_address_get_address_type(address: [*c]GUnixSocketAddress) GUnixSocketAddressType;
pub extern fn _frida_g_unix_socket_address_get_is_abstract(address: [*c]GUnixSocketAddress) gboolean;
pub extern fn _frida_g_unix_socket_address_abstract_names_supported() gboolean;
pub const GVfsFileLookupFunc = ?*const fn ([*c]GVfs, [*c]const u8, gpointer) callconv(.C) ?*GFile;
pub const struct__GVfsClass = extern struct {
    parent_class: GObjectClass,
    is_active: ?*const fn ([*c]GVfs) callconv(.C) gboolean,
    get_file_for_path: ?*const fn ([*c]GVfs, [*c]const u8) callconv(.C) ?*GFile,
    get_file_for_uri: ?*const fn ([*c]GVfs, [*c]const u8) callconv(.C) ?*GFile,
    get_supported_uri_schemes: ?*const fn ([*c]GVfs) callconv(.C) [*c]const [*c]const gchar,
    parse_name: ?*const fn ([*c]GVfs, [*c]const u8) callconv(.C) ?*GFile,
    local_file_add_info: ?*const fn ([*c]GVfs, [*c]const u8, guint64, ?*GFileAttributeMatcher, ?*GFileInfo, [*c]GCancellable, [*c]gpointer, [*c]GDestroyNotify) callconv(.C) void,
    add_writable_namespaces: ?*const fn ([*c]GVfs, [*c]GFileAttributeInfoList) callconv(.C) void,
    local_file_set_attributes: ?*const fn ([*c]GVfs, [*c]const u8, ?*GFileInfo, GFileQueryInfoFlags, [*c]GCancellable, [*c][*c]GError) callconv(.C) gboolean,
    local_file_removed: ?*const fn ([*c]GVfs, [*c]const u8) callconv(.C) void,
    local_file_moved: ?*const fn ([*c]GVfs, [*c]const u8, [*c]const u8) callconv(.C) void,
    deserialize_icon: ?*const fn ([*c]GVfs, ?*GVariant) callconv(.C) ?*GIcon,
    _g_reserved1: ?*const fn () callconv(.C) void,
    _g_reserved2: ?*const fn () callconv(.C) void,
    _g_reserved3: ?*const fn () callconv(.C) void,
    _g_reserved4: ?*const fn () callconv(.C) void,
    _g_reserved5: ?*const fn () callconv(.C) void,
    _g_reserved6: ?*const fn () callconv(.C) void,
};
pub const GVfsClass = struct__GVfsClass;
pub extern fn _frida_g_vfs_get_type() GType;
pub extern fn _frida_g_vfs_is_active(vfs: [*c]GVfs) gboolean;
pub extern fn _frida_g_vfs_get_file_for_path(vfs: [*c]GVfs, path: [*c]const u8) ?*GFile;
pub extern fn _frida_g_vfs_get_file_for_uri(vfs: [*c]GVfs, uri: [*c]const u8) ?*GFile;
pub extern fn _frida_g_vfs_get_supported_uri_schemes(vfs: [*c]GVfs) [*c]const [*c]const gchar;
pub extern fn _frida_g_vfs_parse_name(vfs: [*c]GVfs, parse_name: [*c]const u8) ?*GFile;
pub extern fn _frida_g_vfs_get_default() [*c]GVfs;
pub extern fn _frida_g_vfs_get_local() [*c]GVfs;
pub extern fn _frida_g_vfs_register_uri_scheme(vfs: [*c]GVfs, scheme: [*c]const u8, uri_func: GVfsFileLookupFunc, uri_data: gpointer, uri_destroy: GDestroyNotify, parse_name_func: GVfsFileLookupFunc, parse_name_data: gpointer, parse_name_destroy: GDestroyNotify) gboolean;
pub extern fn _frida_g_vfs_unregister_uri_scheme(vfs: [*c]GVfs, scheme: [*c]const u8) gboolean;
pub const struct__GVolumeIface = extern struct {
    g_iface: GTypeInterface,
    changed: ?*const fn (?*GVolume) callconv(.C) void,
    removed: ?*const fn (?*GVolume) callconv(.C) void,
    get_name: ?*const fn (?*GVolume) callconv(.C) [*c]u8,
    get_icon: ?*const fn (?*GVolume) callconv(.C) ?*GIcon,
    get_uuid: ?*const fn (?*GVolume) callconv(.C) [*c]u8,
    get_drive: ?*const fn (?*GVolume) callconv(.C) ?*GDrive,
    get_mount: ?*const fn (?*GVolume) callconv(.C) ?*GMount,
    can_mount: ?*const fn (?*GVolume) callconv(.C) gboolean,
    can_eject: ?*const fn (?*GVolume) callconv(.C) gboolean,
    mount_fn: ?*const fn (?*GVolume, GMountMountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    mount_finish: ?*const fn (?*GVolume, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    eject: ?*const fn (?*GVolume, GMountUnmountFlags, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_finish: ?*const fn (?*GVolume, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    get_identifier: ?*const fn (?*GVolume, [*c]const u8) callconv(.C) [*c]u8,
    enumerate_identifiers: ?*const fn (?*GVolume) callconv(.C) [*c][*c]u8,
    should_automount: ?*const fn (?*GVolume) callconv(.C) gboolean,
    get_activation_root: ?*const fn (?*GVolume) callconv(.C) ?*GFile,
    eject_with_operation: ?*const fn (?*GVolume, GMountUnmountFlags, [*c]GMountOperation, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    eject_with_operation_finish: ?*const fn (?*GVolume, ?*GAsyncResult, [*c][*c]GError) callconv(.C) gboolean,
    get_sort_key: ?*const fn (?*GVolume) callconv(.C) [*c]const gchar,
    get_symbolic_icon: ?*const fn (?*GVolume) callconv(.C) ?*GIcon,
};
pub const GVolumeIface = struct__GVolumeIface;
pub extern fn _frida_g_volume_get_type() GType;
pub extern fn _frida_g_volume_get_name(volume: ?*GVolume) [*c]u8;
pub extern fn _frida_g_volume_get_icon(volume: ?*GVolume) ?*GIcon;
pub extern fn _frida_g_volume_get_symbolic_icon(volume: ?*GVolume) ?*GIcon;
pub extern fn _frida_g_volume_get_uuid(volume: ?*GVolume) [*c]u8;
pub extern fn _frida_g_volume_get_drive(volume: ?*GVolume) ?*GDrive;
pub extern fn _frida_g_volume_get_mount(volume: ?*GVolume) ?*GMount;
pub extern fn _frida_g_volume_can_mount(volume: ?*GVolume) gboolean;
pub extern fn _frida_g_volume_can_eject(volume: ?*GVolume) gboolean;
pub extern fn _frida_g_volume_should_automount(volume: ?*GVolume) gboolean;
pub extern fn _frida_g_volume_mount(volume: ?*GVolume, flags: GMountMountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_volume_mount_finish(volume: ?*GVolume, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_volume_eject(volume: ?*GVolume, flags: GMountUnmountFlags, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_volume_eject_finish(volume: ?*GVolume, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_volume_get_identifier(volume: ?*GVolume, kind: [*c]const u8) [*c]u8;
pub extern fn _frida_g_volume_enumerate_identifiers(volume: ?*GVolume) [*c][*c]u8;
pub extern fn _frida_g_volume_get_activation_root(volume: ?*GVolume) ?*GFile;
pub extern fn _frida_g_volume_eject_with_operation(volume: ?*GVolume, flags: GMountUnmountFlags, mount_operation: [*c]GMountOperation, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_g_volume_eject_with_operation_finish(volume: ?*GVolume, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_g_volume_get_sort_key(volume: ?*GVolume) [*c]const gchar;
pub const struct__GZlibCompressorClass = extern struct {
    parent_class: GObjectClass,
};
pub const GZlibCompressorClass = struct__GZlibCompressorClass;
pub extern fn _frida_g_zlib_compressor_get_type() GType;
pub extern fn _frida_g_zlib_compressor_new(format: GZlibCompressorFormat, level: c_int) ?*GZlibCompressor;
pub extern fn _frida_g_zlib_compressor_get_file_info(compressor: ?*GZlibCompressor) ?*GFileInfo;
pub extern fn _frida_g_zlib_compressor_set_file_info(compressor: ?*GZlibCompressor, file_info: ?*GFileInfo) void;
pub const struct__GZlibDecompressorClass = extern struct {
    parent_class: GObjectClass,
};
pub const GZlibDecompressorClass = struct__GZlibDecompressorClass;
pub extern fn _frida_g_zlib_decompressor_get_type() GType;
pub extern fn _frida_g_zlib_decompressor_new(format: GZlibCompressorFormat) ?*GZlibDecompressor;
pub extern fn _frida_g_zlib_decompressor_get_file_info(decompressor: ?*GZlibDecompressor) ?*GFileInfo;
pub const GAction_autoptr = ?*GAction;
pub const GAction_listautoptr = [*c]GList;
pub const GAction_slistautoptr = [*c]GSList;
pub const GAction_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GAction(arg__ptr: ?*GAction) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GAction(arg__ptr: [*c]?*GAction) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GAction(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GAction(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GAction(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GAction(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GActionMap_autoptr = ?*GActionMap;
pub const GActionMap_listautoptr = [*c]GList;
pub const GActionMap_slistautoptr = [*c]GSList;
pub const GActionMap_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GActionMap(arg__ptr: ?*GActionMap) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GActionMap(arg__ptr: [*c]?*GActionMap) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GActionMap(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GActionMap(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GActionMap(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GActionMap(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GAppInfo_autoptr = ?*GAppInfo;
pub const GAppInfo_listautoptr = [*c]GList;
pub const GAppInfo_slistautoptr = [*c]GSList;
pub const GAppInfo_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GAppInfo(arg__ptr: ?*GAppInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GAppInfo(arg__ptr: [*c]?*GAppInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GAppInfo(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GAppInfo(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GAppInfo(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GAppInfo(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GAppLaunchContext_autoptr = [*c]GAppLaunchContext;
pub const GAppLaunchContext_listautoptr = [*c]GList;
pub const GAppLaunchContext_slistautoptr = [*c]GSList;
pub const GAppLaunchContext_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GAppLaunchContext(arg__ptr: [*c]GAppLaunchContext) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GAppLaunchContext(arg__ptr: [*c][*c]GAppLaunchContext) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GAppLaunchContext(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GAppLaunchContext(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GAppLaunchContext(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GAppLaunchContext(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GAppInfoMonitor_autoptr = ?*GAppInfoMonitor;
pub const GAppInfoMonitor_listautoptr = [*c]GList;
pub const GAppInfoMonitor_slistautoptr = [*c]GSList;
pub const GAppInfoMonitor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GAppInfoMonitor(arg__ptr: ?*GAppInfoMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GAppInfoMonitor(arg__ptr: [*c]?*GAppInfoMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GAppInfoMonitor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GAppInfoMonitor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GAppInfoMonitor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GAppInfoMonitor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GApplicationCommandLine_autoptr = [*c]GApplicationCommandLine;
pub const GApplicationCommandLine_listautoptr = [*c]GList;
pub const GApplicationCommandLine_slistautoptr = [*c]GSList;
pub const GApplicationCommandLine_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GApplicationCommandLine(arg__ptr: [*c]GApplicationCommandLine) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GApplicationCommandLine(arg__ptr: [*c][*c]GApplicationCommandLine) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GApplicationCommandLine(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GApplicationCommandLine(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GApplicationCommandLine(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GApplicationCommandLine(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GApplication_autoptr = [*c]GApplication;
pub const GApplication_listautoptr = [*c]GList;
pub const GApplication_slistautoptr = [*c]GSList;
pub const GApplication_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GApplication(arg__ptr: [*c]GApplication) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GApplication(arg__ptr: [*c][*c]GApplication) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GApplication(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GApplication(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GApplication(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GApplication(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GAsyncInitable_autoptr = ?*GAsyncInitable;
pub const GAsyncInitable_listautoptr = [*c]GList;
pub const GAsyncInitable_slistautoptr = [*c]GSList;
pub const GAsyncInitable_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GAsyncInitable(arg__ptr: ?*GAsyncInitable) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GAsyncInitable(arg__ptr: [*c]?*GAsyncInitable) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GAsyncInitable(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GAsyncInitable(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GAsyncInitable(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GAsyncInitable(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GAsyncResult_autoptr = ?*GAsyncResult;
pub const GAsyncResult_listautoptr = [*c]GList;
pub const GAsyncResult_slistautoptr = [*c]GSList;
pub const GAsyncResult_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GAsyncResult(arg__ptr: ?*GAsyncResult) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GAsyncResult(arg__ptr: [*c]?*GAsyncResult) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GAsyncResult(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GAsyncResult(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GAsyncResult(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GAsyncResult(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GBufferedInputStream_autoptr = [*c]GBufferedInputStream;
pub const GBufferedInputStream_listautoptr = [*c]GList;
pub const GBufferedInputStream_slistautoptr = [*c]GSList;
pub const GBufferedInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GBufferedInputStream(arg__ptr: [*c]GBufferedInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GBufferedInputStream(arg__ptr: [*c][*c]GBufferedInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GBufferedInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GBufferedInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GBufferedInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GBufferedInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GBufferedOutputStream_autoptr = [*c]GBufferedOutputStream;
pub const GBufferedOutputStream_listautoptr = [*c]GList;
pub const GBufferedOutputStream_slistautoptr = [*c]GSList;
pub const GBufferedOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GBufferedOutputStream(arg__ptr: [*c]GBufferedOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GBufferedOutputStream(arg__ptr: [*c][*c]GBufferedOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GBufferedOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GBufferedOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GBufferedOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GBufferedOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GBytesIcon_autoptr = ?*GBytesIcon;
pub const GBytesIcon_listautoptr = [*c]GList;
pub const GBytesIcon_slistautoptr = [*c]GSList;
pub const GBytesIcon_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GBytesIcon(arg__ptr: ?*GBytesIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GBytesIcon(arg__ptr: [*c]?*GBytesIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GBytesIcon(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GBytesIcon(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GBytesIcon(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GBytesIcon(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GCancellable_autoptr = [*c]GCancellable;
pub const GCancellable_listautoptr = [*c]GList;
pub const GCancellable_slistautoptr = [*c]GSList;
pub const GCancellable_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GCancellable(arg__ptr: [*c]GCancellable) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GCancellable(arg__ptr: [*c][*c]GCancellable) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GCancellable(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GCancellable(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GCancellable(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GCancellable(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GCharsetConverter_autoptr = ?*GCharsetConverter;
pub const GCharsetConverter_listautoptr = [*c]GList;
pub const GCharsetConverter_slistautoptr = [*c]GSList;
pub const GCharsetConverter_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GCharsetConverter(arg__ptr: ?*GCharsetConverter) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GCharsetConverter(arg__ptr: [*c]?*GCharsetConverter) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GCharsetConverter(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GCharsetConverter(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GCharsetConverter(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GCharsetConverter(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GConverter_autoptr = ?*GConverter;
pub const GConverter_listautoptr = [*c]GList;
pub const GConverter_slistautoptr = [*c]GSList;
pub const GConverter_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GConverter(arg__ptr: ?*GConverter) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GConverter(arg__ptr: [*c]?*GConverter) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GConverter(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GConverter(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GConverter(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GConverter(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GConverterInputStream_autoptr = [*c]GConverterInputStream;
pub const GConverterInputStream_listautoptr = [*c]GList;
pub const GConverterInputStream_slistautoptr = [*c]GSList;
pub const GConverterInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GConverterInputStream(arg__ptr: [*c]GConverterInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GConverterInputStream(arg__ptr: [*c][*c]GConverterInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GConverterInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GConverterInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GConverterInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GConverterInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GConverterOutputStream_autoptr = [*c]GConverterOutputStream;
pub const GConverterOutputStream_listautoptr = [*c]GList;
pub const GConverterOutputStream_slistautoptr = [*c]GSList;
pub const GConverterOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GConverterOutputStream(arg__ptr: [*c]GConverterOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GConverterOutputStream(arg__ptr: [*c][*c]GConverterOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GConverterOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GConverterOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GConverterOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GConverterOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GCredentials_autoptr = ?*GCredentials;
pub const GCredentials_listautoptr = [*c]GList;
pub const GCredentials_slistautoptr = [*c]GSList;
pub const GCredentials_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GCredentials(arg__ptr: ?*GCredentials) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GCredentials(arg__ptr: [*c]?*GCredentials) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GCredentials(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GCredentials(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GCredentials(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GCredentials(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDatagramBased_autoptr = ?*GDatagramBased;
pub const GDatagramBased_listautoptr = [*c]GList;
pub const GDatagramBased_slistautoptr = [*c]GSList;
pub const GDatagramBased_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDatagramBased(arg__ptr: ?*GDatagramBased) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDatagramBased(arg__ptr: [*c]?*GDatagramBased) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDatagramBased(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDatagramBased(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDatagramBased(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDatagramBased(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDataInputStream_autoptr = [*c]GDataInputStream;
pub const GDataInputStream_listautoptr = [*c]GList;
pub const GDataInputStream_slistautoptr = [*c]GSList;
pub const GDataInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDataInputStream(arg__ptr: [*c]GDataInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDataInputStream(arg__ptr: [*c][*c]GDataInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDataInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDataInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDataInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDataInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDataOutputStream_autoptr = [*c]GDataOutputStream;
pub const GDataOutputStream_listautoptr = [*c]GList;
pub const GDataOutputStream_slistautoptr = [*c]GSList;
pub const GDataOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDataOutputStream(arg__ptr: [*c]GDataOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDataOutputStream(arg__ptr: [*c][*c]GDataOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDataOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDataOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDataOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDataOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusActionGroup_autoptr = ?*GDBusActionGroup;
pub const GDBusActionGroup_listautoptr = [*c]GList;
pub const GDBusActionGroup_slistautoptr = [*c]GSList;
pub const GDBusActionGroup_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusActionGroup(arg__ptr: ?*GDBusActionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusActionGroup(arg__ptr: [*c]?*GDBusActionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusActionGroup(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusActionGroup(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusActionGroup(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusActionGroup(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusAuthObserver_autoptr = ?*GDBusAuthObserver;
pub const GDBusAuthObserver_listautoptr = [*c]GList;
pub const GDBusAuthObserver_slistautoptr = [*c]GSList;
pub const GDBusAuthObserver_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusAuthObserver(arg__ptr: ?*GDBusAuthObserver) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusAuthObserver(arg__ptr: [*c]?*GDBusAuthObserver) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusAuthObserver(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusAuthObserver(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusAuthObserver(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusAuthObserver(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusConnection_autoptr = ?*GDBusConnection;
pub const GDBusConnection_listautoptr = [*c]GList;
pub const GDBusConnection_slistautoptr = [*c]GSList;
pub const GDBusConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusConnection(arg__ptr: ?*GDBusConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusConnection(arg__ptr: [*c]?*GDBusConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusInterface_autoptr = ?*GDBusInterface;
pub const GDBusInterface_listautoptr = [*c]GList;
pub const GDBusInterface_slistautoptr = [*c]GSList;
pub const GDBusInterface_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusInterface(arg__ptr: ?*GDBusInterface) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusInterface(arg__ptr: [*c]?*GDBusInterface) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusInterface(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusInterface(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusInterface(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusInterface(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusInterfaceSkeleton_autoptr = [*c]GDBusInterfaceSkeleton;
pub const GDBusInterfaceSkeleton_listautoptr = [*c]GList;
pub const GDBusInterfaceSkeleton_slistautoptr = [*c]GSList;
pub const GDBusInterfaceSkeleton_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusInterfaceSkeleton(arg__ptr: [*c]GDBusInterfaceSkeleton) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusInterfaceSkeleton(arg__ptr: [*c][*c]GDBusInterfaceSkeleton) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusInterfaceSkeleton(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusInterfaceSkeleton(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusInterfaceSkeleton(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusInterfaceSkeleton(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusMenuModel_autoptr = ?*GDBusMenuModel;
pub const GDBusMenuModel_listautoptr = [*c]GList;
pub const GDBusMenuModel_slistautoptr = [*c]GSList;
pub const GDBusMenuModel_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusMenuModel(arg__ptr: ?*GDBusMenuModel) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusMenuModel(arg__ptr: [*c]?*GDBusMenuModel) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusMenuModel(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusMenuModel(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusMenuModel(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusMenuModel(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusMessage_autoptr = ?*GDBusMessage;
pub const GDBusMessage_listautoptr = [*c]GList;
pub const GDBusMessage_slistautoptr = [*c]GSList;
pub const GDBusMessage_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusMessage(arg__ptr: ?*GDBusMessage) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusMessage(arg__ptr: [*c]?*GDBusMessage) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusMessage(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusMessage(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusMessage(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusMessage(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusMethodInvocation_autoptr = ?*GDBusMethodInvocation;
pub const GDBusMethodInvocation_listautoptr = [*c]GList;
pub const GDBusMethodInvocation_slistautoptr = [*c]GSList;
pub const GDBusMethodInvocation_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusMethodInvocation(arg__ptr: ?*GDBusMethodInvocation) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusMethodInvocation(arg__ptr: [*c]?*GDBusMethodInvocation) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusMethodInvocation(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusMethodInvocation(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusMethodInvocation(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusMethodInvocation(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusNodeInfo_autoptr = [*c]GDBusNodeInfo;
pub const GDBusNodeInfo_listautoptr = [*c]GList;
pub const GDBusNodeInfo_slistautoptr = [*c]GSList;
pub const GDBusNodeInfo_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusNodeInfo(arg__ptr: [*c]GDBusNodeInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_dbus_node_info_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GDBusNodeInfo(arg__ptr: [*c][*c]GDBusNodeInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusNodeInfo(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusNodeInfo(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_dbus_node_info_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusNodeInfo(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_dbus_node_info_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusNodeInfo(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_dbus_node_info_unref)))));
    }
}
pub const GDBusObject_autoptr = ?*GDBusObject;
pub const GDBusObject_listautoptr = [*c]GList;
pub const GDBusObject_slistautoptr = [*c]GSList;
pub const GDBusObject_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusObject(arg__ptr: ?*GDBusObject) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusObject(arg__ptr: [*c]?*GDBusObject) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusObject(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusObject(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusObject(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusObject(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusObjectManagerClient_autoptr = [*c]GDBusObjectManagerClient;
pub const GDBusObjectManagerClient_listautoptr = [*c]GList;
pub const GDBusObjectManagerClient_slistautoptr = [*c]GSList;
pub const GDBusObjectManagerClient_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusObjectManagerClient(arg__ptr: [*c]GDBusObjectManagerClient) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusObjectManagerClient(arg__ptr: [*c][*c]GDBusObjectManagerClient) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusObjectManagerClient(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusObjectManagerClient(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusObjectManagerClient(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusObjectManagerClient(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusObjectManager_autoptr = ?*GDBusObjectManager;
pub const GDBusObjectManager_listautoptr = [*c]GList;
pub const GDBusObjectManager_slistautoptr = [*c]GSList;
pub const GDBusObjectManager_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusObjectManager(arg__ptr: ?*GDBusObjectManager) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusObjectManager(arg__ptr: [*c]?*GDBusObjectManager) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusObjectManager(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusObjectManager(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusObjectManager(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusObjectManager(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusObjectManagerServer_autoptr = [*c]GDBusObjectManagerServer;
pub const GDBusObjectManagerServer_listautoptr = [*c]GList;
pub const GDBusObjectManagerServer_slistautoptr = [*c]GSList;
pub const GDBusObjectManagerServer_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusObjectManagerServer(arg__ptr: [*c]GDBusObjectManagerServer) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusObjectManagerServer(arg__ptr: [*c][*c]GDBusObjectManagerServer) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusObjectManagerServer(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusObjectManagerServer(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusObjectManagerServer(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusObjectManagerServer(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusObjectProxy_autoptr = [*c]GDBusObjectProxy;
pub const GDBusObjectProxy_listautoptr = [*c]GList;
pub const GDBusObjectProxy_slistautoptr = [*c]GSList;
pub const GDBusObjectProxy_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusObjectProxy(arg__ptr: [*c]GDBusObjectProxy) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusObjectProxy(arg__ptr: [*c][*c]GDBusObjectProxy) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusObjectProxy(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusObjectProxy(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusObjectProxy(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusObjectProxy(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusObjectSkeleton_autoptr = [*c]GDBusObjectSkeleton;
pub const GDBusObjectSkeleton_listautoptr = [*c]GList;
pub const GDBusObjectSkeleton_slistautoptr = [*c]GSList;
pub const GDBusObjectSkeleton_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusObjectSkeleton(arg__ptr: [*c]GDBusObjectSkeleton) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusObjectSkeleton(arg__ptr: [*c][*c]GDBusObjectSkeleton) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusObjectSkeleton(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusObjectSkeleton(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusObjectSkeleton(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusObjectSkeleton(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusProxy_autoptr = [*c]GDBusProxy;
pub const GDBusProxy_listautoptr = [*c]GList;
pub const GDBusProxy_slistautoptr = [*c]GSList;
pub const GDBusProxy_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusProxy(arg__ptr: [*c]GDBusProxy) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusProxy(arg__ptr: [*c][*c]GDBusProxy) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusProxy(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusProxy(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusProxy(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusProxy(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDBusServer_autoptr = ?*GDBusServer;
pub const GDBusServer_listautoptr = [*c]GList;
pub const GDBusServer_slistautoptr = [*c]GSList;
pub const GDBusServer_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDBusServer(arg__ptr: ?*GDBusServer) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDBusServer(arg__ptr: [*c]?*GDBusServer) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDBusServer(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDBusServer(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDBusServer(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDBusServer(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GDrive_autoptr = ?*GDrive;
pub const GDrive_listautoptr = [*c]GList;
pub const GDrive_slistautoptr = [*c]GSList;
pub const GDrive_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GDrive(arg__ptr: ?*GDrive) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GDrive(arg__ptr: [*c]?*GDrive) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GDrive(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GDrive(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GDrive(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GDrive(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GEmblemedIcon_autoptr = [*c]GEmblemedIcon;
pub const GEmblemedIcon_listautoptr = [*c]GList;
pub const GEmblemedIcon_slistautoptr = [*c]GSList;
pub const GEmblemedIcon_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GEmblemedIcon(arg__ptr: [*c]GEmblemedIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GEmblemedIcon(arg__ptr: [*c][*c]GEmblemedIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GEmblemedIcon(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GEmblemedIcon(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GEmblemedIcon(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GEmblemedIcon(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GEmblem_autoptr = ?*GEmblem;
pub const GEmblem_listautoptr = [*c]GList;
pub const GEmblem_slistautoptr = [*c]GSList;
pub const GEmblem_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GEmblem(arg__ptr: ?*GEmblem) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GEmblem(arg__ptr: [*c]?*GEmblem) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GEmblem(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GEmblem(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GEmblem(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GEmblem(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFileEnumerator_autoptr = [*c]GFileEnumerator;
pub const GFileEnumerator_listautoptr = [*c]GList;
pub const GFileEnumerator_slistautoptr = [*c]GSList;
pub const GFileEnumerator_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileEnumerator(arg__ptr: [*c]GFileEnumerator) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFileEnumerator(arg__ptr: [*c][*c]GFileEnumerator) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileEnumerator(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileEnumerator(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileEnumerator(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileEnumerator(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFile_autoptr = ?*GFile;
pub const GFile_listautoptr = [*c]GList;
pub const GFile_slistautoptr = [*c]GSList;
pub const GFile_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFile(arg__ptr: ?*GFile) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFile(arg__ptr: [*c]?*GFile) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFile(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFile(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFile(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFile(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFileAttributeInfoList_autoptr = [*c]GFileAttributeInfoList;
pub const GFileAttributeInfoList_listautoptr = [*c]GList;
pub const GFileAttributeInfoList_slistautoptr = [*c]GSList;
pub const GFileAttributeInfoList_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileAttributeInfoList(arg__ptr: [*c]GFileAttributeInfoList) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_file_attribute_info_list_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GFileAttributeInfoList(arg__ptr: [*c][*c]GFileAttributeInfoList) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileAttributeInfoList(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileAttributeInfoList(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_file_attribute_info_list_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileAttributeInfoList(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_file_attribute_info_list_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileAttributeInfoList(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_file_attribute_info_list_unref)))));
    }
}
pub const GFileIcon_autoptr = ?*GFileIcon;
pub const GFileIcon_listautoptr = [*c]GList;
pub const GFileIcon_slistautoptr = [*c]GSList;
pub const GFileIcon_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileIcon(arg__ptr: ?*GFileIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFileIcon(arg__ptr: [*c]?*GFileIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileIcon(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileIcon(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileIcon(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileIcon(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFileInfo_autoptr = ?*GFileInfo;
pub const GFileInfo_listautoptr = [*c]GList;
pub const GFileInfo_slistautoptr = [*c]GSList;
pub const GFileInfo_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileInfo(arg__ptr: ?*GFileInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFileInfo(arg__ptr: [*c]?*GFileInfo) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileInfo(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileInfo(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileInfo(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileInfo(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFileInputStream_autoptr = [*c]GFileInputStream;
pub const GFileInputStream_listautoptr = [*c]GList;
pub const GFileInputStream_slistautoptr = [*c]GSList;
pub const GFileInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileInputStream(arg__ptr: [*c]GFileInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFileInputStream(arg__ptr: [*c][*c]GFileInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFileIOStream_autoptr = [*c]GFileIOStream;
pub const GFileIOStream_listautoptr = [*c]GList;
pub const GFileIOStream_slistautoptr = [*c]GSList;
pub const GFileIOStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileIOStream(arg__ptr: [*c]GFileIOStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFileIOStream(arg__ptr: [*c][*c]GFileIOStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileIOStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileIOStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileIOStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileIOStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFileMonitor_autoptr = [*c]GFileMonitor;
pub const GFileMonitor_listautoptr = [*c]GList;
pub const GFileMonitor_slistautoptr = [*c]GSList;
pub const GFileMonitor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileMonitor(arg__ptr: [*c]GFileMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFileMonitor(arg__ptr: [*c][*c]GFileMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileMonitor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileMonitor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileMonitor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileMonitor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFilenameCompleter_autoptr = ?*GFilenameCompleter;
pub const GFilenameCompleter_listautoptr = [*c]GList;
pub const GFilenameCompleter_slistautoptr = [*c]GSList;
pub const GFilenameCompleter_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFilenameCompleter(arg__ptr: ?*GFilenameCompleter) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFilenameCompleter(arg__ptr: [*c]?*GFilenameCompleter) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFilenameCompleter(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFilenameCompleter(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFilenameCompleter(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFilenameCompleter(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFileOutputStream_autoptr = [*c]GFileOutputStream;
pub const GFileOutputStream_listautoptr = [*c]GList;
pub const GFileOutputStream_slistautoptr = [*c]GSList;
pub const GFileOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFileOutputStream(arg__ptr: [*c]GFileOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFileOutputStream(arg__ptr: [*c][*c]GFileOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFileOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFileOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFileOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFileOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFilterInputStream_autoptr = [*c]GFilterInputStream;
pub const GFilterInputStream_listautoptr = [*c]GList;
pub const GFilterInputStream_slistautoptr = [*c]GSList;
pub const GFilterInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFilterInputStream(arg__ptr: [*c]GFilterInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFilterInputStream(arg__ptr: [*c][*c]GFilterInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFilterInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFilterInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFilterInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFilterInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GFilterOutputStream_autoptr = [*c]GFilterOutputStream;
pub const GFilterOutputStream_listautoptr = [*c]GList;
pub const GFilterOutputStream_slistautoptr = [*c]GSList;
pub const GFilterOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GFilterOutputStream(arg__ptr: [*c]GFilterOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GFilterOutputStream(arg__ptr: [*c][*c]GFilterOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GFilterOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GFilterOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GFilterOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GFilterOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GIcon_autoptr = ?*GIcon;
pub const GIcon_listautoptr = [*c]GList;
pub const GIcon_slistautoptr = [*c]GSList;
pub const GIcon_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GIcon(arg__ptr: ?*GIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GIcon(arg__ptr: [*c]?*GIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GIcon(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GIcon(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GIcon(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GIcon(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GInetAddress_autoptr = [*c]GInetAddress;
pub const GInetAddress_listautoptr = [*c]GList;
pub const GInetAddress_slistautoptr = [*c]GSList;
pub const GInetAddress_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GInetAddress(arg__ptr: [*c]GInetAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GInetAddress(arg__ptr: [*c][*c]GInetAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GInetAddress(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GInetAddress(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GInetAddress(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GInetAddress(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GInetAddressMask_autoptr = [*c]GInetAddressMask;
pub const GInetAddressMask_listautoptr = [*c]GList;
pub const GInetAddressMask_slistautoptr = [*c]GSList;
pub const GInetAddressMask_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GInetAddressMask(arg__ptr: [*c]GInetAddressMask) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GInetAddressMask(arg__ptr: [*c][*c]GInetAddressMask) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GInetAddressMask(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GInetAddressMask(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GInetAddressMask(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GInetAddressMask(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GInetSocketAddress_autoptr = [*c]GInetSocketAddress;
pub const GInetSocketAddress_listautoptr = [*c]GList;
pub const GInetSocketAddress_slistautoptr = [*c]GSList;
pub const GInetSocketAddress_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GInetSocketAddress(arg__ptr: [*c]GInetSocketAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GInetSocketAddress(arg__ptr: [*c][*c]GInetSocketAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GInetSocketAddress(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GInetSocketAddress(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GInetSocketAddress(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GInetSocketAddress(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GInitable_autoptr = ?*GInitable;
pub const GInitable_listautoptr = [*c]GList;
pub const GInitable_slistautoptr = [*c]GSList;
pub const GInitable_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GInitable(arg__ptr: ?*GInitable) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GInitable(arg__ptr: [*c]?*GInitable) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GInitable(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GInitable(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GInitable(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GInitable(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GInputStream_autoptr = [*c]GInputStream;
pub const GInputStream_listautoptr = [*c]GList;
pub const GInputStream_slistautoptr = [*c]GSList;
pub const GInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GInputStream(arg__ptr: [*c]GInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GInputStream(arg__ptr: [*c][*c]GInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GIOModule_autoptr = ?*GIOModule;
pub const GIOModule_listautoptr = [*c]GList;
pub const GIOModule_slistautoptr = [*c]GSList;
pub const GIOModule_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GIOModule(arg__ptr: ?*GIOModule) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GIOModule(arg__ptr: [*c]?*GIOModule) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GIOModule(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GIOModule(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GIOModule(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GIOModule(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GIOStream_autoptr = [*c]GIOStream;
pub const GIOStream_listautoptr = [*c]GList;
pub const GIOStream_slistautoptr = [*c]GSList;
pub const GIOStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GIOStream(arg__ptr: [*c]GIOStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GIOStream(arg__ptr: [*c][*c]GIOStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GIOStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GIOStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GIOStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GIOStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GLoadableIcon_autoptr = ?*GLoadableIcon;
pub const GLoadableIcon_listautoptr = [*c]GList;
pub const GLoadableIcon_slistautoptr = [*c]GSList;
pub const GLoadableIcon_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GLoadableIcon(arg__ptr: ?*GLoadableIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GLoadableIcon(arg__ptr: [*c]?*GLoadableIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GLoadableIcon(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GLoadableIcon(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GLoadableIcon(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GLoadableIcon(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMemoryInputStream_autoptr = [*c]GMemoryInputStream;
pub const GMemoryInputStream_listautoptr = [*c]GList;
pub const GMemoryInputStream_slistautoptr = [*c]GSList;
pub const GMemoryInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMemoryInputStream(arg__ptr: [*c]GMemoryInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMemoryInputStream(arg__ptr: [*c][*c]GMemoryInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMemoryInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMemoryInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMemoryInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMemoryInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMemoryOutputStream_autoptr = [*c]GMemoryOutputStream;
pub const GMemoryOutputStream_listautoptr = [*c]GList;
pub const GMemoryOutputStream_slistautoptr = [*c]GSList;
pub const GMemoryOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMemoryOutputStream(arg__ptr: [*c]GMemoryOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMemoryOutputStream(arg__ptr: [*c][*c]GMemoryOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMemoryOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMemoryOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMemoryOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMemoryOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMenu_autoptr = ?*GMenu;
pub const GMenu_listautoptr = [*c]GList;
pub const GMenu_slistautoptr = [*c]GSList;
pub const GMenu_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMenu(arg__ptr: ?*GMenu) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMenu(arg__ptr: [*c]?*GMenu) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMenu(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMenu(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMenu(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMenu(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMenuItem_autoptr = ?*GMenuItem;
pub const GMenuItem_listautoptr = [*c]GList;
pub const GMenuItem_slistautoptr = [*c]GSList;
pub const GMenuItem_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMenuItem(arg__ptr: ?*GMenuItem) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMenuItem(arg__ptr: [*c]?*GMenuItem) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMenuItem(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMenuItem(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMenuItem(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMenuItem(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMenuModel_autoptr = [*c]GMenuModel;
pub const GMenuModel_listautoptr = [*c]GList;
pub const GMenuModel_slistautoptr = [*c]GSList;
pub const GMenuModel_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMenuModel(arg__ptr: [*c]GMenuModel) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMenuModel(arg__ptr: [*c][*c]GMenuModel) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMenuModel(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMenuModel(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMenuModel(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMenuModel(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMenuAttributeIter_autoptr = [*c]GMenuAttributeIter;
pub const GMenuAttributeIter_listautoptr = [*c]GList;
pub const GMenuAttributeIter_slistautoptr = [*c]GSList;
pub const GMenuAttributeIter_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMenuAttributeIter(arg__ptr: [*c]GMenuAttributeIter) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMenuAttributeIter(arg__ptr: [*c][*c]GMenuAttributeIter) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMenuAttributeIter(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMenuAttributeIter(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMenuAttributeIter(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMenuAttributeIter(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMenuLinkIter_autoptr = [*c]GMenuLinkIter;
pub const GMenuLinkIter_listautoptr = [*c]GList;
pub const GMenuLinkIter_slistautoptr = [*c]GSList;
pub const GMenuLinkIter_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMenuLinkIter(arg__ptr: [*c]GMenuLinkIter) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMenuLinkIter(arg__ptr: [*c][*c]GMenuLinkIter) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMenuLinkIter(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMenuLinkIter(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMenuLinkIter(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMenuLinkIter(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMount_autoptr = ?*GMount;
pub const GMount_listautoptr = [*c]GList;
pub const GMount_slistautoptr = [*c]GSList;
pub const GMount_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMount(arg__ptr: ?*GMount) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMount(arg__ptr: [*c]?*GMount) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMount(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMount(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMount(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMount(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GMountOperation_autoptr = [*c]GMountOperation;
pub const GMountOperation_listautoptr = [*c]GList;
pub const GMountOperation_slistautoptr = [*c]GSList;
pub const GMountOperation_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GMountOperation(arg__ptr: [*c]GMountOperation) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GMountOperation(arg__ptr: [*c][*c]GMountOperation) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GMountOperation(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GMountOperation(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GMountOperation(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GMountOperation(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GNativeVolumeMonitor_autoptr = [*c]GNativeVolumeMonitor;
pub const GNativeVolumeMonitor_listautoptr = [*c]GList;
pub const GNativeVolumeMonitor_slistautoptr = [*c]GSList;
pub const GNativeVolumeMonitor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GNativeVolumeMonitor(arg__ptr: [*c]GNativeVolumeMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GNativeVolumeMonitor(arg__ptr: [*c][*c]GNativeVolumeMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GNativeVolumeMonitor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GNativeVolumeMonitor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GNativeVolumeMonitor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GNativeVolumeMonitor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GNetworkAddress_autoptr = [*c]GNetworkAddress;
pub const GNetworkAddress_listautoptr = [*c]GList;
pub const GNetworkAddress_slistautoptr = [*c]GSList;
pub const GNetworkAddress_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GNetworkAddress(arg__ptr: [*c]GNetworkAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GNetworkAddress(arg__ptr: [*c][*c]GNetworkAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GNetworkAddress(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GNetworkAddress(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GNetworkAddress(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GNetworkAddress(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GNetworkMonitor_autoptr = ?*GNetworkMonitor;
pub const GNetworkMonitor_listautoptr = [*c]GList;
pub const GNetworkMonitor_slistautoptr = [*c]GSList;
pub const GNetworkMonitor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GNetworkMonitor(arg__ptr: ?*GNetworkMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GNetworkMonitor(arg__ptr: [*c]?*GNetworkMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GNetworkMonitor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GNetworkMonitor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GNetworkMonitor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GNetworkMonitor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GNetworkService_autoptr = [*c]GNetworkService;
pub const GNetworkService_listautoptr = [*c]GList;
pub const GNetworkService_slistautoptr = [*c]GSList;
pub const GNetworkService_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GNetworkService(arg__ptr: [*c]GNetworkService) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GNetworkService(arg__ptr: [*c][*c]GNetworkService) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GNetworkService(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GNetworkService(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GNetworkService(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GNetworkService(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GNotification_autoptr = ?*GNotification;
pub const GNotification_listautoptr = [*c]GList;
pub const GNotification_slistautoptr = [*c]GSList;
pub const GNotification_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GNotification(arg__ptr: ?*GNotification) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GNotification(arg__ptr: [*c]?*GNotification) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GNotification(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GNotification(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GNotification(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GNotification(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GOutputStream_autoptr = [*c]GOutputStream;
pub const GOutputStream_listautoptr = [*c]GList;
pub const GOutputStream_slistautoptr = [*c]GSList;
pub const GOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GOutputStream(arg__ptr: [*c]GOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GOutputStream(arg__ptr: [*c][*c]GOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GPermission_autoptr = [*c]GPermission;
pub const GPermission_listautoptr = [*c]GList;
pub const GPermission_slistautoptr = [*c]GSList;
pub const GPermission_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GPermission(arg__ptr: [*c]GPermission) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GPermission(arg__ptr: [*c][*c]GPermission) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GPermission(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GPermission(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GPermission(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GPermission(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GPollableInputStream_autoptr = ?*GPollableInputStream;
pub const GPollableInputStream_listautoptr = [*c]GList;
pub const GPollableInputStream_slistautoptr = [*c]GSList;
pub const GPollableInputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GPollableInputStream(arg__ptr: ?*GPollableInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GPollableInputStream(arg__ptr: [*c]?*GPollableInputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GPollableInputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GPollableInputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GPollableInputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GPollableInputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GPollableOutputStream_autoptr = ?*GPollableOutputStream;
pub const GPollableOutputStream_listautoptr = [*c]GList;
pub const GPollableOutputStream_slistautoptr = [*c]GSList;
pub const GPollableOutputStream_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GPollableOutputStream(arg__ptr: ?*GPollableOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GPollableOutputStream(arg__ptr: [*c]?*GPollableOutputStream) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GPollableOutputStream(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GPollableOutputStream(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GPollableOutputStream(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GPollableOutputStream(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GPropertyAction_autoptr = ?*GPropertyAction;
pub const GPropertyAction_listautoptr = [*c]GList;
pub const GPropertyAction_slistautoptr = [*c]GSList;
pub const GPropertyAction_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GPropertyAction(arg__ptr: ?*GPropertyAction) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GPropertyAction(arg__ptr: [*c]?*GPropertyAction) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GPropertyAction(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GPropertyAction(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GPropertyAction(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GPropertyAction(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GProxyAddressEnumerator_autoptr = [*c]GProxyAddressEnumerator;
pub const GProxyAddressEnumerator_listautoptr = [*c]GList;
pub const GProxyAddressEnumerator_slistautoptr = [*c]GSList;
pub const GProxyAddressEnumerator_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GProxyAddressEnumerator(arg__ptr: [*c]GProxyAddressEnumerator) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GProxyAddressEnumerator(arg__ptr: [*c][*c]GProxyAddressEnumerator) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GProxyAddressEnumerator(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GProxyAddressEnumerator(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GProxyAddressEnumerator(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GProxyAddressEnumerator(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GProxyAddress_autoptr = [*c]GProxyAddress;
pub const GProxyAddress_listautoptr = [*c]GList;
pub const GProxyAddress_slistautoptr = [*c]GSList;
pub const GProxyAddress_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GProxyAddress(arg__ptr: [*c]GProxyAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GProxyAddress(arg__ptr: [*c][*c]GProxyAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GProxyAddress(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GProxyAddress(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GProxyAddress(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GProxyAddress(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GProxy_autoptr = ?*GProxy;
pub const GProxy_listautoptr = [*c]GList;
pub const GProxy_slistautoptr = [*c]GSList;
pub const GProxy_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GProxy(arg__ptr: ?*GProxy) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GProxy(arg__ptr: [*c]?*GProxy) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GProxy(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GProxy(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GProxy(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GProxy(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GProxyResolver_autoptr = ?*GProxyResolver;
pub const GProxyResolver_listautoptr = [*c]GList;
pub const GProxyResolver_slistautoptr = [*c]GSList;
pub const GProxyResolver_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GProxyResolver(arg__ptr: ?*GProxyResolver) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GProxyResolver(arg__ptr: [*c]?*GProxyResolver) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GProxyResolver(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GProxyResolver(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GProxyResolver(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GProxyResolver(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GRemoteActionGroup_autoptr = ?*GRemoteActionGroup;
pub const GRemoteActionGroup_listautoptr = [*c]GList;
pub const GRemoteActionGroup_slistautoptr = [*c]GSList;
pub const GRemoteActionGroup_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GRemoteActionGroup(arg__ptr: ?*GRemoteActionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GRemoteActionGroup(arg__ptr: [*c]?*GRemoteActionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GRemoteActionGroup(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GRemoteActionGroup(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GRemoteActionGroup(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GRemoteActionGroup(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GResolver_autoptr = [*c]GResolver;
pub const GResolver_listautoptr = [*c]GList;
pub const GResolver_slistautoptr = [*c]GSList;
pub const GResolver_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GResolver(arg__ptr: [*c]GResolver) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GResolver(arg__ptr: [*c][*c]GResolver) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GResolver(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GResolver(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GResolver(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GResolver(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GResource_autoptr = ?*GResource;
pub const GResource_listautoptr = [*c]GList;
pub const GResource_slistautoptr = [*c]GSList;
pub const GResource_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GResource(arg__ptr: ?*GResource) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_resource_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GResource(arg__ptr: [*c]?*GResource) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GResource(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GResource(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_resource_unref)))));
}
pub fn glib_slistautoptr_cleanup_GResource(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_resource_unref)))));
}
pub fn glib_queueautoptr_cleanup_GResource(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_resource_unref)))));
    }
}
pub const GSeekable_autoptr = ?*GSeekable;
pub const GSeekable_listautoptr = [*c]GList;
pub const GSeekable_slistautoptr = [*c]GSList;
pub const GSeekable_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSeekable(arg__ptr: ?*GSeekable) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSeekable(arg__ptr: [*c]?*GSeekable) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSeekable(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSeekable(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSeekable(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSeekable(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSettingsBackend_autoptr = ?*GSettingsBackend;
pub const GSettingsBackend_listautoptr = [*c]GList;
pub const GSettingsBackend_slistautoptr = [*c]GSList;
pub const GSettingsBackend_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSettingsBackend(arg__ptr: ?*GSettingsBackend) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSettingsBackend(arg__ptr: [*c]?*GSettingsBackend) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSettingsBackend(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSettingsBackend(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSettingsBackend(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSettingsBackend(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSettingsSchema_autoptr = ?*GSettingsSchema;
pub const GSettingsSchema_listautoptr = [*c]GList;
pub const GSettingsSchema_slistautoptr = [*c]GSList;
pub const GSettingsSchema_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSettingsSchema(arg__ptr: ?*GSettingsSchema) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_settings_schema_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GSettingsSchema(arg__ptr: [*c]?*GSettingsSchema) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSettingsSchema(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSettingsSchema(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSettingsSchema(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSettingsSchema(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_unref)))));
    }
}
pub const GSettingsSchemaKey_autoptr = ?*GSettingsSchemaKey;
pub const GSettingsSchemaKey_listautoptr = [*c]GList;
pub const GSettingsSchemaKey_slistautoptr = [*c]GSList;
pub const GSettingsSchemaKey_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSettingsSchemaKey(arg__ptr: ?*GSettingsSchemaKey) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_settings_schema_key_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GSettingsSchemaKey(arg__ptr: [*c]?*GSettingsSchemaKey) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSettingsSchemaKey(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSettingsSchemaKey(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_key_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSettingsSchemaKey(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_key_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSettingsSchemaKey(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_key_unref)))));
    }
}
pub const GSettingsSchemaSource_autoptr = ?*GSettingsSchemaSource;
pub const GSettingsSchemaSource_listautoptr = [*c]GList;
pub const GSettingsSchemaSource_slistautoptr = [*c]GSList;
pub const GSettingsSchemaSource_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSettingsSchemaSource(arg__ptr: ?*GSettingsSchemaSource) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_settings_schema_source_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_GSettingsSchemaSource(arg__ptr: [*c]?*GSettingsSchemaSource) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSettingsSchemaSource(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSettingsSchemaSource(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_source_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSettingsSchemaSource(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_source_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSettingsSchemaSource(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_settings_schema_source_unref)))));
    }
}
pub const GSettings_autoptr = [*c]GSettings;
pub const GSettings_listautoptr = [*c]GList;
pub const GSettings_slistautoptr = [*c]GSList;
pub const GSettings_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSettings(arg__ptr: [*c]GSettings) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSettings(arg__ptr: [*c][*c]GSettings) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSettings(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSettings(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSettings(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSettings(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSimpleActionGroup_autoptr = [*c]GSimpleActionGroup;
pub const GSimpleActionGroup_listautoptr = [*c]GList;
pub const GSimpleActionGroup_slistautoptr = [*c]GSList;
pub const GSimpleActionGroup_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSimpleActionGroup(arg__ptr: [*c]GSimpleActionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSimpleActionGroup(arg__ptr: [*c][*c]GSimpleActionGroup) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSimpleActionGroup(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSimpleActionGroup(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSimpleActionGroup(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSimpleActionGroup(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSimpleAction_autoptr = ?*GSimpleAction;
pub const GSimpleAction_listautoptr = [*c]GList;
pub const GSimpleAction_slistautoptr = [*c]GSList;
pub const GSimpleAction_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSimpleAction(arg__ptr: ?*GSimpleAction) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSimpleAction(arg__ptr: [*c]?*GSimpleAction) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSimpleAction(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSimpleAction(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSimpleAction(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSimpleAction(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSimpleAsyncResult_autoptr = ?*GSimpleAsyncResult;
pub const GSimpleAsyncResult_listautoptr = [*c]GList;
pub const GSimpleAsyncResult_slistautoptr = [*c]GSList;
pub const GSimpleAsyncResult_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSimpleAsyncResult(arg__ptr: ?*GSimpleAsyncResult) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSimpleAsyncResult(arg__ptr: [*c]?*GSimpleAsyncResult) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSimpleAsyncResult(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSimpleAsyncResult(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSimpleAsyncResult(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSimpleAsyncResult(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSimplePermission_autoptr = ?*GSimplePermission;
pub const GSimplePermission_listautoptr = [*c]GList;
pub const GSimplePermission_slistautoptr = [*c]GSList;
pub const GSimplePermission_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSimplePermission(arg__ptr: ?*GSimplePermission) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSimplePermission(arg__ptr: [*c]?*GSimplePermission) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSimplePermission(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSimplePermission(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSimplePermission(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSimplePermission(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSimpleProxyResolver_autoptr = [*c]GSimpleProxyResolver;
pub const GSimpleProxyResolver_listautoptr = [*c]GList;
pub const GSimpleProxyResolver_slistautoptr = [*c]GSList;
pub const GSimpleProxyResolver_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSimpleProxyResolver(arg__ptr: [*c]GSimpleProxyResolver) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSimpleProxyResolver(arg__ptr: [*c][*c]GSimpleProxyResolver) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSimpleProxyResolver(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSimpleProxyResolver(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSimpleProxyResolver(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSimpleProxyResolver(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketAddressEnumerator_autoptr = [*c]GSocketAddressEnumerator;
pub const GSocketAddressEnumerator_listautoptr = [*c]GList;
pub const GSocketAddressEnumerator_slistautoptr = [*c]GSList;
pub const GSocketAddressEnumerator_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketAddressEnumerator(arg__ptr: [*c]GSocketAddressEnumerator) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketAddressEnumerator(arg__ptr: [*c][*c]GSocketAddressEnumerator) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketAddressEnumerator(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketAddressEnumerator(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketAddressEnumerator(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketAddressEnumerator(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketAddress_autoptr = [*c]GSocketAddress;
pub const GSocketAddress_listautoptr = [*c]GList;
pub const GSocketAddress_slistautoptr = [*c]GSList;
pub const GSocketAddress_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketAddress(arg__ptr: [*c]GSocketAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketAddress(arg__ptr: [*c][*c]GSocketAddress) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketAddress(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketAddress(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketAddress(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketAddress(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketClient_autoptr = [*c]GSocketClient;
pub const GSocketClient_listautoptr = [*c]GList;
pub const GSocketClient_slistautoptr = [*c]GSList;
pub const GSocketClient_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketClient(arg__ptr: [*c]GSocketClient) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketClient(arg__ptr: [*c][*c]GSocketClient) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketClient(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketClient(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketClient(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketClient(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketConnectable_autoptr = ?*GSocketConnectable;
pub const GSocketConnectable_listautoptr = [*c]GList;
pub const GSocketConnectable_slistautoptr = [*c]GSList;
pub const GSocketConnectable_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketConnectable(arg__ptr: ?*GSocketConnectable) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketConnectable(arg__ptr: [*c]?*GSocketConnectable) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketConnectable(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketConnectable(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketConnectable(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketConnectable(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketConnection_autoptr = [*c]GSocketConnection;
pub const GSocketConnection_listautoptr = [*c]GList;
pub const GSocketConnection_slistautoptr = [*c]GSList;
pub const GSocketConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketConnection(arg__ptr: [*c]GSocketConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketConnection(arg__ptr: [*c][*c]GSocketConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketControlMessage_autoptr = [*c]GSocketControlMessage;
pub const GSocketControlMessage_listautoptr = [*c]GList;
pub const GSocketControlMessage_slistautoptr = [*c]GSList;
pub const GSocketControlMessage_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketControlMessage(arg__ptr: [*c]GSocketControlMessage) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketControlMessage(arg__ptr: [*c][*c]GSocketControlMessage) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketControlMessage(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketControlMessage(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketControlMessage(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketControlMessage(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocket_autoptr = [*c]GSocket;
pub const GSocket_listautoptr = [*c]GList;
pub const GSocket_slistautoptr = [*c]GSList;
pub const GSocket_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocket(arg__ptr: [*c]GSocket) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocket(arg__ptr: [*c][*c]GSocket) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocket(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocket(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocket(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocket(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketListener_autoptr = [*c]GSocketListener;
pub const GSocketListener_listautoptr = [*c]GList;
pub const GSocketListener_slistautoptr = [*c]GSList;
pub const GSocketListener_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketListener(arg__ptr: [*c]GSocketListener) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketListener(arg__ptr: [*c][*c]GSocketListener) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketListener(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketListener(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketListener(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketListener(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSocketService_autoptr = [*c]GSocketService;
pub const GSocketService_listautoptr = [*c]GList;
pub const GSocketService_slistautoptr = [*c]GSList;
pub const GSocketService_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSocketService(arg__ptr: [*c]GSocketService) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSocketService(arg__ptr: [*c][*c]GSocketService) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSocketService(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSocketService(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSocketService(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSocketService(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSubprocess_autoptr = ?*GSubprocess;
pub const GSubprocess_listautoptr = [*c]GList;
pub const GSubprocess_slistautoptr = [*c]GSList;
pub const GSubprocess_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSubprocess(arg__ptr: ?*GSubprocess) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSubprocess(arg__ptr: [*c]?*GSubprocess) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSubprocess(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSubprocess(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSubprocess(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSubprocess(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GSubprocessLauncher_autoptr = ?*GSubprocessLauncher;
pub const GSubprocessLauncher_listautoptr = [*c]GList;
pub const GSubprocessLauncher_slistautoptr = [*c]GSList;
pub const GSubprocessLauncher_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GSubprocessLauncher(arg__ptr: ?*GSubprocessLauncher) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GSubprocessLauncher(arg__ptr: [*c]?*GSubprocessLauncher) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GSubprocessLauncher(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GSubprocessLauncher(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GSubprocessLauncher(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GSubprocessLauncher(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTask_autoptr = ?*GTask;
pub const GTask_listautoptr = [*c]GList;
pub const GTask_slistautoptr = [*c]GSList;
pub const GTask_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTask(arg__ptr: ?*GTask) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTask(arg__ptr: [*c]?*GTask) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTask(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTask(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTask(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTask(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTcpConnection_autoptr = [*c]GTcpConnection;
pub const GTcpConnection_listautoptr = [*c]GList;
pub const GTcpConnection_slistautoptr = [*c]GSList;
pub const GTcpConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTcpConnection(arg__ptr: [*c]GTcpConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTcpConnection(arg__ptr: [*c][*c]GTcpConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTcpConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTcpConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTcpConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTcpConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTcpWrapperConnection_autoptr = [*c]GTcpWrapperConnection;
pub const GTcpWrapperConnection_listautoptr = [*c]GList;
pub const GTcpWrapperConnection_slistautoptr = [*c]GSList;
pub const GTcpWrapperConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTcpWrapperConnection(arg__ptr: [*c]GTcpWrapperConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTcpWrapperConnection(arg__ptr: [*c][*c]GTcpWrapperConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTcpWrapperConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTcpWrapperConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTcpWrapperConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTcpWrapperConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTestDBus_autoptr = ?*GTestDBus;
pub const GTestDBus_listautoptr = [*c]GList;
pub const GTestDBus_slistautoptr = [*c]GSList;
pub const GTestDBus_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTestDBus(arg__ptr: ?*GTestDBus) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTestDBus(arg__ptr: [*c]?*GTestDBus) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTestDBus(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTestDBus(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTestDBus(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTestDBus(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GThemedIcon_autoptr = ?*GThemedIcon;
pub const GThemedIcon_listautoptr = [*c]GList;
pub const GThemedIcon_slistautoptr = [*c]GSList;
pub const GThemedIcon_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GThemedIcon(arg__ptr: ?*GThemedIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GThemedIcon(arg__ptr: [*c]?*GThemedIcon) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GThemedIcon(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GThemedIcon(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GThemedIcon(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GThemedIcon(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GThreadedSocketService_autoptr = [*c]GThreadedSocketService;
pub const GThreadedSocketService_listautoptr = [*c]GList;
pub const GThreadedSocketService_slistautoptr = [*c]GSList;
pub const GThreadedSocketService_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GThreadedSocketService(arg__ptr: [*c]GThreadedSocketService) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GThreadedSocketService(arg__ptr: [*c][*c]GThreadedSocketService) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GThreadedSocketService(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GThreadedSocketService(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GThreadedSocketService(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GThreadedSocketService(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsBackend_autoptr = ?*GTlsBackend;
pub const GTlsBackend_listautoptr = [*c]GList;
pub const GTlsBackend_slistautoptr = [*c]GSList;
pub const GTlsBackend_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsBackend(arg__ptr: ?*GTlsBackend) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsBackend(arg__ptr: [*c]?*GTlsBackend) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsBackend(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsBackend(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsBackend(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsBackend(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsCertificate_autoptr = [*c]GTlsCertificate;
pub const GTlsCertificate_listautoptr = [*c]GList;
pub const GTlsCertificate_slistautoptr = [*c]GSList;
pub const GTlsCertificate_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsCertificate(arg__ptr: [*c]GTlsCertificate) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsCertificate(arg__ptr: [*c][*c]GTlsCertificate) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsCertificate(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsCertificate(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsCertificate(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsCertificate(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsClientConnection_autoptr = ?*GTlsClientConnection;
pub const GTlsClientConnection_listautoptr = [*c]GList;
pub const GTlsClientConnection_slistautoptr = [*c]GSList;
pub const GTlsClientConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsClientConnection(arg__ptr: ?*GTlsClientConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsClientConnection(arg__ptr: [*c]?*GTlsClientConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsClientConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsClientConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsClientConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsClientConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsConnection_autoptr = [*c]GTlsConnection;
pub const GTlsConnection_listautoptr = [*c]GList;
pub const GTlsConnection_slistautoptr = [*c]GSList;
pub const GTlsConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsConnection(arg__ptr: [*c]GTlsConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsConnection(arg__ptr: [*c][*c]GTlsConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsDatabase_autoptr = [*c]GTlsDatabase;
pub const GTlsDatabase_listautoptr = [*c]GList;
pub const GTlsDatabase_slistautoptr = [*c]GSList;
pub const GTlsDatabase_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsDatabase(arg__ptr: [*c]GTlsDatabase) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsDatabase(arg__ptr: [*c][*c]GTlsDatabase) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsDatabase(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsDatabase(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsDatabase(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsDatabase(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsFileDatabase_autoptr = ?*GTlsFileDatabase;
pub const GTlsFileDatabase_listautoptr = [*c]GList;
pub const GTlsFileDatabase_slistautoptr = [*c]GSList;
pub const GTlsFileDatabase_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsFileDatabase(arg__ptr: ?*GTlsFileDatabase) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsFileDatabase(arg__ptr: [*c]?*GTlsFileDatabase) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsFileDatabase(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsFileDatabase(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsFileDatabase(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsFileDatabase(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsInteraction_autoptr = [*c]GTlsInteraction;
pub const GTlsInteraction_listautoptr = [*c]GList;
pub const GTlsInteraction_slistautoptr = [*c]GSList;
pub const GTlsInteraction_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsInteraction(arg__ptr: [*c]GTlsInteraction) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsInteraction(arg__ptr: [*c][*c]GTlsInteraction) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsInteraction(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsInteraction(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsInteraction(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsInteraction(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsPassword_autoptr = [*c]GTlsPassword;
pub const GTlsPassword_listautoptr = [*c]GList;
pub const GTlsPassword_slistautoptr = [*c]GSList;
pub const GTlsPassword_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsPassword(arg__ptr: [*c]GTlsPassword) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsPassword(arg__ptr: [*c][*c]GTlsPassword) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsPassword(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsPassword(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsPassword(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsPassword(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GTlsServerConnection_autoptr = ?*GTlsServerConnection;
pub const GTlsServerConnection_listautoptr = [*c]GList;
pub const GTlsServerConnection_slistautoptr = [*c]GSList;
pub const GTlsServerConnection_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GTlsServerConnection(arg__ptr: ?*GTlsServerConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GTlsServerConnection(arg__ptr: [*c]?*GTlsServerConnection) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GTlsServerConnection(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GTlsServerConnection(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GTlsServerConnection(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GTlsServerConnection(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GVfs_autoptr = [*c]GVfs;
pub const GVfs_listautoptr = [*c]GList;
pub const GVfs_slistautoptr = [*c]GSList;
pub const GVfs_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVfs(arg__ptr: [*c]GVfs) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GVfs(arg__ptr: [*c][*c]GVfs) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVfs(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVfs(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GVfs(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GVfs(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GVolume_autoptr = ?*GVolume;
pub const GVolume_listautoptr = [*c]GList;
pub const GVolume_slistautoptr = [*c]GSList;
pub const GVolume_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVolume(arg__ptr: ?*GVolume) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GVolume(arg__ptr: [*c]?*GVolume) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVolume(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVolume(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GVolume(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GVolume(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GVolumeMonitor_autoptr = [*c]GVolumeMonitor;
pub const GVolumeMonitor_listautoptr = [*c]GList;
pub const GVolumeMonitor_slistautoptr = [*c]GSList;
pub const GVolumeMonitor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GVolumeMonitor(arg__ptr: [*c]GVolumeMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GVolumeMonitor(arg__ptr: [*c][*c]GVolumeMonitor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GVolumeMonitor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GVolumeMonitor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GVolumeMonitor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GVolumeMonitor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GZlibCompressor_autoptr = ?*GZlibCompressor;
pub const GZlibCompressor_listautoptr = [*c]GList;
pub const GZlibCompressor_slistautoptr = [*c]GSList;
pub const GZlibCompressor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GZlibCompressor(arg__ptr: ?*GZlibCompressor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GZlibCompressor(arg__ptr: [*c]?*GZlibCompressor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GZlibCompressor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GZlibCompressor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GZlibCompressor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GZlibCompressor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const GZlibDecompressor_autoptr = ?*GZlibDecompressor;
pub const GZlibDecompressor_listautoptr = [*c]GList;
pub const GZlibDecompressor_slistautoptr = [*c]GSList;
pub const GZlibDecompressor_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_GZlibDecompressor(arg__ptr: ?*GZlibDecompressor) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_GZlibDecompressor(arg__ptr: [*c]?*GZlibDecompressor) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_GZlibDecompressor(_ptr.*);
}
pub fn glib_listautoptr_cleanup_GZlibDecompressor(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_GZlibDecompressor(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_GZlibDecompressor(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub extern fn _frida_gio_init() void;
pub extern fn _frida_gio_shutdown() void;
pub extern fn _frida_gio_deinit() void;
pub extern fn _frida_gio_prepare_to_fork() void;
pub extern fn _frida_gio_recover_from_fork_in_parent() void;
pub extern fn _frida_gio_recover_from_fork_in_child() void;
pub const struct__JsonNode = opaque {};
pub const JsonNode = struct__JsonNode;
pub const struct__JsonObject = opaque {};
pub const JsonObject = struct__JsonObject;
pub const struct__JsonArray = opaque {};
pub const JsonArray = struct__JsonArray;
pub const JSON_NODE_OBJECT: c_int = 0;
pub const JSON_NODE_ARRAY: c_int = 1;
pub const JSON_NODE_VALUE: c_int = 2;
pub const JSON_NODE_NULL: c_int = 3;
pub const JsonNodeType = c_uint;
pub const JsonObjectForeach = ?*const fn (?*JsonObject, [*c]const gchar, ?*JsonNode, gpointer) callconv(.C) void;
pub const JsonArrayForeach = ?*const fn (?*JsonArray, guint, ?*JsonNode, gpointer) callconv(.C) void;
pub extern fn _frida_json_node_get_type() GType;
pub extern fn _frida_json_node_new(@"type": JsonNodeType) ?*JsonNode;
pub extern fn _frida_json_node_alloc() ?*JsonNode;
pub extern fn _frida_json_node_init(node: ?*JsonNode, @"type": JsonNodeType) ?*JsonNode;
pub extern fn _frida_json_node_init_object(node: ?*JsonNode, object: ?*JsonObject) ?*JsonNode;
pub extern fn _frida_json_node_init_array(node: ?*JsonNode, array: ?*JsonArray) ?*JsonNode;
pub extern fn _frida_json_node_init_int(node: ?*JsonNode, value: gint64) ?*JsonNode;
pub extern fn _frida_json_node_init_double(node: ?*JsonNode, value: gdouble) ?*JsonNode;
pub extern fn _frida_json_node_init_boolean(node: ?*JsonNode, value: gboolean) ?*JsonNode;
pub extern fn _frida_json_node_init_string(node: ?*JsonNode, value: [*c]const u8) ?*JsonNode;
pub extern fn _frida_json_node_init_null(node: ?*JsonNode) ?*JsonNode;
pub extern fn _frida_json_node_copy(node: ?*JsonNode) ?*JsonNode;
pub extern fn _frida_json_node_free(node: ?*JsonNode) void;
pub extern fn _frida_json_node_ref(node: ?*JsonNode) ?*JsonNode;
pub extern fn _frida_json_node_unref(node: ?*JsonNode) void;
pub extern fn _frida_json_node_get_node_type(node: ?*JsonNode) JsonNodeType;
pub extern fn _frida_json_node_get_value_type(node: ?*JsonNode) GType;
pub extern fn _frida_json_node_set_parent(node: ?*JsonNode, parent: ?*JsonNode) void;
pub extern fn _frida_json_node_get_parent(node: ?*JsonNode) ?*JsonNode;
pub extern fn _frida_json_node_type_name(node: ?*JsonNode) [*c]const gchar;
pub extern fn _frida_json_node_set_object(node: ?*JsonNode, object: ?*JsonObject) void;
pub extern fn _frida_json_node_take_object(node: ?*JsonNode, object: ?*JsonObject) void;
pub extern fn _frida_json_node_get_object(node: ?*JsonNode) ?*JsonObject;
pub extern fn _frida_json_node_dup_object(node: ?*JsonNode) ?*JsonObject;
pub extern fn _frida_json_node_set_array(node: ?*JsonNode, array: ?*JsonArray) void;
pub extern fn _frida_json_node_take_array(node: ?*JsonNode, array: ?*JsonArray) void;
pub extern fn _frida_json_node_get_array(node: ?*JsonNode) ?*JsonArray;
pub extern fn _frida_json_node_dup_array(node: ?*JsonNode) ?*JsonArray;
pub extern fn _frida_json_node_set_value(node: ?*JsonNode, value: [*c]const GValue) void;
pub extern fn _frida_json_node_get_value(node: ?*JsonNode, value: [*c]GValue) void;
pub extern fn _frida_json_node_set_string(node: ?*JsonNode, value: [*c]const gchar) void;
pub extern fn _frida_json_node_get_string(node: ?*JsonNode) [*c]const gchar;
pub extern fn _frida_json_node_dup_string(node: ?*JsonNode) [*c]gchar;
pub extern fn _frida_json_node_set_int(node: ?*JsonNode, value: gint64) void;
pub extern fn _frida_json_node_get_int(node: ?*JsonNode) gint64;
pub extern fn _frida_json_node_set_double(node: ?*JsonNode, value: gdouble) void;
pub extern fn _frida_json_node_get_double(node: ?*JsonNode) gdouble;
pub extern fn _frida_json_node_set_boolean(node: ?*JsonNode, value: gboolean) void;
pub extern fn _frida_json_node_get_boolean(node: ?*JsonNode) gboolean;
pub extern fn _frida_json_node_is_null(node: ?*JsonNode) gboolean;
pub extern fn _frida_json_node_seal(node: ?*JsonNode) void;
pub extern fn _frida_json_node_is_immutable(node: ?*JsonNode) gboolean;
pub extern fn _frida_json_string_hash(key: gconstpointer) guint;
pub extern fn _frida_json_string_equal(a: gconstpointer, b: gconstpointer) gboolean;
pub extern fn _frida_json_string_compare(a: gconstpointer, b: gconstpointer) gint;
pub extern fn _frida_json_node_hash(key: gconstpointer) guint;
pub extern fn _frida_json_node_equal(a: gconstpointer, b: gconstpointer) gboolean;
pub extern fn _frida_json_object_get_type() GType;
pub extern fn _frida_json_object_new() ?*JsonObject;
pub extern fn _frida_json_object_ref(object: ?*JsonObject) ?*JsonObject;
pub extern fn _frida_json_object_unref(object: ?*JsonObject) void;
pub extern fn _frida_json_object_add_member(object: ?*JsonObject, member_name: [*c]const gchar, node: ?*JsonNode) void;
pub extern fn _frida_json_object_set_member(object: ?*JsonObject, member_name: [*c]const gchar, node: ?*JsonNode) void;
pub extern fn _frida_json_object_set_int_member(object: ?*JsonObject, member_name: [*c]const gchar, value: gint64) void;
pub extern fn _frida_json_object_set_double_member(object: ?*JsonObject, member_name: [*c]const gchar, value: gdouble) void;
pub extern fn _frida_json_object_set_boolean_member(object: ?*JsonObject, member_name: [*c]const gchar, value: gboolean) void;
pub extern fn _frida_json_object_set_string_member(object: ?*JsonObject, member_name: [*c]const gchar, value: [*c]const gchar) void;
pub extern fn _frida_json_object_set_null_member(object: ?*JsonObject, member_name: [*c]const gchar) void;
pub extern fn _frida_json_object_set_array_member(object: ?*JsonObject, member_name: [*c]const gchar, value: ?*JsonArray) void;
pub extern fn _frida_json_object_set_object_member(object: ?*JsonObject, member_name: [*c]const gchar, value: ?*JsonObject) void;
pub extern fn _frida_json_object_get_members(object: ?*JsonObject) [*c]GList;
pub extern fn _frida_json_object_get_member(object: ?*JsonObject, member_name: [*c]const gchar) ?*JsonNode;
pub extern fn _frida_json_object_dup_member(object: ?*JsonObject, member_name: [*c]const gchar) ?*JsonNode;
pub extern fn _frida_json_object_get_int_member(object: ?*JsonObject, member_name: [*c]const gchar) gint64;
pub extern fn _frida_json_object_get_int_member_with_default(object: ?*JsonObject, member_name: [*c]const u8, default_value: gint64) gint64;
pub extern fn _frida_json_object_get_double_member(object: ?*JsonObject, member_name: [*c]const gchar) gdouble;
pub extern fn _frida_json_object_get_double_member_with_default(object: ?*JsonObject, member_name: [*c]const u8, default_value: f64) f64;
pub extern fn _frida_json_object_get_boolean_member(object: ?*JsonObject, member_name: [*c]const gchar) gboolean;
pub extern fn _frida_json_object_get_boolean_member_with_default(object: ?*JsonObject, member_name: [*c]const u8, default_value: gboolean) gboolean;
pub extern fn _frida_json_object_get_string_member(object: ?*JsonObject, member_name: [*c]const gchar) [*c]const gchar;
pub extern fn _frida_json_object_get_string_member_with_default(object: ?*JsonObject, member_name: [*c]const u8, default_value: [*c]const u8) [*c]const u8;
pub extern fn _frida_json_object_get_null_member(object: ?*JsonObject, member_name: [*c]const gchar) gboolean;
pub extern fn _frida_json_object_get_array_member(object: ?*JsonObject, member_name: [*c]const gchar) ?*JsonArray;
pub extern fn _frida_json_object_get_object_member(object: ?*JsonObject, member_name: [*c]const gchar) ?*JsonObject;
pub extern fn _frida_json_object_has_member(object: ?*JsonObject, member_name: [*c]const gchar) gboolean;
pub extern fn _frida_json_object_remove_member(object: ?*JsonObject, member_name: [*c]const gchar) void;
pub extern fn _frida_json_object_get_values(object: ?*JsonObject) [*c]GList;
pub extern fn _frida_json_object_get_size(object: ?*JsonObject) guint;
pub extern fn _frida_json_object_foreach_member(object: ?*JsonObject, func: JsonObjectForeach, data: gpointer) void;
pub extern fn _frida_json_object_seal(object: ?*JsonObject) void;
pub extern fn _frida_json_object_is_immutable(object: ?*JsonObject) gboolean;
pub extern fn _frida_json_object_hash(key: gconstpointer) guint;
pub extern fn _frida_json_object_equal(a: gconstpointer, b: gconstpointer) gboolean;
pub const JsonObjectIter = extern struct {
    priv_pointer: [6]gpointer,
    priv_int: [2]c_int,
    priv_boolean: [1]gboolean,
};
pub extern fn _frida_json_object_iter_init(iter: [*c]JsonObjectIter, object: ?*JsonObject) void;
pub extern fn _frida_json_object_iter_next(iter: [*c]JsonObjectIter, member_name: [*c][*c]const gchar, member_node: [*c]?*JsonNode) gboolean;
pub extern fn _frida_json_object_iter_init_ordered(iter: [*c]JsonObjectIter, object: ?*JsonObject) void;
pub extern fn _frida_json_object_iter_next_ordered(iter: [*c]JsonObjectIter, member_name: [*c][*c]const u8, member_node: [*c]?*JsonNode) gboolean;
pub extern fn _frida_json_array_get_type() GType;
pub extern fn _frida_json_array_new() ?*JsonArray;
pub extern fn _frida_json_array_sized_new(n_elements: guint) ?*JsonArray;
pub extern fn _frida_json_array_ref(array: ?*JsonArray) ?*JsonArray;
pub extern fn _frida_json_array_unref(array: ?*JsonArray) void;
pub extern fn _frida_json_array_add_element(array: ?*JsonArray, node: ?*JsonNode) void;
pub extern fn _frida_json_array_add_int_element(array: ?*JsonArray, value: gint64) void;
pub extern fn _frida_json_array_add_double_element(array: ?*JsonArray, value: gdouble) void;
pub extern fn _frida_json_array_add_boolean_element(array: ?*JsonArray, value: gboolean) void;
pub extern fn _frida_json_array_add_string_element(array: ?*JsonArray, value: [*c]const gchar) void;
pub extern fn _frida_json_array_add_null_element(array: ?*JsonArray) void;
pub extern fn _frida_json_array_add_array_element(array: ?*JsonArray, value: ?*JsonArray) void;
pub extern fn _frida_json_array_add_object_element(array: ?*JsonArray, value: ?*JsonObject) void;
pub extern fn _frida_json_array_get_elements(array: ?*JsonArray) [*c]GList;
pub extern fn _frida_json_array_get_element(array: ?*JsonArray, index_: guint) ?*JsonNode;
pub extern fn _frida_json_array_get_int_element(array: ?*JsonArray, index_: guint) gint64;
pub extern fn _frida_json_array_get_double_element(array: ?*JsonArray, index_: guint) gdouble;
pub extern fn _frida_json_array_get_boolean_element(array: ?*JsonArray, index_: guint) gboolean;
pub extern fn _frida_json_array_get_string_element(array: ?*JsonArray, index_: guint) [*c]const gchar;
pub extern fn _frida_json_array_get_null_element(array: ?*JsonArray, index_: guint) gboolean;
pub extern fn _frida_json_array_get_array_element(array: ?*JsonArray, index_: guint) ?*JsonArray;
pub extern fn _frida_json_array_get_object_element(array: ?*JsonArray, index_: guint) ?*JsonObject;
pub extern fn _frida_json_array_dup_element(array: ?*JsonArray, index_: guint) ?*JsonNode;
pub extern fn _frida_json_array_remove_element(array: ?*JsonArray, index_: guint) void;
pub extern fn _frida_json_array_get_length(array: ?*JsonArray) guint;
pub extern fn _frida_json_array_foreach_element(array: ?*JsonArray, func: JsonArrayForeach, data: gpointer) void;
pub extern fn _frida_json_array_seal(array: ?*JsonArray) void;
pub extern fn _frida_json_array_is_immutable(array: ?*JsonArray) gboolean;
pub extern fn _frida_json_array_hash(key: gconstpointer) guint;
pub extern fn _frida_json_array_equal(a: gconstpointer, b: gconstpointer) gboolean;
pub const JsonArray_autoptr = ?*JsonArray;
pub const JsonArray_listautoptr = [*c]GList;
pub const JsonArray_slistautoptr = [*c]GSList;
pub const JsonArray_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonArray(arg__ptr: ?*JsonArray) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_json_array_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_JsonArray(arg__ptr: [*c]?*JsonArray) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonArray(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonArray(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_array_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonArray(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_array_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonArray(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_array_unref)))));
    }
}
pub const JsonObject_autoptr = ?*JsonObject;
pub const JsonObject_listautoptr = [*c]GList;
pub const JsonObject_slistautoptr = [*c]GSList;
pub const JsonObject_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonObject(arg__ptr: ?*JsonObject) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_json_object_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_JsonObject(arg__ptr: [*c]?*JsonObject) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonObject(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonObject(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonObject(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonObject(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_object_unref)))));
    }
}
pub const JsonNode_autoptr = ?*JsonNode;
pub const JsonNode_listautoptr = [*c]GList;
pub const JsonNode_slistautoptr = [*c]GSList;
pub const JsonNode_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonNode(arg__ptr: ?*JsonNode) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_json_node_unref(_ptr);
    }
}
pub fn glib_autoptr_cleanup_JsonNode(arg__ptr: [*c]?*JsonNode) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonNode(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonNode(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_node_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonNode(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_node_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonNode(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_json_node_unref)))));
    }
}
pub const struct__JsonBuilderPrivate = opaque {};
pub const JsonBuilderPrivate = struct__JsonBuilderPrivate;
pub const struct__JsonBuilder = extern struct {
    parent_instance: GObject,
    priv: ?*JsonBuilderPrivate,
};
pub const JsonBuilder = struct__JsonBuilder;
pub const struct__JsonBuilderClass = extern struct {
    parent_class: GObjectClass,
    _json_reserved1: ?*const fn () callconv(.C) void,
    _json_reserved2: ?*const fn () callconv(.C) void,
};
pub const JsonBuilderClass = struct__JsonBuilderClass;
pub extern fn _frida_json_builder_get_type() GType;
pub extern fn _frida_json_builder_new() [*c]JsonBuilder;
pub extern fn _frida_json_builder_new_immutable() [*c]JsonBuilder;
pub extern fn _frida_json_builder_get_root(builder: [*c]JsonBuilder) ?*JsonNode;
pub extern fn _frida_json_builder_reset(builder: [*c]JsonBuilder) void;
pub extern fn _frida_json_builder_begin_array(builder: [*c]JsonBuilder) [*c]JsonBuilder;
pub extern fn _frida_json_builder_end_array(builder: [*c]JsonBuilder) [*c]JsonBuilder;
pub extern fn _frida_json_builder_begin_object(builder: [*c]JsonBuilder) [*c]JsonBuilder;
pub extern fn _frida_json_builder_end_object(builder: [*c]JsonBuilder) [*c]JsonBuilder;
pub extern fn _frida_json_builder_set_member_name(builder: [*c]JsonBuilder, member_name: [*c]const gchar) [*c]JsonBuilder;
pub extern fn _frida_json_builder_add_value(builder: [*c]JsonBuilder, node: ?*JsonNode) [*c]JsonBuilder;
pub extern fn _frida_json_builder_add_int_value(builder: [*c]JsonBuilder, value: gint64) [*c]JsonBuilder;
pub extern fn _frida_json_builder_add_double_value(builder: [*c]JsonBuilder, value: gdouble) [*c]JsonBuilder;
pub extern fn _frida_json_builder_add_boolean_value(builder: [*c]JsonBuilder, value: gboolean) [*c]JsonBuilder;
pub extern fn _frida_json_builder_add_string_value(builder: [*c]JsonBuilder, value: [*c]const gchar) [*c]JsonBuilder;
pub extern fn _frida_json_builder_add_null_value(builder: [*c]JsonBuilder) [*c]JsonBuilder;
pub const JsonBuilder_autoptr = [*c]JsonBuilder;
pub const JsonBuilder_listautoptr = [*c]GList;
pub const JsonBuilder_slistautoptr = [*c]GSList;
pub const JsonBuilder_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonBuilder(arg__ptr: [*c]JsonBuilder) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_JsonBuilder(arg__ptr: [*c][*c]JsonBuilder) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonBuilder(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonBuilder(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonBuilder(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonBuilder(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const struct__JsonGeneratorPrivate = opaque {};
pub const JsonGeneratorPrivate = struct__JsonGeneratorPrivate;
pub const struct__JsonGenerator = extern struct {
    parent_instance: GObject,
    priv: ?*JsonGeneratorPrivate,
};
pub const JsonGenerator = struct__JsonGenerator;
pub const struct__JsonGeneratorClass = extern struct {
    parent_class: GObjectClass,
    _json_reserved1: ?*const fn () callconv(.C) void,
    _json_reserved2: ?*const fn () callconv(.C) void,
    _json_reserved3: ?*const fn () callconv(.C) void,
    _json_reserved4: ?*const fn () callconv(.C) void,
};
pub const JsonGeneratorClass = struct__JsonGeneratorClass;
pub extern fn _frida_json_generator_get_type() GType;
pub extern fn _frida_json_generator_new() [*c]JsonGenerator;
pub extern fn _frida_json_generator_set_pretty(generator: [*c]JsonGenerator, is_pretty: gboolean) void;
pub extern fn _frida_json_generator_get_pretty(generator: [*c]JsonGenerator) gboolean;
pub extern fn _frida_json_generator_set_indent(generator: [*c]JsonGenerator, indent_level: guint) void;
pub extern fn _frida_json_generator_get_indent(generator: [*c]JsonGenerator) guint;
pub extern fn _frida_json_generator_set_indent_char(generator: [*c]JsonGenerator, indent_char: gunichar) void;
pub extern fn _frida_json_generator_get_indent_char(generator: [*c]JsonGenerator) gunichar;
pub extern fn _frida_json_generator_set_root(generator: [*c]JsonGenerator, node: ?*JsonNode) void;
pub extern fn _frida_json_generator_get_root(generator: [*c]JsonGenerator) ?*JsonNode;
pub extern fn _frida_json_generator_to_gstring(generator: [*c]JsonGenerator, string: [*c]GString) [*c]GString;
pub extern fn _frida_json_generator_to_data(generator: [*c]JsonGenerator, length: [*c]gsize) [*c]gchar;
pub extern fn _frida_json_generator_to_file(generator: [*c]JsonGenerator, filename: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_json_generator_to_stream(generator: [*c]JsonGenerator, stream: [*c]GOutputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub const JsonGenerator_autoptr = [*c]JsonGenerator;
pub const JsonGenerator_listautoptr = [*c]GList;
pub const JsonGenerator_slistautoptr = [*c]GSList;
pub const JsonGenerator_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonGenerator(arg__ptr: [*c]JsonGenerator) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_JsonGenerator(arg__ptr: [*c][*c]JsonGenerator) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonGenerator(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonGenerator(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonGenerator(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonGenerator(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const struct__JsonParserPrivate = opaque {};
pub const JsonParserPrivate = struct__JsonParserPrivate;
pub const struct__JsonParser = extern struct {
    parent_instance: GObject,
    priv: ?*JsonParserPrivate,
};
pub const JsonParser = struct__JsonParser;
pub const struct__JsonParserClass = extern struct {
    parent_class: GObjectClass,
    parse_start: ?*const fn ([*c]JsonParser) callconv(.C) void,
    object_start: ?*const fn ([*c]JsonParser) callconv(.C) void,
    object_member: ?*const fn ([*c]JsonParser, ?*JsonObject, [*c]const gchar) callconv(.C) void,
    object_end: ?*const fn ([*c]JsonParser, ?*JsonObject) callconv(.C) void,
    array_start: ?*const fn ([*c]JsonParser) callconv(.C) void,
    array_element: ?*const fn ([*c]JsonParser, ?*JsonArray, gint) callconv(.C) void,
    array_end: ?*const fn ([*c]JsonParser, ?*JsonArray) callconv(.C) void,
    parse_end: ?*const fn ([*c]JsonParser) callconv(.C) void,
    @"error": ?*const fn ([*c]JsonParser, [*c]const GError) callconv(.C) void,
    _json_reserved1: ?*const fn () callconv(.C) void,
    _json_reserved2: ?*const fn () callconv(.C) void,
    _json_reserved3: ?*const fn () callconv(.C) void,
    _json_reserved4: ?*const fn () callconv(.C) void,
    _json_reserved5: ?*const fn () callconv(.C) void,
    _json_reserved6: ?*const fn () callconv(.C) void,
    _json_reserved7: ?*const fn () callconv(.C) void,
    _json_reserved8: ?*const fn () callconv(.C) void,
};
pub const JsonParserClass = struct__JsonParserClass;
pub const JSON_PARSER_ERROR_PARSE: c_int = 0;
pub const JSON_PARSER_ERROR_TRAILING_COMMA: c_int = 1;
pub const JSON_PARSER_ERROR_MISSING_COMMA: c_int = 2;
pub const JSON_PARSER_ERROR_MISSING_COLON: c_int = 3;
pub const JSON_PARSER_ERROR_INVALID_BAREWORD: c_int = 4;
pub const JSON_PARSER_ERROR_EMPTY_MEMBER_NAME: c_int = 5;
pub const JSON_PARSER_ERROR_INVALID_DATA: c_int = 6;
pub const JSON_PARSER_ERROR_UNKNOWN: c_int = 7;
pub const JsonParserError = c_uint;
pub extern fn _frida_json_parser_error_quark() GQuark;
pub extern fn _frida_json_parser_get_type() GType;
pub extern fn _frida_json_parser_new() [*c]JsonParser;
pub extern fn _frida_json_parser_new_immutable() [*c]JsonParser;
pub extern fn _frida_json_parser_load_from_file(parser: [*c]JsonParser, filename: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_json_parser_load_from_mapped_file(parser: [*c]JsonParser, filename: [*c]const gchar, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_json_parser_load_from_data(parser: [*c]JsonParser, data: [*c]const gchar, length: gssize, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_json_parser_load_from_stream(parser: [*c]JsonParser, stream: [*c]GInputStream, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_json_parser_load_from_stream_async(parser: [*c]JsonParser, stream: [*c]GInputStream, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn _frida_json_parser_load_from_stream_finish(parser: [*c]JsonParser, result: ?*GAsyncResult, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_json_parser_get_root(parser: [*c]JsonParser) ?*JsonNode;
pub extern fn _frida_json_parser_steal_root(parser: [*c]JsonParser) ?*JsonNode;
pub extern fn _frida_json_parser_get_current_line(parser: [*c]JsonParser) guint;
pub extern fn _frida_json_parser_get_current_pos(parser: [*c]JsonParser) guint;
pub extern fn _frida_json_parser_has_assignment(parser: [*c]JsonParser, variable_name: [*c][*c]gchar) gboolean;
pub const JsonParser_autoptr = [*c]JsonParser;
pub const JsonParser_listautoptr = [*c]GList;
pub const JsonParser_slistautoptr = [*c]GSList;
pub const JsonParser_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonParser(arg__ptr: [*c]JsonParser) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_JsonParser(arg__ptr: [*c][*c]JsonParser) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonParser(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonParser(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonParser(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonParser(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const JSON_PATH_ERROR_INVALID_QUERY: c_int = 0;
pub const JsonPathError = c_uint;
pub const struct__JsonPath = opaque {};
pub const JsonPath = struct__JsonPath;
pub const struct__JsonPathClass = opaque {};
pub const JsonPathClass = struct__JsonPathClass;
pub extern fn _frida_json_path_get_type() GType;
pub extern fn _frida_json_path_error_quark() GQuark;
pub extern fn _frida_json_path_new() ?*JsonPath;
pub extern fn _frida_json_path_compile(path: ?*JsonPath, expression: [*c]const u8, @"error": [*c][*c]GError) gboolean;
pub extern fn _frida_json_path_match(path: ?*JsonPath, root: ?*JsonNode) ?*JsonNode;
pub extern fn _frida_json_path_query(expression: [*c]const u8, root: ?*JsonNode, @"error": [*c][*c]GError) ?*JsonNode;
pub const JsonPath_autoptr = ?*JsonPath;
pub const JsonPath_listautoptr = [*c]GList;
pub const JsonPath_slistautoptr = [*c]GSList;
pub const JsonPath_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonPath(arg__ptr: ?*JsonPath) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_JsonPath(arg__ptr: [*c]?*JsonPath) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonPath(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonPath(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonPath(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonPath(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub const struct__JsonReaderPrivate = opaque {};
pub const JsonReaderPrivate = struct__JsonReaderPrivate;
pub const struct__JsonReader = extern struct {
    parent_instance: GObject,
    priv: ?*JsonReaderPrivate,
};
pub const JsonReader = struct__JsonReader;
pub const struct__JsonReaderClass = extern struct {
    parent_class: GObjectClass,
    _json_padding0: ?*const fn () callconv(.C) void,
    _json_padding1: ?*const fn () callconv(.C) void,
    _json_padding2: ?*const fn () callconv(.C) void,
    _json_padding3: ?*const fn () callconv(.C) void,
    _json_padding4: ?*const fn () callconv(.C) void,
};
pub const JsonReaderClass = struct__JsonReaderClass;
pub const JSON_READER_ERROR_NO_ARRAY: c_int = 0;
pub const JSON_READER_ERROR_INVALID_INDEX: c_int = 1;
pub const JSON_READER_ERROR_NO_OBJECT: c_int = 2;
pub const JSON_READER_ERROR_INVALID_MEMBER: c_int = 3;
pub const JSON_READER_ERROR_INVALID_NODE: c_int = 4;
pub const JSON_READER_ERROR_NO_VALUE: c_int = 5;
pub const JSON_READER_ERROR_INVALID_TYPE: c_int = 6;
pub const JsonReaderError = c_uint;
pub extern fn _frida_json_reader_error_quark() GQuark;
pub extern fn _frida_json_reader_get_type() GType;
pub extern fn _frida_json_reader_new(node: ?*JsonNode) [*c]JsonReader;
pub extern fn _frida_json_reader_set_root(reader: [*c]JsonReader, root: ?*JsonNode) void;
pub extern fn _frida_json_reader_get_error(reader: [*c]JsonReader) [*c]const GError;
pub extern fn _frida_json_reader_is_array(reader: [*c]JsonReader) gboolean;
pub extern fn _frida_json_reader_read_element(reader: [*c]JsonReader, index_: guint) gboolean;
pub extern fn _frida_json_reader_end_element(reader: [*c]JsonReader) void;
pub extern fn _frida_json_reader_count_elements(reader: [*c]JsonReader) gint;
pub extern fn _frida_json_reader_is_object(reader: [*c]JsonReader) gboolean;
pub extern fn _frida_json_reader_read_member(reader: [*c]JsonReader, member_name: [*c]const gchar) gboolean;
pub extern fn _frida_json_reader_end_member(reader: [*c]JsonReader) void;
pub extern fn _frida_json_reader_count_members(reader: [*c]JsonReader) gint;
pub extern fn _frida_json_reader_list_members(reader: [*c]JsonReader) [*c][*c]gchar;
pub extern fn _frida_json_reader_get_member_name(reader: [*c]JsonReader) [*c]const gchar;
pub extern fn _frida_json_reader_is_value(reader: [*c]JsonReader) gboolean;
pub extern fn _frida_json_reader_get_value(reader: [*c]JsonReader) ?*JsonNode;
pub extern fn _frida_json_reader_get_int_value(reader: [*c]JsonReader) gint64;
pub extern fn _frida_json_reader_get_double_value(reader: [*c]JsonReader) gdouble;
pub extern fn _frida_json_reader_get_string_value(reader: [*c]JsonReader) [*c]const gchar;
pub extern fn _frida_json_reader_get_boolean_value(reader: [*c]JsonReader) gboolean;
pub extern fn _frida_json_reader_get_null_value(reader: [*c]JsonReader) gboolean;
pub extern fn _frida_json_reader_get_current_node(reader: [*c]JsonReader) ?*JsonNode;
pub const JsonReader_autoptr = [*c]JsonReader;
pub const JsonReader_listautoptr = [*c]GList;
pub const JsonReader_slistautoptr = [*c]GSList;
pub const JsonReader_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonReader(arg__ptr: [*c]JsonReader) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_JsonReader(arg__ptr: [*c][*c]JsonReader) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonReader(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonReader(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonReader(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonReader(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub extern fn _frida_json_from_string(str: [*c]const u8, @"error": [*c][*c]GError) ?*JsonNode;
pub extern fn _frida_json_to_string(node: ?*JsonNode, pretty: gboolean) [*c]u8;
pub extern fn _frida_json_parser_error_get_type() GType;
pub extern fn _frida_json_path_error_get_type() GType;
pub extern fn _frida_json_reader_error_get_type() GType;
pub extern fn _frida_json_node_type_get_type() GType;
pub const struct__JsonSerializable = opaque {};
pub const JsonSerializable = struct__JsonSerializable;
pub const struct__JsonSerializableIface = extern struct {
    g_iface: GTypeInterface,
    serialize_property: ?*const fn (?*JsonSerializable, [*c]const gchar, [*c]const GValue, [*c]GParamSpec) callconv(.C) ?*JsonNode,
    deserialize_property: ?*const fn (?*JsonSerializable, [*c]const gchar, [*c]GValue, [*c]GParamSpec, ?*JsonNode) callconv(.C) gboolean,
    find_property: ?*const fn (?*JsonSerializable, [*c]const u8) callconv(.C) [*c]GParamSpec,
    list_properties: ?*const fn (?*JsonSerializable, [*c]guint) callconv(.C) [*c][*c]GParamSpec,
    set_property: ?*const fn (?*JsonSerializable, [*c]GParamSpec, [*c]const GValue) callconv(.C) void,
    get_property: ?*const fn (?*JsonSerializable, [*c]GParamSpec, [*c]GValue) callconv(.C) void,
};
pub const JsonSerializableIface = struct__JsonSerializableIface;
pub extern fn _frida_json_serializable_get_type() GType;
pub extern fn _frida_json_serializable_serialize_property(serializable: ?*JsonSerializable, property_name: [*c]const gchar, value: [*c]const GValue, pspec: [*c]GParamSpec) ?*JsonNode;
pub extern fn _frida_json_serializable_deserialize_property(serializable: ?*JsonSerializable, property_name: [*c]const gchar, value: [*c]GValue, pspec: [*c]GParamSpec, property_node: ?*JsonNode) gboolean;
pub extern fn _frida_json_serializable_find_property(serializable: ?*JsonSerializable, name: [*c]const u8) [*c]GParamSpec;
pub extern fn _frida_json_serializable_list_properties(serializable: ?*JsonSerializable, n_pspecs: [*c]guint) [*c][*c]GParamSpec;
pub extern fn _frida_json_serializable_set_property(serializable: ?*JsonSerializable, pspec: [*c]GParamSpec, value: [*c]const GValue) void;
pub extern fn _frida_json_serializable_get_property(serializable: ?*JsonSerializable, pspec: [*c]GParamSpec, value: [*c]GValue) void;
pub extern fn _frida_json_serializable_default_serialize_property(serializable: ?*JsonSerializable, property_name: [*c]const gchar, value: [*c]const GValue, pspec: [*c]GParamSpec) ?*JsonNode;
pub extern fn _frida_json_serializable_default_deserialize_property(serializable: ?*JsonSerializable, property_name: [*c]const gchar, value: [*c]GValue, pspec: [*c]GParamSpec, property_node: ?*JsonNode) gboolean;
pub const JsonBoxedSerializeFunc = ?*const fn (gconstpointer) callconv(.C) ?*JsonNode;
pub const JsonBoxedDeserializeFunc = ?*const fn (?*JsonNode) callconv(.C) gpointer;
pub extern fn _frida_json_boxed_register_serialize_func(gboxed_type: GType, node_type: JsonNodeType, serialize_func: JsonBoxedSerializeFunc) void;
pub extern fn _frida_json_boxed_register_deserialize_func(gboxed_type: GType, node_type: JsonNodeType, deserialize_func: JsonBoxedDeserializeFunc) void;
pub extern fn _frida_json_boxed_can_serialize(gboxed_type: GType, node_type: [*c]JsonNodeType) gboolean;
pub extern fn _frida_json_boxed_can_deserialize(gboxed_type: GType, node_type: JsonNodeType) gboolean;
pub extern fn _frida_json_boxed_serialize(gboxed_type: GType, boxed: gconstpointer) ?*JsonNode;
pub extern fn _frida_json_boxed_deserialize(gboxed_type: GType, node: ?*JsonNode) gpointer;
pub extern fn _frida_json_gobject_serialize(gobject: [*c]GObject) ?*JsonNode;
pub extern fn _frida_json_gobject_deserialize(gtype: GType, node: ?*JsonNode) [*c]GObject;
pub extern fn _frida_json_gobject_from_data(gtype: GType, data: [*c]const gchar, length: gssize, @"error": [*c][*c]GError) [*c]GObject;
pub extern fn _frida_json_gobject_to_data(gobject: [*c]GObject, length: [*c]gsize) [*c]gchar;
pub extern fn _frida_json_construct_gobject(gtype: GType, data: [*c]const gchar, length: gsize, @"error": [*c][*c]GError) [*c]GObject;
pub extern fn _frida_json_serialize_gobject(gobject: [*c]GObject, length: [*c]gsize) [*c]gchar;
pub const JsonSerializable_autoptr = ?*JsonSerializable;
pub const JsonSerializable_listautoptr = [*c]GList;
pub const JsonSerializable_slistautoptr = [*c]GSList;
pub const JsonSerializable_queueautoptr = [*c]GQueue;
pub fn glib_autoptr_clear_JsonSerializable(arg__ptr: ?*JsonSerializable) callconv(.C) void {
    var _ptr = arg__ptr;
    if (_ptr != null) {
        _frida_g_object_unref(@ptrCast(gpointer, _ptr));
    }
}
pub fn glib_autoptr_cleanup_JsonSerializable(arg__ptr: [*c]?*JsonSerializable) callconv(.C) void {
    var _ptr = arg__ptr;
    glib_autoptr_clear_JsonSerializable(_ptr.*);
}
pub fn glib_listautoptr_cleanup_JsonSerializable(arg__l: [*c][*c]GList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_list_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_slistautoptr_cleanup_JsonSerializable(arg__l: [*c][*c]GSList) callconv(.C) void {
    var _l = arg__l;
    _frida_g_slist_free_full(_l.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
}
pub fn glib_queueautoptr_cleanup_JsonSerializable(arg__q: [*c][*c]GQueue) callconv(.C) void {
    var _q = arg__q;
    if (_q.* != null) {
        _frida_g_queue_free_full(_q.*, @ptrCast(GDestroyNotify, @alignCast(@import("std").meta.alignment(GDestroyNotify), @ptrCast(?*const fn () callconv(.C) void, @alignCast(@import("std").meta.alignment(?*const fn () callconv(.C) void), &_frida_g_object_unref)))));
    }
}
pub extern fn _frida_json_gvariant_serialize(variant: ?*GVariant) ?*JsonNode;
pub extern fn _frida_json_gvariant_serialize_data(variant: ?*GVariant, length: [*c]gsize) [*c]gchar;
pub extern fn _frida_json_gvariant_deserialize(json_node: ?*JsonNode, signature: [*c]const gchar, @"error": [*c][*c]GError) ?*GVariant;
pub extern fn _frida_json_gvariant_deserialize_data(json: [*c]const gchar, length: gssize, signature: [*c]const gchar, @"error": [*c][*c]GError) ?*GVariant;
pub const struct__FridaDeviceManager = opaque {};
pub const FridaDeviceManager = struct__FridaDeviceManager;
pub const struct__FridaDeviceList = opaque {};
pub const FridaDeviceList = struct__FridaDeviceList;
pub const struct__FridaDevice = opaque {};
pub const FridaDevice = struct__FridaDevice;
pub const struct__FridaRemoteDeviceOptions = opaque {};
pub const FridaRemoteDeviceOptions = struct__FridaRemoteDeviceOptions;
pub const struct__FridaApplicationList = opaque {};
pub const FridaApplicationList = struct__FridaApplicationList;
pub const struct__FridaApplication = opaque {};
pub const FridaApplication = struct__FridaApplication;
pub const struct__FridaProcessList = opaque {};
pub const FridaProcessList = struct__FridaProcessList;
pub const struct__FridaProcess = opaque {};
pub const FridaProcess = struct__FridaProcess;
pub const struct__FridaProcessMatchOptions = opaque {};
pub const FridaProcessMatchOptions = struct__FridaProcessMatchOptions;
pub const struct__FridaSpawnOptions = opaque {};
pub const FridaSpawnOptions = struct__FridaSpawnOptions;
pub const struct__FridaFrontmostQueryOptions = opaque {};
pub const FridaFrontmostQueryOptions = struct__FridaFrontmostQueryOptions;
pub const struct__FridaApplicationQueryOptions = opaque {};
pub const FridaApplicationQueryOptions = struct__FridaApplicationQueryOptions;
pub const struct__FridaProcessQueryOptions = opaque {};
pub const FridaProcessQueryOptions = struct__FridaProcessQueryOptions;
pub const struct__FridaSessionOptions = opaque {};
pub const FridaSessionOptions = struct__FridaSessionOptions;
pub const struct__FridaSpawnList = opaque {};
pub const FridaSpawnList = struct__FridaSpawnList;
pub const struct__FridaSpawn = opaque {};
pub const FridaSpawn = struct__FridaSpawn;
pub const struct__FridaChildList = opaque {};
pub const FridaChildList = struct__FridaChildList;
pub const struct__FridaChild = opaque {};
pub const FridaChild = struct__FridaChild;
pub const struct__FridaCrash = opaque {};
pub const FridaCrash = struct__FridaCrash;
pub const struct__FridaBus = opaque {};
pub const FridaBus = struct__FridaBus;
pub const struct__FridaSession = opaque {};
pub const FridaSession = struct__FridaSession;
pub const struct__FridaScript = opaque {};
pub const FridaScript = struct__FridaScript;
pub const struct__FridaSnapshotOptions = opaque {};
pub const FridaSnapshotOptions = struct__FridaSnapshotOptions;
pub const struct__FridaScriptOptions = opaque {};
pub const FridaScriptOptions = struct__FridaScriptOptions;
pub const struct__FridaPeerOptions = opaque {};
pub const FridaPeerOptions = struct__FridaPeerOptions;
pub const struct__FridaRelay = opaque {};
pub const FridaRelay = struct__FridaRelay;
pub const struct__FridaPortalOptions = opaque {};
pub const FridaPortalOptions = struct__FridaPortalOptions;
pub const struct__FridaPortalMembership = opaque {};
pub const FridaPortalMembership = struct__FridaPortalMembership;
pub const struct__FridaRpcClient = opaque {};
pub const FridaRpcClient = struct__FridaRpcClient;
pub const struct__FridaRpcPeer = opaque {};
pub const FridaRpcPeer = struct__FridaRpcPeer;
pub const struct__FridaRpcPeerIface = extern struct {
    parent_iface: GTypeInterface,
    post_rpc_message: ?*const fn (?*FridaRpcPeer, [*c]const gchar, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    post_rpc_message_finish: ?*const fn (?*FridaRpcPeer, ?*GAsyncResult, [*c][*c]GError) callconv(.C) void,
};
pub const FridaRpcPeerIface = struct__FridaRpcPeerIface;
pub const struct__FridaInjector = opaque {};
pub const FridaInjector = struct__FridaInjector;
pub const struct__FridaControlService = opaque {};
pub const FridaControlService = struct__FridaControlService;
pub const struct__FridaControlServiceOptions = opaque {};
pub const FridaControlServiceOptions = struct__FridaControlServiceOptions;
pub const struct__FridaPortalService = opaque {};
pub const FridaPortalService = struct__FridaPortalService;
pub const struct__FridaEndpointParameters = opaque {};
pub const FridaEndpointParameters = struct__FridaEndpointParameters;
pub const struct__FridaAuthenticationService = opaque {};
pub const FridaAuthenticationService = struct__FridaAuthenticationService;
pub const struct__FridaAuthenticationServiceIface = extern struct {
    parent_iface: GTypeInterface,
    authenticate: ?*const fn (?*FridaAuthenticationService, [*c]const gchar, [*c]GCancellable, GAsyncReadyCallback, gpointer) callconv(.C) void,
    authenticate_finish: ?*const fn (?*FridaAuthenticationService, ?*GAsyncResult, [*c][*c]GError) callconv(.C) [*c]gchar,
};
pub const FridaAuthenticationServiceIface = struct__FridaAuthenticationServiceIface;
pub const struct__FridaStaticAuthenticationService = opaque {};
pub const FridaStaticAuthenticationService = struct__FridaStaticAuthenticationService;
pub const struct__FridaFileMonitor = opaque {};
pub const FridaFileMonitor = struct__FridaFileMonitor;
pub const struct__FridaCompiler = opaque {};
pub const FridaCompiler = struct__FridaCompiler;
pub const struct__FridaCompilerOptions = opaque {};
pub const FridaCompilerOptions = struct__FridaCompilerOptions;
pub const struct__FridaBuildOptions = opaque {};
pub const FridaBuildOptions = struct__FridaBuildOptions;
pub const struct__FridaWatchOptions = opaque {};
pub const FridaWatchOptions = struct__FridaWatchOptions;
pub const struct__FridaHostSession = opaque {};
pub const FridaHostSession = struct__FridaHostSession;
pub const FRIDA_RUNTIME_GLIB: c_int = 0;
pub const FRIDA_RUNTIME_OTHER: c_int = 1;
pub const FridaRuntime = c_uint;
pub const FRIDA_DEVICE_TYPE_LOCAL: c_int = 0;
pub const FRIDA_DEVICE_TYPE_REMOTE: c_int = 1;
pub const FRIDA_DEVICE_TYPE_USB: c_int = 2;
pub const FridaDeviceType = c_uint;
pub const FRIDA_SOURCE_MAPS_INCLUDED: c_int = 0;
pub const FRIDA_SOURCE_MAPS_OMITTED: c_int = 1;
pub const FridaSourceMaps = c_uint;
pub const FRIDA_JS_COMPRESSION_NONE: c_int = 0;
pub const FRIDA_JS_COMPRESSION_TERSER: c_int = 1;
pub const FridaJsCompression = c_uint;
pub const FRIDA_AGENT_MESSAGE_KIND_SCRIPT: c_int = 1;
pub const FRIDA_AGENT_MESSAGE_KIND_DEBUGGER: c_int = 2;
pub const FridaAgentMessageKind = c_uint;
pub const FRIDA_CHILD_ORIGIN_FORK: c_int = 0;
pub const FRIDA_CHILD_ORIGIN_EXEC: c_int = 1;
pub const FRIDA_CHILD_ORIGIN_SPAWN: c_int = 2;
pub const FridaChildOrigin = c_uint;
pub const FRIDA_PEER_SETUP_ACTIVE: c_int = 0;
pub const FRIDA_PEER_SETUP_PASSIVE: c_int = 1;
pub const FRIDA_PEER_SETUP_ACTPASS: c_int = 2;
pub const FRIDA_PEER_SETUP_HOLDCONN: c_int = 3;
pub const FridaPeerSetup = c_uint;
pub const FRIDA_PORT_CONFLICT_BEHAVIOR_FAIL: c_int = 0;
pub const FRIDA_PORT_CONFLICT_BEHAVIOR_PICK_NEXT: c_int = 1;
pub const FridaPortConflictBehavior = c_uint;
pub const FRIDA_REALM_NATIVE: c_int = 0;
pub const FRIDA_REALM_EMULATED: c_int = 1;
pub const FridaRealm = c_uint;
pub const FRIDA_RELAY_KIND_TURN_UDP: c_int = 0;
pub const FRIDA_RELAY_KIND_TURN_TCP: c_int = 1;
pub const FRIDA_RELAY_KIND_TURN_TLS: c_int = 2;
pub const FridaRelayKind = c_uint;
pub const FRIDA_SCOPE_MINIMAL: c_int = 0;
pub const FRIDA_SCOPE_METADATA: c_int = 1;
pub const FRIDA_SCOPE_FULL: c_int = 2;
pub const FridaScope = c_uint;
pub const FRIDA_SCRIPT_RUNTIME_DEFAULT: c_int = 0;
pub const FRIDA_SCRIPT_RUNTIME_QJS: c_int = 1;
pub const FRIDA_SCRIPT_RUNTIME_V8: c_int = 2;
pub const FridaScriptRuntime = c_uint;
pub const FRIDA_SESSION_DETACH_REASON_APPLICATION_REQUESTED: c_int = 1;
pub const FRIDA_SESSION_DETACH_REASON_PROCESS_REPLACED: c_int = 2;
pub const FRIDA_SESSION_DETACH_REASON_PROCESS_TERMINATED: c_int = 3;
pub const FRIDA_SESSION_DETACH_REASON_CONNECTION_TERMINATED: c_int = 4;
pub const FRIDA_SESSION_DETACH_REASON_DEVICE_LOST: c_int = 5;
pub const FridaSessionDetachReason = c_uint;
pub const FRIDA_SNAPSHOT_TRANSPORT_INLINE: c_int = 0;
pub const FRIDA_SNAPSHOT_TRANSPORT_SHARED_MEMORY: c_int = 1;
pub const FridaSnapshotTransport = c_uint;
pub const FRIDA_STDIO_INHERIT: c_int = 0;
pub const FRIDA_STDIO_PIPE: c_int = 1;
pub const FridaStdio = c_uint;
pub const FRIDA_STRING_TERMINATOR_NONE: c_int = 0;
pub const FRIDA_STRING_TERMINATOR_NUL: c_int = 1;
pub const FridaStringTerminator = c_uint;
pub const FRIDA_UNLOAD_POLICY_IMMEDIATE: c_int = 0;
pub const FRIDA_UNLOAD_POLICY_RESIDENT: c_int = 1;
pub const FRIDA_UNLOAD_POLICY_DEFERRED: c_int = 2;
pub const FridaUnloadPolicy = c_uint;
pub const FRIDA_WEB_SERVICE_FLAVOR_CONTROL: c_int = 0;
pub const FRIDA_WEB_SERVICE_FLAVOR_CLUSTER: c_int = 1;
pub const FridaWebServiceFlavor = c_uint;
pub const FRIDA_WEB_SERVICE_TRANSPORT_PLAIN: c_int = 0;
pub const FRIDA_WEB_SERVICE_TRANSPORT_TLS: c_int = 1;
pub const FridaWebServiceTransport = c_uint;
pub extern fn frida_init() void;
pub extern fn frida_shutdown() void;
pub extern fn frida_deinit() void;
pub extern fn frida_get_main_context() ?*GMainContext;
pub extern fn frida_unref(obj: gpointer) void;
pub extern fn frida_version(major: [*c]guint, minor: [*c]guint, micro: [*c]guint, nano: [*c]guint) void;
pub extern fn frida_version_string() [*c]const gchar;
pub const FridaDeviceManagerPredicate = ?*const fn (?*FridaDevice, gpointer) callconv(.C) gboolean;
pub extern fn frida_device_manager_new() ?*FridaDeviceManager;
pub extern fn frida_device_manager_close(self: ?*FridaDeviceManager, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_close_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_device_manager_close_sync(self: ?*FridaDeviceManager, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_device_manager_get_device_by_id(self: ?*FridaDeviceManager, id: [*c]const gchar, timeout: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_get_device_by_id_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_get_device_by_id_sync(self: ?*FridaDeviceManager, id: [*c]const gchar, timeout: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_get_device_by_type(self: ?*FridaDeviceManager, @"type": FridaDeviceType, timeout: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_get_device_by_type_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_get_device_by_type_sync(self: ?*FridaDeviceManager, @"type": FridaDeviceType, timeout: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_get_device(self: ?*FridaDeviceManager, predicate: FridaDeviceManagerPredicate, predicate_target: gpointer, timeout: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_get_device_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_get_device_sync(self: ?*FridaDeviceManager, predicate: FridaDeviceManagerPredicate, predicate_target: gpointer, timeout: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_find_device_by_id(self: ?*FridaDeviceManager, id: [*c]const gchar, timeout: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_find_device_by_id_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_find_device_by_id_sync(self: ?*FridaDeviceManager, id: [*c]const gchar, timeout: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_find_device_by_type(self: ?*FridaDeviceManager, @"type": FridaDeviceType, timeout: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_find_device_by_type_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_find_device_by_type_sync(self: ?*FridaDeviceManager, @"type": FridaDeviceType, timeout: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_find_device(self: ?*FridaDeviceManager, predicate: FridaDeviceManagerPredicate, predicate_target: gpointer, timeout: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_find_device_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_find_device_sync(self: ?*FridaDeviceManager, predicate: FridaDeviceManagerPredicate, predicate_target: gpointer, timeout: gint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_enumerate_devices(self: ?*FridaDeviceManager, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_enumerate_devices_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDeviceList;
pub extern fn frida_device_manager_enumerate_devices_sync(self: ?*FridaDeviceManager, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDeviceList;
pub extern fn frida_device_manager_add_remote_device(self: ?*FridaDeviceManager, address: [*c]const gchar, options: ?*FridaRemoteDeviceOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_add_remote_device_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_add_remote_device_sync(self: ?*FridaDeviceManager, address: [*c]const gchar, options: ?*FridaRemoteDeviceOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaDevice;
pub extern fn frida_device_manager_remove_remote_device(self: ?*FridaDeviceManager, address: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_manager_remove_remote_device_finish(self: ?*FridaDeviceManager, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_device_manager_remove_remote_device_sync(self: ?*FridaDeviceManager, address: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_device_list_size(self: ?*FridaDeviceList) gint;
pub extern fn frida_device_list_get(self: ?*FridaDeviceList, index: gint) ?*FridaDevice;
pub const FridaDeviceProcessPredicate = ?*const fn (?*FridaProcess, gpointer) callconv(.C) gboolean;
pub extern fn frida_device_get_id(self: ?*FridaDevice) [*c]const gchar;
pub extern fn frida_device_get_name(self: ?*FridaDevice) [*c]const gchar;
pub extern fn frida_device_get_icon(self: ?*FridaDevice) ?*GVariant;
pub extern fn frida_device_get_dtype(self: ?*FridaDevice) FridaDeviceType;
pub extern fn frida_device_get_bus(self: ?*FridaDevice) ?*FridaBus;
pub extern fn frida_device_get_manager(self: ?*FridaDevice) ?*FridaDeviceManager;
pub extern fn frida_device_is_lost(self: ?*FridaDevice) gboolean;
pub extern fn frida_device_query_system_parameters(self: ?*FridaDevice, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_query_system_parameters_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GHashTable;
pub extern fn frida_device_query_system_parameters_sync(self: ?*FridaDevice, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GHashTable;
pub extern fn frida_device_get_frontmost_application(self: ?*FridaDevice, options: ?*FridaFrontmostQueryOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_get_frontmost_application_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaApplication;
pub extern fn frida_device_get_frontmost_application_sync(self: ?*FridaDevice, options: ?*FridaFrontmostQueryOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaApplication;
pub extern fn frida_device_enumerate_applications(self: ?*FridaDevice, options: ?*FridaApplicationQueryOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_enumerate_applications_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaApplicationList;
pub extern fn frida_device_enumerate_applications_sync(self: ?*FridaDevice, options: ?*FridaApplicationQueryOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaApplicationList;
pub extern fn frida_device_get_process_by_pid(self: ?*FridaDevice, pid: guint, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_get_process_by_pid_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_get_process_by_pid_sync(self: ?*FridaDevice, pid: guint, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_get_process_by_name(self: ?*FridaDevice, name: [*c]const gchar, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_get_process_by_name_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_get_process_by_name_sync(self: ?*FridaDevice, name: [*c]const gchar, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_get_process(self: ?*FridaDevice, predicate: FridaDeviceProcessPredicate, predicate_target: gpointer, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_get_process_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_get_process_sync(self: ?*FridaDevice, predicate: FridaDeviceProcessPredicate, predicate_target: gpointer, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_find_process_by_pid(self: ?*FridaDevice, pid: guint, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_find_process_by_pid_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_find_process_by_pid_sync(self: ?*FridaDevice, pid: guint, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_find_process_by_name(self: ?*FridaDevice, name: [*c]const gchar, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_find_process_by_name_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_find_process_by_name_sync(self: ?*FridaDevice, name: [*c]const gchar, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_find_process(self: ?*FridaDevice, predicate: FridaDeviceProcessPredicate, predicate_target: gpointer, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_find_process_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_find_process_sync(self: ?*FridaDevice, predicate: FridaDeviceProcessPredicate, predicate_target: gpointer, options: ?*FridaProcessMatchOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaProcess;
pub extern fn frida_device_enumerate_processes(self: ?*FridaDevice, options: ?*FridaProcessQueryOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_enumerate_processes_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaProcessList;
pub extern fn frida_device_enumerate_processes_sync(self: ?*FridaDevice, options: ?*FridaProcessQueryOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaProcessList;
pub extern fn frida_device_enable_spawn_gating(self: ?*FridaDevice, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_enable_spawn_gating_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_device_enable_spawn_gating_sync(self: ?*FridaDevice, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_device_disable_spawn_gating(self: ?*FridaDevice, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_disable_spawn_gating_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_device_disable_spawn_gating_sync(self: ?*FridaDevice, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_device_enumerate_pending_spawn(self: ?*FridaDevice, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_enumerate_pending_spawn_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaSpawnList;
pub extern fn frida_device_enumerate_pending_spawn_sync(self: ?*FridaDevice, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaSpawnList;
pub extern fn frida_device_enumerate_pending_children(self: ?*FridaDevice, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_enumerate_pending_children_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaChildList;
pub extern fn frida_device_enumerate_pending_children_sync(self: ?*FridaDevice, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaChildList;
pub extern fn frida_device_spawn(self: ?*FridaDevice, program: [*c]const gchar, options: ?*FridaSpawnOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_spawn_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) guint;
pub extern fn frida_device_spawn_sync(self: ?*FridaDevice, program: [*c]const gchar, options: ?*FridaSpawnOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint;
pub extern fn frida_device_input(self: ?*FridaDevice, pid: guint, data: ?*GBytes, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_input_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_device_input_sync(self: ?*FridaDevice, pid: guint, data: ?*GBytes, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_device_resume(self: ?*FridaDevice, pid: guint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_resume_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_device_resume_sync(self: ?*FridaDevice, pid: guint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_device_kill(self: ?*FridaDevice, pid: guint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_kill_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_device_kill_sync(self: ?*FridaDevice, pid: guint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_device_attach(self: ?*FridaDevice, pid: guint, options: ?*FridaSessionOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_attach_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaSession;
pub extern fn frida_device_attach_sync(self: ?*FridaDevice, pid: guint, options: ?*FridaSessionOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaSession;
pub extern fn frida_device_inject_library_file(self: ?*FridaDevice, pid: guint, path: [*c]const gchar, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_inject_library_file_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) guint;
pub extern fn frida_device_inject_library_file_sync(self: ?*FridaDevice, pid: guint, path: [*c]const gchar, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint;
pub extern fn frida_device_inject_library_blob(self: ?*FridaDevice, pid: guint, blob: ?*GBytes, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_inject_library_blob_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) guint;
pub extern fn frida_device_inject_library_blob_sync(self: ?*FridaDevice, pid: guint, blob: ?*GBytes, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint;
pub extern fn frida_device_open_channel(self: ?*FridaDevice, address: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_open_channel_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]GIOStream;
pub extern fn frida_device_open_channel_sync(self: ?*FridaDevice, address: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]GIOStream;
pub extern fn frida_device_get_host_session(self: ?*FridaDevice, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_device_get_host_session_finish(self: ?*FridaDevice, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaHostSession;
pub extern fn frida_device_get_host_session_sync(self: ?*FridaDevice, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaHostSession;
pub extern fn frida_remote_device_options_new() ?*FridaRemoteDeviceOptions;
pub extern fn frida_remote_device_options_get_certificate(self: ?*FridaRemoteDeviceOptions) [*c]GTlsCertificate;
pub extern fn frida_remote_device_options_get_origin(self: ?*FridaRemoteDeviceOptions) [*c]const gchar;
pub extern fn frida_remote_device_options_get_token(self: ?*FridaRemoteDeviceOptions) [*c]const gchar;
pub extern fn frida_remote_device_options_get_keepalive_interval(self: ?*FridaRemoteDeviceOptions) gint;
pub extern fn frida_remote_device_options_set_certificate(self: ?*FridaRemoteDeviceOptions, value: [*c]GTlsCertificate) void;
pub extern fn frida_remote_device_options_set_origin(self: ?*FridaRemoteDeviceOptions, value: [*c]const gchar) void;
pub extern fn frida_remote_device_options_set_token(self: ?*FridaRemoteDeviceOptions, value: [*c]const gchar) void;
pub extern fn frida_remote_device_options_set_keepalive_interval(self: ?*FridaRemoteDeviceOptions, value: gint) void;
pub extern fn frida_application_list_size(self: ?*FridaApplicationList) gint;
pub extern fn frida_application_list_get(self: ?*FridaApplicationList, index: gint) ?*FridaApplication;
pub extern fn frida_application_get_identifier(self: ?*FridaApplication) [*c]const gchar;
pub extern fn frida_application_get_name(self: ?*FridaApplication) [*c]const gchar;
pub extern fn frida_application_get_pid(self: ?*FridaApplication) guint;
pub extern fn frida_application_get_parameters(self: ?*FridaApplication) ?*GHashTable;
pub extern fn frida_process_list_size(self: ?*FridaProcessList) gint;
pub extern fn frida_process_list_get(self: ?*FridaProcessList, index: gint) ?*FridaProcess;
pub extern fn frida_process_get_pid(self: ?*FridaProcess) guint;
pub extern fn frida_process_get_name(self: ?*FridaProcess) [*c]const gchar;
pub extern fn frida_process_get_parameters(self: ?*FridaProcess) ?*GHashTable;
pub extern fn frida_process_match_options_new() ?*FridaProcessMatchOptions;
pub extern fn frida_process_match_options_get_timeout(self: ?*FridaProcessMatchOptions) gint;
pub extern fn frida_process_match_options_get_scope(self: ?*FridaProcessMatchOptions) FridaScope;
pub extern fn frida_process_match_options_set_timeout(self: ?*FridaProcessMatchOptions, value: gint) void;
pub extern fn frida_process_match_options_set_scope(self: ?*FridaProcessMatchOptions, value: FridaScope) void;
pub extern fn frida_spawn_options_new() ?*FridaSpawnOptions;
pub extern fn frida_spawn_options_get_argv(self: ?*FridaSpawnOptions, result_length: [*c]gint) [*c][*c]gchar;
pub extern fn frida_spawn_options_get_envp(self: ?*FridaSpawnOptions, result_length: [*c]gint) [*c][*c]gchar;
pub extern fn frida_spawn_options_get_env(self: ?*FridaSpawnOptions, result_length: [*c]gint) [*c][*c]gchar;
pub extern fn frida_spawn_options_get_cwd(self: ?*FridaSpawnOptions) [*c]const gchar;
pub extern fn frida_spawn_options_get_stdio(self: ?*FridaSpawnOptions) FridaStdio;
pub extern fn frida_spawn_options_get_aux(self: ?*FridaSpawnOptions) ?*GHashTable;
pub extern fn frida_spawn_options_set_argv(self: ?*FridaSpawnOptions, value: [*c][*c]gchar, value_length: gint) void;
pub extern fn frida_spawn_options_set_envp(self: ?*FridaSpawnOptions, value: [*c][*c]gchar, value_length: gint) void;
pub extern fn frida_spawn_options_set_env(self: ?*FridaSpawnOptions, value: [*c][*c]gchar, value_length: gint) void;
pub extern fn frida_spawn_options_set_cwd(self: ?*FridaSpawnOptions, value: [*c]const gchar) void;
pub extern fn frida_spawn_options_set_stdio(self: ?*FridaSpawnOptions, value: FridaStdio) void;
pub extern fn frida_spawn_options_set_aux(self: ?*FridaSpawnOptions, value: ?*GHashTable) void;
pub extern fn frida_frontmost_query_options_new() ?*FridaFrontmostQueryOptions;
pub extern fn frida_frontmost_query_options_get_scope(self: ?*FridaFrontmostQueryOptions) FridaScope;
pub extern fn frida_frontmost_query_options_set_scope(self: ?*FridaFrontmostQueryOptions, value: FridaScope) void;
pub extern fn frida_application_query_options_new() ?*FridaApplicationQueryOptions;
pub extern fn frida_application_query_options_get_scope(self: ?*FridaApplicationQueryOptions) FridaScope;
pub extern fn frida_application_query_options_select_identifier(self: ?*FridaApplicationQueryOptions, identifier: [*c]const gchar) void;
pub extern fn frida_application_query_options_has_selected_identifiers(self: ?*FridaApplicationQueryOptions) gboolean;
pub extern fn frida_application_query_options_enumerate_selected_identifiers(self: ?*FridaApplicationQueryOptions, func: GFunc, user_data: gpointer) void;
pub extern fn frida_application_query_options_set_scope(self: ?*FridaApplicationQueryOptions, value: FridaScope) void;
pub extern fn frida_process_query_options_new() ?*FridaProcessQueryOptions;
pub extern fn frida_process_query_options_get_scope(self: ?*FridaProcessQueryOptions) FridaScope;
pub extern fn frida_process_query_options_select_pid(self: ?*FridaProcessQueryOptions, pid: guint) void;
pub extern fn frida_process_query_options_has_selected_pids(self: ?*FridaProcessQueryOptions) gboolean;
pub extern fn frida_process_query_options_enumerate_selected_pids(self: ?*FridaProcessQueryOptions, func: GFunc, user_data: gpointer) void;
pub extern fn frida_process_query_options_set_scope(self: ?*FridaProcessQueryOptions, value: FridaScope) void;
pub extern fn frida_session_options_new() ?*FridaSessionOptions;
pub extern fn frida_session_options_get_realm(self: ?*FridaSessionOptions) FridaRealm;
pub extern fn frida_session_options_get_persist_timeout(self: ?*FridaSessionOptions) guint;
pub extern fn frida_session_options_get_emulated_agent_path(self: ?*FridaSessionOptions) [*c]const gchar;
pub extern fn frida_session_options_set_realm(self: ?*FridaSessionOptions, value: FridaRealm) void;
pub extern fn frida_session_options_set_persist_timeout(self: ?*FridaSessionOptions, value: guint) void;
pub extern fn frida_session_options_set_emulated_agent_path(self: ?*FridaSessionOptions, value: [*c]const gchar) void;
pub extern fn frida_spawn_list_size(self: ?*FridaSpawnList) gint;
pub extern fn frida_spawn_list_get(self: ?*FridaSpawnList, index: gint) ?*FridaSpawn;
pub extern fn frida_spawn_get_pid(self: ?*FridaSpawn) guint;
pub extern fn frida_spawn_get_identifier(self: ?*FridaSpawn) [*c]const gchar;
pub extern fn frida_child_list_size(self: ?*FridaChildList) gint;
pub extern fn frida_child_list_get(self: ?*FridaChildList, index: gint) ?*FridaChild;
pub extern fn frida_child_get_pid(self: ?*FridaChild) guint;
pub extern fn frida_child_get_parent_pid(self: ?*FridaChild) guint;
pub extern fn frida_child_get_origin(self: ?*FridaChild) FridaChildOrigin;
pub extern fn frida_child_get_identifier(self: ?*FridaChild) [*c]const gchar;
pub extern fn frida_child_get_path(self: ?*FridaChild) [*c]const gchar;
pub extern fn frida_child_get_argv(self: ?*FridaChild, result_length: [*c]gint) [*c][*c]gchar;
pub extern fn frida_child_get_envp(self: ?*FridaChild, result_length: [*c]gint) [*c][*c]gchar;
pub extern fn frida_crash_get_pid(self: ?*FridaCrash) guint;
pub extern fn frida_crash_get_process_name(self: ?*FridaCrash) [*c]const gchar;
pub extern fn frida_crash_get_summary(self: ?*FridaCrash) [*c]const gchar;
pub extern fn frida_crash_get_report(self: ?*FridaCrash) [*c]const gchar;
pub extern fn frida_crash_get_parameters(self: ?*FridaCrash) ?*GHashTable;
pub extern fn frida_bus_get_device(self: ?*FridaBus) ?*FridaDevice;
pub extern fn frida_bus_is_detached(self: ?*FridaBus) gboolean;
pub extern fn frida_bus_attach(self: ?*FridaBus, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_bus_attach_finish(self: ?*FridaBus, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_bus_attach_sync(self: ?*FridaBus, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_bus_post(self: ?*FridaBus, json: [*c]const gchar, data: ?*GBytes) void;
pub extern fn frida_session_get_pid(self: ?*FridaSession) guint;
pub extern fn frida_session_get_persist_timeout(self: ?*FridaSession) guint;
pub extern fn frida_session_get_device(self: ?*FridaSession) ?*FridaDevice;
pub extern fn frida_session_is_detached(self: ?*FridaSession) gboolean;
pub extern fn frida_session_detach(self: ?*FridaSession, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_detach_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_session_detach_sync(self: ?*FridaSession, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_session_resume(self: ?*FridaSession, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_resume_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_session_resume_sync(self: ?*FridaSession, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_session_enable_child_gating(self: ?*FridaSession, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_enable_child_gating_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_session_enable_child_gating_sync(self: ?*FridaSession, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_session_disable_child_gating(self: ?*FridaSession, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_disable_child_gating_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_session_disable_child_gating_sync(self: ?*FridaSession, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_session_create_script(self: ?*FridaSession, source: [*c]const gchar, options: ?*FridaScriptOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_create_script_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaScript;
pub extern fn frida_session_create_script_sync(self: ?*FridaSession, source: [*c]const gchar, options: ?*FridaScriptOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaScript;
pub extern fn frida_session_create_script_from_bytes(self: ?*FridaSession, bytes: ?*GBytes, options: ?*FridaScriptOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_create_script_from_bytes_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaScript;
pub extern fn frida_session_create_script_from_bytes_sync(self: ?*FridaSession, bytes: ?*GBytes, options: ?*FridaScriptOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaScript;
pub extern fn frida_session_compile_script(self: ?*FridaSession, source: [*c]const gchar, options: ?*FridaScriptOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_compile_script_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn frida_session_compile_script_sync(self: ?*FridaSession, source: [*c]const gchar, options: ?*FridaScriptOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn frida_session_snapshot_script(self: ?*FridaSession, embed_script: [*c]const gchar, options: ?*FridaSnapshotOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_snapshot_script_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn frida_session_snapshot_script_sync(self: ?*FridaSession, embed_script: [*c]const gchar, options: ?*FridaSnapshotOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*GBytes;
pub extern fn frida_session_setup_peer_connection(self: ?*FridaSession, options: ?*FridaPeerOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_setup_peer_connection_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_session_setup_peer_connection_sync(self: ?*FridaSession, options: ?*FridaPeerOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_session_join_portal(self: ?*FridaSession, address: [*c]const gchar, options: ?*FridaPortalOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_session_join_portal_finish(self: ?*FridaSession, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*FridaPortalMembership;
pub extern fn frida_session_join_portal_sync(self: ?*FridaSession, address: [*c]const gchar, options: ?*FridaPortalOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) ?*FridaPortalMembership;
pub extern fn frida_script_is_destroyed(self: ?*FridaScript) gboolean;
pub extern fn frida_script_load(self: ?*FridaScript, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_script_load_finish(self: ?*FridaScript, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_script_load_sync(self: ?*FridaScript, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_script_unload(self: ?*FridaScript, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_script_unload_finish(self: ?*FridaScript, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_script_unload_sync(self: ?*FridaScript, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_script_eternalize(self: ?*FridaScript, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_script_eternalize_finish(self: ?*FridaScript, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_script_eternalize_sync(self: ?*FridaScript, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_script_post(self: ?*FridaScript, json: [*c]const gchar, data: ?*GBytes) void;
pub extern fn frida_script_enable_debugger(self: ?*FridaScript, port: guint16, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_script_enable_debugger_finish(self: ?*FridaScript, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_script_enable_debugger_sync(self: ?*FridaScript, port: guint16, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_script_disable_debugger(self: ?*FridaScript, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_script_disable_debugger_finish(self: ?*FridaScript, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_script_disable_debugger_sync(self: ?*FridaScript, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_snapshot_options_new() ?*FridaSnapshotOptions;
pub extern fn frida_snapshot_options_get_warmup_script(self: ?*FridaSnapshotOptions) [*c]const gchar;
pub extern fn frida_snapshot_options_get_runtime(self: ?*FridaSnapshotOptions) FridaScriptRuntime;
pub extern fn frida_snapshot_options_set_warmup_script(self: ?*FridaSnapshotOptions, value: [*c]const gchar) void;
pub extern fn frida_snapshot_options_set_runtime(self: ?*FridaSnapshotOptions, value: FridaScriptRuntime) void;
pub extern fn frida_script_options_new() ?*FridaScriptOptions;
pub extern fn frida_script_options_get_name(self: ?*FridaScriptOptions) [*c]const gchar;
pub extern fn frida_script_options_get_snapshot(self: ?*FridaScriptOptions) ?*GBytes;
pub extern fn frida_script_options_get_snapshot_transport(self: ?*FridaScriptOptions) FridaSnapshotTransport;
pub extern fn frida_script_options_get_runtime(self: ?*FridaScriptOptions) FridaScriptRuntime;
pub extern fn frida_script_options_set_name(self: ?*FridaScriptOptions, value: [*c]const gchar) void;
pub extern fn frida_script_options_set_snapshot(self: ?*FridaScriptOptions, value: ?*GBytes) void;
pub extern fn frida_script_options_set_snapshot_transport(self: ?*FridaScriptOptions, value: FridaSnapshotTransport) void;
pub extern fn frida_script_options_set_runtime(self: ?*FridaScriptOptions, value: FridaScriptRuntime) void;
pub extern fn frida_peer_options_new() ?*FridaPeerOptions;
pub extern fn frida_peer_options_get_stun_server(self: ?*FridaPeerOptions) [*c]const gchar;
pub extern fn frida_peer_options_clear_relays(self: ?*FridaPeerOptions) void;
pub extern fn frida_peer_options_add_relay(self: ?*FridaPeerOptions, relay: ?*FridaRelay) void;
pub extern fn frida_peer_options_enumerate_relays(self: ?*FridaPeerOptions, func: GFunc, user_data: gpointer) void;
pub extern fn frida_peer_options_set_stun_server(self: ?*FridaPeerOptions, value: [*c]const gchar) void;
pub extern fn frida_relay_new(address: [*c]const gchar, username: [*c]const gchar, password: [*c]const gchar, kind: FridaRelayKind) ?*FridaRelay;
pub extern fn frida_relay_get_address(self: ?*FridaRelay) [*c]const gchar;
pub extern fn frida_relay_get_username(self: ?*FridaRelay) [*c]const gchar;
pub extern fn frida_relay_get_password(self: ?*FridaRelay) [*c]const gchar;
pub extern fn frida_relay_get_kind(self: ?*FridaRelay) FridaRelayKind;
pub extern fn frida_portal_options_new() ?*FridaPortalOptions;
pub extern fn frida_portal_options_get_certificate(self: ?*FridaPortalOptions) [*c]GTlsCertificate;
pub extern fn frida_portal_options_get_token(self: ?*FridaPortalOptions) [*c]const gchar;
pub extern fn frida_portal_options_get_acl(self: ?*FridaPortalOptions, result_length: [*c]gint) [*c][*c]gchar;
pub extern fn frida_portal_options_set_certificate(self: ?*FridaPortalOptions, value: [*c]GTlsCertificate) void;
pub extern fn frida_portal_options_set_token(self: ?*FridaPortalOptions, value: [*c]const gchar) void;
pub extern fn frida_portal_options_set_acl(self: ?*FridaPortalOptions, value: [*c][*c]gchar, value_length: gint) void;
pub extern fn frida_portal_membership_get_id(self: ?*FridaPortalMembership) guint;
pub extern fn frida_portal_membership_terminate(self: ?*FridaPortalMembership, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_portal_membership_terminate_finish(self: ?*FridaPortalMembership, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_portal_membership_terminate_sync(self: ?*FridaPortalMembership, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_rpc_client_new(peer: ?*FridaRpcPeer) ?*FridaRpcClient;
pub extern fn frida_rpc_client_get_peer(self: ?*FridaRpcClient) ?*FridaRpcPeer;
pub extern fn frida_rpc_client_call(self: ?*FridaRpcClient, method: [*c]const gchar, args: [*c]?*JsonNode, args_length: gint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_rpc_client_call_finish(self: ?*FridaRpcClient, result: ?*GAsyncResult, @"error": [*c][*c]GError) ?*JsonNode;
pub extern fn frida_rpc_client_try_handle_message(self: ?*FridaRpcClient, json: [*c]const gchar) gboolean;
pub extern fn frida_rpc_peer_post_rpc_message(self: ?*FridaRpcPeer, json: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_rpc_peer_post_rpc_message_finish(self: ?*FridaRpcPeer, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_injector_new() ?*FridaInjector;
pub extern fn frida_injector_new_inprocess() ?*FridaInjector;
pub extern fn frida_injector_close(self: ?*FridaInjector, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_injector_close_finish(self: ?*FridaInjector, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_injector_close_sync(self: ?*FridaInjector, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_injector_inject_library_file(self: ?*FridaInjector, pid: guint, path: [*c]const gchar, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_injector_inject_library_file_finish(self: ?*FridaInjector, result: ?*GAsyncResult, @"error": [*c][*c]GError) guint;
pub extern fn frida_injector_inject_library_file_sync(self: ?*FridaInjector, pid: guint, path: [*c]const gchar, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint;
pub extern fn frida_injector_inject_library_blob(self: ?*FridaInjector, pid: guint, blob: ?*GBytes, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_injector_inject_library_blob_finish(self: ?*FridaInjector, result: ?*GAsyncResult, @"error": [*c][*c]GError) guint;
pub extern fn frida_injector_inject_library_blob_sync(self: ?*FridaInjector, pid: guint, blob: ?*GBytes, entrypoint: [*c]const gchar, data: [*c]const gchar, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint;
pub extern fn frida_injector_demonitor(self: ?*FridaInjector, id: guint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_injector_demonitor_finish(self: ?*FridaInjector, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_injector_demonitor_sync(self: ?*FridaInjector, id: guint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_injector_demonitor_and_clone_state(self: ?*FridaInjector, id: guint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_injector_demonitor_and_clone_state_finish(self: ?*FridaInjector, result: ?*GAsyncResult, @"error": [*c][*c]GError) guint;
pub extern fn frida_injector_demonitor_and_clone_state_sync(self: ?*FridaInjector, id: guint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) guint;
pub extern fn frida_injector_recreate_thread(self: ?*FridaInjector, pid: guint, id: guint, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_injector_recreate_thread_finish(self: ?*FridaInjector, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_injector_recreate_thread_sync(self: ?*FridaInjector, pid: guint, id: guint, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_control_service_new(endpoint_params: ?*FridaEndpointParameters, options: ?*FridaControlServiceOptions) ?*FridaControlService;
pub extern fn frida_control_service_new_with_host_session(host_session: ?*FridaHostSession, endpoint_params: ?*FridaEndpointParameters, options: ?*FridaControlServiceOptions) ?*FridaControlService;
pub extern fn frida_control_service_get_host_session(self: ?*FridaControlService) ?*FridaHostSession;
pub extern fn frida_control_service_get_endpoint_params(self: ?*FridaControlService) ?*FridaEndpointParameters;
pub extern fn frida_control_service_get_options(self: ?*FridaControlService) ?*FridaControlServiceOptions;
pub extern fn frida_control_service_start(self: ?*FridaControlService, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_control_service_start_finish(self: ?*FridaControlService, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_control_service_start_sync(self: ?*FridaControlService, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_control_service_stop(self: ?*FridaControlService, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_control_service_stop_finish(self: ?*FridaControlService, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_control_service_stop_sync(self: ?*FridaControlService, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_control_service_options_new() ?*FridaControlServiceOptions;
pub extern fn frida_control_service_options_get_enable_preload(self: ?*FridaControlServiceOptions) gboolean;
pub extern fn frida_control_service_options_get_report_crashes(self: ?*FridaControlServiceOptions) gboolean;
pub extern fn frida_control_service_options_set_enable_preload(self: ?*FridaControlServiceOptions, value: gboolean) void;
pub extern fn frida_control_service_options_set_report_crashes(self: ?*FridaControlServiceOptions, value: gboolean) void;
pub extern fn frida_portal_service_new(cluster_params: ?*FridaEndpointParameters, control_params: ?*FridaEndpointParameters) ?*FridaPortalService;
pub extern fn frida_portal_service_get_device(self: ?*FridaPortalService) ?*FridaDevice;
pub extern fn frida_portal_service_get_cluster_params(self: ?*FridaPortalService) ?*FridaEndpointParameters;
pub extern fn frida_portal_service_get_control_params(self: ?*FridaPortalService) ?*FridaEndpointParameters;
pub extern fn frida_portal_service_start(self: ?*FridaPortalService, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_portal_service_start_finish(self: ?*FridaPortalService, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_portal_service_start_sync(self: ?*FridaPortalService, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_portal_service_stop(self: ?*FridaPortalService, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_portal_service_stop_finish(self: ?*FridaPortalService, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_portal_service_stop_sync(self: ?*FridaPortalService, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_portal_service_kick(self: ?*FridaPortalService, connection_id: guint) void;
pub extern fn frida_portal_service_post(self: ?*FridaPortalService, connection_id: guint, json: [*c]const gchar, data: ?*GBytes) void;
pub extern fn frida_portal_service_narrowcast(self: ?*FridaPortalService, tag: [*c]const gchar, json: [*c]const gchar, data: ?*GBytes) void;
pub extern fn frida_portal_service_broadcast(self: ?*FridaPortalService, json: [*c]const gchar, data: ?*GBytes) void;
pub extern fn frida_portal_service_enumerate_tags(self: ?*FridaPortalService, connection_id: guint, result_length: [*c]gint) [*c][*c]gchar;
pub extern fn frida_portal_service_tag(self: ?*FridaPortalService, connection_id: guint, tag: [*c]const gchar) void;
pub extern fn frida_portal_service_untag(self: ?*FridaPortalService, connection_id: guint, tag: [*c]const gchar) void;
pub extern fn frida_endpoint_parameters_new(address: [*c]const gchar, port: guint16, certificate: [*c]GTlsCertificate, origin: [*c]const gchar, auth_service: ?*FridaAuthenticationService, asset_root: ?*GFile) ?*FridaEndpointParameters;
pub extern fn frida_endpoint_parameters_get_address(self: ?*FridaEndpointParameters) [*c]const gchar;
pub extern fn frida_endpoint_parameters_get_port(self: ?*FridaEndpointParameters) guint16;
pub extern fn frida_endpoint_parameters_get_certificate(self: ?*FridaEndpointParameters) [*c]GTlsCertificate;
pub extern fn frida_endpoint_parameters_get_origin(self: ?*FridaEndpointParameters) [*c]const gchar;
pub extern fn frida_endpoint_parameters_get_auth_service(self: ?*FridaEndpointParameters) ?*FridaAuthenticationService;
pub extern fn frida_endpoint_parameters_get_asset_root(self: ?*FridaEndpointParameters) ?*GFile;
pub extern fn frida_endpoint_parameters_set_asset_root(self: ?*FridaEndpointParameters, value: ?*GFile) void;
pub extern fn frida_authentication_service_authenticate(self: ?*FridaAuthenticationService, token: [*c]const gchar, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_authentication_service_authenticate_finish(self: ?*FridaAuthenticationService, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn frida_static_authentication_service_new(token: [*c]const gchar) ?*FridaStaticAuthenticationService;
pub extern fn frida_static_authentication_service_get_token_hash(self: ?*FridaStaticAuthenticationService) [*c]const gchar;
pub extern fn frida_file_monitor_new(path: [*c]const gchar) ?*FridaFileMonitor;
pub extern fn frida_file_monitor_get_path(self: ?*FridaFileMonitor) [*c]const gchar;
pub extern fn frida_file_monitor_enable(self: ?*FridaFileMonitor, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_file_monitor_enable_finish(self: ?*FridaFileMonitor, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_file_monitor_enable_sync(self: ?*FridaFileMonitor, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_file_monitor_disable(self: ?*FridaFileMonitor, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_file_monitor_disable_finish(self: ?*FridaFileMonitor, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_file_monitor_disable_sync(self: ?*FridaFileMonitor, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_compiler_new(manager: ?*FridaDeviceManager) ?*FridaCompiler;
pub extern fn frida_compiler_get_manager(self: ?*FridaCompiler) ?*FridaDeviceManager;
pub extern fn frida_compiler_build(self: ?*FridaCompiler, entrypoint: [*c]const gchar, options: ?*FridaBuildOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_compiler_build_finish(self: ?*FridaCompiler, result: ?*GAsyncResult, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn frida_compiler_build_sync(self: ?*FridaCompiler, entrypoint: [*c]const gchar, options: ?*FridaBuildOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) [*c]gchar;
pub extern fn frida_compiler_watch(self: ?*FridaCompiler, entrypoint: [*c]const gchar, options: ?*FridaWatchOptions, cancellable: [*c]GCancellable, callback: GAsyncReadyCallback, user_data: gpointer) void;
pub extern fn frida_compiler_watch_finish(self: ?*FridaCompiler, result: ?*GAsyncResult, @"error": [*c][*c]GError) void;
pub extern fn frida_compiler_watch_sync(self: ?*FridaCompiler, entrypoint: [*c]const gchar, options: ?*FridaWatchOptions, cancellable: [*c]GCancellable, @"error": [*c][*c]GError) void;
pub extern fn frida_compiler_options_new() ?*FridaCompilerOptions;
pub extern fn frida_compiler_options_get_project_root(self: ?*FridaCompilerOptions) [*c]const gchar;
pub extern fn frida_compiler_options_get_source_maps(self: ?*FridaCompilerOptions) FridaSourceMaps;
pub extern fn frida_compiler_options_get_compression(self: ?*FridaCompilerOptions) FridaJsCompression;
pub extern fn frida_compiler_options_set_project_root(self: ?*FridaCompilerOptions, value: [*c]const gchar) void;
pub extern fn frida_compiler_options_set_source_maps(self: ?*FridaCompilerOptions, value: FridaSourceMaps) void;
pub extern fn frida_compiler_options_set_compression(self: ?*FridaCompilerOptions, value: FridaJsCompression) void;
pub extern fn frida_build_options_new() ?*FridaBuildOptions;
pub extern fn frida_watch_options_new() ?*FridaWatchOptions;
pub extern fn frida_error_quark() GQuark;
pub const FRIDA_ERROR_SERVER_NOT_RUNNING: c_int = 0;
pub const FRIDA_ERROR_EXECUTABLE_NOT_FOUND: c_int = 1;
pub const FRIDA_ERROR_EXECUTABLE_NOT_SUPPORTED: c_int = 2;
pub const FRIDA_ERROR_PROCESS_NOT_FOUND: c_int = 3;
pub const FRIDA_ERROR_PROCESS_NOT_RESPONDING: c_int = 4;
pub const FRIDA_ERROR_INVALID_ARGUMENT: c_int = 5;
pub const FRIDA_ERROR_INVALID_OPERATION: c_int = 6;
pub const FRIDA_ERROR_PERMISSION_DENIED: c_int = 7;
pub const FRIDA_ERROR_ADDRESS_IN_USE: c_int = 8;
pub const FRIDA_ERROR_TIMED_OUT: c_int = 9;
pub const FRIDA_ERROR_NOT_SUPPORTED: c_int = 10;
pub const FRIDA_ERROR_PROTOCOL: c_int = 11;
pub const FRIDA_ERROR_TRANSPORT: c_int = 12;
pub const FridaError = c_uint;
pub extern fn frida_runtime_get_type() GType;
pub extern fn frida_device_type_get_type() GType;
pub extern fn frida_source_maps_get_type() GType;
pub extern fn frida_js_compression_get_type() GType;
pub extern fn frida_agent_message_kind_get_type() GType;
pub extern fn frida_child_origin_get_type() GType;
pub extern fn frida_peer_setup_get_type() GType;
pub extern fn frida_port_conflict_behavior_get_type() GType;
pub extern fn frida_realm_get_type() GType;
pub extern fn frida_relay_kind_get_type() GType;
pub extern fn frida_scope_get_type() GType;
pub extern fn frida_script_runtime_get_type() GType;
pub extern fn frida_session_detach_reason_get_type() GType;
pub extern fn frida_snapshot_transport_get_type() GType;
pub extern fn frida_stdio_get_type() GType;
pub extern fn frida_string_terminator_get_type() GType;
pub extern fn frida_unload_policy_get_type() GType;
pub extern fn frida_web_service_flavor_get_type() GType;
pub extern fn frida_web_service_transport_get_type() GType;
pub extern fn frida_device_manager_get_type() GType;
pub extern fn frida_device_list_get_type() GType;
pub extern fn frida_device_get_type() GType;
pub extern fn frida_remote_device_options_get_type() GType;
pub extern fn frida_application_list_get_type() GType;
pub extern fn frida_application_get_type() GType;
pub extern fn frida_process_list_get_type() GType;
pub extern fn frida_process_get_type() GType;
pub extern fn frida_process_match_options_get_type() GType;
pub extern fn frida_spawn_options_get_type() GType;
pub extern fn frida_frontmost_query_options_get_type() GType;
pub extern fn frida_application_query_options_get_type() GType;
pub extern fn frida_process_query_options_get_type() GType;
pub extern fn frida_session_options_get_type() GType;
pub extern fn frida_spawn_list_get_type() GType;
pub extern fn frida_spawn_get_type() GType;
pub extern fn frida_child_list_get_type() GType;
pub extern fn frida_child_get_type() GType;
pub extern fn frida_crash_get_type() GType;
pub extern fn frida_bus_get_type() GType;
pub extern fn frida_session_get_type() GType;
pub extern fn frida_script_get_type() GType;
pub extern fn frida_snapshot_options_get_type() GType;
pub extern fn frida_script_options_get_type() GType;
pub extern fn frida_peer_options_get_type() GType;
pub extern fn frida_relay_get_type() GType;
pub extern fn frida_portal_options_get_type() GType;
pub extern fn frida_portal_membership_get_type() GType;
pub extern fn frida_rpc_client_get_type() GType;
pub extern fn frida_rpc_peer_get_type() GType;
pub extern fn frida_injector_get_type() GType;
pub extern fn frida_control_service_get_type() GType;
pub extern fn frida_control_service_options_get_type() GType;
pub extern fn frida_portal_service_get_type() GType;
pub extern fn frida_endpoint_parameters_get_type() GType;
pub extern fn frida_authentication_service_get_type() GType;
pub extern fn frida_static_authentication_service_get_type() GType;
pub extern fn frida_file_monitor_get_type() GType;
pub extern fn frida_compiler_get_type() GType;
pub extern fn frida_compiler_options_get_type() GType;
pub extern fn frida_build_options_get_type() GType;
pub extern fn frida_watch_options_get_type() GType;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):80:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):86:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):109:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):113:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):119:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):122:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):183:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):205:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):213:9
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):342:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):343:9
pub const cs_close = @compileError("unable to translate macro: undefined identifier `_frida_cs_close`"); // lib/frida-core/frida-core.h:4:9
pub const cs_disasm = @compileError("unable to translate macro: undefined identifier `_frida_cs_disasm`"); // lib/frida-core/frida-core.h:5:9
pub const cs_disasm_iter = @compileError("unable to translate macro: undefined identifier `_frida_cs_disasm_iter`"); // lib/frida-core/frida-core.h:6:9
pub const cs_errno = @compileError("unable to translate macro: undefined identifier `_frida_cs_errno`"); // lib/frida-core/frida-core.h:7:9
pub const cs_free = @compileError("unable to translate macro: undefined identifier `_frida_cs_free`"); // lib/frida-core/frida-core.h:8:9
pub const cs_group_name = @compileError("unable to translate macro: undefined identifier `_frida_cs_group_name`"); // lib/frida-core/frida-core.h:9:9
pub const cs_insn_group = @compileError("unable to translate macro: undefined identifier `_frida_cs_insn_group`"); // lib/frida-core/frida-core.h:10:9
pub const cs_insn_name = @compileError("unable to translate macro: undefined identifier `_frida_cs_insn_name`"); // lib/frida-core/frida-core.h:11:9
pub const cs_malloc = @compileError("unable to translate macro: undefined identifier `_frida_cs_malloc`"); // lib/frida-core/frida-core.h:12:9
pub const cs_mem_calloc = @compileError("unable to translate macro: undefined identifier `_frida_cs_mem_calloc`"); // lib/frida-core/frida-core.h:13:9
pub const cs_mem_free = @compileError("unable to translate macro: undefined identifier `_frida_cs_mem_free`"); // lib/frida-core/frida-core.h:14:9
pub const cs_mem_malloc = @compileError("unable to translate macro: undefined identifier `_frida_cs_mem_malloc`"); // lib/frida-core/frida-core.h:15:9
pub const cs_mem_realloc = @compileError("unable to translate macro: undefined identifier `_frida_cs_mem_realloc`"); // lib/frida-core/frida-core.h:16:9
pub const cs_op_count = @compileError("unable to translate macro: undefined identifier `_frida_cs_op_count`"); // lib/frida-core/frida-core.h:17:9
pub const cs_op_index = @compileError("unable to translate macro: undefined identifier `_frida_cs_op_index`"); // lib/frida-core/frida-core.h:18:9
pub const cs_open = @compileError("unable to translate macro: undefined identifier `_frida_cs_open`"); // lib/frida-core/frida-core.h:19:9
pub const cs_option = @compileError("unable to translate macro: undefined identifier `_frida_cs_option`"); // lib/frida-core/frida-core.h:20:9
pub const cs_reg_name = @compileError("unable to translate macro: undefined identifier `_frida_cs_reg_name`"); // lib/frida-core/frida-core.h:21:9
pub const cs_reg_read = @compileError("unable to translate macro: undefined identifier `_frida_cs_reg_read`"); // lib/frida-core/frida-core.h:22:9
pub const cs_reg_write = @compileError("unable to translate macro: undefined identifier `_frida_cs_reg_write`"); // lib/frida-core/frida-core.h:23:9
pub const cs_regs_access = @compileError("unable to translate macro: undefined identifier `_frida_cs_regs_access`"); // lib/frida-core/frida-core.h:24:9
pub const cs_snprintf = @compileError("unable to translate macro: undefined identifier `_frida_cs_snprintf`"); // lib/frida-core/frida-core.h:25:9
pub const cs_strdup = @compileError("unable to translate macro: undefined identifier `_frida_cs_strdup`"); // lib/frida-core/frida-core.h:26:9
pub const cs_strerror = @compileError("unable to translate macro: undefined identifier `_frida_cs_strerror`"); // lib/frida-core/frida-core.h:27:9
pub const cs_support = @compileError("unable to translate macro: undefined identifier `_frida_cs_support`"); // lib/frida-core/frida-core.h:28:9
pub const cs_version = @compileError("unable to translate macro: undefined identifier `_frida_cs_version`"); // lib/frida-core/frida-core.h:29:9
pub const cs_vsnprintf = @compileError("unable to translate macro: undefined identifier `_frida_cs_vsnprintf`"); // lib/frida-core/frida-core.h:30:9
pub const g__inotify_lock_lock = @compileError("unable to translate macro: undefined identifier `_frida_g__inotify_lock_lock`"); // lib/frida-core/frida-core.h:31:9
pub const g_access = @compileError("unable to translate macro: undefined identifier `_frida_g_access`"); // lib/frida-core/frida-core.h:32:9
pub const g_app_info_monitor_fire = @compileError("unable to translate macro: undefined identifier `_frida_g_app_info_monitor_fire`"); // lib/frida-core/frida-core.h:104:9
pub const g_application_impl_activate = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_activate`"); // lib/frida-core/frida-core.h:156:9
pub const g_application_impl_command_line = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_command_line`"); // lib/frida-core/frida-core.h:157:9
pub const g_application_impl_destroy = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_destroy`"); // lib/frida-core/frida-core.h:158:9
pub const g_application_impl_flush = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_flush`"); // lib/frida-core/frida-core.h:159:9
pub const g_application_impl_get_dbus_connection = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_get_dbus_connection`"); // lib/frida-core/frida-core.h:160:9
pub const g_application_impl_get_dbus_object_path = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_get_dbus_object_path`"); // lib/frida-core/frida-core.h:161:9
pub const g_application_impl_open = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_open`"); // lib/frida-core/frida-core.h:162:9
pub const g_application_impl_register = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_register`"); // lib/frida-core/frida-core.h:163:9
pub const g_application_impl_set_busy_state = @compileError("unable to translate macro: undefined identifier `_frida_g_application_impl_set_busy_state`"); // lib/frida-core/frida-core.h:164:9
pub const g_chdir = @compileError("unable to translate macro: undefined identifier `_frida_g_chdir`"); // lib/frida-core/frida-core.h:539:9
pub const g_check_setuid = @compileError("unable to translate macro: undefined identifier `_frida_g_check_setuid`"); // lib/frida-core/frida-core.h:540:9
pub const g_chmod = @compileError("unable to translate macro: undefined identifier `_frida_g_chmod`"); // lib/frida-core/frida-core.h:554:9
pub const g_close = @compileError("unable to translate macro: undefined identifier `_frida_g_close`"); // lib/frida-core/frida-core.h:562:9
pub const g_context_specific_group_emit = @compileError("unable to translate macro: undefined identifier `_frida_g_context_specific_group_emit`"); // lib/frida-core/frida-core.h:617:9
pub const g_context_specific_group_get = @compileError("unable to translate macro: undefined identifier `_frida_g_context_specific_group_get`"); // lib/frida-core/frida-core.h:618:9
pub const g_context_specific_group_remove = @compileError("unable to translate macro: undefined identifier `_frida_g_context_specific_group_remove`"); // lib/frida-core/frida-core.h:619:9
pub const g_creat = @compileError("unable to translate macro: undefined identifier `_frida_g_creat`"); // lib/frida-core/frida-core.h:635:9
pub const g_dbus_action_group_sync = @compileError("unable to translate macro: undefined identifier `_frida_g_dbus_action_group_sync`"); // lib/frida-core/frida-core.h:811:9
pub const g_delayed_settings_backend_apply = @compileError("unable to translate macro: undefined identifier `_frida_g_delayed_settings_backend_apply`"); // lib/frida-core/frida-core.h:1110:9
pub const g_delayed_settings_backend_get_has_unapplied = @compileError("unable to translate macro: undefined identifier `_frida_g_delayed_settings_backend_get_has_unapplied`"); // lib/frida-core/frida-core.h:1111:9
pub const g_delayed_settings_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_delayed_settings_backend_get_type`"); // lib/frida-core/frida-core.h:1112:9
pub const g_delayed_settings_backend_new = @compileError("unable to translate macro: undefined identifier `_frida_g_delayed_settings_backend_new`"); // lib/frida-core/frida-core.h:1113:9
pub const g_delayed_settings_backend_revert = @compileError("unable to translate macro: undefined identifier `_frida_g_delayed_settings_backend_revert`"); // lib/frida-core/frida-core.h:1114:9
pub const g_desktop_app_info_get_action_name = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_action_name`"); // lib/frida-core/frida-core.h:1115:9
pub const g_desktop_app_info_get_boolean = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_boolean`"); // lib/frida-core/frida-core.h:1116:9
pub const g_desktop_app_info_get_categories = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_categories`"); // lib/frida-core/frida-core.h:1117:9
pub const g_desktop_app_info_get_filename = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_filename`"); // lib/frida-core/frida-core.h:1118:9
pub const g_desktop_app_info_get_generic_name = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_generic_name`"); // lib/frida-core/frida-core.h:1119:9
pub const g_desktop_app_info_get_implementations = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_implementations`"); // lib/frida-core/frida-core.h:1120:9
pub const g_desktop_app_info_get_is_hidden = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_is_hidden`"); // lib/frida-core/frida-core.h:1121:9
pub const g_desktop_app_info_get_keywords = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_keywords`"); // lib/frida-core/frida-core.h:1122:9
pub const g_desktop_app_info_get_locale_string = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_locale_string`"); // lib/frida-core/frida-core.h:1123:9
pub const g_desktop_app_info_get_nodisplay = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_nodisplay`"); // lib/frida-core/frida-core.h:1124:9
pub const g_desktop_app_info_get_show_in = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_show_in`"); // lib/frida-core/frida-core.h:1125:9
pub const g_desktop_app_info_get_startup_wm_class = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_startup_wm_class`"); // lib/frida-core/frida-core.h:1126:9
pub const g_desktop_app_info_get_string = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_string`"); // lib/frida-core/frida-core.h:1127:9
pub const g_desktop_app_info_get_string_list = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_string_list`"); // lib/frida-core/frida-core.h:1128:9
pub const g_desktop_app_info_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_get_type`"); // lib/frida-core/frida-core.h:1129:9
pub const g_desktop_app_info_has_key = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_has_key`"); // lib/frida-core/frida-core.h:1130:9
pub const g_desktop_app_info_launch_action = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_launch_action`"); // lib/frida-core/frida-core.h:1131:9
pub const g_desktop_app_info_launch_uris_as_manager = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_launch_uris_as_manager`"); // lib/frida-core/frida-core.h:1132:9
pub const g_desktop_app_info_launch_uris_as_manager_with_fds = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_launch_uris_as_manager_with_fds`"); // lib/frida-core/frida-core.h:1133:9
pub const g_desktop_app_info_list_actions = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_list_actions`"); // lib/frida-core/frida-core.h:1134:9
pub const g_desktop_app_info_lookup_get_default_for_uri_scheme = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_lookup_get_default_for_uri_scheme`"); // lib/frida-core/frida-core.h:1135:9
pub const g_desktop_app_info_lookup_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_lookup_get_type`"); // lib/frida-core/frida-core.h:1136:9
pub const g_desktop_app_info_new = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_new`"); // lib/frida-core/frida-core.h:1137:9
pub const g_desktop_app_info_new_from_filename = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_new_from_filename`"); // lib/frida-core/frida-core.h:1138:9
pub const g_desktop_app_info_new_from_keyfile = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_new_from_keyfile`"); // lib/frida-core/frida-core.h:1139:9
pub const g_desktop_app_info_search = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_search`"); // lib/frida-core/frida-core.h:1140:9
pub const g_desktop_app_info_set_desktop_env = @compileError("unable to translate macro: undefined identifier `_frida_g_desktop_app_info_set_desktop_env`"); // lib/frida-core/frida-core.h:1141:9
pub const g_dir_new_from_dirp = @compileError("unable to translate macro: undefined identifier `_frida_g_dir_new_from_dirp`"); // lib/frida-core/frida-core.h:1145:9
pub const g_dir_open_with_errno = @compileError("unable to translate macro: undefined identifier `_frida_g_dir_open_with_errno`"); // lib/frida-core/frida-core.h:1147:9
pub const g_document_portal_add_documents = @compileError("unable to translate macro: undefined identifier `_frida_g_document_portal_add_documents`"); // lib/frida-core/frida-core.h:1153:9
pub const g_fdo_notification_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_fdo_notification_backend_get_type`"); // lib/frida-core/frida-core.h:1256:9
pub const g_file_descriptor_based_get_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_file_descriptor_based_get_fd`"); // lib/frida-core/frida-core.h:1296:9
pub const g_file_descriptor_based_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_file_descriptor_based_get_type`"); // lib/frida-core/frida-core.h:1297:9
pub const g_file_monitor_source_handle_event = @compileError("unable to translate macro: undefined identifier `_frida_g_file_monitor_source_handle_event`"); // lib/frida-core/frida-core.h:1452:9
pub const g_fopen = @compileError("unable to translate macro: undefined identifier `_frida_g_fopen`"); // lib/frida-core/frida-core.h:1568:9
pub const g_fprintf = @compileError("unable to translate macro: undefined identifier `_frida_g_fprintf`"); // lib/frida-core/frida-core.h:1572:9
pub const g_freopen = @compileError("unable to translate macro: undefined identifier `_frida_g_freopen`"); // lib/frida-core/frida-core.h:1574:9
pub const g_fsync = @compileError("unable to translate macro: undefined identifier `_frida_g_fsync`"); // lib/frida-core/frida-core.h:1575:9
pub const g_get_worker_context = @compileError("unable to translate macro: undefined identifier `_frida_g_get_worker_context`"); // lib/frida-core/frida-core.h:1605:9
pub const g_gtk_notification_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_gtk_notification_backend_get_type`"); // lib/frida-core/frida-core.h:1608:9
pub const g_inotify_file_monitor_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_inotify_file_monitor_get_type`"); // lib/frida-core/frida-core.h:1735:9
pub const g_input_stream_async_close_is_via_threads = @compileError("unable to translate macro: undefined identifier `_frida_g_input_stream_async_close_is_via_threads`"); // lib/frida-core/frida-core.h:1736:9
pub const g_input_stream_async_read_is_via_threads = @compileError("unable to translate macro: undefined identifier `_frida_g_input_stream_async_read_is_via_threads`"); // lib/frida-core/frida-core.h:1737:9
pub const g_io_module_openssl_register = @compileError("unable to translate macro: undefined identifier `_frida_g_io_module_openssl_register`"); // lib/frida-core/frida-core.h:1821:9
pub const g_keyfile_settings_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_keyfile_settings_backend_get_type`"); // lib/frida-core/frida-core.h:1899:9
pub const g_keyfile_settings_backend_new = @compileError("unable to translate macro: undefined identifier `_frida_g_keyfile_settings_backend_new`"); // lib/frida-core/frida-core.h:1900:9
pub const g_libintl_bind_textdomain_codeset = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_bind_textdomain_codeset`"); // lib/frida-core/frida-core.h:1901:9
pub const g_libintl_bindtextdomain = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_bindtextdomain`"); // lib/frida-core/frida-core.h:1902:9
pub const g_libintl_dcgettext = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_dcgettext`"); // lib/frida-core/frida-core.h:1903:9
pub const g_libintl_dcngettext = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_dcngettext`"); // lib/frida-core/frida-core.h:1904:9
pub const g_libintl_dgettext = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_dgettext`"); // lib/frida-core/frida-core.h:1905:9
pub const g_libintl_dngettext = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_dngettext`"); // lib/frida-core/frida-core.h:1906:9
pub const g_libintl_gettext = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_gettext`"); // lib/frida-core/frida-core.h:1907:9
pub const g_libintl_ngettext = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_ngettext`"); // lib/frida-core/frida-core.h:1908:9
pub const g_libintl_textdomain = @compileError("unable to translate macro: undefined identifier `_frida_g_libintl_textdomain`"); // lib/frida-core/frida-core.h:1909:9
pub const g_local_file_is_nfs_home = @compileError("unable to translate macro: undefined identifier `_frida_g_local_file_is_nfs_home`"); // lib/frida-core/frida-core.h:1967:9
pub const g_local_file_monitor_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_local_file_monitor_get_type`"); // lib/frida-core/frida-core.h:1968:9
pub const g_local_file_monitor_new_for_path = @compileError("unable to translate macro: undefined identifier `_frida_g_local_file_monitor_new_for_path`"); // lib/frida-core/frida-core.h:1969:9
pub const g_local_file_monitor_new_in_worker = @compileError("unable to translate macro: undefined identifier `_frida_g_local_file_monitor_new_in_worker`"); // lib/frida-core/frida-core.h:1970:9
pub const g_local_file_new_from_dirname_and_basename = @compileError("unable to translate macro: undefined identifier `_frida_g_local_file_new_from_dirname_and_basename`"); // lib/frida-core/frida-core.h:1971:9
pub const g_log_always_fatal = @compileError("unable to translate macro: undefined identifier `_frida_g_log_always_fatal`"); // lib/frida-core/frida-core.h:1975:9
pub const g_log_msg_prefix = @compileError("unable to translate macro: undefined identifier `_frida_g_log_msg_prefix`"); // lib/frida-core/frida-core.h:1978:9
pub const g_lstat = @compileError("unable to translate macro: undefined identifier `_frida_g_lstat`"); // lib/frida-core/frida-core.h:2000:9
pub const g_main_context_new_with_next_id = @compileError("unable to translate macro: undefined identifier `_frida_g_main_context_new_with_next_id`"); // lib/frida-core/frida-core.h:2018:9
pub const g_memory_monitor_dbus_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_memory_monitor_dbus_get_type`"); // lib/frida-core/frida-core.h:2110:9
pub const g_memory_monitor_portal_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_memory_monitor_portal_get_type`"); // lib/frida-core/frida-core.h:2113:9
pub const g_memory_settings_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_memory_settings_backend_get_type`"); // lib/frida-core/frida-core.h:2123:9
pub const g_memory_settings_backend_new = @compileError("unable to translate macro: undefined identifier `_frida_g_memory_settings_backend_new`"); // lib/frida-core/frida-core.h:2124:9
pub const g_mkdir = @compileError("unable to translate macro: undefined identifier `_frida_g_mkdir`"); // lib/frida-core/frida-core.h:2179:9
pub const g_network_monitor_base_add_network = @compileError("unable to translate macro: undefined identifier `_frida_g_network_monitor_base_add_network`"); // lib/frida-core/frida-core.h:2266:9
pub const g_network_monitor_base_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_network_monitor_base_get_type`"); // lib/frida-core/frida-core.h:2267:9
pub const g_network_monitor_base_remove_network = @compileError("unable to translate macro: undefined identifier `_frida_g_network_monitor_base_remove_network`"); // lib/frida-core/frida-core.h:2268:9
pub const g_network_monitor_base_set_networks = @compileError("unable to translate macro: undefined identifier `_frida_g_network_monitor_base_set_networks`"); // lib/frida-core/frida-core.h:2269:9
pub const g_network_monitor_portal_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_network_monitor_portal_get_type`"); // lib/frida-core/frida-core.h:2278:9
pub const g_networking_init = @compileError("unable to translate macro: undefined identifier `_frida_g_networking_init`"); // lib/frida-core/frida-core.h:2286:9
pub const g_notification_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_backend_get_type`"); // lib/frida-core/frida-core.h:2319:9
pub const g_notification_backend_new_default = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_backend_new_default`"); // lib/frida-core/frida-core.h:2320:9
pub const g_notification_backend_send_notification = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_backend_send_notification`"); // lib/frida-core/frida-core.h:2321:9
pub const g_notification_backend_withdraw_notification = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_backend_withdraw_notification`"); // lib/frida-core/frida-core.h:2322:9
pub const g_notification_get_body = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_body`"); // lib/frida-core/frida-core.h:2323:9
pub const g_notification_get_button = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_button`"); // lib/frida-core/frida-core.h:2324:9
pub const g_notification_get_button_with_action = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_button_with_action`"); // lib/frida-core/frida-core.h:2325:9
pub const g_notification_get_category = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_category`"); // lib/frida-core/frida-core.h:2326:9
pub const g_notification_get_default_action = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_default_action`"); // lib/frida-core/frida-core.h:2327:9
pub const g_notification_get_icon = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_icon`"); // lib/frida-core/frida-core.h:2328:9
pub const g_notification_get_n_buttons = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_n_buttons`"); // lib/frida-core/frida-core.h:2329:9
pub const g_notification_get_priority = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_priority`"); // lib/frida-core/frida-core.h:2330:9
pub const g_notification_get_title = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_get_title`"); // lib/frida-core/frida-core.h:2331:9
pub const g_notification_serialize = @compileError("unable to translate macro: undefined identifier `_frida_g_notification_serialize`"); // lib/frida-core/frida-core.h:2335:9
pub const g_null_settings_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_null_settings_backend_get_type`"); // lib/frida-core/frida-core.h:2345:9
pub const g_null_settings_backend_new = @compileError("unable to translate macro: undefined identifier `_frida_g_null_settings_backend_new`"); // lib/frida-core/frida-core.h:2346:9
pub const g_open = @compileError("unable to translate macro: undefined identifier `_frida_g_open`"); // lib/frida-core/frida-core.h:2412:9
pub const g_openuri_portal_open_uri = @compileError("unable to translate macro: undefined identifier `_frida_g_openuri_portal_open_uri`"); // lib/frida-core/frida-core.h:2413:9
pub const g_openuri_portal_open_uri_async = @compileError("unable to translate macro: undefined identifier `_frida_g_openuri_portal_open_uri_async`"); // lib/frida-core/frida-core.h:2414:9
pub const g_openuri_portal_open_uri_finish = @compileError("unable to translate macro: undefined identifier `_frida_g_openuri_portal_open_uri_finish`"); // lib/frida-core/frida-core.h:2415:9
pub const g_output_stream_async_close_is_via_threads = @compileError("unable to translate macro: undefined identifier `_frida_g_output_stream_async_close_is_via_threads`"); // lib/frida-core/frida-core.h:2448:9
pub const g_output_stream_async_write_is_via_threads = @compileError("unable to translate macro: undefined identifier `_frida_g_output_stream_async_write_is_via_threads`"); // lib/frida-core/frida-core.h:2449:9
pub const g_output_stream_async_writev_is_via_threads = @compileError("unable to translate macro: undefined identifier `_frida_g_output_stream_async_writev_is_via_threads`"); // lib/frida-core/frida-core.h:2450:9
pub const g_portal_notification_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_portal_notification_backend_get_type`"); // lib/frida-core/frida-core.h:2588:9
pub const g_power_profile_monitor_dbus_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_power_profile_monitor_dbus_get_type`"); // lib/frida-core/frida-core.h:2589:9
pub const g_power_profile_monitor_portal_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_power_profile_monitor_portal_get_type`"); // lib/frida-core/frida-core.h:2593:9
pub const g_printf = @compileError("unable to translate macro: undefined identifier `_frida_g_printf`"); // lib/frida-core/frida-core.h:2598:9
pub const g_private_set_alloc0 = @compileError("unable to translate macro: undefined identifier `_frida_g_private_set_alloc0`"); // lib/frida-core/frida-core.h:2604:9
pub const g_proxy_resolver_portal_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_proxy_resolver_portal_get_type`"); // lib/frida-core/frida-core.h:2630:9
pub const g_quark_init = @compileError("unable to translate macro: undefined identifier `_frida_g_quark_init`"); // lib/frida-core/frida-core.h:2665:9
pub const g_rc_box_alloc_full = @compileError("unable to translate macro: undefined identifier `_frida_g_rc_box_alloc_full`"); // lib/frida-core/frida-core.h:2730:9
pub const g_remove = @compileError("unable to translate macro: undefined identifier `_frida_g_remove`"); // lib/frida-core/frida-core.h:2792:9
pub const g_rename = @compileError("unable to translate macro: undefined identifier `_frida_g_rename`"); // lib/frida-core/frida-core.h:2793:9
pub const g_resolver_get_serial = @compileError("unable to translate macro: undefined identifier `_frida_g_resolver_get_serial`"); // lib/frida-core/frida-core.h:2799:9
pub const g_resolver_record_type_to_rrtype = @compileError("unable to translate macro: undefined identifier `_frida_g_resolver_record_type_to_rrtype`"); // lib/frida-core/frida-core.h:2818:9
pub const g_resolver_records_from_res_query = @compileError("unable to translate macro: undefined identifier `_frida_g_resolver_records_from_res_query`"); // lib/frida-core/frida-core.h:2819:9
pub const g_resource_file_monitor_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_resource_file_monitor_get_type`"); // lib/frida-core/frida-core.h:2824:9
pub const g_rmdir = @compileError("unable to translate macro: undefined identifier `_frida_g_rmdir`"); // lib/frida-core/frida-core.h:2842:9
pub const g_set_user_dirs = @compileError("unable to translate macro: undefined identifier `_frida_g_set_user_dirs`"); // lib/frida-core/frida-core.h:2922:9
pub const g_settings_backend_changed = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_changed`"); // lib/frida-core/frida-core.h:2925:9
pub const g_settings_backend_changed_tree = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_changed_tree`"); // lib/frida-core/frida-core.h:2926:9
pub const g_settings_backend_create_tree = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_create_tree`"); // lib/frida-core/frida-core.h:2927:9
pub const g_settings_backend_flatten_tree = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_flatten_tree`"); // lib/frida-core/frida-core.h:2928:9
pub const g_settings_backend_get_default = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_get_default`"); // lib/frida-core/frida-core.h:2929:9
pub const g_settings_backend_get_permission = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_get_permission`"); // lib/frida-core/frida-core.h:2930:9
pub const g_settings_backend_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_get_type`"); // lib/frida-core/frida-core.h:2931:9
pub const g_settings_backend_get_writable = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_get_writable`"); // lib/frida-core/frida-core.h:2932:9
pub const g_settings_backend_keys_changed = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_keys_changed`"); // lib/frida-core/frida-core.h:2933:9
pub const g_settings_backend_path_changed = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_path_changed`"); // lib/frida-core/frida-core.h:2934:9
pub const g_settings_backend_path_writable_changed = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_path_writable_changed`"); // lib/frida-core/frida-core.h:2935:9
pub const g_settings_backend_read = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_read`"); // lib/frida-core/frida-core.h:2936:9
pub const g_settings_backend_read_user_value = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_read_user_value`"); // lib/frida-core/frida-core.h:2937:9
pub const g_settings_backend_reset = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_reset`"); // lib/frida-core/frida-core.h:2938:9
pub const g_settings_backend_subscribe = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_subscribe`"); // lib/frida-core/frida-core.h:2939:9
pub const g_settings_backend_sync_default = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_sync_default`"); // lib/frida-core/frida-core.h:2940:9
pub const g_settings_backend_unsubscribe = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_unsubscribe`"); // lib/frida-core/frida-core.h:2941:9
pub const g_settings_backend_unwatch = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_unwatch`"); // lib/frida-core/frida-core.h:2942:9
pub const g_settings_backend_watch = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_watch`"); // lib/frida-core/frida-core.h:2943:9
pub const g_settings_backend_writable_changed = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_writable_changed`"); // lib/frida-core/frida-core.h:2944:9
pub const g_settings_backend_write = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_write`"); // lib/frida-core/frida-core.h:2945:9
pub const g_settings_backend_write_tree = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_backend_write_tree`"); // lib/frida-core/frida-core.h:2946:9
pub const g_settings_get_mapping = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_get_mapping`"); // lib/frida-core/frida-core.h:2964:9
pub const g_settings_mapping_is_compatible = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_mapping_is_compatible`"); // lib/frida-core/frida-core.h:2978:9
pub const g_settings_schema_get_child_schema = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_get_child_schema`"); // lib/frida-core/frida-core.h:2987:9
pub const g_settings_schema_get_gettext_domain = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_get_gettext_domain`"); // lib/frida-core/frida-core.h:2988:9
pub const g_settings_schema_get_string = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_get_string`"); // lib/frida-core/frida-core.h:2992:9
pub const g_settings_schema_get_value = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_get_value`"); // lib/frida-core/frida-core.h:2994:9
pub const g_settings_schema_key_clear = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_clear`"); // lib/frida-core/frida-core.h:2996:9
pub const g_settings_schema_key_from_enum = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_from_enum`"); // lib/frida-core/frida-core.h:2997:9
pub const g_settings_schema_key_from_flags = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_from_flags`"); // lib/frida-core/frida-core.h:2998:9
pub const g_settings_schema_key_get_per_desktop_default = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_get_per_desktop_default`"); // lib/frida-core/frida-core.h:3002:9
pub const g_settings_schema_key_get_translated_default = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_get_translated_default`"); // lib/frida-core/frida-core.h:3005:9
pub const g_settings_schema_key_init = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_init`"); // lib/frida-core/frida-core.h:3008:9
pub const g_settings_schema_key_range_fixup = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_range_fixup`"); // lib/frida-core/frida-core.h:3010:9
pub const g_settings_schema_key_to_enum = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_to_enum`"); // lib/frida-core/frida-core.h:3012:9
pub const g_settings_schema_key_to_flags = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_to_flags`"); // lib/frida-core/frida-core.h:3013:9
pub const g_settings_schema_key_type_check = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_key_type_check`"); // lib/frida-core/frida-core.h:3014:9
pub const g_settings_schema_list = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_schema_list`"); // lib/frida-core/frida-core.h:3016:9
pub const g_settings_set_mapping = @compileError("unable to translate macro: undefined identifier `_frida_g_settings_set_mapping`"); // lib/frida-core/frida-core.h:3035:9
pub const g_socket = @compileError("unable to translate macro: undefined identifier `_frida_g_socket`"); // lib/frida-core/frida-core.h:3187:9
pub const g_socket_connection_set_cached_remote_address = @compileError("unable to translate macro: undefined identifier `_frida_g_socket_connection_set_cached_remote_address`"); // lib/frida-core/frida-core.h:3254:9
pub const g_sprintf = @compileError("unable to translate macro: undefined identifier `_frida_g_sprintf`"); // lib/frida-core/frida-core.h:3386:9
pub const g_stat = @compileError("unable to translate macro: undefined identifier `_frida_g_stat`"); // lib/frida-core/frida-core.h:3396:9
pub const g_subprocess_set_launcher = @compileError("unable to translate macro: undefined identifier `_frida_g_subprocess_set_launcher`"); // lib/frida-core/frida-core.h:3558:9
pub const g_system_thread_exit = @compileError("unable to translate macro: undefined identifier `_frida_g_system_thread_exit`"); // lib/frida-core/frida-core.h:3565:9
pub const g_system_thread_free = @compileError("unable to translate macro: undefined identifier `_frida_g_system_thread_free`"); // lib/frida-core/frida-core.h:3566:9
pub const g_system_thread_get_scheduler_settings = @compileError("unable to translate macro: undefined identifier `_frida_g_system_thread_get_scheduler_settings`"); // lib/frida-core/frida-core.h:3567:9
pub const g_system_thread_new = @compileError("unable to translate macro: undefined identifier `_frida_g_system_thread_new`"); // lib/frida-core/frida-core.h:3568:9
pub const g_system_thread_set_name = @compileError("unable to translate macro: undefined identifier `_frida_g_system_thread_set_name`"); // lib/frida-core/frida-core.h:3569:9
pub const g_system_thread_wait = @compileError("unable to translate macro: undefined identifier `_frida_g_system_thread_wait`"); // lib/frida-core/frida-core.h:3570:9
pub const g_thread_get_scheduler_settings = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_get_scheduler_settings`"); // lib/frida-core/frida-core.h:3696:9
pub const g_thread_init_glib = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_init_glib`"); // lib/frida-core/frida-core.h:3700:9
pub const g_thread_lifetime_beacon_check = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_lifetime_beacon_check`"); // lib/frida-core/frida-core.h:3703:9
pub const g_thread_lifetime_beacon_free = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_lifetime_beacon_free`"); // lib/frida-core/frida-core.h:3704:9
pub const g_thread_lifetime_beacon_new = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_lifetime_beacon_new`"); // lib/frida-core/frida-core.h:3705:9
pub const g_thread_n_created = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_n_created`"); // lib/frida-core/frida-core.h:3706:9
pub const g_thread_new_internal = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_new_internal`"); // lib/frida-core/frida-core.h:3708:9
pub const g_thread_perform_cleanup = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_perform_cleanup`"); // lib/frida-core/frida-core.h:3709:9
pub const g_thread_private_destroy_later = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_private_destroy_later`"); // lib/frida-core/frida-core.h:3726:9
pub const g_thread_proxy = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_proxy`"); // lib/frida-core/frida-core.h:3727:9
pub const g_thread_schedule_cleanup = @compileError("unable to translate macro: undefined identifier `_frida_g_thread_schedule_cleanup`"); // lib/frida-core/frida-core.h:3729:9
pub const g_threaded_resolver_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_threaded_resolver_get_type`"); // lib/frida-core/frida-core.h:3738:9
pub const g_tinylist_foreach = @compileError("unable to translate macro: undefined identifier `_frida_g_tinylist_foreach`"); // lib/frida-core/frida-core.h:3775:9
pub const g_tinylist_free = @compileError("unable to translate macro: undefined identifier `_frida_g_tinylist_free`"); // lib/frida-core/frida-core.h:3776:9
pub const g_tinylist_prepend = @compileError("unable to translate macro: undefined identifier `_frida_g_tinylist_prepend`"); // lib/frida-core/frida-core.h:3777:9
pub const g_tinylist_remove = @compileError("unable to translate macro: undefined identifier `_frida_g_tinylist_remove`"); // lib/frida-core/frida-core.h:3778:9
pub const g_tls_backend_openssl_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_backend_openssl_get_type`"); // lib/frida-core/frida-core.h:3789:9
pub const g_tls_backend_openssl_register = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_backend_openssl_register`"); // lib/frida-core/frida-core.h:3790:9
pub const g_tls_bio_new_from_datagram_based = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_bio_new_from_datagram_based`"); // lib/frida-core/frida-core.h:3794:9
pub const g_tls_bio_new_from_iostream = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_bio_new_from_iostream`"); // lib/frida-core/frida-core.h:3795:9
pub const g_tls_bio_set_read_cancellable = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_bio_set_read_cancellable`"); // lib/frida-core/frida-core.h:3796:9
pub const g_tls_bio_set_read_error = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_bio_set_read_error`"); // lib/frida-core/frida-core.h:3797:9
pub const g_tls_bio_set_write_cancellable = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_bio_set_write_cancellable`"); // lib/frida-core/frida-core.h:3798:9
pub const g_tls_bio_set_write_error = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_bio_set_write_error`"); // lib/frida-core/frida-core.h:3799:9
pub const g_tls_bio_wait_available = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_bio_wait_available`"); // lib/frida-core/frida-core.h:3800:9
pub const g_tls_certificate_openssl_build_chain = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_build_chain`"); // lib/frida-core/frida-core.h:3818:9
pub const g_tls_certificate_openssl_convert_error = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_convert_error`"); // lib/frida-core/frida-core.h:3819:9
pub const g_tls_certificate_openssl_get_bytes = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_get_bytes`"); // lib/frida-core/frida-core.h:3820:9
pub const g_tls_certificate_openssl_get_cert = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_get_cert`"); // lib/frida-core/frida-core.h:3821:9
pub const g_tls_certificate_openssl_get_key = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_get_key`"); // lib/frida-core/frida-core.h:3822:9
pub const g_tls_certificate_openssl_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_get_type`"); // lib/frida-core/frida-core.h:3823:9
pub const g_tls_certificate_openssl_new = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_new`"); // lib/frida-core/frida-core.h:3824:9
pub const g_tls_certificate_openssl_new_from_x509 = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_new_from_x509`"); // lib/frida-core/frida-core.h:3825:9
pub const g_tls_certificate_openssl_set_data = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_set_data`"); // lib/frida-core/frida-core.h:3826:9
pub const g_tls_certificate_openssl_set_issuer = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_set_issuer`"); // lib/frida-core/frida-core.h:3827:9
pub const g_tls_certificate_openssl_verify_identity = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_certificate_openssl_verify_identity`"); // lib/frida-core/frida-core.h:3828:9
pub const g_tls_client_connection_openssl_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_client_connection_openssl_get_type`"); // lib/frida-core/frida-core.h:3841:9
pub const g_tls_connection_base_base_check = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_base_check`"); // lib/frida-core/frida-core.h:3845:9
pub const g_tls_connection_base_check = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_check`"); // lib/frida-core/frida-core.h:3846:9
pub const g_tls_connection_base_close_internal = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_close_internal`"); // lib/frida-core/frida-core.h:3847:9
pub const g_tls_connection_base_create_source = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_create_source`"); // lib/frida-core/frida-core.h:3848:9
pub const g_tls_connection_base_ever_handshaked = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_ever_handshaked`"); // lib/frida-core/frida-core.h:3849:9
pub const g_tls_connection_base_get_base_iostream = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_base_iostream`"); // lib/frida-core/frida-core.h:3850:9
pub const g_tls_connection_base_get_base_istream = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_base_istream`"); // lib/frida-core/frida-core.h:3851:9
pub const g_tls_connection_base_get_base_ostream = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_base_ostream`"); // lib/frida-core/frida-core.h:3852:9
pub const g_tls_connection_base_get_base_socket = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_base_socket`"); // lib/frida-core/frida-core.h:3853:9
pub const g_tls_connection_base_get_read_cancellable = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_read_cancellable`"); // lib/frida-core/frida-core.h:3854:9
pub const g_tls_connection_base_get_read_error = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_read_error`"); // lib/frida-core/frida-core.h:3855:9
pub const g_tls_connection_base_get_read_timeout = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_read_timeout`"); // lib/frida-core/frida-core.h:3856:9
pub const g_tls_connection_base_get_session_id = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_session_id`"); // lib/frida-core/frida-core.h:3857:9
pub const g_tls_connection_base_get_session_resumption = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_session_resumption`"); // lib/frida-core/frida-core.h:3858:9
pub const g_tls_connection_base_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_type`"); // lib/frida-core/frida-core.h:3859:9
pub const g_tls_connection_base_get_write_cancellable = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_write_cancellable`"); // lib/frida-core/frida-core.h:3860:9
pub const g_tls_connection_base_get_write_error = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_write_error`"); // lib/frida-core/frida-core.h:3861:9
pub const g_tls_connection_base_get_write_timeout = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_get_write_timeout`"); // lib/frida-core/frida-core.h:3862:9
pub const g_tls_connection_base_handshake_thread_ask_password = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_handshake_thread_ask_password`"); // lib/frida-core/frida-core.h:3863:9
pub const g_tls_connection_base_handshake_thread_buffer_application_data = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_handshake_thread_buffer_application_data`"); // lib/frida-core/frida-core.h:3864:9
pub const g_tls_connection_base_handshake_thread_request_certificate = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_handshake_thread_request_certificate`"); // lib/frida-core/frida-core.h:3865:9
pub const g_tls_connection_base_handshake_thread_set_missing_requested_client_certificate = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_handshake_thread_set_missing_requested_client_certificate`"); // lib/frida-core/frida-core.h:3866:9
pub const g_tls_connection_base_handshake_thread_verify_certificate = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_handshake_thread_verify_certificate`"); // lib/frida-core/frida-core.h:3867:9
pub const g_tls_connection_base_is_dtls = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_is_dtls`"); // lib/frida-core/frida-core.h:3868:9
pub const g_tls_connection_base_is_handshaking = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_is_handshaking`"); // lib/frida-core/frida-core.h:3869:9
pub const g_tls_connection_base_pop_io = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_pop_io`"); // lib/frida-core/frida-core.h:3870:9
pub const g_tls_connection_base_push_io = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_push_io`"); // lib/frida-core/frida-core.h:3871:9
pub const g_tls_connection_base_read = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_read`"); // lib/frida-core/frida-core.h:3872:9
pub const g_tls_connection_base_set_session_resumption = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_set_session_resumption`"); // lib/frida-core/frida-core.h:3873:9
pub const g_tls_connection_base_write = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_base_write`"); // lib/frida-core/frida-core.h:3874:9
pub const g_tls_connection_openssl_get_connection_from_ssl = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_openssl_get_connection_from_ssl`"); // lib/frida-core/frida-core.h:3892:9
pub const g_tls_connection_openssl_get_ssl = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_openssl_get_ssl`"); // lib/frida-core/frida-core.h:3893:9
pub const g_tls_connection_openssl_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_connection_openssl_get_type`"); // lib/frida-core/frida-core.h:3894:9
pub const g_tls_database_openssl_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_database_openssl_get_type`"); // lib/frida-core/frida-core.h:3914:9
pub const g_tls_database_openssl_new = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_database_openssl_new`"); // lib/frida-core/frida-core.h:3915:9
pub const g_tls_database_openssl_verify_ocsp_response = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_database_openssl_verify_ocsp_response`"); // lib/frida-core/frida-core.h:3916:9
pub const g_tls_file_database_openssl_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_file_database_openssl_get_type`"); // lib/frida-core/frida-core.h:3925:9
pub const g_tls_input_stream_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_input_stream_get_type`"); // lib/frida-core/frida-core.h:3926:9
pub const g_tls_input_stream_new = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_input_stream_new`"); // lib/frida-core/frida-core.h:3927:9
pub const g_tls_log = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_log`"); // lib/frida-core/frida-core.h:3938:9
pub const g_tls_lookup_session_data = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_lookup_session_data`"); // lib/frida-core/frida-core.h:3939:9
pub const g_tls_output_stream_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_output_stream_get_type`"); // lib/frida-core/frida-core.h:3940:9
pub const g_tls_output_stream_new = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_output_stream_new`"); // lib/frida-core/frida-core.h:3941:9
pub const g_tls_request_uri = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_request_uri`"); // lib/frida-core/frida-core.h:3956:9
pub const g_tls_server_connection_openssl_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_server_connection_openssl_get_type`"); // lib/frida-core/frida-core.h:3959:9
pub const g_tls_store_session_data = @compileError("unable to translate macro: undefined identifier `_frida_g_tls_store_session_data`"); // lib/frida-core/frida-core.h:3960:9
pub const g_trace_define_int64_counter = @compileError("unable to translate macro: undefined identifier `_frida_g_trace_define_int64_counter`"); // lib/frida-core/frida-core.h:3961:9
pub const g_trace_mark = @compileError("unable to translate macro: undefined identifier `_frida_g_trace_mark`"); // lib/frida-core/frida-core.h:3962:9
pub const g_trace_set_int64_counter = @compileError("unable to translate macro: undefined identifier `_frida_g_trace_set_int64_counter`"); // lib/frida-core/frida-core.h:3963:9
pub const g_trash_portal_trash_file = @compileError("unable to translate macro: undefined identifier `_frida_g_trash_portal_trash_file`"); // lib/frida-core/frida-core.h:3964:9
pub const g_unix_error_quark = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_error_quark`"); // lib/frida-core/frida-core.h:4144:9
pub const g_unix_fd_add = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_add`"); // lib/frida-core/frida-core.h:4145:9
pub const g_unix_fd_add_full = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_add_full`"); // lib/frida-core/frida-core.h:4146:9
pub const g_unix_fd_message_append_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_message_append_fd`"); // lib/frida-core/frida-core.h:4155:9
pub const g_unix_fd_message_get_fd_list = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_message_get_fd_list`"); // lib/frida-core/frida-core.h:4156:9
pub const g_unix_fd_message_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_message_get_type`"); // lib/frida-core/frida-core.h:4157:9
pub const g_unix_fd_message_new = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_message_new`"); // lib/frida-core/frida-core.h:4158:9
pub const g_unix_fd_message_new_with_fd_list = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_message_new_with_fd_list`"); // lib/frida-core/frida-core.h:4159:9
pub const g_unix_fd_message_steal_fds = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_message_steal_fds`"); // lib/frida-core/frida-core.h:4160:9
pub const g_unix_fd_source_new = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_fd_source_new`"); // lib/frida-core/frida-core.h:4162:9
pub const g_unix_get_passwd_entry = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_get_passwd_entry`"); // lib/frida-core/frida-core.h:4163:9
pub const g_unix_input_stream_get_close_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_input_stream_get_close_fd`"); // lib/frida-core/frida-core.h:4164:9
pub const g_unix_input_stream_get_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_input_stream_get_fd`"); // lib/frida-core/frida-core.h:4165:9
pub const g_unix_input_stream_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_input_stream_get_type`"); // lib/frida-core/frida-core.h:4166:9
pub const g_unix_input_stream_new = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_input_stream_new`"); // lib/frida-core/frida-core.h:4167:9
pub const g_unix_input_stream_set_close_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_input_stream_set_close_fd`"); // lib/frida-core/frida-core.h:4168:9
pub const g_unix_is_mount_path_system_internal = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_is_mount_path_system_internal`"); // lib/frida-core/frida-core.h:4169:9
pub const g_unix_is_system_device_path = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_is_system_device_path`"); // lib/frida-core/frida-core.h:4170:9
pub const g_unix_is_system_fs_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_is_system_fs_type`"); // lib/frida-core/frida-core.h:4171:9
pub const g_unix_mount_at = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_at`"); // lib/frida-core/frida-core.h:4172:9
pub const g_unix_mount_compare = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_compare`"); // lib/frida-core/frida-core.h:4173:9
pub const g_unix_mount_copy = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_copy`"); // lib/frida-core/frida-core.h:4174:9
pub const g_unix_mount_entry_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_entry_get_type`"); // lib/frida-core/frida-core.h:4175:9
pub const g_unix_mount_for = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_for`"); // lib/frida-core/frida-core.h:4176:9
pub const g_unix_mount_free = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_free`"); // lib/frida-core/frida-core.h:4177:9
pub const g_unix_mount_get_device_path = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_get_device_path`"); // lib/frida-core/frida-core.h:4178:9
pub const g_unix_mount_get_fs_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_get_fs_type`"); // lib/frida-core/frida-core.h:4179:9
pub const g_unix_mount_get_mount_path = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_get_mount_path`"); // lib/frida-core/frida-core.h:4180:9
pub const g_unix_mount_get_options = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_get_options`"); // lib/frida-core/frida-core.h:4181:9
pub const g_unix_mount_get_root_path = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_get_root_path`"); // lib/frida-core/frida-core.h:4182:9
pub const g_unix_mount_guess_can_eject = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_guess_can_eject`"); // lib/frida-core/frida-core.h:4183:9
pub const g_unix_mount_guess_icon = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_guess_icon`"); // lib/frida-core/frida-core.h:4184:9
pub const g_unix_mount_guess_name = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_guess_name`"); // lib/frida-core/frida-core.h:4185:9
pub const g_unix_mount_guess_should_display = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_guess_should_display`"); // lib/frida-core/frida-core.h:4186:9
pub const g_unix_mount_guess_symbolic_icon = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_guess_symbolic_icon`"); // lib/frida-core/frida-core.h:4187:9
pub const g_unix_mount_is_readonly = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_is_readonly`"); // lib/frida-core/frida-core.h:4188:9
pub const g_unix_mount_is_system_internal = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_is_system_internal`"); // lib/frida-core/frida-core.h:4189:9
pub const g_unix_mount_monitor_get = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_monitor_get`"); // lib/frida-core/frida-core.h:4190:9
pub const g_unix_mount_monitor_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_monitor_get_type`"); // lib/frida-core/frida-core.h:4191:9
pub const g_unix_mount_monitor_new = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_monitor_new`"); // lib/frida-core/frida-core.h:4192:9
pub const g_unix_mount_monitor_set_rate_limit = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_monitor_set_rate_limit`"); // lib/frida-core/frida-core.h:4193:9
pub const g_unix_mount_point_at = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_at`"); // lib/frida-core/frida-core.h:4194:9
pub const g_unix_mount_point_compare = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_compare`"); // lib/frida-core/frida-core.h:4195:9
pub const g_unix_mount_point_copy = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_copy`"); // lib/frida-core/frida-core.h:4196:9
pub const g_unix_mount_point_free = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_free`"); // lib/frida-core/frida-core.h:4197:9
pub const g_unix_mount_point_get_device_path = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_get_device_path`"); // lib/frida-core/frida-core.h:4198:9
pub const g_unix_mount_point_get_fs_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_get_fs_type`"); // lib/frida-core/frida-core.h:4199:9
pub const g_unix_mount_point_get_mount_path = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_get_mount_path`"); // lib/frida-core/frida-core.h:4200:9
pub const g_unix_mount_point_get_options = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_get_options`"); // lib/frida-core/frida-core.h:4201:9
pub const g_unix_mount_point_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_get_type`"); // lib/frida-core/frida-core.h:4202:9
pub const g_unix_mount_point_guess_can_eject = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_guess_can_eject`"); // lib/frida-core/frida-core.h:4203:9
pub const g_unix_mount_point_guess_icon = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_guess_icon`"); // lib/frida-core/frida-core.h:4204:9
pub const g_unix_mount_point_guess_name = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_guess_name`"); // lib/frida-core/frida-core.h:4205:9
pub const g_unix_mount_point_guess_symbolic_icon = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_guess_symbolic_icon`"); // lib/frida-core/frida-core.h:4206:9
pub const g_unix_mount_point_is_loopback = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_is_loopback`"); // lib/frida-core/frida-core.h:4207:9
pub const g_unix_mount_point_is_readonly = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_is_readonly`"); // lib/frida-core/frida-core.h:4208:9
pub const g_unix_mount_point_is_user_mountable = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_point_is_user_mountable`"); // lib/frida-core/frida-core.h:4209:9
pub const g_unix_mount_points_changed_since = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_points_changed_since`"); // lib/frida-core/frida-core.h:4210:9
pub const g_unix_mount_points_get = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mount_points_get`"); // lib/frida-core/frida-core.h:4211:9
pub const g_unix_mounts_changed_since = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mounts_changed_since`"); // lib/frida-core/frida-core.h:4212:9
pub const g_unix_mounts_get = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_mounts_get`"); // lib/frida-core/frida-core.h:4213:9
pub const g_unix_open_pipe = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_open_pipe`"); // lib/frida-core/frida-core.h:4214:9
pub const g_unix_output_stream_get_close_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_output_stream_get_close_fd`"); // lib/frida-core/frida-core.h:4215:9
pub const g_unix_output_stream_get_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_output_stream_get_fd`"); // lib/frida-core/frida-core.h:4216:9
pub const g_unix_output_stream_get_type = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_output_stream_get_type`"); // lib/frida-core/frida-core.h:4217:9
pub const g_unix_output_stream_new = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_output_stream_new`"); // lib/frida-core/frida-core.h:4218:9
pub const g_unix_output_stream_set_close_fd = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_output_stream_set_close_fd`"); // lib/frida-core/frida-core.h:4219:9
pub const g_unix_set_fd_nonblocking = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_set_fd_nonblocking`"); // lib/frida-core/frida-core.h:4220:9
pub const g_unix_signal_add = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_signal_add`"); // lib/frida-core/frida-core.h:4221:9
pub const g_unix_signal_add_full = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_signal_add_full`"); // lib/frida-core/frida-core.h:4222:9
pub const g_unix_signal_source_new = @compileError("unable to translate macro: undefined identifier `_frida_g_unix_signal_source_new`"); // lib/frida-core/frida-core.h:4224:9
pub const g_unlink = @compileError("unable to translate macro: undefined identifier `_frida_g_unlink`"); // lib/frida-core/frida-core.h:4235:9
pub const g_utime = @compileError("unable to translate macro: undefined identifier `_frida_g_utime`"); // lib/frida-core/frida-core.h:4306:9
pub const g_variant_format_string_scan = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_format_string_scan`"); // lib/frida-core/frida-core.h:4427:9
pub const g_variant_format_string_scan_type = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_format_string_scan_type`"); // lib/frida-core/frida-core.h:4428:9
pub const g_variant_get_depth = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_get_depth`"); // lib/frida-core/frida-core.h:4438:9
pub const g_variant_get_type_info = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_get_type_info`"); // lib/frida-core/frida-core.h:4453:9
pub const g_variant_is_trusted = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_is_trusted`"); // lib/frida-core/frida-core.h:4467:9
pub const g_variant_new_from_children = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_new_from_children`"); // lib/frida-core/frida-core.h:4489:9
pub const g_variant_serialised_byteswap = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialised_byteswap`"); // lib/frida-core/frida-core.h:4519:9
pub const g_variant_serialised_check = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialised_check`"); // lib/frida-core/frida-core.h:4520:9
pub const g_variant_serialised_get_child = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialised_get_child`"); // lib/frida-core/frida-core.h:4521:9
pub const g_variant_serialised_is_normal = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialised_is_normal`"); // lib/frida-core/frida-core.h:4522:9
pub const g_variant_serialised_n_children = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialised_n_children`"); // lib/frida-core/frida-core.h:4523:9
pub const g_variant_serialiser_is_object_path = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialiser_is_object_path`"); // lib/frida-core/frida-core.h:4524:9
pub const g_variant_serialiser_is_signature = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialiser_is_signature`"); // lib/frida-core/frida-core.h:4525:9
pub const g_variant_serialiser_is_string = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialiser_is_string`"); // lib/frida-core/frida-core.h:4526:9
pub const g_variant_serialiser_needed_size = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialiser_needed_size`"); // lib/frida-core/frida-core.h:4527:9
pub const g_variant_serialiser_serialise = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_serialiser_serialise`"); // lib/frida-core/frida-core.h:4528:9
pub const g_variant_type_info_assert_no_infos = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_assert_no_infos`"); // lib/frida-core/frida-core.h:4541:9
pub const g_variant_type_info_element = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_element`"); // lib/frida-core/frida-core.h:4542:9
pub const g_variant_type_info_get = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_get`"); // lib/frida-core/frida-core.h:4543:9
pub const g_variant_type_info_get_type_string = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_get_type_string`"); // lib/frida-core/frida-core.h:4544:9
pub const g_variant_type_info_member_info = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_member_info`"); // lib/frida-core/frida-core.h:4545:9
pub const g_variant_type_info_n_members = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_n_members`"); // lib/frida-core/frida-core.h:4546:9
pub const g_variant_type_info_query = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_query`"); // lib/frida-core/frida-core.h:4547:9
pub const g_variant_type_info_query_depth = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_query_depth`"); // lib/frida-core/frida-core.h:4548:9
pub const g_variant_type_info_query_element = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_query_element`"); // lib/frida-core/frida-core.h:4549:9
pub const g_variant_type_info_ref = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_ref`"); // lib/frida-core/frida-core.h:4550:9
pub const g_variant_type_info_unref = @compileError("unable to translate macro: undefined identifier `_frida_g_variant_type_info_unref`"); // lib/frida-core/frida-core.h:4551:9
pub const g_vasprintf = @compileError("unable to translate macro: undefined identifier `_frida_g_vasprintf`"); // lib/frida-core/frida-core.h:4575:9
pub const g_vfprintf = @compileError("unable to translate macro: undefined identifier `_frida_g_vfprintf`"); // lib/frida-core/frida-core.h:4576:9
pub const g_vprintf = @compileError("unable to translate macro: undefined identifier `_frida_g_vprintf`"); // lib/frida-core/frida-core.h:4615:9
pub const g_vsprintf = @compileError("unable to translate macro: undefined identifier `_frida_g_vsprintf`"); // lib/frida-core/frida-core.h:4617:9
pub const g_wakeup_acknowledge = @compileError("unable to translate macro: undefined identifier `_frida_g_wakeup_acknowledge`"); // lib/frida-core/frida-core.h:4618:9
pub const g_wakeup_free = @compileError("unable to translate macro: undefined identifier `_frida_g_wakeup_free`"); // lib/frida-core/frida-core.h:4619:9
pub const g_wakeup_get_pollfd = @compileError("unable to translate macro: undefined identifier `_frida_g_wakeup_get_pollfd`"); // lib/frida-core/frida-core.h:4620:9
pub const g_wakeup_new = @compileError("unable to translate macro: undefined identifier `_frida_g_wakeup_new`"); // lib/frida-core/frida-core.h:4621:9
pub const g_wakeup_signal = @compileError("unable to translate macro: undefined identifier `_frida_g_wakeup_signal`"); // lib/frida-core/frida-core.h:4622:9
pub const g_win32_pop_invalid_parameter_handler = @compileError("unable to translate macro: undefined identifier `_frida_g_win32_pop_invalid_parameter_handler`"); // lib/frida-core/frida-core.h:4628:9
pub const g_win32_push_empty_invalid_parameter_handler = @compileError("unable to translate macro: undefined identifier `_frida_g_win32_push_empty_invalid_parameter_handler`"); // lib/frida-core/frida-core.h:4629:9
pub const gee_abstract_bidir_list_bidir_list_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_bidir_list_iterator`"); // lib/frida-core/frida-core.h:4638:9
pub const gee_abstract_bidir_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_construct`"); // lib/frida-core/frida-core.h:4639:9
pub const gee_abstract_bidir_list_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_get_read_only_view`"); // lib/frida-core/frida-core.h:4640:9
pub const gee_abstract_bidir_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_get_type`"); // lib/frida-core/frida-core.h:4641:9
pub const gee_abstract_bidir_list_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved0`"); // lib/frida-core/frida-core.h:4642:9
pub const gee_abstract_bidir_list_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved1`"); // lib/frida-core/frida-core.h:4643:9
pub const gee_abstract_bidir_list_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved2`"); // lib/frida-core/frida-core.h:4644:9
pub const gee_abstract_bidir_list_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved3`"); // lib/frida-core/frida-core.h:4645:9
pub const gee_abstract_bidir_list_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved4`"); // lib/frida-core/frida-core.h:4646:9
pub const gee_abstract_bidir_list_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved5`"); // lib/frida-core/frida-core.h:4647:9
pub const gee_abstract_bidir_list_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved6`"); // lib/frida-core/frida-core.h:4648:9
pub const gee_abstract_bidir_list_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved7`"); // lib/frida-core/frida-core.h:4649:9
pub const gee_abstract_bidir_list_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved8`"); // lib/frida-core/frida-core.h:4650:9
pub const gee_abstract_bidir_list_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_list_reserved9`"); // lib/frida-core/frida-core.h:4651:9
pub const gee_abstract_bidir_sorted_map_bidir_map_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_bidir_map_iterator`"); // lib/frida-core/frida-core.h:4652:9
pub const gee_abstract_bidir_sorted_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_construct`"); // lib/frida-core/frida-core.h:4653:9
pub const gee_abstract_bidir_sorted_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_get_read_only_view`"); // lib/frida-core/frida-core.h:4654:9
pub const gee_abstract_bidir_sorted_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_get_type`"); // lib/frida-core/frida-core.h:4655:9
pub const gee_abstract_bidir_sorted_map_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved0`"); // lib/frida-core/frida-core.h:4656:9
pub const gee_abstract_bidir_sorted_map_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved1`"); // lib/frida-core/frida-core.h:4657:9
pub const gee_abstract_bidir_sorted_map_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved2`"); // lib/frida-core/frida-core.h:4658:9
pub const gee_abstract_bidir_sorted_map_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved3`"); // lib/frida-core/frida-core.h:4659:9
pub const gee_abstract_bidir_sorted_map_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved4`"); // lib/frida-core/frida-core.h:4660:9
pub const gee_abstract_bidir_sorted_map_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved5`"); // lib/frida-core/frida-core.h:4661:9
pub const gee_abstract_bidir_sorted_map_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved6`"); // lib/frida-core/frida-core.h:4662:9
pub const gee_abstract_bidir_sorted_map_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved7`"); // lib/frida-core/frida-core.h:4663:9
pub const gee_abstract_bidir_sorted_map_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved8`"); // lib/frida-core/frida-core.h:4664:9
pub const gee_abstract_bidir_sorted_map_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_map_reserved9`"); // lib/frida-core/frida-core.h:4665:9
pub const gee_abstract_bidir_sorted_set_bidir_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_bidir_iterator`"); // lib/frida-core/frida-core.h:4666:9
pub const gee_abstract_bidir_sorted_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_construct`"); // lib/frida-core/frida-core.h:4667:9
pub const gee_abstract_bidir_sorted_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_get_read_only_view`"); // lib/frida-core/frida-core.h:4668:9
pub const gee_abstract_bidir_sorted_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_get_type`"); // lib/frida-core/frida-core.h:4669:9
pub const gee_abstract_bidir_sorted_set_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved0`"); // lib/frida-core/frida-core.h:4670:9
pub const gee_abstract_bidir_sorted_set_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved1`"); // lib/frida-core/frida-core.h:4671:9
pub const gee_abstract_bidir_sorted_set_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved2`"); // lib/frida-core/frida-core.h:4672:9
pub const gee_abstract_bidir_sorted_set_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved3`"); // lib/frida-core/frida-core.h:4673:9
pub const gee_abstract_bidir_sorted_set_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved4`"); // lib/frida-core/frida-core.h:4674:9
pub const gee_abstract_bidir_sorted_set_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved5`"); // lib/frida-core/frida-core.h:4675:9
pub const gee_abstract_bidir_sorted_set_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved6`"); // lib/frida-core/frida-core.h:4676:9
pub const gee_abstract_bidir_sorted_set_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved7`"); // lib/frida-core/frida-core.h:4677:9
pub const gee_abstract_bidir_sorted_set_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved8`"); // lib/frida-core/frida-core.h:4678:9
pub const gee_abstract_bidir_sorted_set_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_bidir_sorted_set_reserved9`"); // lib/frida-core/frida-core.h:4679:9
pub const gee_abstract_collection_add = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_add`"); // lib/frida-core/frida-core.h:4680:9
pub const gee_abstract_collection_clear = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_clear`"); // lib/frida-core/frida-core.h:4681:9
pub const gee_abstract_collection_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_construct`"); // lib/frida-core/frida-core.h:4682:9
pub const gee_abstract_collection_contains = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_contains`"); // lib/frida-core/frida-core.h:4683:9
pub const gee_abstract_collection_foreach = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_foreach`"); // lib/frida-core/frida-core.h:4684:9
pub const gee_abstract_collection_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_get_read_only`"); // lib/frida-core/frida-core.h:4685:9
pub const gee_abstract_collection_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_get_read_only_view`"); // lib/frida-core/frida-core.h:4686:9
pub const gee_abstract_collection_get_size = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_get_size`"); // lib/frida-core/frida-core.h:4687:9
pub const gee_abstract_collection_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_get_type`"); // lib/frida-core/frida-core.h:4688:9
pub const gee_abstract_collection_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_iterator`"); // lib/frida-core/frida-core.h:4689:9
pub const gee_abstract_collection_remove = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_remove`"); // lib/frida-core/frida-core.h:4690:9
pub const gee_abstract_collection_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved0`"); // lib/frida-core/frida-core.h:4691:9
pub const gee_abstract_collection_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved1`"); // lib/frida-core/frida-core.h:4692:9
pub const gee_abstract_collection_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved2`"); // lib/frida-core/frida-core.h:4693:9
pub const gee_abstract_collection_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved3`"); // lib/frida-core/frida-core.h:4694:9
pub const gee_abstract_collection_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved4`"); // lib/frida-core/frida-core.h:4695:9
pub const gee_abstract_collection_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved5`"); // lib/frida-core/frida-core.h:4696:9
pub const gee_abstract_collection_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved6`"); // lib/frida-core/frida-core.h:4697:9
pub const gee_abstract_collection_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved7`"); // lib/frida-core/frida-core.h:4698:9
pub const gee_abstract_collection_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved8`"); // lib/frida-core/frida-core.h:4699:9
pub const gee_abstract_collection_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_collection_reserved9`"); // lib/frida-core/frida-core.h:4700:9
pub const gee_abstract_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_construct`"); // lib/frida-core/frida-core.h:4701:9
pub const gee_abstract_list_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_get`"); // lib/frida-core/frida-core.h:4702:9
pub const gee_abstract_list_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_get_read_only_view`"); // lib/frida-core/frida-core.h:4703:9
pub const gee_abstract_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_get_type`"); // lib/frida-core/frida-core.h:4704:9
pub const gee_abstract_list_index_of = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_index_of`"); // lib/frida-core/frida-core.h:4705:9
pub const gee_abstract_list_insert = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_insert`"); // lib/frida-core/frida-core.h:4706:9
pub const gee_abstract_list_list_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_list_iterator`"); // lib/frida-core/frida-core.h:4707:9
pub const gee_abstract_list_remove_at = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_remove_at`"); // lib/frida-core/frida-core.h:4708:9
pub const gee_abstract_list_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved0`"); // lib/frida-core/frida-core.h:4709:9
pub const gee_abstract_list_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved1`"); // lib/frida-core/frida-core.h:4710:9
pub const gee_abstract_list_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved2`"); // lib/frida-core/frida-core.h:4711:9
pub const gee_abstract_list_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved3`"); // lib/frida-core/frida-core.h:4712:9
pub const gee_abstract_list_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved4`"); // lib/frida-core/frida-core.h:4713:9
pub const gee_abstract_list_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved5`"); // lib/frida-core/frida-core.h:4714:9
pub const gee_abstract_list_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved6`"); // lib/frida-core/frida-core.h:4715:9
pub const gee_abstract_list_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved7`"); // lib/frida-core/frida-core.h:4716:9
pub const gee_abstract_list_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved8`"); // lib/frida-core/frida-core.h:4717:9
pub const gee_abstract_list_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_reserved9`"); // lib/frida-core/frida-core.h:4718:9
pub const gee_abstract_list_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_set`"); // lib/frida-core/frida-core.h:4719:9
pub const gee_abstract_list_slice = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_list_slice`"); // lib/frida-core/frida-core.h:4720:9
pub const gee_abstract_map_clear = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_clear`"); // lib/frida-core/frida-core.h:4721:9
pub const gee_abstract_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_construct`"); // lib/frida-core/frida-core.h:4722:9
pub const gee_abstract_map_foreach = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_foreach`"); // lib/frida-core/frida-core.h:4723:9
pub const gee_abstract_map_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get`"); // lib/frida-core/frida-core.h:4724:9
pub const gee_abstract_map_get_entries = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get_entries`"); // lib/frida-core/frida-core.h:4725:9
pub const gee_abstract_map_get_keys = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get_keys`"); // lib/frida-core/frida-core.h:4726:9
pub const gee_abstract_map_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get_read_only`"); // lib/frida-core/frida-core.h:4727:9
pub const gee_abstract_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get_read_only_view`"); // lib/frida-core/frida-core.h:4728:9
pub const gee_abstract_map_get_size = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get_size`"); // lib/frida-core/frida-core.h:4729:9
pub const gee_abstract_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get_type`"); // lib/frida-core/frida-core.h:4730:9
pub const gee_abstract_map_get_values = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_get_values`"); // lib/frida-core/frida-core.h:4731:9
pub const gee_abstract_map_has = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_has`"); // lib/frida-core/frida-core.h:4732:9
pub const gee_abstract_map_has_key = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_has_key`"); // lib/frida-core/frida-core.h:4733:9
pub const gee_abstract_map_map_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_map_iterator`"); // lib/frida-core/frida-core.h:4734:9
pub const gee_abstract_map_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved0`"); // lib/frida-core/frida-core.h:4735:9
pub const gee_abstract_map_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved1`"); // lib/frida-core/frida-core.h:4736:9
pub const gee_abstract_map_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved2`"); // lib/frida-core/frida-core.h:4737:9
pub const gee_abstract_map_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved3`"); // lib/frida-core/frida-core.h:4738:9
pub const gee_abstract_map_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved4`"); // lib/frida-core/frida-core.h:4739:9
pub const gee_abstract_map_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved5`"); // lib/frida-core/frida-core.h:4740:9
pub const gee_abstract_map_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved6`"); // lib/frida-core/frida-core.h:4741:9
pub const gee_abstract_map_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved7`"); // lib/frida-core/frida-core.h:4742:9
pub const gee_abstract_map_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved8`"); // lib/frida-core/frida-core.h:4743:9
pub const gee_abstract_map_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_reserved9`"); // lib/frida-core/frida-core.h:4744:9
pub const gee_abstract_map_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_set`"); // lib/frida-core/frida-core.h:4745:9
pub const gee_abstract_map_stream = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_stream`"); // lib/frida-core/frida-core.h:4746:9
pub const gee_abstract_map_unset = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_map_unset`"); // lib/frida-core/frida-core.h:4747:9
pub const gee_abstract_multi_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_construct`"); // lib/frida-core/frida-core.h:4748:9
pub const gee_abstract_multi_map_create_multi_key_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_create_multi_key_set`"); // lib/frida-core/frida-core.h:4749:9
pub const gee_abstract_multi_map_create_value_storage = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_create_value_storage`"); // lib/frida-core/frida-core.h:4750:9
pub const gee_abstract_multi_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_get_read_only_view`"); // lib/frida-core/frida-core.h:4751:9
pub const gee_abstract_multi_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_get_type`"); // lib/frida-core/frida-core.h:4752:9
pub const gee_abstract_multi_map_get_value_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_get_value_equal_func`"); // lib/frida-core/frida-core.h:4753:9
pub const gee_abstract_multi_map_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved0`"); // lib/frida-core/frida-core.h:4754:9
pub const gee_abstract_multi_map_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved1`"); // lib/frida-core/frida-core.h:4755:9
pub const gee_abstract_multi_map_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved2`"); // lib/frida-core/frida-core.h:4756:9
pub const gee_abstract_multi_map_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved3`"); // lib/frida-core/frida-core.h:4757:9
pub const gee_abstract_multi_map_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved4`"); // lib/frida-core/frida-core.h:4758:9
pub const gee_abstract_multi_map_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved5`"); // lib/frida-core/frida-core.h:4759:9
pub const gee_abstract_multi_map_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved6`"); // lib/frida-core/frida-core.h:4760:9
pub const gee_abstract_multi_map_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved7`"); // lib/frida-core/frida-core.h:4761:9
pub const gee_abstract_multi_map_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_map_reserved8`"); // lib/frida-core/frida-core.h:4762:9
pub const gee_abstract_multi_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_construct`"); // lib/frida-core/frida-core.h:4763:9
pub const gee_abstract_multi_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_get_read_only_view`"); // lib/frida-core/frida-core.h:4764:9
pub const gee_abstract_multi_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_get_type`"); // lib/frida-core/frida-core.h:4765:9
pub const gee_abstract_multi_set_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved0`"); // lib/frida-core/frida-core.h:4766:9
pub const gee_abstract_multi_set_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved1`"); // lib/frida-core/frida-core.h:4767:9
pub const gee_abstract_multi_set_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved2`"); // lib/frida-core/frida-core.h:4768:9
pub const gee_abstract_multi_set_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved3`"); // lib/frida-core/frida-core.h:4769:9
pub const gee_abstract_multi_set_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved4`"); // lib/frida-core/frida-core.h:4770:9
pub const gee_abstract_multi_set_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved5`"); // lib/frida-core/frida-core.h:4771:9
pub const gee_abstract_multi_set_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved6`"); // lib/frida-core/frida-core.h:4772:9
pub const gee_abstract_multi_set_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved7`"); // lib/frida-core/frida-core.h:4773:9
pub const gee_abstract_multi_set_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_multi_set_reserved8`"); // lib/frida-core/frida-core.h:4774:9
pub const gee_abstract_queue_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_construct`"); // lib/frida-core/frida-core.h:4775:9
pub const gee_abstract_queue_get_capacity = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_get_capacity`"); // lib/frida-core/frida-core.h:4776:9
pub const gee_abstract_queue_get_is_full = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_get_is_full`"); // lib/frida-core/frida-core.h:4777:9
pub const gee_abstract_queue_get_remaining_capacity = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_get_remaining_capacity`"); // lib/frida-core/frida-core.h:4778:9
pub const gee_abstract_queue_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_get_type`"); // lib/frida-core/frida-core.h:4779:9
pub const gee_abstract_queue_peek = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_peek`"); // lib/frida-core/frida-core.h:4780:9
pub const gee_abstract_queue_poll = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_poll`"); // lib/frida-core/frida-core.h:4781:9
pub const gee_abstract_queue_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved0`"); // lib/frida-core/frida-core.h:4782:9
pub const gee_abstract_queue_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved1`"); // lib/frida-core/frida-core.h:4783:9
pub const gee_abstract_queue_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved2`"); // lib/frida-core/frida-core.h:4784:9
pub const gee_abstract_queue_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved3`"); // lib/frida-core/frida-core.h:4785:9
pub const gee_abstract_queue_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved4`"); // lib/frida-core/frida-core.h:4786:9
pub const gee_abstract_queue_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved5`"); // lib/frida-core/frida-core.h:4787:9
pub const gee_abstract_queue_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved6`"); // lib/frida-core/frida-core.h:4788:9
pub const gee_abstract_queue_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved7`"); // lib/frida-core/frida-core.h:4789:9
pub const gee_abstract_queue_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved8`"); // lib/frida-core/frida-core.h:4790:9
pub const gee_abstract_queue_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_queue_reserved9`"); // lib/frida-core/frida-core.h:4791:9
pub const gee_abstract_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_construct`"); // lib/frida-core/frida-core.h:4792:9
pub const gee_abstract_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_get_read_only_view`"); // lib/frida-core/frida-core.h:4793:9
pub const gee_abstract_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_get_type`"); // lib/frida-core/frida-core.h:4794:9
pub const gee_abstract_set_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved0`"); // lib/frida-core/frida-core.h:4795:9
pub const gee_abstract_set_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved1`"); // lib/frida-core/frida-core.h:4796:9
pub const gee_abstract_set_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved2`"); // lib/frida-core/frida-core.h:4797:9
pub const gee_abstract_set_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved3`"); // lib/frida-core/frida-core.h:4798:9
pub const gee_abstract_set_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved4`"); // lib/frida-core/frida-core.h:4799:9
pub const gee_abstract_set_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved5`"); // lib/frida-core/frida-core.h:4800:9
pub const gee_abstract_set_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved6`"); // lib/frida-core/frida-core.h:4801:9
pub const gee_abstract_set_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved7`"); // lib/frida-core/frida-core.h:4802:9
pub const gee_abstract_set_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved8`"); // lib/frida-core/frida-core.h:4803:9
pub const gee_abstract_set_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_set_reserved9`"); // lib/frida-core/frida-core.h:4804:9
pub const gee_abstract_sorted_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_construct`"); // lib/frida-core/frida-core.h:4805:9
pub const gee_abstract_sorted_map_get_ascending_entries = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_get_ascending_entries`"); // lib/frida-core/frida-core.h:4806:9
pub const gee_abstract_sorted_map_get_ascending_keys = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_get_ascending_keys`"); // lib/frida-core/frida-core.h:4807:9
pub const gee_abstract_sorted_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_get_type`"); // lib/frida-core/frida-core.h:4808:9
pub const gee_abstract_sorted_map_head_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_head_map`"); // lib/frida-core/frida-core.h:4809:9
pub const gee_abstract_sorted_map_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved0`"); // lib/frida-core/frida-core.h:4810:9
pub const gee_abstract_sorted_map_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved1`"); // lib/frida-core/frida-core.h:4811:9
pub const gee_abstract_sorted_map_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved2`"); // lib/frida-core/frida-core.h:4812:9
pub const gee_abstract_sorted_map_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved3`"); // lib/frida-core/frida-core.h:4813:9
pub const gee_abstract_sorted_map_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved4`"); // lib/frida-core/frida-core.h:4814:9
pub const gee_abstract_sorted_map_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved5`"); // lib/frida-core/frida-core.h:4815:9
pub const gee_abstract_sorted_map_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved6`"); // lib/frida-core/frida-core.h:4816:9
pub const gee_abstract_sorted_map_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved7`"); // lib/frida-core/frida-core.h:4817:9
pub const gee_abstract_sorted_map_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved8`"); // lib/frida-core/frida-core.h:4818:9
pub const gee_abstract_sorted_map_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_reserved9`"); // lib/frida-core/frida-core.h:4819:9
pub const gee_abstract_sorted_map_sub_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_sub_map`"); // lib/frida-core/frida-core.h:4820:9
pub const gee_abstract_sorted_map_tail_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_map_tail_map`"); // lib/frida-core/frida-core.h:4821:9
pub const gee_abstract_sorted_set_ceil = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_ceil`"); // lib/frida-core/frida-core.h:4822:9
pub const gee_abstract_sorted_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_construct`"); // lib/frida-core/frida-core.h:4823:9
pub const gee_abstract_sorted_set_first = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_first`"); // lib/frida-core/frida-core.h:4824:9
pub const gee_abstract_sorted_set_floor = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_floor`"); // lib/frida-core/frida-core.h:4825:9
pub const gee_abstract_sorted_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_get_read_only_view`"); // lib/frida-core/frida-core.h:4826:9
pub const gee_abstract_sorted_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_get_type`"); // lib/frida-core/frida-core.h:4827:9
pub const gee_abstract_sorted_set_head_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_head_set`"); // lib/frida-core/frida-core.h:4828:9
pub const gee_abstract_sorted_set_higher = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_higher`"); // lib/frida-core/frida-core.h:4829:9
pub const gee_abstract_sorted_set_iterator_at = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_iterator_at`"); // lib/frida-core/frida-core.h:4830:9
pub const gee_abstract_sorted_set_last = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_last`"); // lib/frida-core/frida-core.h:4831:9
pub const gee_abstract_sorted_set_lower = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_lower`"); // lib/frida-core/frida-core.h:4832:9
pub const gee_abstract_sorted_set_reserved0 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved0`"); // lib/frida-core/frida-core.h:4833:9
pub const gee_abstract_sorted_set_reserved1 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved1`"); // lib/frida-core/frida-core.h:4834:9
pub const gee_abstract_sorted_set_reserved2 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved2`"); // lib/frida-core/frida-core.h:4835:9
pub const gee_abstract_sorted_set_reserved3 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved3`"); // lib/frida-core/frida-core.h:4836:9
pub const gee_abstract_sorted_set_reserved4 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved4`"); // lib/frida-core/frida-core.h:4837:9
pub const gee_abstract_sorted_set_reserved5 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved5`"); // lib/frida-core/frida-core.h:4838:9
pub const gee_abstract_sorted_set_reserved6 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved6`"); // lib/frida-core/frida-core.h:4839:9
pub const gee_abstract_sorted_set_reserved7 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved7`"); // lib/frida-core/frida-core.h:4840:9
pub const gee_abstract_sorted_set_reserved8 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved8`"); // lib/frida-core/frida-core.h:4841:9
pub const gee_abstract_sorted_set_reserved9 = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_reserved9`"); // lib/frida-core/frida-core.h:4842:9
pub const gee_abstract_sorted_set_sub_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_sub_set`"); // lib/frida-core/frida-core.h:4843:9
pub const gee_abstract_sorted_set_tail_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_abstract_sorted_set_tail_set`"); // lib/frida-core/frida-core.h:4844:9
pub const gee_array_list_add_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_add_all`"); // lib/frida-core/frida-core.h:4845:9
pub const gee_array_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_construct`"); // lib/frida-core/frida-core.h:4846:9
pub const gee_array_list_construct_with_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_construct_with_closure`"); // lib/frida-core/frida-core.h:4847:9
pub const gee_array_list_construct_wrap = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_construct_wrap`"); // lib/frida-core/frida-core.h:4848:9
pub const gee_array_list_get_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_get_equal_func`"); // lib/frida-core/frida-core.h:4849:9
pub const gee_array_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_get_type`"); // lib/frida-core/frida-core.h:4850:9
pub const gee_array_list_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_new`"); // lib/frida-core/frida-core.h:4851:9
pub const gee_array_list_new_with_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_new_with_closure`"); // lib/frida-core/frida-core.h:4852:9
pub const gee_array_list_new_wrap = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_list_new_wrap`"); // lib/frida-core/frida-core.h:4853:9
pub const gee_array_queue_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_queue_construct`"); // lib/frida-core/frida-core.h:4854:9
pub const gee_array_queue_get_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_queue_get_equal_func`"); // lib/frida-core/frida-core.h:4855:9
pub const gee_array_queue_get_is_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_queue_get_is_empty`"); // lib/frida-core/frida-core.h:4856:9
pub const gee_array_queue_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_queue_get_type`"); // lib/frida-core/frida-core.h:4857:9
pub const gee_array_queue_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_array_queue_new`"); // lib/frida-core/frida-core.h:4858:9
pub const gee_async_task = @compileError("unable to translate macro: undefined identifier `_frida_gee_async_task`"); // lib/frida-core/frida-core.h:4859:9
pub const gee_async_task_finish = @compileError("unable to translate macro: undefined identifier `_frida_gee_async_task_finish`"); // lib/frida-core/frida-core.h:4860:9
pub const gee_bidir_iterator_first = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_iterator_first`"); // lib/frida-core/frida-core.h:4861:9
pub const gee_bidir_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_iterator_get_type`"); // lib/frida-core/frida-core.h:4862:9
pub const gee_bidir_iterator_has_previous = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_iterator_has_previous`"); // lib/frida-core/frida-core.h:4863:9
pub const gee_bidir_iterator_last = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_iterator_last`"); // lib/frida-core/frida-core.h:4864:9
pub const gee_bidir_iterator_previous = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_iterator_previous`"); // lib/frida-core/frida-core.h:4865:9
pub const gee_bidir_list_bidir_list_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_list_bidir_list_iterator`"); // lib/frida-core/frida-core.h:4866:9
pub const gee_bidir_list_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_list_get_read_only_view`"); // lib/frida-core/frida-core.h:4867:9
pub const gee_bidir_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_list_get_type`"); // lib/frida-core/frida-core.h:4868:9
pub const gee_bidir_list_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_list_iterator_get_type`"); // lib/frida-core/frida-core.h:4869:9
pub const gee_bidir_list_iterator_insert = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_list_iterator_insert`"); // lib/frida-core/frida-core.h:4870:9
pub const gee_bidir_map_iterator_first = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_map_iterator_first`"); // lib/frida-core/frida-core.h:4871:9
pub const gee_bidir_map_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_map_iterator_get_type`"); // lib/frida-core/frida-core.h:4872:9
pub const gee_bidir_map_iterator_has_previous = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_map_iterator_has_previous`"); // lib/frida-core/frida-core.h:4873:9
pub const gee_bidir_map_iterator_last = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_map_iterator_last`"); // lib/frida-core/frida-core.h:4874:9
pub const gee_bidir_map_iterator_previous = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_map_iterator_previous`"); // lib/frida-core/frida-core.h:4875:9
pub const gee_bidir_sorted_map_bidir_map_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_map_bidir_map_iterator`"); // lib/frida-core/frida-core.h:4876:9
pub const gee_bidir_sorted_map_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_map_empty`"); // lib/frida-core/frida-core.h:4877:9
pub const gee_bidir_sorted_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_map_get_read_only_view`"); // lib/frida-core/frida-core.h:4878:9
pub const gee_bidir_sorted_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_map_get_type`"); // lib/frida-core/frida-core.h:4879:9
pub const gee_bidir_sorted_set_bidir_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_set_bidir_iterator`"); // lib/frida-core/frida-core.h:4880:9
pub const gee_bidir_sorted_set_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_set_empty`"); // lib/frida-core/frida-core.h:4881:9
pub const gee_bidir_sorted_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_set_get_read_only_view`"); // lib/frida-core/frida-core.h:4882:9
pub const gee_bidir_sorted_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_bidir_sorted_set_get_type`"); // lib/frida-core/frida-core.h:4883:9
pub const gee_collection_add = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_add`"); // lib/frida-core/frida-core.h:4884:9
pub const gee_collection_add_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_add_all`"); // lib/frida-core/frida-core.h:4885:9
pub const gee_collection_add_all_array = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_add_all_array`"); // lib/frida-core/frida-core.h:4886:9
pub const gee_collection_add_all_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_add_all_iterator`"); // lib/frida-core/frida-core.h:4887:9
pub const gee_collection_clear = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_clear`"); // lib/frida-core/frida-core.h:4888:9
pub const gee_collection_contains = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_contains`"); // lib/frida-core/frida-core.h:4889:9
pub const gee_collection_contains_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_contains_all`"); // lib/frida-core/frida-core.h:4890:9
pub const gee_collection_contains_all_array = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_contains_all_array`"); // lib/frida-core/frida-core.h:4891:9
pub const gee_collection_contains_all_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_contains_all_iterator`"); // lib/frida-core/frida-core.h:4892:9
pub const gee_collection_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_empty`"); // lib/frida-core/frida-core.h:4893:9
pub const gee_collection_get_is_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_get_is_empty`"); // lib/frida-core/frida-core.h:4894:9
pub const gee_collection_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_get_read_only`"); // lib/frida-core/frida-core.h:4895:9
pub const gee_collection_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_get_read_only_view`"); // lib/frida-core/frida-core.h:4896:9
pub const gee_collection_get_size = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_get_size`"); // lib/frida-core/frida-core.h:4897:9
pub const gee_collection_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_get_type`"); // lib/frida-core/frida-core.h:4898:9
pub const gee_collection_remove = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_remove`"); // lib/frida-core/frida-core.h:4899:9
pub const gee_collection_remove_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_remove_all`"); // lib/frida-core/frida-core.h:4900:9
pub const gee_collection_remove_all_array = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_remove_all_array`"); // lib/frida-core/frida-core.h:4901:9
pub const gee_collection_remove_all_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_remove_all_iterator`"); // lib/frida-core/frida-core.h:4902:9
pub const gee_collection_retain_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_retain_all`"); // lib/frida-core/frida-core.h:4903:9
pub const gee_collection_to_array = @compileError("unable to translate macro: undefined identifier `_frida_gee_collection_to_array`"); // lib/frida-core/frida-core.h:4904:9
pub const gee_comparable_compare_to = @compileError("unable to translate macro: undefined identifier `_frida_gee_comparable_compare_to`"); // lib/frida-core/frida-core.h:4905:9
pub const gee_comparable_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_comparable_get_type`"); // lib/frida-core/frida-core.h:4906:9
pub const gee_concurrent_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_list_construct`"); // lib/frida-core/frida-core.h:4907:9
pub const gee_concurrent_list_construct_with_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_list_construct_with_closure`"); // lib/frida-core/frida-core.h:4908:9
pub const gee_concurrent_list_get_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_list_get_equal_func`"); // lib/frida-core/frida-core.h:4909:9
pub const gee_concurrent_list_get_is_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_list_get_is_empty`"); // lib/frida-core/frida-core.h:4910:9
pub const gee_concurrent_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_list_get_type`"); // lib/frida-core/frida-core.h:4911:9
pub const gee_concurrent_list_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_list_new`"); // lib/frida-core/frida-core.h:4912:9
pub const gee_concurrent_list_new_with_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_list_new_with_closure`"); // lib/frida-core/frida-core.h:4913:9
pub const gee_concurrent_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_set_construct`"); // lib/frida-core/frida-core.h:4914:9
pub const gee_concurrent_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_set_get_type`"); // lib/frida-core/frida-core.h:4915:9
pub const gee_concurrent_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_set_new`"); // lib/frida-core/frida-core.h:4916:9
pub const gee_concurrent_set_range_type_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_concurrent_set_range_type_get_type`"); // lib/frida-core/frida-core.h:4917:9
pub const gee_deque_drain_head = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_drain_head`"); // lib/frida-core/frida-core.h:4918:9
pub const gee_deque_drain_tail = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_drain_tail`"); // lib/frida-core/frida-core.h:4919:9
pub const gee_deque_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_get_type`"); // lib/frida-core/frida-core.h:4920:9
pub const gee_deque_offer_head = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_offer_head`"); // lib/frida-core/frida-core.h:4921:9
pub const gee_deque_offer_tail = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_offer_tail`"); // lib/frida-core/frida-core.h:4922:9
pub const gee_deque_peek_head = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_peek_head`"); // lib/frida-core/frida-core.h:4923:9
pub const gee_deque_peek_tail = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_peek_tail`"); // lib/frida-core/frida-core.h:4924:9
pub const gee_deque_poll_head = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_poll_head`"); // lib/frida-core/frida-core.h:4925:9
pub const gee_deque_poll_tail = @compileError("unable to translate macro: undefined identifier `_frida_gee_deque_poll_tail`"); // lib/frida-core/frida-core.h:4926:9
pub const gee_functions_compare_data_func_closure_clone_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_compare_data_func_closure_clone_func`"); // lib/frida-core/frida-core.h:4927:9
pub const gee_functions_compare_data_func_closure_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_compare_data_func_closure_construct`"); // lib/frida-core/frida-core.h:4928:9
pub const gee_functions_compare_data_func_closure_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_compare_data_func_closure_get_type`"); // lib/frida-core/frida-core.h:4929:9
pub const gee_functions_compare_data_func_closure_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_compare_data_func_closure_new`"); // lib/frida-core/frida-core.h:4930:9
pub const gee_functions_compare_data_func_closure_ref = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_compare_data_func_closure_ref`"); // lib/frida-core/frida-core.h:4931:9
pub const gee_functions_compare_data_func_closure_unref = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_compare_data_func_closure_unref`"); // lib/frida-core/frida-core.h:4932:9
pub const gee_functions_equal_data_func_closure_clone_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_equal_data_func_closure_clone_func`"); // lib/frida-core/frida-core.h:4933:9
pub const gee_functions_equal_data_func_closure_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_equal_data_func_closure_construct`"); // lib/frida-core/frida-core.h:4934:9
pub const gee_functions_equal_data_func_closure_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_equal_data_func_closure_get_type`"); // lib/frida-core/frida-core.h:4935:9
pub const gee_functions_equal_data_func_closure_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_equal_data_func_closure_new`"); // lib/frida-core/frida-core.h:4936:9
pub const gee_functions_equal_data_func_closure_ref = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_equal_data_func_closure_ref`"); // lib/frida-core/frida-core.h:4937:9
pub const gee_functions_equal_data_func_closure_unref = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_equal_data_func_closure_unref`"); // lib/frida-core/frida-core.h:4938:9
pub const gee_functions_get_compare_func_for = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_get_compare_func_for`"); // lib/frida-core/frida-core.h:4939:9
pub const gee_functions_get_equal_func_for = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_get_equal_func_for`"); // lib/frida-core/frida-core.h:4940:9
pub const gee_functions_get_hash_func_for = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_get_hash_func_for`"); // lib/frida-core/frida-core.h:4941:9
pub const gee_functions_hash_data_func_closure_clone_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_hash_data_func_closure_clone_func`"); // lib/frida-core/frida-core.h:4942:9
pub const gee_functions_hash_data_func_closure_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_hash_data_func_closure_construct`"); // lib/frida-core/frida-core.h:4943:9
pub const gee_functions_hash_data_func_closure_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_hash_data_func_closure_get_type`"); // lib/frida-core/frida-core.h:4944:9
pub const gee_functions_hash_data_func_closure_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_hash_data_func_closure_new`"); // lib/frida-core/frida-core.h:4945:9
pub const gee_functions_hash_data_func_closure_ref = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_hash_data_func_closure_ref`"); // lib/frida-core/frida-core.h:4946:9
pub const gee_functions_hash_data_func_closure_unref = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_hash_data_func_closure_unref`"); // lib/frida-core/frida-core.h:4947:9
pub const gee_functions_param_spec_compare_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_param_spec_compare_data_func_closure`"); // lib/frida-core/frida-core.h:4948:9
pub const gee_functions_param_spec_equal_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_param_spec_equal_data_func_closure`"); // lib/frida-core/frida-core.h:4949:9
pub const gee_functions_param_spec_hash_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_param_spec_hash_data_func_closure`"); // lib/frida-core/frida-core.h:4950:9
pub const gee_functions_value_get_compare_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_get_compare_data_func_closure`"); // lib/frida-core/frida-core.h:4951:9
pub const gee_functions_value_get_equal_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_get_equal_data_func_closure`"); // lib/frida-core/frida-core.h:4952:9
pub const gee_functions_value_get_hash_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_get_hash_data_func_closure`"); // lib/frida-core/frida-core.h:4953:9
pub const gee_functions_value_set_compare_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_set_compare_data_func_closure`"); // lib/frida-core/frida-core.h:4954:9
pub const gee_functions_value_set_equal_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_set_equal_data_func_closure`"); // lib/frida-core/frida-core.h:4955:9
pub const gee_functions_value_set_hash_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_set_hash_data_func_closure`"); // lib/frida-core/frida-core.h:4956:9
pub const gee_functions_value_take_compare_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_take_compare_data_func_closure`"); // lib/frida-core/frida-core.h:4957:9
pub const gee_functions_value_take_equal_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_take_equal_data_func_closure`"); // lib/frida-core/frida-core.h:4958:9
pub const gee_functions_value_take_hash_data_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_functions_value_take_hash_data_func_closure`"); // lib/frida-core/frida-core.h:4959:9
pub const gee_future_error_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_error_get_type`"); // lib/frida-core/frida-core.h:4960:9
pub const gee_future_error_quark = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_error_quark`"); // lib/frida-core/frida-core.h:4961:9
pub const gee_future_flat_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_flat_map`"); // lib/frida-core/frida-core.h:4962:9
pub const gee_future_get_exception = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_get_exception`"); // lib/frida-core/frida-core.h:4963:9
pub const gee_future_get_ready = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_get_ready`"); // lib/frida-core/frida-core.h:4964:9
pub const gee_future_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_get_type`"); // lib/frida-core/frida-core.h:4965:9
pub const gee_future_get_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_get_value`"); // lib/frida-core/frida-core.h:4966:9
pub const gee_future_light_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_light_map`"); // lib/frida-core/frida-core.h:4967:9
pub const gee_future_light_map_fixed = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_light_map_fixed`"); // lib/frida-core/frida-core.h:4968:9
pub const gee_future_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_map`"); // lib/frida-core/frida-core.h:4969:9
pub const gee_future_source_func_array_element_copy = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_source_func_array_element_copy`"); // lib/frida-core/frida-core.h:4970:9
pub const gee_future_source_func_array_element_destroy = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_source_func_array_element_destroy`"); // lib/frida-core/frida-core.h:4971:9
pub const gee_future_source_func_array_element_dup = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_source_func_array_element_dup`"); // lib/frida-core/frida-core.h:4972:9
pub const gee_future_source_func_array_element_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_source_func_array_element_free`"); // lib/frida-core/frida-core.h:4973:9
pub const gee_future_source_func_array_element_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_source_func_array_element_get_type`"); // lib/frida-core/frida-core.h:4974:9
pub const gee_future_source_func_array_element_init = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_source_func_array_element_init`"); // lib/frida-core/frida-core.h:4975:9
pub const gee_future_wait = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_wait`"); // lib/frida-core/frida-core.h:4976:9
pub const gee_future_wait_async = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_wait_async`"); // lib/frida-core/frida-core.h:4977:9
pub const gee_future_wait_finish = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_wait_finish`"); // lib/frida-core/frida-core.h:4978:9
pub const gee_future_wait_until = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_wait_until`"); // lib/frida-core/frida-core.h:4979:9
pub const gee_future_zip = @compileError("unable to translate macro: undefined identifier `_frida_gee_future_zip`"); // lib/frida-core/frida-core.h:4980:9
pub const gee_hash_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_construct`"); // lib/frida-core/frida-core.h:4981:9
pub const gee_hash_map_construct_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_construct_with_closures`"); // lib/frida-core/frida-core.h:4982:9
pub const gee_hash_map_get_key_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_get_key_equal_func`"); // lib/frida-core/frida-core.h:4983:9
pub const gee_hash_map_get_key_equal_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_get_key_equal_func_closure`"); // lib/frida-core/frida-core.h:4984:9
pub const gee_hash_map_get_key_hash_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_get_key_hash_func`"); // lib/frida-core/frida-core.h:4985:9
pub const gee_hash_map_get_key_hash_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_get_key_hash_func_closure`"); // lib/frida-core/frida-core.h:4986:9
pub const gee_hash_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_get_type`"); // lib/frida-core/frida-core.h:4987:9
pub const gee_hash_map_get_value_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_get_value_equal_func`"); // lib/frida-core/frida-core.h:4988:9
pub const gee_hash_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_new`"); // lib/frida-core/frida-core.h:4989:9
pub const gee_hash_map_new_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_map_new_with_closures`"); // lib/frida-core/frida-core.h:4990:9
pub const gee_hash_multi_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_map_construct`"); // lib/frida-core/frida-core.h:4991:9
pub const gee_hash_multi_map_get_key_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_map_get_key_equal_func`"); // lib/frida-core/frida-core.h:4992:9
pub const gee_hash_multi_map_get_key_hash_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_map_get_key_hash_func`"); // lib/frida-core/frida-core.h:4993:9
pub const gee_hash_multi_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_map_get_type`"); // lib/frida-core/frida-core.h:4994:9
pub const gee_hash_multi_map_get_value_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_map_get_value_equal_func`"); // lib/frida-core/frida-core.h:4995:9
pub const gee_hash_multi_map_get_value_hash_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_map_get_value_hash_func`"); // lib/frida-core/frida-core.h:4996:9
pub const gee_hash_multi_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_map_new`"); // lib/frida-core/frida-core.h:4997:9
pub const gee_hash_multi_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_construct`"); // lib/frida-core/frida-core.h:4998:9
pub const gee_hash_multi_set_construct_broken = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_construct_broken`"); // lib/frida-core/frida-core.h:4999:9
pub const gee_hash_multi_set_construct_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_construct_with_closures`"); // lib/frida-core/frida-core.h:5000:9
pub const gee_hash_multi_set_get_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_get_equal_func`"); // lib/frida-core/frida-core.h:5001:9
pub const gee_hash_multi_set_get_hash_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_get_hash_func`"); // lib/frida-core/frida-core.h:5002:9
pub const gee_hash_multi_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_get_type`"); // lib/frida-core/frida-core.h:5003:9
pub const gee_hash_multi_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_new`"); // lib/frida-core/frida-core.h:5004:9
pub const gee_hash_multi_set_new_fixed = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_new_fixed`"); // lib/frida-core/frida-core.h:5005:9
pub const gee_hash_multi_set_new_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_multi_set_new_with_closures`"); // lib/frida-core/frida-core.h:5006:9
pub const gee_hash_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_set_construct`"); // lib/frida-core/frida-core.h:5007:9
pub const gee_hash_set_construct_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_set_construct_with_closures`"); // lib/frida-core/frida-core.h:5008:9
pub const gee_hash_set_get_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_set_get_equal_func`"); // lib/frida-core/frida-core.h:5009:9
pub const gee_hash_set_get_hash_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_set_get_hash_func`"); // lib/frida-core/frida-core.h:5010:9
pub const gee_hash_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_set_get_type`"); // lib/frida-core/frida-core.h:5011:9
pub const gee_hash_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_set_new`"); // lib/frida-core/frida-core.h:5012:9
pub const gee_hash_set_new_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_hash_set_new_with_closures`"); // lib/frida-core/frida-core.h:5013:9
pub const gee_hashable_equal_to = @compileError("unable to translate macro: undefined identifier `_frida_gee_hashable_equal_to`"); // lib/frida-core/frida-core.h:5014:9
pub const gee_hashable_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_hashable_get_type`"); // lib/frida-core/frida-core.h:5015:9
pub const gee_hashable_hash = @compileError("unable to translate macro: undefined identifier `_frida_gee_hashable_hash`"); // lib/frida-core/frida-core.h:5016:9
pub const gee_hazard_pointer__default_policy = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer__default_policy`"); // lib/frida-core/frida-core.h:5017:9
pub const gee_hazard_pointer__global_to_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer__global_to_free`"); // lib/frida-core/frida-core.h:5018:9
pub const gee_hazard_pointer__head = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer__head`"); // lib/frida-core/frida-core.h:5019:9
pub const gee_hazard_pointer__queue = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer__queue`"); // lib/frida-core/frida-core.h:5020:9
pub const gee_hazard_pointer__queue_mutex = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer__queue_mutex`"); // lib/frida-core/frida-core.h:5021:9
pub const gee_hazard_pointer__thread_exit_policy = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer__thread_exit_policy`"); // lib/frida-core/frida-core.h:5022:9
pub const gee_hazard_pointer_acquire = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_acquire`"); // lib/frida-core/frida-core.h:5023:9
pub const gee_hazard_pointer_compare_and_exchange_pointer = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_compare_and_exchange_pointer`"); // lib/frida-core/frida-core.h:5024:9
pub const gee_hazard_pointer_context__current_context = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context__current_context`"); // lib/frida-core/frida-core.h:5025:9
pub const gee_hazard_pointer_context__root_context = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context__root_context`"); // lib/frida-core/frida-core.h:5026:9
pub const gee_hazard_pointer_context_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_free`"); // lib/frida-core/frida-core.h:5027:9
pub const gee_hazard_pointer_context_free_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_free_all`"); // lib/frida-core/frida-core.h:5028:9
pub const gee_hazard_pointer_context_get_current_context = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_get_current_context`"); // lib/frida-core/frida-core.h:5029:9
pub const gee_hazard_pointer_context_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_new`"); // lib/frida-core/frida-core.h:5030:9
pub const gee_hazard_pointer_context_release = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_release`"); // lib/frida-core/frida-core.h:5031:9
pub const gee_hazard_pointer_context_release_ptr = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_release_ptr`"); // lib/frida-core/frida-core.h:5032:9
pub const gee_hazard_pointer_context_try_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_try_free`"); // lib/frida-core/frida-core.h:5033:9
pub const gee_hazard_pointer_context_try_release = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_context_try_release`"); // lib/frida-core/frida-core.h:5034:9
pub const gee_hazard_pointer_exchange_hazard_pointer = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_exchange_hazard_pointer`"); // lib/frida-core/frida-core.h:5035:9
pub const gee_hazard_pointer_exchange_pointer = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_exchange_pointer`"); // lib/frida-core/frida-core.h:5036:9
pub const gee_hazard_pointer_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_free`"); // lib/frida-core/frida-core.h:5037:9
pub const gee_hazard_pointer_free_node_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_free_node_free`"); // lib/frida-core/frida-core.h:5038:9
pub const gee_hazard_pointer_free_node_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_free_node_new`"); // lib/frida-core/frida-core.h:5039:9
pub const gee_hazard_pointer_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_get`"); // lib/frida-core/frida-core.h:5040:9
pub const gee_hazard_pointer_get_hazard_pointer = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_get_hazard_pointer`"); // lib/frida-core/frida-core.h:5041:9
pub const gee_hazard_pointer_get_head = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_get_head`"); // lib/frida-core/frida-core.h:5042:9
pub const gee_hazard_pointer_get_pointer = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_get_pointer`"); // lib/frida-core/frida-core.h:5043:9
pub const gee_hazard_pointer_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_new`"); // lib/frida-core/frida-core.h:5044:9
pub const gee_hazard_pointer_new_from_node = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_new_from_node`"); // lib/frida-core/frida-core.h:5045:9
pub const gee_hazard_pointer_node_activate = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_activate`"); // lib/frida-core/frida-core.h:5046:9
pub const gee_hazard_pointer_node_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_free`"); // lib/frida-core/frida-core.h:5047:9
pub const gee_hazard_pointer_node_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_get`"); // lib/frida-core/frida-core.h:5048:9
pub const gee_hazard_pointer_node_get_next = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_get_next`"); // lib/frida-core/frida-core.h:5049:9
pub const gee_hazard_pointer_node_is_active = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_is_active`"); // lib/frida-core/frida-core.h:5050:9
pub const gee_hazard_pointer_node_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_new`"); // lib/frida-core/frida-core.h:5051:9
pub const gee_hazard_pointer_node_release = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_release`"); // lib/frida-core/frida-core.h:5052:9
pub const gee_hazard_pointer_node_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_set`"); // lib/frida-core/frida-core.h:5053:9
pub const gee_hazard_pointer_node_set_next = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_node_set_next`"); // lib/frida-core/frida-core.h:5054:9
pub const gee_hazard_pointer_policy_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_policy_get_type`"); // lib/frida-core/frida-core.h:5055:9
pub const gee_hazard_pointer_policy_is_blocking = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_policy_is_blocking`"); // lib/frida-core/frida-core.h:5056:9
pub const gee_hazard_pointer_policy_is_concrete = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_policy_is_concrete`"); // lib/frida-core/frida-core.h:5057:9
pub const gee_hazard_pointer_policy_is_safe = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_policy_is_safe`"); // lib/frida-core/frida-core.h:5058:9
pub const gee_hazard_pointer_policy_perform = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_policy_perform`"); // lib/frida-core/frida-core.h:5059:9
pub const gee_hazard_pointer_policy_to_concrete = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_policy_to_concrete`"); // lib/frida-core/frida-core.h:5060:9
pub const gee_hazard_pointer_release = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_release`"); // lib/frida-core/frida-core.h:5061:9
pub const gee_hazard_pointer_release_policy = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_release_policy`"); // lib/frida-core/frida-core.h:5062:9
pub const gee_hazard_pointer_release_policy_ensure_start = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_release_policy_ensure_start`"); // lib/frida-core/frida-core.h:5063:9
pub const gee_hazard_pointer_release_policy_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_release_policy_get_type`"); // lib/frida-core/frida-core.h:5064:9
pub const gee_hazard_pointer_set_default_policy = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_set_default_policy`"); // lib/frida-core/frida-core.h:5065:9
pub const gee_hazard_pointer_set_pointer = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_set_pointer`"); // lib/frida-core/frida-core.h:5066:9
pub const gee_hazard_pointer_set_release_policy = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_set_release_policy`"); // lib/frida-core/frida-core.h:5067:9
pub const gee_hazard_pointer_set_thread_exit_policy = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_set_thread_exit_policy`"); // lib/frida-core/frida-core.h:5068:9
pub const gee_hazard_pointer_try_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_hazard_pointer_try_free`"); // lib/frida-core/frida-core.h:5069:9
pub const gee_iterable_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterable_get_type`"); // lib/frida-core/frida-core.h:5070:9
pub const gee_iterable_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterable_iterator`"); // lib/frida-core/frida-core.h:5071:9
pub const gee_iterator_concat = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_concat`"); // lib/frida-core/frida-core.h:5072:9
pub const gee_iterator_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_get`"); // lib/frida-core/frida-core.h:5073:9
pub const gee_iterator_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_get_read_only`"); // lib/frida-core/frida-core.h:5074:9
pub const gee_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_get_type`"); // lib/frida-core/frida-core.h:5075:9
pub const gee_iterator_get_valid = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_get_valid`"); // lib/frida-core/frida-core.h:5076:9
pub const gee_iterator_has_next = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_has_next`"); // lib/frida-core/frida-core.h:5077:9
pub const gee_iterator_next = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_next`"); // lib/frida-core/frida-core.h:5078:9
pub const gee_iterator_remove = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_remove`"); // lib/frida-core/frida-core.h:5079:9
pub const gee_iterator_unfold = @compileError("unable to translate macro: undefined identifier `_frida_gee_iterator_unfold`"); // lib/frida-core/frida-core.h:5080:9
pub const gee_lazy_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_construct`"); // lib/frida-core/frida-core.h:5081:9
pub const gee_lazy_construct_from_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_construct_from_value`"); // lib/frida-core/frida-core.h:5082:9
pub const gee_lazy_eval = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_eval`"); // lib/frida-core/frida-core.h:5083:9
pub const gee_lazy_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_get`"); // lib/frida-core/frida-core.h:5084:9
pub const gee_lazy_get_future = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_get_future`"); // lib/frida-core/frida-core.h:5085:9
pub const gee_lazy_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_get_type`"); // lib/frida-core/frida-core.h:5086:9
pub const gee_lazy_get_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_get_value`"); // lib/frida-core/frida-core.h:5087:9
pub const gee_lazy_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_new`"); // lib/frida-core/frida-core.h:5088:9
pub const gee_lazy_new_from_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_new_from_value`"); // lib/frida-core/frida-core.h:5089:9
pub const gee_lazy_ref = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_ref`"); // lib/frida-core/frida-core.h:5090:9
pub const gee_lazy_unref = @compileError("unable to translate macro: undefined identifier `_frida_gee_lazy_unref`"); // lib/frida-core/frida-core.h:5091:9
pub const gee_light_map_future_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_light_map_future_construct`"); // lib/frida-core/frida-core.h:5092:9
pub const gee_light_map_future_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_light_map_future_get_type`"); // lib/frida-core/frida-core.h:5093:9
pub const gee_light_map_future_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_light_map_future_new`"); // lib/frida-core/frida-core.h:5094:9
pub const gee_linked_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_linked_list_construct`"); // lib/frida-core/frida-core.h:5095:9
pub const gee_linked_list_first = @compileError("unable to translate macro: undefined identifier `_frida_gee_linked_list_first`"); // lib/frida-core/frida-core.h:5096:9
pub const gee_linked_list_get_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_linked_list_get_equal_func`"); // lib/frida-core/frida-core.h:5097:9
pub const gee_linked_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_linked_list_get_type`"); // lib/frida-core/frida-core.h:5098:9
pub const gee_linked_list_last = @compileError("unable to translate macro: undefined identifier `_frida_gee_linked_list_last`"); // lib/frida-core/frida-core.h:5099:9
pub const gee_linked_list_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_linked_list_new`"); // lib/frida-core/frida-core.h:5100:9
pub const gee_list_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_empty`"); // lib/frida-core/frida-core.h:5101:9
pub const gee_list_first = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_first`"); // lib/frida-core/frida-core.h:5102:9
pub const gee_list_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_get`"); // lib/frida-core/frida-core.h:5103:9
pub const gee_list_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_get_read_only_view`"); // lib/frida-core/frida-core.h:5104:9
pub const gee_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_get_type`"); // lib/frida-core/frida-core.h:5105:9
pub const gee_list_index_of = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_index_of`"); // lib/frida-core/frida-core.h:5106:9
pub const gee_list_insert = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_insert`"); // lib/frida-core/frida-core.h:5107:9
pub const gee_list_insert_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_insert_all`"); // lib/frida-core/frida-core.h:5108:9
pub const gee_list_iterator_add = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_iterator_add`"); // lib/frida-core/frida-core.h:5109:9
pub const gee_list_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_iterator_get_type`"); // lib/frida-core/frida-core.h:5110:9
pub const gee_list_iterator_index = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_iterator_index`"); // lib/frida-core/frida-core.h:5111:9
pub const gee_list_iterator_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_iterator_set`"); // lib/frida-core/frida-core.h:5112:9
pub const gee_list_last = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_last`"); // lib/frida-core/frida-core.h:5113:9
pub const gee_list_list_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_list_iterator`"); // lib/frida-core/frida-core.h:5114:9
pub const gee_list_remove_at = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_remove_at`"); // lib/frida-core/frida-core.h:5115:9
pub const gee_list_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_set`"); // lib/frida-core/frida-core.h:5116:9
pub const gee_list_slice = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_slice`"); // lib/frida-core/frida-core.h:5117:9
pub const gee_list_sort = @compileError("unable to translate macro: undefined identifier `_frida_gee_list_sort`"); // lib/frida-core/frida-core.h:5118:9
pub const gee_map_clear = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_clear`"); // lib/frida-core/frida-core.h:5119:9
pub const gee_map_contains = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_contains`"); // lib/frida-core/frida-core.h:5120:9
pub const gee_map_contains_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_contains_all`"); // lib/frida-core/frida-core.h:5121:9
pub const gee_map_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_empty`"); // lib/frida-core/frida-core.h:5122:9
pub const gee_map_entry_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_entry_construct`"); // lib/frida-core/frida-core.h:5123:9
pub const gee_map_entry_get_key = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_entry_get_key`"); // lib/frida-core/frida-core.h:5124:9
pub const gee_map_entry_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_entry_get_read_only`"); // lib/frida-core/frida-core.h:5125:9
pub const gee_map_entry_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_entry_get_type`"); // lib/frida-core/frida-core.h:5126:9
pub const gee_map_entry_get_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_entry_get_value`"); // lib/frida-core/frida-core.h:5127:9
pub const gee_map_entry_set_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_entry_set_value`"); // lib/frida-core/frida-core.h:5128:9
pub const gee_map_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get`"); // lib/frida-core/frida-core.h:5129:9
pub const gee_map_get_entries = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_entries`"); // lib/frida-core/frida-core.h:5130:9
pub const gee_map_get_is_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_is_empty`"); // lib/frida-core/frida-core.h:5131:9
pub const gee_map_get_key_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_key_type`"); // lib/frida-core/frida-core.h:5132:9
pub const gee_map_get_keys = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_keys`"); // lib/frida-core/frida-core.h:5133:9
pub const gee_map_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_read_only`"); // lib/frida-core/frida-core.h:5134:9
pub const gee_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_read_only_view`"); // lib/frida-core/frida-core.h:5135:9
pub const gee_map_get_size = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_size`"); // lib/frida-core/frida-core.h:5136:9
pub const gee_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_type`"); // lib/frida-core/frida-core.h:5137:9
pub const gee_map_get_value_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_value_type`"); // lib/frida-core/frida-core.h:5138:9
pub const gee_map_get_values = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_get_values`"); // lib/frida-core/frida-core.h:5139:9
pub const gee_map_has = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_has`"); // lib/frida-core/frida-core.h:5140:9
pub const gee_map_has_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_has_all`"); // lib/frida-core/frida-core.h:5141:9
pub const gee_map_has_key = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_has_key`"); // lib/frida-core/frida-core.h:5142:9
pub const gee_map_iterator_fold = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_fold`"); // lib/frida-core/frida-core.h:5143:9
pub const gee_map_iterator_foreach = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_foreach`"); // lib/frida-core/frida-core.h:5144:9
pub const gee_map_iterator_get_key = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_get_key`"); // lib/frida-core/frida-core.h:5145:9
pub const gee_map_iterator_get_mutable = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_get_mutable`"); // lib/frida-core/frida-core.h:5146:9
pub const gee_map_iterator_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_get_read_only`"); // lib/frida-core/frida-core.h:5147:9
pub const gee_map_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_get_type`"); // lib/frida-core/frida-core.h:5148:9
pub const gee_map_iterator_get_valid = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_get_valid`"); // lib/frida-core/frida-core.h:5149:9
pub const gee_map_iterator_get_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_get_value`"); // lib/frida-core/frida-core.h:5150:9
pub const gee_map_iterator_has_next = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_has_next`"); // lib/frida-core/frida-core.h:5151:9
pub const gee_map_iterator_next = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_next`"); // lib/frida-core/frida-core.h:5152:9
pub const gee_map_iterator_set_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_set_value`"); // lib/frida-core/frida-core.h:5153:9
pub const gee_map_iterator_unset = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_iterator_unset`"); // lib/frida-core/frida-core.h:5154:9
pub const gee_map_map_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_map_iterator`"); // lib/frida-core/frida-core.h:5155:9
pub const gee_map_remove = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_remove`"); // lib/frida-core/frida-core.h:5156:9
pub const gee_map_remove_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_remove_all`"); // lib/frida-core/frida-core.h:5157:9
pub const gee_map_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_set`"); // lib/frida-core/frida-core.h:5158:9
pub const gee_map_set_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_set_all`"); // lib/frida-core/frida-core.h:5159:9
pub const gee_map_unset = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_unset`"); // lib/frida-core/frida-core.h:5160:9
pub const gee_map_unset_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_map_unset_all`"); // lib/frida-core/frida-core.h:5161:9
pub const gee_multi_map_clear = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_clear`"); // lib/frida-core/frida-core.h:5162:9
pub const gee_multi_map_contains = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_contains`"); // lib/frida-core/frida-core.h:5163:9
pub const gee_multi_map_get = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get`"); // lib/frida-core/frida-core.h:5164:9
pub const gee_multi_map_get_all_keys = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_all_keys`"); // lib/frida-core/frida-core.h:5165:9
pub const gee_multi_map_get_key_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_key_type`"); // lib/frida-core/frida-core.h:5166:9
pub const gee_multi_map_get_keys = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_keys`"); // lib/frida-core/frida-core.h:5167:9
pub const gee_multi_map_get_read_only = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_read_only`"); // lib/frida-core/frida-core.h:5168:9
pub const gee_multi_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_read_only_view`"); // lib/frida-core/frida-core.h:5169:9
pub const gee_multi_map_get_size = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_size`"); // lib/frida-core/frida-core.h:5170:9
pub const gee_multi_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_type`"); // lib/frida-core/frida-core.h:5171:9
pub const gee_multi_map_get_value_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_value_type`"); // lib/frida-core/frida-core.h:5172:9
pub const gee_multi_map_get_values = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_get_values`"); // lib/frida-core/frida-core.h:5173:9
pub const gee_multi_map_map_iterator = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_map_iterator`"); // lib/frida-core/frida-core.h:5174:9
pub const gee_multi_map_remove = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_remove`"); // lib/frida-core/frida-core.h:5175:9
pub const gee_multi_map_remove_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_remove_all`"); // lib/frida-core/frida-core.h:5176:9
pub const gee_multi_map_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_map_set`"); // lib/frida-core/frida-core.h:5177:9
pub const gee_multi_set_count = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_set_count`"); // lib/frida-core/frida-core.h:5178:9
pub const gee_multi_set_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_set_empty`"); // lib/frida-core/frida-core.h:5179:9
pub const gee_multi_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_set_get_read_only_view`"); // lib/frida-core/frida-core.h:5180:9
pub const gee_multi_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_multi_set_get_type`"); // lib/frida-core/frida-core.h:5181:9
pub const gee_param_spec_lazy = @compileError("unable to translate macro: undefined identifier `_frida_gee_param_spec_lazy`"); // lib/frida-core/frida-core.h:5182:9
pub const gee_param_spec_promise = @compileError("unable to translate macro: undefined identifier `_frida_gee_param_spec_promise`"); // lib/frida-core/frida-core.h:5183:9
pub const gee_priority_queue_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_priority_queue_construct`"); // lib/frida-core/frida-core.h:5184:9
pub const gee_priority_queue_drain = @compileError("unable to translate macro: undefined identifier `_frida_gee_priority_queue_drain`"); // lib/frida-core/frida-core.h:5185:9
pub const gee_priority_queue_get_compare_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_priority_queue_get_compare_func`"); // lib/frida-core/frida-core.h:5186:9
pub const gee_priority_queue_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_priority_queue_get_type`"); // lib/frida-core/frida-core.h:5187:9
pub const gee_priority_queue_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_priority_queue_new`"); // lib/frida-core/frida-core.h:5188:9
pub const gee_priority_queue_offer = @compileError("unable to translate macro: undefined identifier `_frida_gee_priority_queue_offer`"); // lib/frida-core/frida-core.h:5189:9
pub const gee_promise_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_construct`"); // lib/frida-core/frida-core.h:5190:9
pub const gee_promise_get_future = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_get_future`"); // lib/frida-core/frida-core.h:5191:9
pub const gee_promise_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_get_type`"); // lib/frida-core/frida-core.h:5192:9
pub const gee_promise_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_new`"); // lib/frida-core/frida-core.h:5193:9
pub const gee_promise_ref = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_ref`"); // lib/frida-core/frida-core.h:5194:9
pub const gee_promise_set_exception = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_set_exception`"); // lib/frida-core/frida-core.h:5195:9
pub const gee_promise_set_value = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_set_value`"); // lib/frida-core/frida-core.h:5196:9
pub const gee_promise_unref = @compileError("unable to translate macro: undefined identifier `_frida_gee_promise_unref`"); // lib/frida-core/frida-core.h:5197:9
pub const gee_queue_drain = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_drain`"); // lib/frida-core/frida-core.h:5198:9
pub const gee_queue_get_capacity = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_get_capacity`"); // lib/frida-core/frida-core.h:5199:9
pub const gee_queue_get_is_full = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_get_is_full`"); // lib/frida-core/frida-core.h:5200:9
pub const gee_queue_get_remaining_capacity = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_get_remaining_capacity`"); // lib/frida-core/frida-core.h:5201:9
pub const gee_queue_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_get_type`"); // lib/frida-core/frida-core.h:5202:9
pub const gee_queue_offer = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_offer`"); // lib/frida-core/frida-core.h:5203:9
pub const gee_queue_peek = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_peek`"); // lib/frida-core/frida-core.h:5204:9
pub const gee_queue_poll = @compileError("unable to translate macro: undefined identifier `_frida_gee_queue_poll`"); // lib/frida-core/frida-core.h:5205:9
pub const gee_read_only_bidir_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_list_construct`"); // lib/frida-core/frida-core.h:5206:9
pub const gee_read_only_bidir_list_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_list_get_read_only_view`"); // lib/frida-core/frida-core.h:5207:9
pub const gee_read_only_bidir_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_list_get_type`"); // lib/frida-core/frida-core.h:5208:9
pub const gee_read_only_bidir_list_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_list_new`"); // lib/frida-core/frida-core.h:5209:9
pub const gee_read_only_bidir_sorted_map_bidir_map_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_map_bidir_map_iterator_construct`"); // lib/frida-core/frida-core.h:5210:9
pub const gee_read_only_bidir_sorted_map_bidir_map_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_map_bidir_map_iterator_get_type`"); // lib/frida-core/frida-core.h:5211:9
pub const gee_read_only_bidir_sorted_map_bidir_map_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_map_bidir_map_iterator_new`"); // lib/frida-core/frida-core.h:5212:9
pub const gee_read_only_bidir_sorted_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_map_construct`"); // lib/frida-core/frida-core.h:5213:9
pub const gee_read_only_bidir_sorted_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_map_get_type`"); // lib/frida-core/frida-core.h:5214:9
pub const gee_read_only_bidir_sorted_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_map_new`"); // lib/frida-core/frida-core.h:5215:9
pub const gee_read_only_bidir_sorted_set_bidir_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_set_bidir_iterator_construct`"); // lib/frida-core/frida-core.h:5216:9
pub const gee_read_only_bidir_sorted_set_bidir_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_set_bidir_iterator_get_type`"); // lib/frida-core/frida-core.h:5217:9
pub const gee_read_only_bidir_sorted_set_bidir_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_set_bidir_iterator_new`"); // lib/frida-core/frida-core.h:5218:9
pub const gee_read_only_bidir_sorted_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_set_construct`"); // lib/frida-core/frida-core.h:5219:9
pub const gee_read_only_bidir_sorted_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_set_get_type`"); // lib/frida-core/frida-core.h:5220:9
pub const gee_read_only_bidir_sorted_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_bidir_sorted_set_new`"); // lib/frida-core/frida-core.h:5221:9
pub const gee_read_only_collection_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_collection_construct`"); // lib/frida-core/frida-core.h:5222:9
pub const gee_read_only_collection_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_collection_get_read_only_view`"); // lib/frida-core/frida-core.h:5223:9
pub const gee_read_only_collection_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_collection_get_type`"); // lib/frida-core/frida-core.h:5224:9
pub const gee_read_only_collection_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_collection_iterator_construct`"); // lib/frida-core/frida-core.h:5225:9
pub const gee_read_only_collection_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_collection_iterator_get_type`"); // lib/frida-core/frida-core.h:5226:9
pub const gee_read_only_collection_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_collection_iterator_new`"); // lib/frida-core/frida-core.h:5227:9
pub const gee_read_only_collection_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_collection_new`"); // lib/frida-core/frida-core.h:5228:9
pub const gee_read_only_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_list_construct`"); // lib/frida-core/frida-core.h:5229:9
pub const gee_read_only_list_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_list_get_read_only_view`"); // lib/frida-core/frida-core.h:5230:9
pub const gee_read_only_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_list_get_type`"); // lib/frida-core/frida-core.h:5231:9
pub const gee_read_only_list_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_list_iterator_construct`"); // lib/frida-core/frida-core.h:5232:9
pub const gee_read_only_list_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_list_iterator_get_type`"); // lib/frida-core/frida-core.h:5233:9
pub const gee_read_only_list_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_list_iterator_new`"); // lib/frida-core/frida-core.h:5234:9
pub const gee_read_only_list_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_list_new`"); // lib/frida-core/frida-core.h:5235:9
pub const gee_read_only_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_construct`"); // lib/frida-core/frida-core.h:5236:9
pub const gee_read_only_map_contains = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_contains`"); // lib/frida-core/frida-core.h:5237:9
pub const gee_read_only_map_contains_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_contains_all`"); // lib/frida-core/frida-core.h:5238:9
pub const gee_read_only_map_get_key_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_get_key_type`"); // lib/frida-core/frida-core.h:5239:9
pub const gee_read_only_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_get_read_only_view`"); // lib/frida-core/frida-core.h:5240:9
pub const gee_read_only_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_get_type`"); // lib/frida-core/frida-core.h:5241:9
pub const gee_read_only_map_get_value_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_get_value_type`"); // lib/frida-core/frida-core.h:5242:9
pub const gee_read_only_map_map_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_map_iterator_construct`"); // lib/frida-core/frida-core.h:5243:9
pub const gee_read_only_map_map_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_map_iterator_get_type`"); // lib/frida-core/frida-core.h:5244:9
pub const gee_read_only_map_map_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_map_iterator_new`"); // lib/frida-core/frida-core.h:5245:9
pub const gee_read_only_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_new`"); // lib/frida-core/frida-core.h:5246:9
pub const gee_read_only_map_remove = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_remove`"); // lib/frida-core/frida-core.h:5247:9
pub const gee_read_only_map_remove_all = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_map_remove_all`"); // lib/frida-core/frida-core.h:5248:9
pub const gee_read_only_multi_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_map_construct`"); // lib/frida-core/frida-core.h:5249:9
pub const gee_read_only_multi_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_map_get_read_only_view`"); // lib/frida-core/frida-core.h:5250:9
pub const gee_read_only_multi_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_map_get_type`"); // lib/frida-core/frida-core.h:5251:9
pub const gee_read_only_multi_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_map_new`"); // lib/frida-core/frida-core.h:5252:9
pub const gee_read_only_multi_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_set_construct`"); // lib/frida-core/frida-core.h:5253:9
pub const gee_read_only_multi_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_set_get_read_only_view`"); // lib/frida-core/frida-core.h:5254:9
pub const gee_read_only_multi_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_set_get_type`"); // lib/frida-core/frida-core.h:5255:9
pub const gee_read_only_multi_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_multi_set_new`"); // lib/frida-core/frida-core.h:5256:9
pub const gee_read_only_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_set_construct`"); // lib/frida-core/frida-core.h:5257:9
pub const gee_read_only_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_set_get_read_only_view`"); // lib/frida-core/frida-core.h:5258:9
pub const gee_read_only_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_set_get_type`"); // lib/frida-core/frida-core.h:5259:9
pub const gee_read_only_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_set_new`"); // lib/frida-core/frida-core.h:5260:9
pub const gee_read_only_sorted_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_sorted_map_construct`"); // lib/frida-core/frida-core.h:5261:9
pub const gee_read_only_sorted_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_sorted_map_get_type`"); // lib/frida-core/frida-core.h:5262:9
pub const gee_read_only_sorted_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_sorted_map_new`"); // lib/frida-core/frida-core.h:5263:9
pub const gee_read_only_sorted_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_sorted_set_construct`"); // lib/frida-core/frida-core.h:5264:9
pub const gee_read_only_sorted_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_sorted_set_get_type`"); // lib/frida-core/frida-core.h:5265:9
pub const gee_read_only_sorted_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_read_only_sorted_set_new`"); // lib/frida-core/frida-core.h:5266:9
pub const gee_set_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_set_empty`"); // lib/frida-core/frida-core.h:5267:9
pub const gee_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_set_get_read_only_view`"); // lib/frida-core/frida-core.h:5268:9
pub const gee_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_set_get_type`"); // lib/frida-core/frida-core.h:5269:9
pub const gee_sorted_map_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_empty`"); // lib/frida-core/frida-core.h:5270:9
pub const gee_sorted_map_get_ascending_entries = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_get_ascending_entries`"); // lib/frida-core/frida-core.h:5271:9
pub const gee_sorted_map_get_ascending_keys = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_get_ascending_keys`"); // lib/frida-core/frida-core.h:5272:9
pub const gee_sorted_map_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_get_read_only_view`"); // lib/frida-core/frida-core.h:5273:9
pub const gee_sorted_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_get_type`"); // lib/frida-core/frida-core.h:5274:9
pub const gee_sorted_map_head_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_head_map`"); // lib/frida-core/frida-core.h:5275:9
pub const gee_sorted_map_sub_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_sub_map`"); // lib/frida-core/frida-core.h:5276:9
pub const gee_sorted_map_tail_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_map_tail_map`"); // lib/frida-core/frida-core.h:5277:9
pub const gee_sorted_set_ceil = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_ceil`"); // lib/frida-core/frida-core.h:5278:9
pub const gee_sorted_set_empty = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_empty`"); // lib/frida-core/frida-core.h:5279:9
pub const gee_sorted_set_first = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_first`"); // lib/frida-core/frida-core.h:5280:9
pub const gee_sorted_set_floor = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_floor`"); // lib/frida-core/frida-core.h:5281:9
pub const gee_sorted_set_get_read_only_view = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_get_read_only_view`"); // lib/frida-core/frida-core.h:5282:9
pub const gee_sorted_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_get_type`"); // lib/frida-core/frida-core.h:5283:9
pub const gee_sorted_set_head_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_head_set`"); // lib/frida-core/frida-core.h:5284:9
pub const gee_sorted_set_higher = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_higher`"); // lib/frida-core/frida-core.h:5285:9
pub const gee_sorted_set_iterator_at = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_iterator_at`"); // lib/frida-core/frida-core.h:5286:9
pub const gee_sorted_set_last = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_last`"); // lib/frida-core/frida-core.h:5287:9
pub const gee_sorted_set_lower = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_lower`"); // lib/frida-core/frida-core.h:5288:9
pub const gee_sorted_set_sub_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_sub_set`"); // lib/frida-core/frida-core.h:5289:9
pub const gee_sorted_set_tail_set = @compileError("unable to translate macro: undefined identifier `_frida_gee_sorted_set_tail_set`"); // lib/frida-core/frida-core.h:5290:9
pub const gee_stream_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_stream_iterator_construct`"); // lib/frida-core/frida-core.h:5291:9
pub const gee_stream_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_stream_iterator_get_type`"); // lib/frida-core/frida-core.h:5292:9
pub const gee_stream_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_stream_iterator_new`"); // lib/frida-core/frida-core.h:5293:9
pub const gee_task = @compileError("unable to translate macro: undefined identifier `_frida_gee_task`"); // lib/frida-core/frida-core.h:5294:9
pub const gee_task_data_free = @compileError("unable to translate macro: undefined identifier `_frida_gee_task_data_free`"); // lib/frida-core/frida-core.h:5295:9
pub const gee_task_data_get_async_pool = @compileError("unable to translate macro: undefined identifier `_frida_gee_task_data_get_async_pool`"); // lib/frida-core/frida-core.h:5296:9
pub const gee_task_data_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_task_data_new`"); // lib/frida-core/frida-core.h:5297:9
pub const gee_task_data_run = @compileError("unable to translate macro: undefined identifier `_frida_gee_task_data_run`"); // lib/frida-core/frida-core.h:5298:9
pub const gee_tee_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_construct`"); // lib/frida-core/frida-core.h:5299:9
pub const gee_tee_iterator_create_nodes = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_create_nodes`"); // lib/frida-core/frida-core.h:5300:9
pub const gee_tee_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_get_type`"); // lib/frida-core/frida-core.h:5301:9
pub const gee_tee_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_new`"); // lib/frida-core/frida-core.h:5302:9
pub const gee_tee_iterator_node_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_node_construct`"); // lib/frida-core/frida-core.h:5303:9
pub const gee_tee_iterator_node_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_node_get_type`"); // lib/frida-core/frida-core.h:5304:9
pub const gee_tee_iterator_node_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_node_new`"); // lib/frida-core/frida-core.h:5305:9
pub const gee_tee_iterator_node_ref = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_node_ref`"); // lib/frida-core/frida-core.h:5306:9
pub const gee_tee_iterator_node_unref = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_node_unref`"); // lib/frida-core/frida-core.h:5307:9
pub const gee_tee_iterator_param_spec_node = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_param_spec_node`"); // lib/frida-core/frida-core.h:5308:9
pub const gee_tee_iterator_value_get_node = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_value_get_node`"); // lib/frida-core/frida-core.h:5309:9
pub const gee_tee_iterator_value_set_node = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_value_set_node`"); // lib/frida-core/frida-core.h:5310:9
pub const gee_tee_iterator_value_take_node = @compileError("unable to translate macro: undefined identifier `_frida_gee_tee_iterator_value_take_node`"); // lib/frida-core/frida-core.h:5311:9
pub const gee_tim_sort_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_tim_sort_construct`"); // lib/frida-core/frida-core.h:5312:9
pub const gee_tim_sort_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_tim_sort_get_type`"); // lib/frida-core/frida-core.h:5313:9
pub const gee_tim_sort_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_tim_sort_new`"); // lib/frida-core/frida-core.h:5314:9
pub const gee_tim_sort_sort = @compileError("unable to translate macro: undefined identifier `_frida_gee_tim_sort_sort`"); // lib/frida-core/frida-core.h:5315:9
pub const gee_traversable_all_match = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_all_match`"); // lib/frida-core/frida-core.h:5316:9
pub const gee_traversable_any_match = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_any_match`"); // lib/frida-core/frida-core.h:5317:9
pub const gee_traversable_chop = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_chop`"); // lib/frida-core/frida-core.h:5318:9
pub const gee_traversable_filter = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_filter`"); // lib/frida-core/frida-core.h:5319:9
pub const gee_traversable_first_match = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_first_match`"); // lib/frida-core/frida-core.h:5320:9
pub const gee_traversable_flat_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_flat_map`"); // lib/frida-core/frida-core.h:5321:9
pub const gee_traversable_fold = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_fold`"); // lib/frida-core/frida-core.h:5322:9
pub const gee_traversable_foreach = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_foreach`"); // lib/frida-core/frida-core.h:5323:9
pub const gee_traversable_get_element_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_get_element_type`"); // lib/frida-core/frida-core.h:5324:9
pub const gee_traversable_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_get_type`"); // lib/frida-core/frida-core.h:5325:9
pub const gee_traversable_map = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_map`"); // lib/frida-core/frida-core.h:5326:9
pub const gee_traversable_max = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_max`"); // lib/frida-core/frida-core.h:5327:9
pub const gee_traversable_min = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_min`"); // lib/frida-core/frida-core.h:5328:9
pub const gee_traversable_order_by = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_order_by`"); // lib/frida-core/frida-core.h:5329:9
pub const gee_traversable_scan = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_scan`"); // lib/frida-core/frida-core.h:5330:9
pub const gee_traversable_stream = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_stream`"); // lib/frida-core/frida-core.h:5331:9
pub const gee_traversable_stream_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_stream_get_type`"); // lib/frida-core/frida-core.h:5332:9
pub const gee_traversable_tee = @compileError("unable to translate macro: undefined identifier `_frida_gee_traversable_tee`"); // lib/frida-core/frida-core.h:5333:9
pub const gee_tree_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_construct`"); // lib/frida-core/frida-core.h:5334:9
pub const gee_tree_map_construct_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_construct_with_closures`"); // lib/frida-core/frida-core.h:5335:9
pub const gee_tree_map_get_key_compare_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_get_key_compare_func`"); // lib/frida-core/frida-core.h:5336:9
pub const gee_tree_map_get_key_compare_func_closure = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_get_key_compare_func_closure`"); // lib/frida-core/frida-core.h:5337:9
pub const gee_tree_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_get_type`"); // lib/frida-core/frida-core.h:5338:9
pub const gee_tree_map_get_value_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_get_value_equal_func`"); // lib/frida-core/frida-core.h:5339:9
pub const gee_tree_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_new`"); // lib/frida-core/frida-core.h:5340:9
pub const gee_tree_map_new_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_map_new_with_closures`"); // lib/frida-core/frida-core.h:5341:9
pub const gee_tree_multi_map_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_map_construct`"); // lib/frida-core/frida-core.h:5342:9
pub const gee_tree_multi_map_get_key_compare_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_map_get_key_compare_func`"); // lib/frida-core/frida-core.h:5343:9
pub const gee_tree_multi_map_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_map_get_type`"); // lib/frida-core/frida-core.h:5344:9
pub const gee_tree_multi_map_get_value_compare_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_map_get_value_compare_func`"); // lib/frida-core/frida-core.h:5345:9
pub const gee_tree_multi_map_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_map_new`"); // lib/frida-core/frida-core.h:5346:9
pub const gee_tree_multi_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_set_construct`"); // lib/frida-core/frida-core.h:5347:9
pub const gee_tree_multi_set_construct_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_set_construct_with_closures`"); // lib/frida-core/frida-core.h:5348:9
pub const gee_tree_multi_set_get_compare_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_set_get_compare_func`"); // lib/frida-core/frida-core.h:5349:9
pub const gee_tree_multi_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_set_get_type`"); // lib/frida-core/frida-core.h:5350:9
pub const gee_tree_multi_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_set_new`"); // lib/frida-core/frida-core.h:5351:9
pub const gee_tree_multi_set_new_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_multi_set_new_with_closures`"); // lib/frida-core/frida-core.h:5352:9
pub const gee_tree_set_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_set_construct`"); // lib/frida-core/frida-core.h:5353:9
pub const gee_tree_set_construct_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_set_construct_with_closures`"); // lib/frida-core/frida-core.h:5354:9
pub const gee_tree_set_get_compare_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_set_get_compare_func`"); // lib/frida-core/frida-core.h:5355:9
pub const gee_tree_set_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_set_get_type`"); // lib/frida-core/frida-core.h:5356:9
pub const gee_tree_set_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_set_new`"); // lib/frida-core/frida-core.h:5357:9
pub const gee_tree_set_new_with_closures = @compileError("unable to translate macro: undefined identifier `_frida_gee_tree_set_new_with_closures`"); // lib/frida-core/frida-core.h:5358:9
pub const gee_unfold_iterator_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_unfold_iterator_construct`"); // lib/frida-core/frida-core.h:5359:9
pub const gee_unfold_iterator_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_unfold_iterator_get_type`"); // lib/frida-core/frida-core.h:5360:9
pub const gee_unfold_iterator_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_unfold_iterator_new`"); // lib/frida-core/frida-core.h:5361:9
pub const gee_unrolled_linked_list_construct = @compileError("unable to translate macro: undefined identifier `_frida_gee_unrolled_linked_list_construct`"); // lib/frida-core/frida-core.h:5362:9
pub const gee_unrolled_linked_list_get_equal_func = @compileError("unable to translate macro: undefined identifier `_frida_gee_unrolled_linked_list_get_equal_func`"); // lib/frida-core/frida-core.h:5363:9
pub const gee_unrolled_linked_list_get_type = @compileError("unable to translate macro: undefined identifier `_frida_gee_unrolled_linked_list_get_type`"); // lib/frida-core/frida-core.h:5364:9
pub const gee_unrolled_linked_list_new = @compileError("unable to translate macro: undefined identifier `_frida_gee_unrolled_linked_list_new`"); // lib/frida-core/frida-core.h:5365:9
pub const gee_value_get_lazy = @compileError("unable to translate macro: undefined identifier `_frida_gee_value_get_lazy`"); // lib/frida-core/frida-core.h:5366:9
pub const gee_value_get_promise = @compileError("unable to translate macro: undefined identifier `_frida_gee_value_get_promise`"); // lib/frida-core/frida-core.h:5367:9
pub const gee_value_set_lazy = @compileError("unable to translate macro: undefined identifier `_frida_gee_value_set_lazy`"); // lib/frida-core/frida-core.h:5368:9
pub const gee_value_set_promise = @compileError("unable to translate macro: undefined identifier `_frida_gee_value_set_promise`"); // lib/frida-core/frida-core.h:5369:9
pub const gee_value_take_lazy = @compileError("unable to translate macro: undefined identifier `_frida_gee_value_take_lazy`"); // lib/frida-core/frida-core.h:5370:9
pub const gee_value_take_promise = @compileError("unable to translate macro: undefined identifier `_frida_gee_value_take_promise`"); // lib/frida-core/frida-core.h:5371:9
pub const glib__private__ = @compileError("unable to translate macro: undefined identifier `_frida_glib__private__`"); // lib/frida-core/frida-core.h:5378:9
pub const glib_get_sandbox_type = @compileError("unable to translate macro: undefined identifier `_frida_glib_get_sandbox_type`"); // lib/frida-core/frida-core.h:5384:9
pub const glib_gettext = @compileError("unable to translate macro: undefined identifier `_frida_glib_gettext`"); // lib/frida-core/frida-core.h:5385:9
pub const glib_has_dconf_access_in_sandbox = @compileError("unable to translate macro: undefined identifier `_frida_glib_has_dconf_access_in_sandbox`"); // lib/frida-core/frida-core.h:5386:9
pub const glib_network_available_in_sandbox = @compileError("unable to translate macro: undefined identifier `_frida_glib_network_available_in_sandbox`"); // lib/frida-core/frida-core.h:5394:9
pub const glib_on_error_halt = @compileError("unable to translate macro: undefined identifier `_frida_glib_on_error_halt`"); // lib/frida-core/frida-core.h:5395:9
pub const glib_pgettext = @compileError("unable to translate macro: undefined identifier `_frida_glib_pgettext`"); // lib/frida-core/frida-core.h:5396:9
pub const glib_protocol_version_from_openssl = @compileError("unable to translate macro: undefined identifier `_frida_glib_protocol_version_from_openssl`"); // lib/frida-core/frida-core.h:5398:9
pub const glib_should_use_portal = @compileError("unable to translate macro: undefined identifier `_frida_glib_should_use_portal`"); // lib/frida-core/frida-core.h:5401:9
pub const json_array_copy = @compileError("unable to translate macro: undefined identifier `_frida_json_array_copy`"); // lib/frida-core/frida-core.h:5413:9
pub const json_deserialize_pspec = @compileError("unable to translate macro: undefined identifier `_frida_json_deserialize_pspec`"); // lib/frida-core/frida-core.h:5459:9
pub const json_get_debug_flags = @compileError("unable to translate macro: undefined identifier `_frida_json_get_debug_flags`"); // lib/frida-core/frida-core.h:5475:9
pub const json_node_type_get_name = @compileError("unable to translate macro: undefined identifier `_frida_json_node_type_get_name`"); // lib/frida-core/frida-core.h:5526:9
pub const json_object_copy = @compileError("unable to translate macro: undefined identifier `_frida_json_object_copy`"); // lib/frida-core/frida-core.h:5531:9
pub const json_object_get_members_internal = @compileError("unable to translate macro: undefined identifier `_frida_json_object_get_members_internal`"); // lib/frida-core/frida-core.h:5544:9
pub const json_scanner_destroy = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_destroy`"); // lib/frida-core/frida-core.h:5619:9
pub const json_scanner_error = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_error`"); // lib/frida-core/frida-core.h:5620:9
pub const json_scanner_get_next_token = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_get_next_token`"); // lib/frida-core/frida-core.h:5621:9
pub const json_scanner_input_text = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_input_text`"); // lib/frida-core/frida-core.h:5622:9
pub const json_scanner_new = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_new`"); // lib/frida-core/frida-core.h:5623:9
pub const json_scanner_peek_next_token = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_peek_next_token`"); // lib/frida-core/frida-core.h:5624:9
pub const json_scanner_scope_add_symbol = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_scope_add_symbol`"); // lib/frida-core/frida-core.h:5625:9
pub const json_scanner_unexp_token = @compileError("unable to translate macro: undefined identifier `_frida_json_scanner_unexp_token`"); // lib/frida-core/frida-core.h:5626:9
pub const json_serialize_pspec = @compileError("unable to translate macro: undefined identifier `_frida_json_serialize_pspec`"); // lib/frida-core/frida-core.h:5637:9
pub const json_value_alloc = @compileError("unable to translate macro: undefined identifier `_frida_json_value_alloc`"); // lib/frida-core/frida-core.h:5642:9
pub const json_value_free = @compileError("unable to translate macro: undefined identifier `_frida_json_value_free`"); // lib/frida-core/frida-core.h:5643:9
pub const json_value_get_boolean = @compileError("unable to translate macro: undefined identifier `_frida_json_value_get_boolean`"); // lib/frida-core/frida-core.h:5644:9
pub const json_value_get_double = @compileError("unable to translate macro: undefined identifier `_frida_json_value_get_double`"); // lib/frida-core/frida-core.h:5645:9
pub const json_value_get_int = @compileError("unable to translate macro: undefined identifier `_frida_json_value_get_int`"); // lib/frida-core/frida-core.h:5646:9
pub const json_value_get_string = @compileError("unable to translate macro: undefined identifier `_frida_json_value_get_string`"); // lib/frida-core/frida-core.h:5647:9
pub const json_value_hash = @compileError("unable to translate macro: undefined identifier `_frida_json_value_hash`"); // lib/frida-core/frida-core.h:5648:9
pub const json_value_init = @compileError("unable to translate macro: undefined identifier `_frida_json_value_init`"); // lib/frida-core/frida-core.h:5649:9
pub const json_value_ref = @compileError("unable to translate macro: undefined identifier `_frida_json_value_ref`"); // lib/frida-core/frida-core.h:5650:9
pub const json_value_seal = @compileError("unable to translate macro: undefined identifier `_frida_json_value_seal`"); // lib/frida-core/frida-core.h:5651:9
pub const json_value_set_boolean = @compileError("unable to translate macro: undefined identifier `_frida_json_value_set_boolean`"); // lib/frida-core/frida-core.h:5652:9
pub const json_value_set_double = @compileError("unable to translate macro: undefined identifier `_frida_json_value_set_double`"); // lib/frida-core/frida-core.h:5653:9
pub const json_value_set_int = @compileError("unable to translate macro: undefined identifier `_frida_json_value_set_int`"); // lib/frida-core/frida-core.h:5654:9
pub const json_value_set_string = @compileError("unable to translate macro: undefined identifier `_frida_json_value_set_string`"); // lib/frida-core/frida-core.h:5655:9
pub const json_value_type = @compileError("unable to translate macro: undefined identifier `_frida_json_value_type`"); // lib/frida-core/frida-core.h:5656:9
pub const json_value_type_get_name = @compileError("unable to translate macro: undefined identifier `_frida_json_value_type_get_name`"); // lib/frida-core/frida-core.h:5657:9
pub const json_value_unref = @compileError("unable to translate macro: undefined identifier `_frida_json_value_unref`"); // lib/frida-core/frida-core.h:5658:9
pub const json_value_unset = @compileError("unable to translate macro: undefined identifier `_frida_json_value_unset`"); // lib/frida-core/frida-core.h:5659:9
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /usr/lib/zig/lib/include/stddef.h:111:9
pub const G_GNUC_EXTENSION = @compileError("unable to translate macro: undefined identifier `__extension__`"); // lib/frida-core/frida-core.h:5832:9
pub const G_INLINE_FUNC = @compileError("unable to translate C expr: unexpected token 'static'"); // lib/frida-core/frida-core.h:5884:11
pub const g_macro__has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`"); // lib/frida-core/frida-core.h:5894:9
pub const G_GNUC_PURE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6011:9
pub const G_GNUC_MALLOC = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6017:9
pub const G_GNUC_NO_INLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6023:9
pub const G_GNUC_NULL_TERMINATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6050:9
pub const g_macro__has_feature = @compileError("unable to translate macro: undefined identifier `__has_feature`"); // lib/frida-core/frida-core.h:6066:9
pub const g_macro__has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`"); // lib/frida-core/frida-core.h:6078:9
pub const G_GNUC_ALLOC_SIZE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6127:9
pub const G_GNUC_ALLOC_SIZE2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6128:9
pub const G_GNUC_PRINTF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6323:9
pub const G_GNUC_SCANF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6325:9
pub const G_GNUC_STRFTIME = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6327:9
pub const G_GNUC_FORMAT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6342:9
pub const G_GNUC_NORETURN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6349:9
pub const G_GNUC_CONST = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6360:9
pub const G_GNUC_UNUSED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6367:9
pub const G_GNUC_NO_INSTRUMENT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6374:9
pub const G_GNUC_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6409:9
pub const G_GNUC_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6435:9
pub const G_GNUC_DEPRECATED_FOR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6464:9
pub const G_GNUC_BEGIN_IGNORE_DEPRECATIONS = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // lib/frida-core/frida-core.h:6491:9
pub const G_GNUC_END_IGNORE_DEPRECATIONS = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // lib/frida-core/frida-core.h:6494:9
pub const G_GNUC_MAY_ALIAS = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6514:9
pub const G_GNUC_WARN_UNUSED_RESULT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6538:9
pub const G_STRINGIFY_ARG = @compileError("unable to translate C expr: unexpected token '#'"); // lib/frida-core/frida-core.h:6588:9
pub const G_PASTE_ARGS = @compileError("unable to translate C expr: unexpected token '##'"); // lib/frida-core/frida-core.h:6591:9
pub const G_STATIC_ASSERT = @compileError("unable to translate C expr: unexpected token '_Static_assert'"); // lib/frida-core/frida-core.h:6595:9
pub const G_STATIC_ASSERT_EXPR = @compileError("unable to translate C expr: expected ')' instead got '['"); // lib/frida-core/frida-core.h:6607:9
pub const G_STRLOC = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:6614:9
pub const G_STRFUNC = @compileError("unable to translate macro: undefined identifier `__func__`"); // lib/frida-core/frida-core.h:6621:9
pub const G_N_ELEMENTS = @compileError("unable to translate C expr: unexpected token '('"); // lib/frida-core/frida-core.h:6684:9
pub const G_STRUCT_MEMBER = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:6705:9
pub const G_STMT_START = @compileError("unable to translate C expr: unexpected token 'do'"); // lib/frida-core/frida-core.h:6718:9
pub const G_STMT_END = @compileError("unable to translate C expr: unexpected token 'while'"); // lib/frida-core/frida-core.h:6726:9
pub const G_ALIGNOF = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:6754:9
pub const G_CONST_RETURN = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:6779:9
pub const G_NORETURN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6808:10
pub const G_NORETURN_FUNCPTR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6845:10
pub const G_ALWAYS_INLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6888:12
pub const G_NO_INLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6932:12
pub const G_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6984:9
pub const G_DEPRECATED_FOR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:6994:9
pub const G_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:7002:9
pub const _GLIB_GNUC_DO_PRAGMA = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // lib/frida-core/frida-core.h:7018:9
pub const GLIB_DEPRECATED_MACRO = @compileError("unable to translate macro: undefined identifier `GCC`"); // lib/frida-core/frida-core.h:7019:9
pub const GLIB_DEPRECATED_MACRO_FOR = @compileError("unable to translate macro: undefined identifier `GCC`"); // lib/frida-core/frida-core.h:7020:9
pub const GLIB_UNAVAILABLE_MACRO = @compileError("unable to translate macro: undefined identifier `GCC`"); // lib/frida-core/frida-core.h:7022:9
pub const _GLIB_AUTOPTR_FUNC_NAME = @compileError("unable to translate macro: undefined identifier `glib_autoptr_cleanup_`"); // lib/frida-core/frida-core.h:7059:9
pub const _GLIB_AUTOPTR_CLEAR_FUNC_NAME = @compileError("unable to translate macro: undefined identifier `glib_autoptr_clear_`"); // lib/frida-core/frida-core.h:7060:9
pub const _GLIB_AUTOPTR_TYPENAME = @compileError("unable to translate macro: undefined identifier `_autoptr`"); // lib/frida-core/frida-core.h:7061:9
pub const _GLIB_AUTOPTR_LIST_FUNC_NAME = @compileError("unable to translate macro: undefined identifier `glib_listautoptr_cleanup_`"); // lib/frida-core/frida-core.h:7062:9
pub const _GLIB_AUTOPTR_LIST_TYPENAME = @compileError("unable to translate macro: undefined identifier `_listautoptr`"); // lib/frida-core/frida-core.h:7063:9
pub const _GLIB_AUTOPTR_SLIST_FUNC_NAME = @compileError("unable to translate macro: undefined identifier `glib_slistautoptr_cleanup_`"); // lib/frida-core/frida-core.h:7064:9
pub const _GLIB_AUTOPTR_SLIST_TYPENAME = @compileError("unable to translate macro: undefined identifier `_slistautoptr`"); // lib/frida-core/frida-core.h:7065:9
pub const _GLIB_AUTOPTR_QUEUE_FUNC_NAME = @compileError("unable to translate macro: undefined identifier `glib_queueautoptr_cleanup_`"); // lib/frida-core/frida-core.h:7066:9
pub const _GLIB_AUTOPTR_QUEUE_TYPENAME = @compileError("unable to translate macro: undefined identifier `_queueautoptr`"); // lib/frida-core/frida-core.h:7067:9
pub const _GLIB_AUTO_FUNC_NAME = @compileError("unable to translate macro: undefined identifier `glib_auto_cleanup_`"); // lib/frida-core/frida-core.h:7068:9
pub const _GLIB_CLEANUP = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:7069:9
pub const _GLIB_DEFINE_AUTOPTR_CLEANUP_FUNCS = @compileError("unable to translate macro: undefined identifier `_ptr`"); // lib/frida-core/frida-core.h:7070:9
pub const G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC = @compileError("unable to translate macro: undefined identifier `_ptr`"); // lib/frida-core/frida-core.h:7094:9
pub const G_DEFINE_AUTO_CLEANUP_FREE_FUNC = @compileError("unable to translate macro: undefined identifier `_ptr`"); // lib/frida-core/frida-core.h:7098:9
pub const g_autoptr = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:7102:9
pub const g_autolist = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:7103:9
pub const g_autoslist = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:7104:9
pub const g_autoqueue = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:7105:9
pub const g_auto = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:7106:9
pub const G_SIZEOF_MEMBER = @compileError("unable to translate C expr: unexpected token 'sizeof'"); // lib/frida-core/frida-core.h:7143:9
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`"); // /usr/include/features.h:187:9
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`"); // /usr/include/sys/cdefs.h:45:10
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`"); // /usr/include/sys/cdefs.h:55:10
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:82:11
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'"); // /usr/include/sys/cdefs.h:124:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'"); // /usr/include/sys/cdefs.h:125:9
pub const __warnattr = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:209:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'"); // /usr/include/sys/cdefs.h:210:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['"); // /usr/include/sys/cdefs.h:218:10
pub const __REDIRECT = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /usr/include/sys/cdefs.h:249:10
pub const __REDIRECT_NTH = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /usr/include/sys/cdefs.h:256:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /usr/include/sys/cdefs.h:258:11
pub const __ASMNAME2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /usr/include/sys/cdefs.h:262:10
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:283:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:294:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:300:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:310:10
pub const __attribute_const__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:317:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:323:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:332:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:333:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:341:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:351:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:364:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:374:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:386:11
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:399:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:408:10
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__inline`"); // /usr/include/sys/cdefs.h:426:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:435:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__inline`"); // /usr/include/sys/cdefs.h:453:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:454:11
pub const __restrict_arr = @compileError("unable to translate macro: undefined identifier `__restrict`"); // /usr/include/sys/cdefs.h:497:10
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:546:10
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:622:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:623:10
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /usr/include/sys/cdefs.h:637:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`"); // /usr/include/sys/cdefs.h:638:10
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:683:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:684:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:685:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /usr/include/sys/cdefs.h:695:10
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:702:10
pub const FLT_EVAL_METHOD = @compileError("unable to translate macro: undefined identifier `__FLT_EVAL_METHOD__`"); // /usr/lib/zig/lib/include/float.h:91:9
pub const FLT_ROUNDS = @compileError("unable to translate macro: undefined identifier `__builtin_flt_rounds`"); // /usr/lib/zig/lib/include/float.h:93:9
pub const G_GNUC_INTERNAL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:7288:9
pub const GLIB_SYSDEF_POLLIN = @compileError("unable to translate C expr: unexpected token '='"); // lib/frida-core/frida-core.h:7327:9
pub const GLIB_SYSDEF_POLLOUT = @compileError("unable to translate C expr: unexpected token '='"); // lib/frida-core/frida-core.h:7328:9
pub const GLIB_SYSDEF_POLLPRI = @compileError("unable to translate C expr: unexpected token '='"); // lib/frida-core/frida-core.h:7329:9
pub const GLIB_SYSDEF_POLLHUP = @compileError("unable to translate C expr: unexpected token '='"); // lib/frida-core/frida-core.h:7330:9
pub const GLIB_SYSDEF_POLLERR = @compileError("unable to translate C expr: unexpected token '='"); // lib/frida-core/frida-core.h:7331:9
pub const GLIB_SYSDEF_POLLNVAL = @compileError("unable to translate C expr: unexpected token '='"); // lib/frida-core/frida-core.h:7332:9
pub const _GLIB_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:7850:11
pub const _GLIB_EXTERN = @compileError("unable to translate C expr: unexpected token 'extern'"); // lib/frida-core/frida-core.h:7862:9
pub const GLIB_DEPRECATED_FOR = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:7874:9
pub const GLIB_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:7875:9
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'"); // /usr/include/bits/types.h:137:10
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`"); // /usr/include/bits/typesizes.h:73:9
pub const g_uint_checked_add = @compileError("unable to translate macro: undefined identifier `__builtin_add_overflow`"); // lib/frida-core/frida-core.h:9183:9
pub const g_uint64_checked_add = @compileError("unable to translate macro: undefined identifier `__builtin_add_overflow`"); // lib/frida-core/frida-core.h:9188:9
pub const g_size_checked_add = @compileError("unable to translate macro: undefined identifier `__builtin_add_overflow`"); // lib/frida-core/frida-core.h:9193:9
pub const g_newa = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:9410:9
pub const g_newa0 = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:9424:9
pub const g_array_index = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:9494:9
pub const glib_typeof = @compileError("unable to translate macro: undefined identifier `__typeof__`"); // lib/frida-core/frida-core.h:9846:9
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`"); // /usr/lib/zig/lib/include/stdarg.h:33:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`"); // /usr/lib/zig/lib/include/stdarg.h:35:9
pub const va_arg = @compileError("unable to translate macro: undefined identifier `__builtin_va_arg`"); // /usr/lib/zig/lib/include/stdarg.h:36:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /usr/lib/zig/lib/include/stdarg.h:41:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /usr/lib/zig/lib/include/stdarg.h:46:9
pub const G_DEFINE_QUARK = @compileError("unable to translate macro: undefined identifier `_quark`"); // lib/frida-core/frida-core.h:10559:9
pub const G_DEFINE_EXTENDED_ERROR = @compileError("unable to translate macro: undefined identifier `Private`"); // lib/frida-core/frida-core.h:10622:9
pub const g_memmove = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:11125:9
pub const ATEXIT = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:11136:9
pub const __CFLOAT32 = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:149:12
pub const __CFLOAT64 = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:160:13
pub const __CFLOAT32X = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:169:12
pub const __CFLOAT64X = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:178:13
pub const __builtin_nansf32 = @compileError("unable to translate macro: undefined identifier `__builtin_nansf`"); // /usr/include/bits/floatn-common.h:221:12
pub const __builtin_huge_valf64 = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`"); // /usr/include/bits/floatn-common.h:255:13
pub const __builtin_inff64 = @compileError("unable to translate macro: undefined identifier `__builtin_inf`"); // /usr/include/bits/floatn-common.h:256:13
pub const __builtin_nanf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nan`"); // /usr/include/bits/floatn-common.h:257:13
pub const __builtin_nansf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nans`"); // /usr/include/bits/floatn-common.h:258:13
pub const __builtin_huge_valf32x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`"); // /usr/include/bits/floatn-common.h:272:12
pub const __builtin_inff32x = @compileError("unable to translate macro: undefined identifier `__builtin_inf`"); // /usr/include/bits/floatn-common.h:273:12
pub const __builtin_nanf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nan`"); // /usr/include/bits/floatn-common.h:274:12
pub const __builtin_nansf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nans`"); // /usr/include/bits/floatn-common.h:275:12
pub const __builtin_huge_valf64x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`"); // /usr/include/bits/floatn-common.h:289:13
pub const __builtin_inff64x = @compileError("unable to translate macro: undefined identifier `__builtin_infl`"); // /usr/include/bits/floatn-common.h:290:13
pub const __builtin_nanf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nanl`"); // /usr/include/bits/floatn-common.h:291:13
pub const __builtin_nansf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nansl`"); // /usr/include/bits/floatn-common.h:292:13
pub const __FD_ZERO = @compileError("unable to translate macro: undefined identifier `__i`"); // /usr/include/bits/select.h:25:9
pub const __FD_SET = @compileError("unable to translate C expr: expected ')' instead got '|='"); // /usr/include/bits/select.h:32:9
pub const __FD_CLR = @compileError("unable to translate C expr: expected ')' instead got '&='"); // /usr/include/bits/select.h:34:9
pub const __PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'"); // /usr/include/bits/struct_mutex.h:56:10
pub const __PTHREAD_RWLOCK_ELISION_EXTRA = @compileError("unable to translate C expr: unexpected token '{'"); // /usr/include/bits/struct_rwlock.h:40:11
pub const __ONCE_FLAG_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // /usr/include/bits/thread-shared-types.h:113:9
pub const G_WIN32_DLLMAIN_FOR_DLL_NAME = @compileError("unable to translate C expr: expected ')' instead got 'static'"); // lib/frida-core/frida-core.h:11267:10
pub const G_PRIVATE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:11363:9
pub const G_PRIVATE_INIT_WITH_FLAGS = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:11365:9
pub const G_ONCE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:11383:9
pub const G_LOCK_NAME = @compileError("unable to translate macro: undefined identifier `g__`"); // lib/frida-core/frida-core.h:11390:9
pub const G_LOCK_DEFINE_STATIC = @compileError("unable to translate C expr: unexpected token 'static'"); // lib/frida-core/frida-core.h:11391:9
pub const G_LOCK_EXTERN = @compileError("unable to translate C expr: unexpected token 'extern'"); // lib/frida-core/frida-core.h:11393:9
pub const g_once = @compileError("unable to translate macro: undefined identifier `__atomic_load_n`"); // lib/frida-core/frida-core.h:11537:10
pub const si_pid = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:128:9
pub const si_uid = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:129:9
pub const si_timerid = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:130:9
pub const si_overrun = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:131:9
pub const si_status = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:132:9
pub const si_utime = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:133:9
pub const si_stime = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:134:9
pub const si_value = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:135:9
pub const si_int = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:136:9
pub const si_ptr = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:137:9
pub const si_addr = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:138:9
pub const si_addr_lsb = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:139:9
pub const si_lower = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:140:9
pub const si_upper = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:141:9
pub const si_pkey = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:142:9
pub const si_band = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:143:9
pub const si_fd = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:144:9
pub const si_call_addr = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:146:10
pub const si_syscall = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:147:10
pub const si_arch = @compileError("unable to translate macro: undefined identifier `_sifields`"); // /usr/include/bits/types/siginfo_t.h:148:10
pub const sigev_notify_function = @compileError("unable to translate macro: undefined identifier `_sigev_un`"); // /usr/include/bits/types/sigevent_t.h:45:9
pub const sigev_notify_attributes = @compileError("unable to translate macro: undefined identifier `_sigev_un`"); // /usr/include/bits/types/sigevent_t.h:46:9
pub const sa_handler = @compileError("unable to translate macro: undefined identifier `__sigaction_handler`"); // /usr/include/bits/sigaction.h:39:10
pub const sa_sigaction = @compileError("unable to translate macro: undefined identifier `__sigaction_handler`"); // /usr/include/bits/sigaction.h:40:10
pub const G_BREAKPOINT = @compileError("unable to translate macro: undefined identifier `__asm__`"); // lib/frida-core/frida-core.h:12045:11
pub const d_fileno = @compileError("unable to translate macro: undefined identifier `d_ino`"); // /usr/include/bits/dirent.h:47:9
pub const _G_NEW = @compileError("unable to translate macro: undefined identifier `g_`"); // lib/frida-core/frida-core.h:14501:9
pub const _G_RENEW = @compileError("unable to translate macro: undefined identifier `g_`"); // lib/frida-core/frida-core.h:14503:9
pub const g_new0 = @compileError("unable to translate macro: undefined identifier `malloc0`"); // lib/frida-core/frida-core.h:14541:9
pub const g_try_new = @compileError("unable to translate macro: undefined identifier `try_malloc`"); // lib/frida-core/frida-core.h:14569:9
pub const g_try_new0 = @compileError("unable to translate macro: undefined identifier `try_malloc0`"); // lib/frida-core/frida-core.h:14584:9
pub const g_try_renew = @compileError("unable to translate macro: undefined identifier `try_realloc`"); // lib/frida-core/frida-core.h:14600:9
pub const G_SOURCE_FUNC = @compileError("unable to translate C expr: expected ')' instead got '('"); // lib/frida-core/frida-core.h:16128:9
pub const g_utf8_next_char = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:17590:9
pub const G_VARIANT_TYPE_BOOLEAN = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19055:9
pub const G_VARIANT_TYPE_BYTE = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19062:9
pub const G_VARIANT_TYPE_INT16 = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19069:9
pub const G_VARIANT_TYPE_UINT16 = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19077:9
pub const G_VARIANT_TYPE_INT32 = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19085:9
pub const G_VARIANT_TYPE_UINT32 = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19093:9
pub const G_VARIANT_TYPE_INT64 = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19101:9
pub const G_VARIANT_TYPE_UINT64 = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19111:9
pub const G_VARIANT_TYPE_DOUBLE = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19122:9
pub const G_VARIANT_TYPE_STRING = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19129:9
pub const G_VARIANT_TYPE_OBJECT_PATH = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19142:9
pub const G_VARIANT_TYPE_SIGNATURE = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19154:9
pub const G_VARIANT_TYPE_VARIANT = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19162:9
pub const G_VARIANT_TYPE_HANDLE = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19174:9
pub const G_VARIANT_TYPE_UNIT = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19182:9
pub const G_VARIANT_TYPE_ANY = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19190:9
pub const G_VARIANT_TYPE_BASIC = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19198:9
pub const G_VARIANT_TYPE_MAYBE = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19205:9
pub const G_VARIANT_TYPE_ARRAY = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19212:9
pub const G_VARIANT_TYPE_TUPLE = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19220:9
pub const G_VARIANT_TYPE_DICT_ENTRY = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19228:9
pub const G_VARIANT_TYPE_DICTIONARY = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19237:9
pub const G_VARIANT_TYPE_STRING_ARRAY = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19244:9
pub const G_VARIANT_TYPE_OBJECT_PATH_ARRAY = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19251:9
pub const G_VARIANT_TYPE_BYTESTRING = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19261:9
pub const G_VARIANT_TYPE_BYTESTRING_ARRAY = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19268:9
pub const G_VARIANT_TYPE_VARDICT = @compileError("unable to translate C expr: unexpected token 'const'"); // lib/frida-core/frida-core.h:19278:9
pub const G_VARIANT_BUILDER_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:19724:9
pub const G_VARIANT_DICT_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:19847:9
pub const G_DEBUG_HERE = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:20129:9
pub const g_error = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:20202:9
pub const g_message = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:20208:9
pub const g_critical = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:20211:9
pub const g_warning = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:20214:9
pub const g_info = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:20217:9
pub const g_debug = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:20220:9
pub const g_warning_once = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:20349:9
pub const g_warn_if_reached = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:20396:9
pub const g_warn_if_fail = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:20409:9
pub const g_return_if_fail = @compileError("unable to translate C expr: unexpected token 'if'"); // lib/frida-core/frida-core.h:20498:9
pub const g_return_val_if_fail = @compileError("unable to translate C expr: unexpected token 'if'"); // lib/frida-core/frida-core.h:20511:9
pub const g_return_if_reached = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:20524:9
pub const g_return_val_if_reached = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:20535:9
pub const G_QUEUE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:21230:9
pub const g_rc_box_new = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:21532:9
pub const g_rc_box_new0 = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:21534:9
pub const g_atomic_rc_box_new = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:21536:9
pub const g_atomic_rc_box_new0 = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:21538:9
pub const g_scanner_add_symbol = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:22652:10
pub const g_scanner_remove_symbol = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:22655:10
pub const g_scanner_foreach_symbol = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:22658:10
pub const g_slice_new = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:22948:10
pub const g_slice_new0 = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:22962:11
pub const g_slice_dup = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:22978:9
pub const g_slice_free = @compileError("unable to translate C expr: unexpected token 'if'"); // lib/frida-core/frida-core.h:22981:9
pub const g_slice_free_chain = @compileError("unable to translate C expr: unexpected token 'if'"); // lib/frida-core/frida-core.h:22986:9
pub const g_assert_cmpstr = @compileError("unable to translate macro: undefined identifier `__s1`"); // lib/frida-core/frida-core.h:23978:9
pub const g_assert_cmpint = @compileError("unable to translate macro: undefined identifier `__n1`"); // lib/frida-core/frida-core.h:23984:9
pub const g_assert_cmpuint = @compileError("unable to translate macro: undefined identifier `__n1`"); // lib/frida-core/frida-core.h:23990:9
pub const g_assert_cmphex = @compileError("unable to translate macro: undefined identifier `__n1`"); // lib/frida-core/frida-core.h:23996:9
pub const g_assert_cmpfloat = @compileError("unable to translate macro: undefined identifier `__n1`"); // lib/frida-core/frida-core.h:24002:9
pub const g_assert_cmpfloat_with_epsilon = @compileError("unable to translate macro: undefined identifier `__n1`"); // lib/frida-core/frida-core.h:24008:9
pub const g_assert_cmpmem = @compileError("unable to translate macro: undefined identifier `__m1`"); // lib/frida-core/frida-core.h:24015:9
pub const g_assert_cmpvariant = @compileError("unable to translate macro: undefined identifier `__v1`"); // lib/frida-core/frida-core.h:24032:9
pub const g_assert_cmpstrv = @compileError("unable to translate macro: undefined identifier `__strv1`"); // lib/frida-core/frida-core.h:24049:9
pub const g_assert_no_errno = @compileError("unable to translate macro: undefined identifier `__ret`"); // lib/frida-core/frida-core.h:24094:9
pub const g_assert_no_error = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24108:9
pub const g_assert_error = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24113:9
pub const g_assert_true = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24118:9
pub const g_assert_false = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24123:9
pub const g_assert_null = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24141:9
pub const g_assert_nonnull = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24145:9
pub const g_assert_not_reached = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24165:9
pub const g_assert = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24166:9
pub const g_test_add = @compileError("unable to translate macro: undefined identifier `add_vtable`"); // lib/frida-core/frida-core.h:24323:9
pub const g_test_trap_assert_passed = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24414:10
pub const g_test_trap_assert_failed = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24415:10
pub const g_test_trap_assert_stdout = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24416:10
pub const g_test_trap_assert_stdout_unmatched = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24417:10
pub const g_test_trap_assert_stderr = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24418:10
pub const g_test_trap_assert_stderr_unmatched = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24419:10
pub const g_test_assert_expected_messages = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // lib/frida-core/frida-core.h:24640:9
pub const g_chunk_new = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:25625:9
pub const g_chunk_new0 = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:25626:9
pub const g_main_new = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25888:17
pub const g_main_run = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25898:17
pub const g_main_quit = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25909:9
pub const g_main_destroy = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25919:9
pub const g_main_is_running = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25931:9
pub const g_main_iteration = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25946:9
pub const g_main_pending = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25958:9
pub const g_main_set_poll_func = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:25969:9
pub const __CPU_ZERO_S = @compileError("unable to translate C expr: unexpected token 'do'"); // /usr/include/bits/cpu-set.h:46:10
pub const __CPU_SET_S = @compileError("unable to translate macro: undefined identifier `__extension__`"); // /usr/include/bits/cpu-set.h:58:9
pub const __CPU_CLR_S = @compileError("unable to translate macro: undefined identifier `__extension__`"); // /usr/include/bits/cpu-set.h:65:9
pub const __CPU_ISSET_S = @compileError("unable to translate macro: undefined identifier `__extension__`"); // /usr/include/bits/cpu-set.h:72:9
pub const __CPU_EQUAL_S = @compileError("unable to translate macro: undefined identifier `__builtin_memcmp`"); // /usr/include/bits/cpu-set.h:84:10
pub const __CPU_OP_S = @compileError("unable to translate macro: undefined identifier `__extension__`"); // /usr/include/bits/cpu-set.h:99:9
pub const __sched_priority = @compileError("unable to translate macro: undefined identifier `sched_priority`"); // /usr/include/sched.h:48:9
pub const PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'"); // /usr/include/pthread.h:90:9
pub const PTHREAD_RWLOCK_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'"); // /usr/include/pthread.h:114:10
pub const PTHREAD_COND_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'"); // /usr/include/pthread.h:155:9
pub const pthread_cleanup_push = @compileError("unable to translate macro: undefined identifier `__cancel_buf`"); // /usr/include/pthread.h:681:10
pub const pthread_cleanup_pop = @compileError("unable to translate macro: undefined identifier `__cancel_buf`"); // /usr/include/pthread.h:702:10
pub const G_STATIC_MUTEX_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:26209:9
pub const g_static_mutex_lock = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:26222:9
pub const g_static_mutex_trylock = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:26224:9
pub const g_static_mutex_unlock = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:26226:9
pub const G_STATIC_REC_MUTEX_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:26254:9
pub const G_STATIC_RW_LOCK_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:26290:9
pub const G_STATIC_PRIVATE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:26326:9
pub const _GOBJECT_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:26617:11
pub const _GOBJECT_EXTERN = @compileError("unable to translate C expr: unexpected token 'extern'"); // lib/frida-core/frida-core.h:26629:9
pub const GOBJECT_DEPRECATED_FOR = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:26641:9
pub const GOBJECT_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:26642:9
pub const G_TYPE_INSTANCE_GET_PRIVATE = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:28165:9
pub const G_TYPE_CLASS_GET_PRIVATE = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:28183:9
pub const G_DECLARE_FINAL_TYPE = @compileError("unable to translate macro: undefined identifier `_get_type`"); // lib/frida-core/frida-core.h:28966:9
pub const G_DECLARE_DERIVABLE_TYPE = @compileError("unable to translate macro: undefined identifier `_get_type`"); // lib/frida-core/frida-core.h:29069:9
pub const G_DECLARE_INTERFACE = @compileError("unable to translate macro: undefined identifier `_get_type`"); // lib/frida-core/frida-core.h:29161:9
pub const G_DEFINE_TYPE = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:29192:9
pub const G_DEFINE_TYPE_WITH_CODE = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:29208:9
pub const G_DEFINE_ABSTRACT_TYPE = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:29249:9
pub const G_DEFINE_ABSTRACT_TYPE_WITH_CODE = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:29268:9
pub const G_DEFINE_FINAL_TYPE = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:29298:9
pub const G_DEFINE_FINAL_TYPE_WITH_CODE = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:29317:9
pub const G_DEFINE_FINAL_TYPE_WITH_PRIVATE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:29333:9
pub const G_DEFINE_TYPE_EXTENDED = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:29411:9
pub const G_DEFINE_INTERFACE = @compileError("unable to translate C expr: unexpected token ';'"); // lib/frida-core/frida-core.h:29436:9
pub const G_DEFINE_INTERFACE_WITH_CODE = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:29457:9
pub const G_IMPLEMENT_INTERFACE = @compileError("unable to translate macro: undefined identifier `g_implement_interface_info`"); // lib/frida-core/frida-core.h:29473:9
pub const G_ADD_PRIVATE = @compileError("unable to translate macro: undefined identifier `_private_offset`"); // lib/frida-core/frida-core.h:29552:9
pub const G_PRIVATE_OFFSET = @compileError("unable to translate macro: undefined identifier `_private_offset`"); // lib/frida-core/frida-core.h:29571:9
pub const _G_DEFINE_TYPE_EXTENDED_CLASS_INIT = @compileError("unable to translate macro: undefined identifier `_class_intern_init`"); // lib/frida-core/frida-core.h:29616:9
pub const _G_DEFINE_TYPE_EXTENDED_BEGIN_PRE = @compileError("unable to translate macro: undefined identifier `_init`"); // lib/frida-core/frida-core.h:29635:9
pub const _G_DEFINE_TYPE_EXTENDED_BEGIN_REGISTER = @compileError("unable to translate macro: undefined identifier `static_g_define_type_id`"); // lib/frida-core/frida-core.h:29659:9
pub const _G_DEFINE_TYPE_EXTENDED_END = @compileError("unable to translate macro: undefined identifier `g_define_type_id`"); // lib/frida-core/frida-core.h:29681:9
pub const _G_DEFINE_TYPE_EXTENDED_BEGIN = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:29690:9
pub const _G_DEFINE_INTERFACE_EXTENDED_BEGIN = @compileError("unable to translate macro: undefined identifier `_default_init`"); // lib/frida-core/frida-core.h:29696:9
pub const _G_DEFINE_INTERFACE_EXTENDED_END = @compileError("unable to translate macro: undefined identifier `static_g_define_type_id`"); // lib/frida-core/frida-core.h:29717:9
pub const G_DEFINE_BOXED_TYPE = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:29788:9
pub const G_DEFINE_BOXED_TYPE_WITH_CODE = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:29816:9
pub const _G_DEFINE_BOXED_TYPE_BEGIN = @compileError("unable to translate macro: undefined identifier `_get_type_once`"); // lib/frida-core/frida-core.h:29822:9
pub const G_DEFINE_POINTER_TYPE = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:29896:9
pub const G_DEFINE_POINTER_TYPE_WITH_CODE = @compileError("unable to translate C expr: expected ',' or '}' instead got ';'"); // lib/frida-core/frida-core.h:29910:9
pub const _G_DEFINE_POINTER_TYPE_BEGIN = @compileError("unable to translate macro: undefined identifier `_get_type_once`"); // lib/frida-core/frida-core.h:29912:9
pub const _G_TYPE_CIC = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:30012:11
pub const _G_TYPE_CCC = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:30014:11
pub const _G_TYPE_IGC = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:30020:9
pub const _G_TYPE_IGI = @compileError("unable to translate C expr: unexpected token ')'"); // lib/frida-core/frida-core.h:30021:9
pub const _G_TYPE_CIT = @compileError("unable to translate macro: undefined identifier `__inst`"); // lib/frida-core/frida-core.h:30024:11
pub const _G_TYPE_CCT = @compileError("unable to translate macro: undefined identifier `__class`"); // lib/frida-core/frida-core.h:30034:11
pub const _G_TYPE_CVH = @compileError("unable to translate macro: undefined identifier `__val`"); // lib/frida-core/frida-core.h:30044:11
pub const G_VALUE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:30274:9
pub const G_OBJECT_WARN_INVALID_PSPEC = @compileError("unable to translate macro: undefined identifier `_glib__object`"); // lib/frida-core/frida-core.h:33338:9
pub const G_DEFINE_ENUM_VALUE = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:34114:9
pub const G_DEFINE_ENUM_TYPE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:34141:9
pub const G_DEFINE_FLAGS_TYPE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // lib/frida-core/frida-core.h:34184:9
pub const G_DEFINE_DYNAMIC_TYPE = @compileError("unable to translate C expr: unexpected token '{'"); // lib/frida-core/frida-core.h:35611:9
pub const G_DEFINE_DYNAMIC_TYPE_EXTENDED = @compileError("unable to translate macro: undefined identifier `_init`"); // lib/frida-core/frida-core.h:35686:9
pub const G_IMPLEMENT_INTERFACE_DYNAMIC = @compileError("unable to translate macro: undefined identifier `g_implement_interface_info`"); // lib/frida-core/frida-core.h:35749:9
pub const G_ADD_PRIVATE_DYNAMIC = @compileError("unable to translate macro: undefined identifier `_private_offset`"); // lib/frida-core/frida-core.h:35771:9
pub const _GIO_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:36493:11
pub const _GIO_EXTERN = @compileError("unable to translate C expr: unexpected token 'extern'"); // lib/frida-core/frida-core.h:36505:9
pub const GIO_DEPRECATED_FOR = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:36517:9
pub const GIO_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:36518:9
pub const G_DBUS_ACTION_GROUP_CLASS = @compileError("unable to translate macro: undefined identifier `GDBusActionGroupClass`"); // lib/frida-core/frida-core.h:43698:9
pub const G_DBUS_ACTION_GROUP_GET_CLASS = @compileError("unable to translate macro: undefined identifier `GDBusActionGroupClass`"); // lib/frida-core/frida-core.h:43704:9
pub const _GMODULE_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:52163:11
pub const _GMODULE_EXTERN = @compileError("unable to translate C expr: unexpected token 'extern'"); // lib/frida-core/frida-core.h:52175:9
pub const GMODULE_DEPRECATED_FOR = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:52187:9
pub const GMODULE_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:52188:9
pub const G_MODULE_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // lib/frida-core/frida-core.h:53085:11
pub const G_MODULE_IMPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // lib/frida-core/frida-core.h:53086:11
pub const G_MODULE_ERROR = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:53117:9
pub const JSON_VERSION = @compileError("unable to translate C expr: expected ')' instead got 'FloatLiteral'"); // lib/frida-core/frida-core.h:62580:9
pub const _JSON_EXTERN = @compileError("unable to translate C expr: unexpected token 'extern'"); // lib/frida-core/frida-core.h:62629:9
pub const JSON_DEPRECATED_FOR = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:62638:9
pub const JSON_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // lib/frida-core/frida-core.h:62639:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 16);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 1);
pub const __clang_version__ = "16.0.1 (https://github.com/ziglang/zig-bootstrap 710c5d12660235bc4eac103a8c6677c61f0a9ded)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 16.0.1 (https://github.com/ziglang/zig-bootstrap 710c5d12660235bc4eac103a8c6677c61f0a9ded)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __k8 = @as(c_int, 1);
pub const __k8__ = @as(c_int, 1);
pub const __tune_k8__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __GFNI__ = @as(c_int, 1);
pub const __AVX512CD__ = @as(c_int, 1);
pub const __AVX512VPOPCNTDQ__ = @as(c_int, 1);
pub const __AVX512VNNI__ = @as(c_int, 1);
pub const __AVX512DQ__ = @as(c_int, 1);
pub const __AVX512BITALG__ = @as(c_int, 1);
pub const __AVX512BW__ = @as(c_int, 1);
pub const __AVX512VL__ = @as(c_int, 1);
pub const __AVX512VBMI__ = @as(c_int, 1);
pub const __AVX512VBMI2__ = @as(c_int, 1);
pub const __AVX512IFMA__ = @as(c_int, 1);
pub const __AVX512VP2INTERSECT__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __AVX512F__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __GLIBC_MINOR__ = @as(c_int, 36);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __FRIDA_SYMBOL_MAPPINGS__ = "";
pub const g_action_activate = _frida_g_action_activate;
pub const g_action_change_state = _frida_g_action_change_state;
pub const g_action_get_enabled = _frida_g_action_get_enabled;
pub const g_action_get_name = _frida_g_action_get_name;
pub const g_action_get_parameter_type = _frida_g_action_get_parameter_type;
pub const g_action_get_state = _frida_g_action_get_state;
pub const g_action_get_state_hint = _frida_g_action_get_state_hint;
pub const g_action_get_state_type = _frida_g_action_get_state_type;
pub const g_action_get_type = _frida_g_action_get_type;
pub const g_action_group_action_added = _frida_g_action_group_action_added;
pub const g_action_group_action_enabled_changed = _frida_g_action_group_action_enabled_changed;
pub const g_action_group_action_removed = _frida_g_action_group_action_removed;
pub const g_action_group_action_state_changed = _frida_g_action_group_action_state_changed;
pub const g_action_group_activate_action = _frida_g_action_group_activate_action;
pub const g_action_group_change_action_state = _frida_g_action_group_change_action_state;
pub const g_action_group_get_action_enabled = _frida_g_action_group_get_action_enabled;
pub const g_action_group_get_action_parameter_type = _frida_g_action_group_get_action_parameter_type;
pub const g_action_group_get_action_state = _frida_g_action_group_get_action_state;
pub const g_action_group_get_action_state_hint = _frida_g_action_group_get_action_state_hint;
pub const g_action_group_get_action_state_type = _frida_g_action_group_get_action_state_type;
pub const g_action_group_get_type = _frida_g_action_group_get_type;
pub const g_action_group_has_action = _frida_g_action_group_has_action;
pub const g_action_group_list_actions = _frida_g_action_group_list_actions;
pub const g_action_group_query_action = _frida_g_action_group_query_action;
pub const g_action_map_add_action = _frida_g_action_map_add_action;
pub const g_action_map_add_action_entries = _frida_g_action_map_add_action_entries;
pub const g_action_map_get_type = _frida_g_action_map_get_type;
pub const g_action_map_lookup_action = _frida_g_action_map_lookup_action;
pub const g_action_map_remove_action = _frida_g_action_map_remove_action;
pub const g_action_name_is_valid = _frida_g_action_name_is_valid;
pub const g_action_parse_detailed_name = _frida_g_action_parse_detailed_name;
pub const g_action_print_detailed_name = _frida_g_action_print_detailed_name;
pub const g_aligned_alloc = _frida_g_aligned_alloc;
pub const g_aligned_alloc0 = _frida_g_aligned_alloc0;
pub const g_aligned_free = _frida_g_aligned_free;
pub const g_allocator_free = _frida_g_allocator_free;
pub const g_allocator_new = _frida_g_allocator_new;
pub const g_app_info_add_supports_type = _frida_g_app_info_add_supports_type;
pub const g_app_info_can_delete = _frida_g_app_info_can_delete;
pub const g_app_info_can_remove_supports_type = _frida_g_app_info_can_remove_supports_type;
pub const g_app_info_create_flags_get_type = _frida_g_app_info_create_flags_get_type;
pub const g_app_info_create_from_commandline = _frida_g_app_info_create_from_commandline;
pub const g_app_info_delete = _frida_g_app_info_delete;
pub const g_app_info_dup = _frida_g_app_info_dup;
pub const g_app_info_equal = _frida_g_app_info_equal;
pub const g_app_info_get_all = _frida_g_app_info_get_all;
pub const g_app_info_get_all_for_type = _frida_g_app_info_get_all_for_type;
pub const g_app_info_get_commandline = _frida_g_app_info_get_commandline;
pub const g_app_info_get_default_for_type = _frida_g_app_info_get_default_for_type;
pub const g_app_info_get_default_for_type_async = _frida_g_app_info_get_default_for_type_async;
pub const g_app_info_get_default_for_type_finish = _frida_g_app_info_get_default_for_type_finish;
pub const g_app_info_get_default_for_uri_scheme = _frida_g_app_info_get_default_for_uri_scheme;
pub const g_app_info_get_default_for_uri_scheme_async = _frida_g_app_info_get_default_for_uri_scheme_async;
pub const g_app_info_get_default_for_uri_scheme_finish = _frida_g_app_info_get_default_for_uri_scheme_finish;
pub const g_app_info_get_description = _frida_g_app_info_get_description;
pub const g_app_info_get_display_name = _frida_g_app_info_get_display_name;
pub const g_app_info_get_executable = _frida_g_app_info_get_executable;
pub const g_app_info_get_fallback_for_type = _frida_g_app_info_get_fallback_for_type;
pub const g_app_info_get_icon = _frida_g_app_info_get_icon;
pub const g_app_info_get_id = _frida_g_app_info_get_id;
pub const g_app_info_get_name = _frida_g_app_info_get_name;
pub const g_app_info_get_recommended_for_type = _frida_g_app_info_get_recommended_for_type;
pub const g_app_info_get_supported_types = _frida_g_app_info_get_supported_types;
pub const g_app_info_get_type = _frida_g_app_info_get_type;
pub const g_app_info_launch = _frida_g_app_info_launch;
pub const g_app_info_launch_default_for_uri = _frida_g_app_info_launch_default_for_uri;
pub const g_app_info_launch_default_for_uri_async = _frida_g_app_info_launch_default_for_uri_async;
pub const g_app_info_launch_default_for_uri_finish = _frida_g_app_info_launch_default_for_uri_finish;
pub const g_app_info_launch_uris = _frida_g_app_info_launch_uris;
pub const g_app_info_launch_uris_async = _frida_g_app_info_launch_uris_async;
pub const g_app_info_launch_uris_finish = _frida_g_app_info_launch_uris_finish;
pub const g_app_info_monitor_get = _frida_g_app_info_monitor_get;
pub const g_app_info_monitor_get_type = _frida_g_app_info_monitor_get_type;
pub const g_app_info_remove_supports_type = _frida_g_app_info_remove_supports_type;
pub const g_app_info_reset_type_associations = _frida_g_app_info_reset_type_associations;
pub const g_app_info_set_as_default_for_extension = _frida_g_app_info_set_as_default_for_extension;
pub const g_app_info_set_as_default_for_type = _frida_g_app_info_set_as_default_for_type;
pub const g_app_info_set_as_last_used_for_type = _frida_g_app_info_set_as_last_used_for_type;
pub const g_app_info_should_show = _frida_g_app_info_should_show;
pub const g_app_info_supports_files = _frida_g_app_info_supports_files;
pub const g_app_info_supports_uris = _frida_g_app_info_supports_uris;
pub const g_app_launch_context_get_display = _frida_g_app_launch_context_get_display;
pub const g_app_launch_context_get_environment = _frida_g_app_launch_context_get_environment;
pub const g_app_launch_context_get_startup_notify_id = _frida_g_app_launch_context_get_startup_notify_id;
pub const g_app_launch_context_get_type = _frida_g_app_launch_context_get_type;
pub const g_app_launch_context_launch_failed = _frida_g_app_launch_context_launch_failed;
pub const g_app_launch_context_new = _frida_g_app_launch_context_new;
pub const g_app_launch_context_setenv = _frida_g_app_launch_context_setenv;
pub const g_app_launch_context_unsetenv = _frida_g_app_launch_context_unsetenv;
pub const g_application_activate = _frida_g_application_activate;
pub const g_application_add_main_option = _frida_g_application_add_main_option;
pub const g_application_add_main_option_entries = _frida_g_application_add_main_option_entries;
pub const g_application_add_option_group = _frida_g_application_add_option_group;
pub const g_application_bind_busy_property = _frida_g_application_bind_busy_property;
pub const g_application_command_line_create_file_for_arg = _frida_g_application_command_line_create_file_for_arg;
pub const g_application_command_line_get_arguments = _frida_g_application_command_line_get_arguments;
pub const g_application_command_line_get_cwd = _frida_g_application_command_line_get_cwd;
pub const g_application_command_line_get_environ = _frida_g_application_command_line_get_environ;
pub const g_application_command_line_get_exit_status = _frida_g_application_command_line_get_exit_status;
pub const g_application_command_line_get_is_remote = _frida_g_application_command_line_get_is_remote;
pub const g_application_command_line_get_options_dict = _frida_g_application_command_line_get_options_dict;
pub const g_application_command_line_get_platform_data = _frida_g_application_command_line_get_platform_data;
pub const g_application_command_line_get_stdin = _frida_g_application_command_line_get_stdin;
pub const g_application_command_line_get_type = _frida_g_application_command_line_get_type;
pub const g_application_command_line_getenv = _frida_g_application_command_line_getenv;
pub const g_application_command_line_print = _frida_g_application_command_line_print;
pub const g_application_command_line_printerr = _frida_g_application_command_line_printerr;
pub const g_application_command_line_set_exit_status = _frida_g_application_command_line_set_exit_status;
pub const g_application_flags_get_type = _frida_g_application_flags_get_type;
pub const g_application_get_application_id = _frida_g_application_get_application_id;
pub const g_application_get_dbus_connection = _frida_g_application_get_dbus_connection;
pub const g_application_get_dbus_object_path = _frida_g_application_get_dbus_object_path;
pub const g_application_get_default = _frida_g_application_get_default;
pub const g_application_get_flags = _frida_g_application_get_flags;
pub const g_application_get_inactivity_timeout = _frida_g_application_get_inactivity_timeout;
pub const g_application_get_is_busy = _frida_g_application_get_is_busy;
pub const g_application_get_is_registered = _frida_g_application_get_is_registered;
pub const g_application_get_is_remote = _frida_g_application_get_is_remote;
pub const g_application_get_resource_base_path = _frida_g_application_get_resource_base_path;
pub const g_application_get_type = _frida_g_application_get_type;
pub const g_application_hold = _frida_g_application_hold;
pub const g_application_id_is_valid = _frida_g_application_id_is_valid;
pub const g_application_mark_busy = _frida_g_application_mark_busy;
pub const g_application_new = _frida_g_application_new;
pub const g_application_open = _frida_g_application_open;
pub const g_application_quit = _frida_g_application_quit;
pub const g_application_register = _frida_g_application_register;
pub const g_application_release = _frida_g_application_release;
pub const g_application_run = _frida_g_application_run;
pub const g_application_send_notification = _frida_g_application_send_notification;
pub const g_application_set_action_group = _frida_g_application_set_action_group;
pub const g_application_set_application_id = _frida_g_application_set_application_id;
pub const g_application_set_default = _frida_g_application_set_default;
pub const g_application_set_flags = _frida_g_application_set_flags;
pub const g_application_set_inactivity_timeout = _frida_g_application_set_inactivity_timeout;
pub const g_application_set_option_context_description = _frida_g_application_set_option_context_description;
pub const g_application_set_option_context_parameter_string = _frida_g_application_set_option_context_parameter_string;
pub const g_application_set_option_context_summary = _frida_g_application_set_option_context_summary;
pub const g_application_set_resource_base_path = _frida_g_application_set_resource_base_path;
pub const g_application_unbind_busy_property = _frida_g_application_unbind_busy_property;
pub const g_application_unmark_busy = _frida_g_application_unmark_busy;
pub const g_application_withdraw_notification = _frida_g_application_withdraw_notification;
pub const g_array_append_vals = _frida_g_array_append_vals;
pub const g_array_binary_search = _frida_g_array_binary_search;
pub const g_array_copy = _frida_g_array_copy;
pub const g_array_free = _frida_g_array_free;
pub const g_array_get_element_size = _frida_g_array_get_element_size;
pub const g_array_get_type = _frida_g_array_get_type;
pub const g_array_insert_vals = _frida_g_array_insert_vals;
pub const g_array_new = _frida_g_array_new;
pub const g_array_prepend_vals = _frida_g_array_prepend_vals;
pub const g_array_ref = _frida_g_array_ref;
pub const g_array_remove_index = _frida_g_array_remove_index;
pub const g_array_remove_index_fast = _frida_g_array_remove_index_fast;
pub const g_array_remove_range = _frida_g_array_remove_range;
pub const g_array_set_clear_func = _frida_g_array_set_clear_func;
pub const g_array_set_size = _frida_g_array_set_size;
pub const g_array_sized_new = _frida_g_array_sized_new;
pub const g_array_sort = _frida_g_array_sort;
pub const g_array_sort_with_data = _frida_g_array_sort_with_data;
pub const g_array_steal = _frida_g_array_steal;
pub const g_array_unref = _frida_g_array_unref;
pub const g_ascii_digit_value = _frida_g_ascii_digit_value;
pub const g_ascii_dtostr = _frida_g_ascii_dtostr;
pub const g_ascii_formatd = _frida_g_ascii_formatd;
pub const g_ascii_strcasecmp = _frida_g_ascii_strcasecmp;
pub const g_ascii_strdown = _frida_g_ascii_strdown;
pub const g_ascii_string_to_signed = _frida_g_ascii_string_to_signed;
pub const g_ascii_string_to_unsigned = _frida_g_ascii_string_to_unsigned;
pub const g_ascii_strncasecmp = _frida_g_ascii_strncasecmp;
pub const g_ascii_strtod = _frida_g_ascii_strtod;
pub const g_ascii_strtoll = _frida_g_ascii_strtoll;
pub const g_ascii_strtoull = _frida_g_ascii_strtoull;
pub const g_ascii_strup = _frida_g_ascii_strup;
pub const g_ascii_table = _frida_g_ascii_table;
pub const g_ascii_tolower = _frida_g_ascii_tolower;
pub const g_ascii_toupper = _frida_g_ascii_toupper;
pub const g_ascii_xdigit_value = _frida_g_ascii_xdigit_value;
pub const g_ask_password_flags_get_type = _frida_g_ask_password_flags_get_type;
pub const g_assert_warning = _frida_g_assert_warning;
pub const g_assertion_message = _frida_g_assertion_message;
pub const g_assertion_message_cmpnum = _frida_g_assertion_message_cmpnum;
pub const g_assertion_message_cmpstr = _frida_g_assertion_message_cmpstr;
pub const g_assertion_message_cmpstrv = _frida_g_assertion_message_cmpstrv;
pub const g_assertion_message_error = _frida_g_assertion_message_error;
pub const g_assertion_message_expr = _frida_g_assertion_message_expr;
pub const g_async_initable_get_type = _frida_g_async_initable_get_type;
pub const g_async_initable_init_async = _frida_g_async_initable_init_async;
pub const g_async_initable_init_finish = _frida_g_async_initable_init_finish;
pub const g_async_initable_new_async = _frida_g_async_initable_new_async;
pub const g_async_initable_new_finish = _frida_g_async_initable_new_finish;
pub const g_async_initable_new_valist_async = _frida_g_async_initable_new_valist_async;
pub const g_async_initable_newv_async = _frida_g_async_initable_newv_async;
pub const g_async_queue_length = _frida_g_async_queue_length;
pub const g_async_queue_length_unlocked = _frida_g_async_queue_length_unlocked;
pub const g_async_queue_lock = _frida_g_async_queue_lock;
pub const g_async_queue_new = _frida_g_async_queue_new;
pub const g_async_queue_new_full = _frida_g_async_queue_new_full;
pub const g_async_queue_pop = _frida_g_async_queue_pop;
pub const g_async_queue_pop_unlocked = _frida_g_async_queue_pop_unlocked;
pub const g_async_queue_push = _frida_g_async_queue_push;
pub const g_async_queue_push_front = _frida_g_async_queue_push_front;
pub const g_async_queue_push_front_unlocked = _frida_g_async_queue_push_front_unlocked;
pub const g_async_queue_push_sorted = _frida_g_async_queue_push_sorted;
pub const g_async_queue_push_sorted_unlocked = _frida_g_async_queue_push_sorted_unlocked;
pub const g_async_queue_push_unlocked = _frida_g_async_queue_push_unlocked;
pub const g_async_queue_ref = _frida_g_async_queue_ref;
pub const g_async_queue_ref_unlocked = _frida_g_async_queue_ref_unlocked;
pub const g_async_queue_remove = _frida_g_async_queue_remove;
pub const g_async_queue_remove_unlocked = _frida_g_async_queue_remove_unlocked;
pub const g_async_queue_sort = _frida_g_async_queue_sort;
pub const g_async_queue_sort_unlocked = _frida_g_async_queue_sort_unlocked;
pub const g_async_queue_timed_pop = _frida_g_async_queue_timed_pop;
pub const g_async_queue_timed_pop_unlocked = _frida_g_async_queue_timed_pop_unlocked;
pub const g_async_queue_timeout_pop = _frida_g_async_queue_timeout_pop;
pub const g_async_queue_timeout_pop_unlocked = _frida_g_async_queue_timeout_pop_unlocked;
pub const g_async_queue_try_pop = _frida_g_async_queue_try_pop;
pub const g_async_queue_try_pop_unlocked = _frida_g_async_queue_try_pop_unlocked;
pub const g_async_queue_unlock = _frida_g_async_queue_unlock;
pub const g_async_queue_unref = _frida_g_async_queue_unref;
pub const g_async_queue_unref_and_unlock = _frida_g_async_queue_unref_and_unlock;
pub const g_async_result_get_source_object = _frida_g_async_result_get_source_object;
pub const g_async_result_get_type = _frida_g_async_result_get_type;
pub const g_async_result_get_user_data = _frida_g_async_result_get_user_data;
pub const g_async_result_is_tagged = _frida_g_async_result_is_tagged;
pub const g_async_result_legacy_propagate_error = _frida_g_async_result_legacy_propagate_error;
pub const g_atexit = _frida_g_atexit;
pub const g_atomic_int_add = _frida_g_atomic_int_add;
pub const g_atomic_int_and = _frida_g_atomic_int_and;
pub const g_atomic_int_compare_and_exchange = _frida_g_atomic_int_compare_and_exchange;
pub const g_atomic_int_compare_and_exchange_full = _frida_g_atomic_int_compare_and_exchange_full;
pub const g_atomic_int_dec_and_test = _frida_g_atomic_int_dec_and_test;
pub const g_atomic_int_exchange = _frida_g_atomic_int_exchange;
pub const g_atomic_int_exchange_and_add = _frida_g_atomic_int_exchange_and_add;
pub const g_atomic_int_get = _frida_g_atomic_int_get;
pub const g_atomic_int_inc = _frida_g_atomic_int_inc;
pub const g_atomic_int_or = _frida_g_atomic_int_or;
pub const g_atomic_int_set = _frida_g_atomic_int_set;
pub const g_atomic_int_xor = _frida_g_atomic_int_xor;
pub const g_atomic_pointer_add = _frida_g_atomic_pointer_add;
pub const g_atomic_pointer_and = _frida_g_atomic_pointer_and;
pub const g_atomic_pointer_compare_and_exchange = _frida_g_atomic_pointer_compare_and_exchange;
pub const g_atomic_pointer_compare_and_exchange_full = _frida_g_atomic_pointer_compare_and_exchange_full;
pub const g_atomic_pointer_exchange = _frida_g_atomic_pointer_exchange;
pub const g_atomic_pointer_get = _frida_g_atomic_pointer_get;
pub const g_atomic_pointer_or = _frida_g_atomic_pointer_or;
pub const g_atomic_pointer_set = _frida_g_atomic_pointer_set;
pub const g_atomic_pointer_xor = _frida_g_atomic_pointer_xor;
pub const g_atomic_rc_box_acquire = _frida_g_atomic_rc_box_acquire;
pub const g_atomic_rc_box_alloc = _frida_g_atomic_rc_box_alloc;
pub const g_atomic_rc_box_alloc0 = _frida_g_atomic_rc_box_alloc0;
pub const g_atomic_rc_box_dup = _frida_g_atomic_rc_box_dup;
pub const g_atomic_rc_box_get_size = _frida_g_atomic_rc_box_get_size;
pub const g_atomic_rc_box_release = _frida_g_atomic_rc_box_release;
pub const g_atomic_rc_box_release_full = _frida_g_atomic_rc_box_release_full;
pub const g_atomic_ref_count_compare = _frida_g_atomic_ref_count_compare;
pub const g_atomic_ref_count_dec = _frida_g_atomic_ref_count_dec;
pub const g_atomic_ref_count_inc = _frida_g_atomic_ref_count_inc;
pub const g_atomic_ref_count_init = _frida_g_atomic_ref_count_init;
pub const g_base64_decode = _frida_g_base64_decode;
pub const g_base64_decode_inplace = _frida_g_base64_decode_inplace;
pub const g_base64_decode_step = _frida_g_base64_decode_step;
pub const g_base64_encode = _frida_g_base64_encode;
pub const g_base64_encode_close = _frida_g_base64_encode_close;
pub const g_base64_encode_step = _frida_g_base64_encode_step;
pub const g_basename = _frida_g_basename;
pub const g_binding_dup_source = _frida_g_binding_dup_source;
pub const g_binding_dup_target = _frida_g_binding_dup_target;
pub const g_binding_flags_get_type = _frida_g_binding_flags_get_type;
pub const g_binding_get_flags = _frida_g_binding_get_flags;
pub const g_binding_get_source = _frida_g_binding_get_source;
pub const g_binding_get_source_property = _frida_g_binding_get_source_property;
pub const g_binding_get_target = _frida_g_binding_get_target;
pub const g_binding_get_target_property = _frida_g_binding_get_target_property;
pub const g_binding_get_type = _frida_g_binding_get_type;
pub const g_binding_group_bind = _frida_g_binding_group_bind;
pub const g_binding_group_bind_full = _frida_g_binding_group_bind_full;
pub const g_binding_group_bind_with_closures = _frida_g_binding_group_bind_with_closures;
pub const g_binding_group_dup_source = _frida_g_binding_group_dup_source;
pub const g_binding_group_get_type = _frida_g_binding_group_get_type;
pub const g_binding_group_new = _frida_g_binding_group_new;
pub const g_binding_group_set_source = _frida_g_binding_group_set_source;
pub const g_binding_unbind = _frida_g_binding_unbind;
pub const g_bit_lock = _frida_g_bit_lock;
pub const g_bit_trylock = _frida_g_bit_trylock;
pub const g_bit_unlock = _frida_g_bit_unlock;
pub const g_blow_chunks = _frida_g_blow_chunks;
pub const g_bookmark_file_add_application = _frida_g_bookmark_file_add_application;
pub const g_bookmark_file_add_group = _frida_g_bookmark_file_add_group;
pub const g_bookmark_file_copy = _frida_g_bookmark_file_copy;
pub const g_bookmark_file_error_quark = _frida_g_bookmark_file_error_quark;
pub const g_bookmark_file_free = _frida_g_bookmark_file_free;
pub const g_bookmark_file_get_added = _frida_g_bookmark_file_get_added;
pub const g_bookmark_file_get_added_date_time = _frida_g_bookmark_file_get_added_date_time;
pub const g_bookmark_file_get_app_info = _frida_g_bookmark_file_get_app_info;
pub const g_bookmark_file_get_application_info = _frida_g_bookmark_file_get_application_info;
pub const g_bookmark_file_get_applications = _frida_g_bookmark_file_get_applications;
pub const g_bookmark_file_get_description = _frida_g_bookmark_file_get_description;
pub const g_bookmark_file_get_groups = _frida_g_bookmark_file_get_groups;
pub const g_bookmark_file_get_icon = _frida_g_bookmark_file_get_icon;
pub const g_bookmark_file_get_is_private = _frida_g_bookmark_file_get_is_private;
pub const g_bookmark_file_get_mime_type = _frida_g_bookmark_file_get_mime_type;
pub const g_bookmark_file_get_modified = _frida_g_bookmark_file_get_modified;
pub const g_bookmark_file_get_modified_date_time = _frida_g_bookmark_file_get_modified_date_time;
pub const g_bookmark_file_get_size = _frida_g_bookmark_file_get_size;
pub const g_bookmark_file_get_title = _frida_g_bookmark_file_get_title;
pub const g_bookmark_file_get_type = _frida_g_bookmark_file_get_type;
pub const g_bookmark_file_get_uris = _frida_g_bookmark_file_get_uris;
pub const g_bookmark_file_get_visited = _frida_g_bookmark_file_get_visited;
pub const g_bookmark_file_get_visited_date_time = _frida_g_bookmark_file_get_visited_date_time;
pub const g_bookmark_file_has_application = _frida_g_bookmark_file_has_application;
pub const g_bookmark_file_has_group = _frida_g_bookmark_file_has_group;
pub const g_bookmark_file_has_item = _frida_g_bookmark_file_has_item;
pub const g_bookmark_file_load_from_data = _frida_g_bookmark_file_load_from_data;
pub const g_bookmark_file_load_from_data_dirs = _frida_g_bookmark_file_load_from_data_dirs;
pub const g_bookmark_file_load_from_file = _frida_g_bookmark_file_load_from_file;
pub const g_bookmark_file_move_item = _frida_g_bookmark_file_move_item;
pub const g_bookmark_file_new = _frida_g_bookmark_file_new;
pub const g_bookmark_file_remove_application = _frida_g_bookmark_file_remove_application;
pub const g_bookmark_file_remove_group = _frida_g_bookmark_file_remove_group;
pub const g_bookmark_file_remove_item = _frida_g_bookmark_file_remove_item;
pub const g_bookmark_file_set_added = _frida_g_bookmark_file_set_added;
pub const g_bookmark_file_set_added_date_time = _frida_g_bookmark_file_set_added_date_time;
pub const g_bookmark_file_set_app_info = _frida_g_bookmark_file_set_app_info;
pub const g_bookmark_file_set_application_info = _frida_g_bookmark_file_set_application_info;
pub const g_bookmark_file_set_description = _frida_g_bookmark_file_set_description;
pub const g_bookmark_file_set_groups = _frida_g_bookmark_file_set_groups;
pub const g_bookmark_file_set_icon = _frida_g_bookmark_file_set_icon;
pub const g_bookmark_file_set_is_private = _frida_g_bookmark_file_set_is_private;
pub const g_bookmark_file_set_mime_type = _frida_g_bookmark_file_set_mime_type;
pub const g_bookmark_file_set_modified = _frida_g_bookmark_file_set_modified;
pub const g_bookmark_file_set_modified_date_time = _frida_g_bookmark_file_set_modified_date_time;
pub const g_bookmark_file_set_title = _frida_g_bookmark_file_set_title;
pub const g_bookmark_file_set_visited = _frida_g_bookmark_file_set_visited;
pub const g_bookmark_file_set_visited_date_time = _frida_g_bookmark_file_set_visited_date_time;
pub const g_bookmark_file_to_data = _frida_g_bookmark_file_to_data;
pub const g_bookmark_file_to_file = _frida_g_bookmark_file_to_file;
pub const g_boxed_copy = _frida_g_boxed_copy;
pub const g_boxed_free = _frida_g_boxed_free;
pub const g_boxed_type_register_static = _frida_g_boxed_type_register_static;
pub const g_buffered_input_stream_fill = _frida_g_buffered_input_stream_fill;
pub const g_buffered_input_stream_fill_async = _frida_g_buffered_input_stream_fill_async;
pub const g_buffered_input_stream_fill_finish = _frida_g_buffered_input_stream_fill_finish;
pub const g_buffered_input_stream_get_available = _frida_g_buffered_input_stream_get_available;
pub const g_buffered_input_stream_get_buffer_size = _frida_g_buffered_input_stream_get_buffer_size;
pub const g_buffered_input_stream_get_type = _frida_g_buffered_input_stream_get_type;
pub const g_buffered_input_stream_new = _frida_g_buffered_input_stream_new;
pub const g_buffered_input_stream_new_sized = _frida_g_buffered_input_stream_new_sized;
pub const g_buffered_input_stream_peek = _frida_g_buffered_input_stream_peek;
pub const g_buffered_input_stream_peek_buffer = _frida_g_buffered_input_stream_peek_buffer;
pub const g_buffered_input_stream_read_byte = _frida_g_buffered_input_stream_read_byte;
pub const g_buffered_input_stream_set_buffer_size = _frida_g_buffered_input_stream_set_buffer_size;
pub const g_buffered_output_stream_get_auto_grow = _frida_g_buffered_output_stream_get_auto_grow;
pub const g_buffered_output_stream_get_buffer_size = _frida_g_buffered_output_stream_get_buffer_size;
pub const g_buffered_output_stream_get_type = _frida_g_buffered_output_stream_get_type;
pub const g_buffered_output_stream_new = _frida_g_buffered_output_stream_new;
pub const g_buffered_output_stream_new_sized = _frida_g_buffered_output_stream_new_sized;
pub const g_buffered_output_stream_set_auto_grow = _frida_g_buffered_output_stream_set_auto_grow;
pub const g_buffered_output_stream_set_buffer_size = _frida_g_buffered_output_stream_set_buffer_size;
pub const g_build_filename = _frida_g_build_filename;
pub const g_build_filename_valist = _frida_g_build_filename_valist;
pub const g_build_filenamev = _frida_g_build_filenamev;
pub const g_build_path = _frida_g_build_path;
pub const g_build_pathv = _frida_g_build_pathv;
pub const g_bus_get = _frida_g_bus_get;
pub const g_bus_get_finish = _frida_g_bus_get_finish;
pub const g_bus_get_sync = _frida_g_bus_get_sync;
pub const g_bus_name_owner_flags_get_type = _frida_g_bus_name_owner_flags_get_type;
pub const g_bus_name_watcher_flags_get_type = _frida_g_bus_name_watcher_flags_get_type;
pub const g_bus_own_name = _frida_g_bus_own_name;
pub const g_bus_own_name_on_connection = _frida_g_bus_own_name_on_connection;
pub const g_bus_own_name_on_connection_with_closures = _frida_g_bus_own_name_on_connection_with_closures;
pub const g_bus_own_name_with_closures = _frida_g_bus_own_name_with_closures;
pub const g_bus_type_get_type = _frida_g_bus_type_get_type;
pub const g_bus_unown_name = _frida_g_bus_unown_name;
pub const g_bus_unwatch_name = _frida_g_bus_unwatch_name;
pub const g_bus_watch_name = _frida_g_bus_watch_name;
pub const g_bus_watch_name_on_connection = _frida_g_bus_watch_name_on_connection;
pub const g_bus_watch_name_on_connection_with_closures = _frida_g_bus_watch_name_on_connection_with_closures;
pub const g_bus_watch_name_with_closures = _frida_g_bus_watch_name_with_closures;
pub const g_byte_array_append = _frida_g_byte_array_append;
pub const g_byte_array_free = _frida_g_byte_array_free;
pub const g_byte_array_free_to_bytes = _frida_g_byte_array_free_to_bytes;
pub const g_byte_array_get_type = _frida_g_byte_array_get_type;
pub const g_byte_array_new = _frida_g_byte_array_new;
pub const g_byte_array_new_take = _frida_g_byte_array_new_take;
pub const g_byte_array_prepend = _frida_g_byte_array_prepend;
pub const g_byte_array_ref = _frida_g_byte_array_ref;
pub const g_byte_array_remove_index = _frida_g_byte_array_remove_index;
pub const g_byte_array_remove_index_fast = _frida_g_byte_array_remove_index_fast;
pub const g_byte_array_remove_range = _frida_g_byte_array_remove_range;
pub const g_byte_array_set_size = _frida_g_byte_array_set_size;
pub const g_byte_array_sized_new = _frida_g_byte_array_sized_new;
pub const g_byte_array_sort = _frida_g_byte_array_sort;
pub const g_byte_array_sort_with_data = _frida_g_byte_array_sort_with_data;
pub const g_byte_array_steal = _frida_g_byte_array_steal;
pub const g_byte_array_unref = _frida_g_byte_array_unref;
pub const g_bytes_compare = _frida_g_bytes_compare;
pub const g_bytes_equal = _frida_g_bytes_equal;
pub const g_bytes_get_data = _frida_g_bytes_get_data;
pub const g_bytes_get_region = _frida_g_bytes_get_region;
pub const g_bytes_get_size = _frida_g_bytes_get_size;
pub const g_bytes_get_type = _frida_g_bytes_get_type;
pub const g_bytes_hash = _frida_g_bytes_hash;
pub const g_bytes_icon_get_bytes = _frida_g_bytes_icon_get_bytes;
pub const g_bytes_icon_get_type = _frida_g_bytes_icon_get_type;
pub const g_bytes_icon_new = _frida_g_bytes_icon_new;
pub const g_bytes_new = _frida_g_bytes_new;
pub const g_bytes_new_from_bytes = _frida_g_bytes_new_from_bytes;
pub const g_bytes_new_static = _frida_g_bytes_new_static;
pub const g_bytes_new_take = _frida_g_bytes_new_take;
pub const g_bytes_new_with_free_func = _frida_g_bytes_new_with_free_func;
pub const g_bytes_ref = _frida_g_bytes_ref;
pub const g_bytes_unref = _frida_g_bytes_unref;
pub const g_bytes_unref_to_array = _frida_g_bytes_unref_to_array;
pub const g_bytes_unref_to_data = _frida_g_bytes_unref_to_data;
pub const g_cache_destroy = _frida_g_cache_destroy;
pub const g_cache_insert = _frida_g_cache_insert;
pub const g_cache_key_foreach = _frida_g_cache_key_foreach;
pub const g_cache_new = _frida_g_cache_new;
pub const g_cache_remove = _frida_g_cache_remove;
pub const g_cache_value_foreach = _frida_g_cache_value_foreach;
pub const g_cancellable_cancel = _frida_g_cancellable_cancel;
pub const g_cancellable_connect = _frida_g_cancellable_connect;
pub const g_cancellable_disconnect = _frida_g_cancellable_disconnect;
pub const g_cancellable_get_current = _frida_g_cancellable_get_current;
pub const g_cancellable_get_fd = _frida_g_cancellable_get_fd;
pub const g_cancellable_get_type = _frida_g_cancellable_get_type;
pub const g_cancellable_is_cancelled = _frida_g_cancellable_is_cancelled;
pub const g_cancellable_make_pollfd = _frida_g_cancellable_make_pollfd;
pub const g_cancellable_new = _frida_g_cancellable_new;
pub const g_cancellable_pop_current = _frida_g_cancellable_pop_current;
pub const g_cancellable_push_current = _frida_g_cancellable_push_current;
pub const g_cancellable_release_fd = _frida_g_cancellable_release_fd;
pub const g_cancellable_reset = _frida_g_cancellable_reset;
pub const g_cancellable_set_error_if_cancelled = _frida_g_cancellable_set_error_if_cancelled;
pub const g_cancellable_source_new = _frida_g_cancellable_source_new;
pub const g_canonicalize_filename = _frida_g_canonicalize_filename;
pub const g_cclosure_marshal_BOOLEAN__BOXED_BOXED = _frida_g_cclosure_marshal_BOOLEAN__BOXED_BOXED;
pub const g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv = _frida_g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv;
pub const g_cclosure_marshal_BOOLEAN__FLAGS = _frida_g_cclosure_marshal_BOOLEAN__FLAGS;
pub const g_cclosure_marshal_BOOLEAN__FLAGSv = _frida_g_cclosure_marshal_BOOLEAN__FLAGSv;
pub const g_cclosure_marshal_STRING__OBJECT_POINTER = _frida_g_cclosure_marshal_STRING__OBJECT_POINTER;
pub const g_cclosure_marshal_STRING__OBJECT_POINTERv = _frida_g_cclosure_marshal_STRING__OBJECT_POINTERv;
pub const g_cclosure_marshal_VOID__BOOLEAN = _frida_g_cclosure_marshal_VOID__BOOLEAN;
pub const g_cclosure_marshal_VOID__BOOLEANv = _frida_g_cclosure_marshal_VOID__BOOLEANv;
pub const g_cclosure_marshal_VOID__BOXED = _frida_g_cclosure_marshal_VOID__BOXED;
pub const g_cclosure_marshal_VOID__BOXEDv = _frida_g_cclosure_marshal_VOID__BOXEDv;
pub const g_cclosure_marshal_VOID__CHAR = _frida_g_cclosure_marshal_VOID__CHAR;
pub const g_cclosure_marshal_VOID__CHARv = _frida_g_cclosure_marshal_VOID__CHARv;
pub const g_cclosure_marshal_VOID__DOUBLE = _frida_g_cclosure_marshal_VOID__DOUBLE;
pub const g_cclosure_marshal_VOID__DOUBLEv = _frida_g_cclosure_marshal_VOID__DOUBLEv;
pub const g_cclosure_marshal_VOID__ENUM = _frida_g_cclosure_marshal_VOID__ENUM;
pub const g_cclosure_marshal_VOID__ENUMv = _frida_g_cclosure_marshal_VOID__ENUMv;
pub const g_cclosure_marshal_VOID__FLAGS = _frida_g_cclosure_marshal_VOID__FLAGS;
pub const g_cclosure_marshal_VOID__FLAGSv = _frida_g_cclosure_marshal_VOID__FLAGSv;
pub const g_cclosure_marshal_VOID__FLOAT = _frida_g_cclosure_marshal_VOID__FLOAT;
pub const g_cclosure_marshal_VOID__FLOATv = _frida_g_cclosure_marshal_VOID__FLOATv;
pub const g_cclosure_marshal_VOID__INT = _frida_g_cclosure_marshal_VOID__INT;
pub const g_cclosure_marshal_VOID__INTv = _frida_g_cclosure_marshal_VOID__INTv;
pub const g_cclosure_marshal_VOID__LONG = _frida_g_cclosure_marshal_VOID__LONG;
pub const g_cclosure_marshal_VOID__LONGv = _frida_g_cclosure_marshal_VOID__LONGv;
pub const g_cclosure_marshal_VOID__OBJECT = _frida_g_cclosure_marshal_VOID__OBJECT;
pub const g_cclosure_marshal_VOID__OBJECTv = _frida_g_cclosure_marshal_VOID__OBJECTv;
pub const g_cclosure_marshal_VOID__PARAM = _frida_g_cclosure_marshal_VOID__PARAM;
pub const g_cclosure_marshal_VOID__PARAMv = _frida_g_cclosure_marshal_VOID__PARAMv;
pub const g_cclosure_marshal_VOID__POINTER = _frida_g_cclosure_marshal_VOID__POINTER;
pub const g_cclosure_marshal_VOID__POINTERv = _frida_g_cclosure_marshal_VOID__POINTERv;
pub const g_cclosure_marshal_VOID__STRING = _frida_g_cclosure_marshal_VOID__STRING;
pub const g_cclosure_marshal_VOID__STRINGv = _frida_g_cclosure_marshal_VOID__STRINGv;
pub const g_cclosure_marshal_VOID__UCHAR = _frida_g_cclosure_marshal_VOID__UCHAR;
pub const g_cclosure_marshal_VOID__UCHARv = _frida_g_cclosure_marshal_VOID__UCHARv;
pub const g_cclosure_marshal_VOID__UINT = _frida_g_cclosure_marshal_VOID__UINT;
pub const g_cclosure_marshal_VOID__UINT_POINTER = _frida_g_cclosure_marshal_VOID__UINT_POINTER;
pub const g_cclosure_marshal_VOID__UINT_POINTERv = _frida_g_cclosure_marshal_VOID__UINT_POINTERv;
pub const g_cclosure_marshal_VOID__UINTv = _frida_g_cclosure_marshal_VOID__UINTv;
pub const g_cclosure_marshal_VOID__ULONG = _frida_g_cclosure_marshal_VOID__ULONG;
pub const g_cclosure_marshal_VOID__ULONGv = _frida_g_cclosure_marshal_VOID__ULONGv;
pub const g_cclosure_marshal_VOID__VARIANT = _frida_g_cclosure_marshal_VOID__VARIANT;
pub const g_cclosure_marshal_VOID__VARIANTv = _frida_g_cclosure_marshal_VOID__VARIANTv;
pub const g_cclosure_marshal_VOID__VOID = _frida_g_cclosure_marshal_VOID__VOID;
pub const g_cclosure_marshal_VOID__VOIDv = _frida_g_cclosure_marshal_VOID__VOIDv;
pub const g_cclosure_marshal_generic = _frida_g_cclosure_marshal_generic;
pub const g_cclosure_marshal_generic_va = _frida_g_cclosure_marshal_generic_va;
pub const g_cclosure_new = _frida_g_cclosure_new;
pub const g_cclosure_new_object = _frida_g_cclosure_new_object;
pub const g_cclosure_new_object_swap = _frida_g_cclosure_new_object_swap;
pub const g_cclosure_new_swap = _frida_g_cclosure_new_swap;
pub const g_charset_converter_get_num_fallbacks = _frida_g_charset_converter_get_num_fallbacks;
pub const g_charset_converter_get_type = _frida_g_charset_converter_get_type;
pub const g_charset_converter_get_use_fallback = _frida_g_charset_converter_get_use_fallback;
pub const g_charset_converter_new = _frida_g_charset_converter_new;
pub const g_charset_converter_set_use_fallback = _frida_g_charset_converter_set_use_fallback;
pub const g_checksum_copy = _frida_g_checksum_copy;
pub const g_checksum_free = _frida_g_checksum_free;
pub const g_checksum_get_digest = _frida_g_checksum_get_digest;
pub const g_checksum_get_string = _frida_g_checksum_get_string;
pub const g_checksum_get_type = _frida_g_checksum_get_type;
pub const g_checksum_new = _frida_g_checksum_new;
pub const g_checksum_reset = _frida_g_checksum_reset;
pub const g_checksum_type_get_length = _frida_g_checksum_type_get_length;
pub const g_checksum_update = _frida_g_checksum_update;
pub const g_child_watch_add = _frida_g_child_watch_add;
pub const g_child_watch_add_full = _frida_g_child_watch_add_full;
pub const g_child_watch_funcs = _frida_g_child_watch_funcs;
pub const g_child_watch_source_new = _frida_g_child_watch_source_new;
pub const g_clear_error = _frida_g_clear_error;
pub const g_clear_handle_id = _frida_g_clear_handle_id;
pub const g_clear_list = _frida_g_clear_list;
pub const g_clear_object = _frida_g_clear_object;
pub const g_clear_pointer = _frida_g_clear_pointer;
pub const g_clear_signal_handler = _frida_g_clear_signal_handler;
pub const g_clear_slist = _frida_g_clear_slist;
pub const g_closure_add_finalize_notifier = _frida_g_closure_add_finalize_notifier;
pub const g_closure_add_invalidate_notifier = _frida_g_closure_add_invalidate_notifier;
pub const g_closure_add_marshal_guards = _frida_g_closure_add_marshal_guards;
pub const g_closure_get_type = _frida_g_closure_get_type;
pub const g_closure_invalidate = _frida_g_closure_invalidate;
pub const g_closure_invoke = _frida_g_closure_invoke;
pub const g_closure_new_object = _frida_g_closure_new_object;
pub const g_closure_new_simple = _frida_g_closure_new_simple;
pub const g_closure_ref = _frida_g_closure_ref;
pub const g_closure_remove_finalize_notifier = _frida_g_closure_remove_finalize_notifier;
pub const g_closure_remove_invalidate_notifier = _frida_g_closure_remove_invalidate_notifier;
pub const g_closure_set_marshal = _frida_g_closure_set_marshal;
pub const g_closure_set_meta_marshal = _frida_g_closure_set_meta_marshal;
pub const g_closure_sink = _frida_g_closure_sink;
pub const g_closure_unref = _frida_g_closure_unref;
pub const g_completion_add_items = _frida_g_completion_add_items;
pub const g_completion_clear_items = _frida_g_completion_clear_items;
pub const g_completion_complete = _frida_g_completion_complete;
pub const g_completion_complete_utf8 = _frida_g_completion_complete_utf8;
pub const g_completion_free = _frida_g_completion_free;
pub const g_completion_new = _frida_g_completion_new;
pub const g_completion_remove_items = _frida_g_completion_remove_items;
pub const g_completion_set_compare = _frida_g_completion_set_compare;
pub const g_compute_checksum_for_bytes = _frida_g_compute_checksum_for_bytes;
pub const g_compute_checksum_for_data = _frida_g_compute_checksum_for_data;
pub const g_compute_checksum_for_string = _frida_g_compute_checksum_for_string;
pub const g_compute_hmac_for_bytes = _frida_g_compute_hmac_for_bytes;
pub const g_compute_hmac_for_data = _frida_g_compute_hmac_for_data;
pub const g_compute_hmac_for_string = _frida_g_compute_hmac_for_string;
pub const g_cond_broadcast = _frida_g_cond_broadcast;
pub const g_cond_clear = _frida_g_cond_clear;
pub const g_cond_free = _frida_g_cond_free;
pub const g_cond_init = _frida_g_cond_init;
pub const g_cond_new = _frida_g_cond_new;
pub const g_cond_signal = _frida_g_cond_signal;
pub const g_cond_timed_wait = _frida_g_cond_timed_wait;
pub const g_cond_wait = _frida_g_cond_wait;
pub const g_cond_wait_until = _frida_g_cond_wait_until;
pub const g_content_type_can_be_executable = _frida_g_content_type_can_be_executable;
pub const g_content_type_equals = _frida_g_content_type_equals;
pub const g_content_type_from_mime_type = _frida_g_content_type_from_mime_type;
pub const g_content_type_get_description = _frida_g_content_type_get_description;
pub const g_content_type_get_generic_icon_name = _frida_g_content_type_get_generic_icon_name;
pub const g_content_type_get_icon = _frida_g_content_type_get_icon;
pub const g_content_type_get_mime_dirs = _frida_g_content_type_get_mime_dirs;
pub const g_content_type_get_mime_type = _frida_g_content_type_get_mime_type;
pub const g_content_type_get_symbolic_icon = _frida_g_content_type_get_symbolic_icon;
pub const g_content_type_guess = _frida_g_content_type_guess;
pub const g_content_type_guess_for_tree = _frida_g_content_type_guess_for_tree;
pub const g_content_type_is_a = _frida_g_content_type_is_a;
pub const g_content_type_is_mime_type = _frida_g_content_type_is_mime_type;
pub const g_content_type_is_unknown = _frida_g_content_type_is_unknown;
pub const g_content_type_set_mime_dirs = _frida_g_content_type_set_mime_dirs;
pub const g_content_types_get_registered = _frida_g_content_types_get_registered;
pub const g_convert = _frida_g_convert;
pub const g_convert_error_quark = _frida_g_convert_error_quark;
pub const g_convert_with_fallback = _frida_g_convert_with_fallback;
pub const g_convert_with_iconv = _frida_g_convert_with_iconv;
pub const g_converter_convert = _frida_g_converter_convert;
pub const g_converter_flags_get_type = _frida_g_converter_flags_get_type;
pub const g_converter_get_type = _frida_g_converter_get_type;
pub const g_converter_input_stream_get_converter = _frida_g_converter_input_stream_get_converter;
pub const g_converter_input_stream_get_type = _frida_g_converter_input_stream_get_type;
pub const g_converter_input_stream_new = _frida_g_converter_input_stream_new;
pub const g_converter_output_stream_get_converter = _frida_g_converter_output_stream_get_converter;
pub const g_converter_output_stream_get_type = _frida_g_converter_output_stream_get_type;
pub const g_converter_output_stream_new = _frida_g_converter_output_stream_new;
pub const g_converter_reset = _frida_g_converter_reset;
pub const g_converter_result_get_type = _frida_g_converter_result_get_type;
pub const g_credentials_get_native = _frida_g_credentials_get_native;
pub const g_credentials_get_type = _frida_g_credentials_get_type;
pub const g_credentials_get_unix_pid = _frida_g_credentials_get_unix_pid;
pub const g_credentials_get_unix_user = _frida_g_credentials_get_unix_user;
pub const g_credentials_is_same_user = _frida_g_credentials_is_same_user;
pub const g_credentials_new = _frida_g_credentials_new;
pub const g_credentials_set_native = _frida_g_credentials_set_native;
pub const g_credentials_set_unix_user = _frida_g_credentials_set_unix_user;
pub const g_credentials_to_string = _frida_g_credentials_to_string;
pub const g_credentials_type_get_type = _frida_g_credentials_type_get_type;
pub const g_data_input_stream_get_byte_order = _frida_g_data_input_stream_get_byte_order;
pub const g_data_input_stream_get_newline_type = _frida_g_data_input_stream_get_newline_type;
pub const g_data_input_stream_get_type = _frida_g_data_input_stream_get_type;
pub const g_data_input_stream_new = _frida_g_data_input_stream_new;
pub const g_data_input_stream_read_byte = _frida_g_data_input_stream_read_byte;
pub const g_data_input_stream_read_int16 = _frida_g_data_input_stream_read_int16;
pub const g_data_input_stream_read_int32 = _frida_g_data_input_stream_read_int32;
pub const g_data_input_stream_read_int64 = _frida_g_data_input_stream_read_int64;
pub const g_data_input_stream_read_line = _frida_g_data_input_stream_read_line;
pub const g_data_input_stream_read_line_async = _frida_g_data_input_stream_read_line_async;
pub const g_data_input_stream_read_line_finish = _frida_g_data_input_stream_read_line_finish;
pub const g_data_input_stream_read_line_finish_utf8 = _frida_g_data_input_stream_read_line_finish_utf8;
pub const g_data_input_stream_read_line_utf8 = _frida_g_data_input_stream_read_line_utf8;
pub const g_data_input_stream_read_uint16 = _frida_g_data_input_stream_read_uint16;
pub const g_data_input_stream_read_uint32 = _frida_g_data_input_stream_read_uint32;
pub const g_data_input_stream_read_uint64 = _frida_g_data_input_stream_read_uint64;
pub const g_data_input_stream_read_until = _frida_g_data_input_stream_read_until;
pub const g_data_input_stream_read_until_async = _frida_g_data_input_stream_read_until_async;
pub const g_data_input_stream_read_until_finish = _frida_g_data_input_stream_read_until_finish;
pub const g_data_input_stream_read_upto = _frida_g_data_input_stream_read_upto;
pub const g_data_input_stream_read_upto_async = _frida_g_data_input_stream_read_upto_async;
pub const g_data_input_stream_read_upto_finish = _frida_g_data_input_stream_read_upto_finish;
pub const g_data_input_stream_set_byte_order = _frida_g_data_input_stream_set_byte_order;
pub const g_data_input_stream_set_newline_type = _frida_g_data_input_stream_set_newline_type;
pub const g_data_output_stream_get_byte_order = _frida_g_data_output_stream_get_byte_order;
pub const g_data_output_stream_get_type = _frida_g_data_output_stream_get_type;
pub const g_data_output_stream_new = _frida_g_data_output_stream_new;
pub const g_data_output_stream_put_byte = _frida_g_data_output_stream_put_byte;
pub const g_data_output_stream_put_int16 = _frida_g_data_output_stream_put_int16;
pub const g_data_output_stream_put_int32 = _frida_g_data_output_stream_put_int32;
pub const g_data_output_stream_put_int64 = _frida_g_data_output_stream_put_int64;
pub const g_data_output_stream_put_string = _frida_g_data_output_stream_put_string;
pub const g_data_output_stream_put_uint16 = _frida_g_data_output_stream_put_uint16;
pub const g_data_output_stream_put_uint32 = _frida_g_data_output_stream_put_uint32;
pub const g_data_output_stream_put_uint64 = _frida_g_data_output_stream_put_uint64;
pub const g_data_output_stream_set_byte_order = _frida_g_data_output_stream_set_byte_order;
pub const g_data_stream_byte_order_get_type = _frida_g_data_stream_byte_order_get_type;
pub const g_data_stream_newline_type_get_type = _frida_g_data_stream_newline_type_get_type;
pub const g_datagram_based_condition_check = _frida_g_datagram_based_condition_check;
pub const g_datagram_based_condition_wait = _frida_g_datagram_based_condition_wait;
pub const g_datagram_based_create_source = _frida_g_datagram_based_create_source;
pub const g_datagram_based_get_type = _frida_g_datagram_based_get_type;
pub const g_datagram_based_receive_messages = _frida_g_datagram_based_receive_messages;
pub const g_datagram_based_send_messages = _frida_g_datagram_based_send_messages;
pub const g_datalist_clear = _frida_g_datalist_clear;
pub const g_datalist_foreach = _frida_g_datalist_foreach;
pub const g_datalist_get_data = _frida_g_datalist_get_data;
pub const g_datalist_get_flags = _frida_g_datalist_get_flags;
pub const g_datalist_id_dup_data = _frida_g_datalist_id_dup_data;
pub const g_datalist_id_get_data = _frida_g_datalist_id_get_data;
pub const g_datalist_id_remove_multiple = _frida_g_datalist_id_remove_multiple;
pub const g_datalist_id_remove_no_notify = _frida_g_datalist_id_remove_no_notify;
pub const g_datalist_id_replace_data = _frida_g_datalist_id_replace_data;
pub const g_datalist_id_set_data_full = _frida_g_datalist_id_set_data_full;
pub const g_datalist_init = _frida_g_datalist_init;
pub const g_datalist_set_flags = _frida_g_datalist_set_flags;
pub const g_datalist_unset_flags = _frida_g_datalist_unset_flags;
pub const g_dataset_destroy = _frida_g_dataset_destroy;
pub const g_dataset_foreach = _frida_g_dataset_foreach;
pub const g_dataset_id_get_data = _frida_g_dataset_id_get_data;
pub const g_dataset_id_remove_no_notify = _frida_g_dataset_id_remove_no_notify;
pub const g_dataset_id_set_data_full = _frida_g_dataset_id_set_data_full;
pub const g_date_add_days = _frida_g_date_add_days;
pub const g_date_add_months = _frida_g_date_add_months;
pub const g_date_add_years = _frida_g_date_add_years;
pub const g_date_clamp = _frida_g_date_clamp;
pub const g_date_clear = _frida_g_date_clear;
pub const g_date_compare = _frida_g_date_compare;
pub const g_date_copy = _frida_g_date_copy;
pub const g_date_days_between = _frida_g_date_days_between;
pub const g_date_free = _frida_g_date_free;
pub const g_date_get_day = _frida_g_date_get_day;
pub const g_date_get_day_of_year = _frida_g_date_get_day_of_year;
pub const g_date_get_days_in_month = _frida_g_date_get_days_in_month;
pub const g_date_get_iso8601_week_of_year = _frida_g_date_get_iso8601_week_of_year;
pub const g_date_get_julian = _frida_g_date_get_julian;
pub const g_date_get_monday_week_of_year = _frida_g_date_get_monday_week_of_year;
pub const g_date_get_monday_weeks_in_year = _frida_g_date_get_monday_weeks_in_year;
pub const g_date_get_month = _frida_g_date_get_month;
pub const g_date_get_sunday_week_of_year = _frida_g_date_get_sunday_week_of_year;
pub const g_date_get_sunday_weeks_in_year = _frida_g_date_get_sunday_weeks_in_year;
pub const g_date_get_type = _frida_g_date_get_type;
pub const g_date_get_weekday = _frida_g_date_get_weekday;
pub const g_date_get_year = _frida_g_date_get_year;
pub const g_date_is_first_of_month = _frida_g_date_is_first_of_month;
pub const g_date_is_last_of_month = _frida_g_date_is_last_of_month;
pub const g_date_is_leap_year = _frida_g_date_is_leap_year;
pub const g_date_new = _frida_g_date_new;
pub const g_date_new_dmy = _frida_g_date_new_dmy;
pub const g_date_new_julian = _frida_g_date_new_julian;
pub const g_date_order = _frida_g_date_order;
pub const g_date_set_day = _frida_g_date_set_day;
pub const g_date_set_dmy = _frida_g_date_set_dmy;
pub const g_date_set_julian = _frida_g_date_set_julian;
pub const g_date_set_month = _frida_g_date_set_month;
pub const g_date_set_parse = _frida_g_date_set_parse;
pub const g_date_set_time = _frida_g_date_set_time;
pub const g_date_set_time_t = _frida_g_date_set_time_t;
pub const g_date_set_time_val = _frida_g_date_set_time_val;
pub const g_date_set_year = _frida_g_date_set_year;
pub const g_date_strftime = _frida_g_date_strftime;
pub const g_date_subtract_days = _frida_g_date_subtract_days;
pub const g_date_subtract_months = _frida_g_date_subtract_months;
pub const g_date_subtract_years = _frida_g_date_subtract_years;
pub const g_date_time_add = _frida_g_date_time_add;
pub const g_date_time_add_days = _frida_g_date_time_add_days;
pub const g_date_time_add_full = _frida_g_date_time_add_full;
pub const g_date_time_add_hours = _frida_g_date_time_add_hours;
pub const g_date_time_add_minutes = _frida_g_date_time_add_minutes;
pub const g_date_time_add_months = _frida_g_date_time_add_months;
pub const g_date_time_add_seconds = _frida_g_date_time_add_seconds;
pub const g_date_time_add_weeks = _frida_g_date_time_add_weeks;
pub const g_date_time_add_years = _frida_g_date_time_add_years;
pub const g_date_time_compare = _frida_g_date_time_compare;
pub const g_date_time_difference = _frida_g_date_time_difference;
pub const g_date_time_equal = _frida_g_date_time_equal;
pub const g_date_time_format = _frida_g_date_time_format;
pub const g_date_time_format_iso8601 = _frida_g_date_time_format_iso8601;
pub const g_date_time_get_day_of_month = _frida_g_date_time_get_day_of_month;
pub const g_date_time_get_day_of_week = _frida_g_date_time_get_day_of_week;
pub const g_date_time_get_day_of_year = _frida_g_date_time_get_day_of_year;
pub const g_date_time_get_hour = _frida_g_date_time_get_hour;
pub const g_date_time_get_microsecond = _frida_g_date_time_get_microsecond;
pub const g_date_time_get_minute = _frida_g_date_time_get_minute;
pub const g_date_time_get_month = _frida_g_date_time_get_month;
pub const g_date_time_get_second = _frida_g_date_time_get_second;
pub const g_date_time_get_seconds = _frida_g_date_time_get_seconds;
pub const g_date_time_get_timezone = _frida_g_date_time_get_timezone;
pub const g_date_time_get_timezone_abbreviation = _frida_g_date_time_get_timezone_abbreviation;
pub const g_date_time_get_type = _frida_g_date_time_get_type;
pub const g_date_time_get_utc_offset = _frida_g_date_time_get_utc_offset;
pub const g_date_time_get_week_numbering_year = _frida_g_date_time_get_week_numbering_year;
pub const g_date_time_get_week_of_year = _frida_g_date_time_get_week_of_year;
pub const g_date_time_get_year = _frida_g_date_time_get_year;
pub const g_date_time_get_ymd = _frida_g_date_time_get_ymd;
pub const g_date_time_hash = _frida_g_date_time_hash;
pub const g_date_time_is_daylight_savings = _frida_g_date_time_is_daylight_savings;
pub const g_date_time_new = _frida_g_date_time_new;
pub const g_date_time_new_from_iso8601 = _frida_g_date_time_new_from_iso8601;
pub const g_date_time_new_from_timeval_local = _frida_g_date_time_new_from_timeval_local;
pub const g_date_time_new_from_timeval_utc = _frida_g_date_time_new_from_timeval_utc;
pub const g_date_time_new_from_unix_local = _frida_g_date_time_new_from_unix_local;
pub const g_date_time_new_from_unix_utc = _frida_g_date_time_new_from_unix_utc;
pub const g_date_time_new_local = _frida_g_date_time_new_local;
pub const g_date_time_new_now = _frida_g_date_time_new_now;
pub const g_date_time_new_now_local = _frida_g_date_time_new_now_local;
pub const g_date_time_new_now_utc = _frida_g_date_time_new_now_utc;
pub const g_date_time_new_utc = _frida_g_date_time_new_utc;
pub const g_date_time_ref = _frida_g_date_time_ref;
pub const g_date_time_to_local = _frida_g_date_time_to_local;
pub const g_date_time_to_timeval = _frida_g_date_time_to_timeval;
pub const g_date_time_to_timezone = _frida_g_date_time_to_timezone;
pub const g_date_time_to_unix = _frida_g_date_time_to_unix;
pub const g_date_time_to_utc = _frida_g_date_time_to_utc;
pub const g_date_time_unref = _frida_g_date_time_unref;
pub const g_date_to_struct_tm = _frida_g_date_to_struct_tm;
pub const g_date_valid = _frida_g_date_valid;
pub const g_date_valid_day = _frida_g_date_valid_day;
pub const g_date_valid_dmy = _frida_g_date_valid_dmy;
pub const g_date_valid_julian = _frida_g_date_valid_julian;
pub const g_date_valid_month = _frida_g_date_valid_month;
pub const g_date_valid_weekday = _frida_g_date_valid_weekday;
pub const g_date_valid_year = _frida_g_date_valid_year;
pub const g_dbus_action_group_get = _frida_g_dbus_action_group_get;
pub const g_dbus_action_group_get_type = _frida_g_dbus_action_group_get_type;
pub const g_dbus_address_escape_value = _frida_g_dbus_address_escape_value;
pub const g_dbus_address_get_for_bus_sync = _frida_g_dbus_address_get_for_bus_sync;
pub const g_dbus_address_get_stream = _frida_g_dbus_address_get_stream;
pub const g_dbus_address_get_stream_finish = _frida_g_dbus_address_get_stream_finish;
pub const g_dbus_address_get_stream_sync = _frida_g_dbus_address_get_stream_sync;
pub const g_dbus_annotation_info_get_type = _frida_g_dbus_annotation_info_get_type;
pub const g_dbus_annotation_info_lookup = _frida_g_dbus_annotation_info_lookup;
pub const g_dbus_annotation_info_ref = _frida_g_dbus_annotation_info_ref;
pub const g_dbus_annotation_info_unref = _frida_g_dbus_annotation_info_unref;
pub const g_dbus_arg_info_get_type = _frida_g_dbus_arg_info_get_type;
pub const g_dbus_arg_info_ref = _frida_g_dbus_arg_info_ref;
pub const g_dbus_arg_info_unref = _frida_g_dbus_arg_info_unref;
pub const g_dbus_auth_observer_allow_mechanism = _frida_g_dbus_auth_observer_allow_mechanism;
pub const g_dbus_auth_observer_authorize_authenticated_peer = _frida_g_dbus_auth_observer_authorize_authenticated_peer;
pub const g_dbus_auth_observer_get_type = _frida_g_dbus_auth_observer_get_type;
pub const g_dbus_auth_observer_new = _frida_g_dbus_auth_observer_new;
pub const g_dbus_call_flags_get_type = _frida_g_dbus_call_flags_get_type;
pub const g_dbus_capability_flags_get_type = _frida_g_dbus_capability_flags_get_type;
pub const g_dbus_connection_add_filter = _frida_g_dbus_connection_add_filter;
pub const g_dbus_connection_call = _frida_g_dbus_connection_call;
pub const g_dbus_connection_call_finish = _frida_g_dbus_connection_call_finish;
pub const g_dbus_connection_call_sync = _frida_g_dbus_connection_call_sync;
pub const g_dbus_connection_call_with_unix_fd_list = _frida_g_dbus_connection_call_with_unix_fd_list;
pub const g_dbus_connection_call_with_unix_fd_list_finish = _frida_g_dbus_connection_call_with_unix_fd_list_finish;
pub const g_dbus_connection_call_with_unix_fd_list_sync = _frida_g_dbus_connection_call_with_unix_fd_list_sync;
pub const g_dbus_connection_close = _frida_g_dbus_connection_close;
pub const g_dbus_connection_close_finish = _frida_g_dbus_connection_close_finish;
pub const g_dbus_connection_close_sync = _frida_g_dbus_connection_close_sync;
pub const g_dbus_connection_emit_signal = _frida_g_dbus_connection_emit_signal;
pub const g_dbus_connection_export_action_group = _frida_g_dbus_connection_export_action_group;
pub const g_dbus_connection_export_menu_model = _frida_g_dbus_connection_export_menu_model;
pub const g_dbus_connection_flags_get_type = _frida_g_dbus_connection_flags_get_type;
pub const g_dbus_connection_flush = _frida_g_dbus_connection_flush;
pub const g_dbus_connection_flush_finish = _frida_g_dbus_connection_flush_finish;
pub const g_dbus_connection_flush_sync = _frida_g_dbus_connection_flush_sync;
pub const g_dbus_connection_get_capabilities = _frida_g_dbus_connection_get_capabilities;
pub const g_dbus_connection_get_exit_on_close = _frida_g_dbus_connection_get_exit_on_close;
pub const g_dbus_connection_get_flags = _frida_g_dbus_connection_get_flags;
pub const g_dbus_connection_get_guid = _frida_g_dbus_connection_get_guid;
pub const g_dbus_connection_get_last_serial = _frida_g_dbus_connection_get_last_serial;
pub const g_dbus_connection_get_peer_credentials = _frida_g_dbus_connection_get_peer_credentials;
pub const g_dbus_connection_get_stream = _frida_g_dbus_connection_get_stream;
pub const g_dbus_connection_get_type = _frida_g_dbus_connection_get_type;
pub const g_dbus_connection_get_unique_name = _frida_g_dbus_connection_get_unique_name;
pub const g_dbus_connection_is_closed = _frida_g_dbus_connection_is_closed;
pub const g_dbus_connection_new = _frida_g_dbus_connection_new;
pub const g_dbus_connection_new_finish = _frida_g_dbus_connection_new_finish;
pub const g_dbus_connection_new_for_address = _frida_g_dbus_connection_new_for_address;
pub const g_dbus_connection_new_for_address_finish = _frida_g_dbus_connection_new_for_address_finish;
pub const g_dbus_connection_new_for_address_sync = _frida_g_dbus_connection_new_for_address_sync;
pub const g_dbus_connection_new_sync = _frida_g_dbus_connection_new_sync;
pub const g_dbus_connection_register_object = _frida_g_dbus_connection_register_object;
pub const g_dbus_connection_register_object_with_closures = _frida_g_dbus_connection_register_object_with_closures;
pub const g_dbus_connection_register_subtree = _frida_g_dbus_connection_register_subtree;
pub const g_dbus_connection_remove_filter = _frida_g_dbus_connection_remove_filter;
pub const g_dbus_connection_send_message = _frida_g_dbus_connection_send_message;
pub const g_dbus_connection_send_message_with_reply = _frida_g_dbus_connection_send_message_with_reply;
pub const g_dbus_connection_send_message_with_reply_finish = _frida_g_dbus_connection_send_message_with_reply_finish;
pub const g_dbus_connection_send_message_with_reply_sync = _frida_g_dbus_connection_send_message_with_reply_sync;
pub const g_dbus_connection_set_exit_on_close = _frida_g_dbus_connection_set_exit_on_close;
pub const g_dbus_connection_signal_subscribe = _frida_g_dbus_connection_signal_subscribe;
pub const g_dbus_connection_signal_unsubscribe = _frida_g_dbus_connection_signal_unsubscribe;
pub const g_dbus_connection_start_message_processing = _frida_g_dbus_connection_start_message_processing;
pub const g_dbus_connection_unexport_action_group = _frida_g_dbus_connection_unexport_action_group;
pub const g_dbus_connection_unexport_menu_model = _frida_g_dbus_connection_unexport_menu_model;
pub const g_dbus_connection_unregister_object = _frida_g_dbus_connection_unregister_object;
pub const g_dbus_connection_unregister_subtree = _frida_g_dbus_connection_unregister_subtree;
pub const g_dbus_error_encode_gerror = _frida_g_dbus_error_encode_gerror;
pub const g_dbus_error_get_remote_error = _frida_g_dbus_error_get_remote_error;
pub const g_dbus_error_get_type = _frida_g_dbus_error_get_type;
pub const g_dbus_error_is_remote_error = _frida_g_dbus_error_is_remote_error;
pub const g_dbus_error_new_for_dbus_error = _frida_g_dbus_error_new_for_dbus_error;
pub const g_dbus_error_quark = _frida_g_dbus_error_quark;
pub const g_dbus_error_register_error = _frida_g_dbus_error_register_error;
pub const g_dbus_error_register_error_domain = _frida_g_dbus_error_register_error_domain;
pub const g_dbus_error_set_dbus_error = _frida_g_dbus_error_set_dbus_error;
pub const g_dbus_error_set_dbus_error_valist = _frida_g_dbus_error_set_dbus_error_valist;
pub const g_dbus_error_strip_remote_error = _frida_g_dbus_error_strip_remote_error;
pub const g_dbus_error_unregister_error = _frida_g_dbus_error_unregister_error;
pub const g_dbus_escape_object_path = _frida_g_dbus_escape_object_path;
pub const g_dbus_escape_object_path_bytestring = _frida_g_dbus_escape_object_path_bytestring;
pub const g_dbus_generate_guid = _frida_g_dbus_generate_guid;
pub const g_dbus_gvalue_to_gvariant = _frida_g_dbus_gvalue_to_gvariant;
pub const g_dbus_gvariant_to_gvalue = _frida_g_dbus_gvariant_to_gvalue;
pub const g_dbus_interface_dup_object = _frida_g_dbus_interface_dup_object;
pub const g_dbus_interface_get_info = _frida_g_dbus_interface_get_info;
pub const g_dbus_interface_get_object = _frida_g_dbus_interface_get_object;
pub const g_dbus_interface_get_type = _frida_g_dbus_interface_get_type;
pub const g_dbus_interface_info_cache_build = _frida_g_dbus_interface_info_cache_build;
pub const g_dbus_interface_info_cache_release = _frida_g_dbus_interface_info_cache_release;
pub const g_dbus_interface_info_generate_xml = _frida_g_dbus_interface_info_generate_xml;
pub const g_dbus_interface_info_get_type = _frida_g_dbus_interface_info_get_type;
pub const g_dbus_interface_info_lookup_method = _frida_g_dbus_interface_info_lookup_method;
pub const g_dbus_interface_info_lookup_property = _frida_g_dbus_interface_info_lookup_property;
pub const g_dbus_interface_info_lookup_signal = _frida_g_dbus_interface_info_lookup_signal;
pub const g_dbus_interface_info_ref = _frida_g_dbus_interface_info_ref;
pub const g_dbus_interface_info_unref = _frida_g_dbus_interface_info_unref;
pub const g_dbus_interface_set_object = _frida_g_dbus_interface_set_object;
pub const g_dbus_interface_skeleton_export = _frida_g_dbus_interface_skeleton_export;
pub const g_dbus_interface_skeleton_flags_get_type = _frida_g_dbus_interface_skeleton_flags_get_type;
pub const g_dbus_interface_skeleton_flush = _frida_g_dbus_interface_skeleton_flush;
pub const g_dbus_interface_skeleton_get_connection = _frida_g_dbus_interface_skeleton_get_connection;
pub const g_dbus_interface_skeleton_get_connections = _frida_g_dbus_interface_skeleton_get_connections;
pub const g_dbus_interface_skeleton_get_flags = _frida_g_dbus_interface_skeleton_get_flags;
pub const g_dbus_interface_skeleton_get_info = _frida_g_dbus_interface_skeleton_get_info;
pub const g_dbus_interface_skeleton_get_object_path = _frida_g_dbus_interface_skeleton_get_object_path;
pub const g_dbus_interface_skeleton_get_properties = _frida_g_dbus_interface_skeleton_get_properties;
pub const g_dbus_interface_skeleton_get_type = _frida_g_dbus_interface_skeleton_get_type;
pub const g_dbus_interface_skeleton_get_vtable = _frida_g_dbus_interface_skeleton_get_vtable;
pub const g_dbus_interface_skeleton_has_connection = _frida_g_dbus_interface_skeleton_has_connection;
pub const g_dbus_interface_skeleton_set_flags = _frida_g_dbus_interface_skeleton_set_flags;
pub const g_dbus_interface_skeleton_unexport = _frida_g_dbus_interface_skeleton_unexport;
pub const g_dbus_interface_skeleton_unexport_from_connection = _frida_g_dbus_interface_skeleton_unexport_from_connection;
pub const g_dbus_is_address = _frida_g_dbus_is_address;
pub const g_dbus_is_error_name = _frida_g_dbus_is_error_name;
pub const g_dbus_is_guid = _frida_g_dbus_is_guid;
pub const g_dbus_is_interface_name = _frida_g_dbus_is_interface_name;
pub const g_dbus_is_member_name = _frida_g_dbus_is_member_name;
pub const g_dbus_is_name = _frida_g_dbus_is_name;
pub const g_dbus_is_supported_address = _frida_g_dbus_is_supported_address;
pub const g_dbus_is_unique_name = _frida_g_dbus_is_unique_name;
pub const g_dbus_menu_model_get = _frida_g_dbus_menu_model_get;
pub const g_dbus_menu_model_get_type = _frida_g_dbus_menu_model_get_type;
pub const g_dbus_message_byte_order_get_type = _frida_g_dbus_message_byte_order_get_type;
pub const g_dbus_message_bytes_needed = _frida_g_dbus_message_bytes_needed;
pub const g_dbus_message_copy = _frida_g_dbus_message_copy;
pub const g_dbus_message_flags_get_type = _frida_g_dbus_message_flags_get_type;
pub const g_dbus_message_get_arg0 = _frida_g_dbus_message_get_arg0;
pub const g_dbus_message_get_body = _frida_g_dbus_message_get_body;
pub const g_dbus_message_get_byte_order = _frida_g_dbus_message_get_byte_order;
pub const g_dbus_message_get_destination = _frida_g_dbus_message_get_destination;
pub const g_dbus_message_get_error_name = _frida_g_dbus_message_get_error_name;
pub const g_dbus_message_get_flags = _frida_g_dbus_message_get_flags;
pub const g_dbus_message_get_header = _frida_g_dbus_message_get_header;
pub const g_dbus_message_get_header_fields = _frida_g_dbus_message_get_header_fields;
pub const g_dbus_message_get_interface = _frida_g_dbus_message_get_interface;
pub const g_dbus_message_get_locked = _frida_g_dbus_message_get_locked;
pub const g_dbus_message_get_member = _frida_g_dbus_message_get_member;
pub const g_dbus_message_get_message_type = _frida_g_dbus_message_get_message_type;
pub const g_dbus_message_get_num_unix_fds = _frida_g_dbus_message_get_num_unix_fds;
pub const g_dbus_message_get_path = _frida_g_dbus_message_get_path;
pub const g_dbus_message_get_reply_serial = _frida_g_dbus_message_get_reply_serial;
pub const g_dbus_message_get_sender = _frida_g_dbus_message_get_sender;
pub const g_dbus_message_get_serial = _frida_g_dbus_message_get_serial;
pub const g_dbus_message_get_signature = _frida_g_dbus_message_get_signature;
pub const g_dbus_message_get_type = _frida_g_dbus_message_get_type;
pub const g_dbus_message_get_unix_fd_list = _frida_g_dbus_message_get_unix_fd_list;
pub const g_dbus_message_header_field_get_type = _frida_g_dbus_message_header_field_get_type;
pub const g_dbus_message_lock = _frida_g_dbus_message_lock;
pub const g_dbus_message_new = _frida_g_dbus_message_new;
pub const g_dbus_message_new_from_blob = _frida_g_dbus_message_new_from_blob;
pub const g_dbus_message_new_method_call = _frida_g_dbus_message_new_method_call;
pub const g_dbus_message_new_method_error = _frida_g_dbus_message_new_method_error;
pub const g_dbus_message_new_method_error_literal = _frida_g_dbus_message_new_method_error_literal;
pub const g_dbus_message_new_method_error_valist = _frida_g_dbus_message_new_method_error_valist;
pub const g_dbus_message_new_method_reply = _frida_g_dbus_message_new_method_reply;
pub const g_dbus_message_new_signal = _frida_g_dbus_message_new_signal;
pub const g_dbus_message_print = _frida_g_dbus_message_print;
pub const g_dbus_message_set_body = _frida_g_dbus_message_set_body;
pub const g_dbus_message_set_byte_order = _frida_g_dbus_message_set_byte_order;
pub const g_dbus_message_set_destination = _frida_g_dbus_message_set_destination;
pub const g_dbus_message_set_error_name = _frida_g_dbus_message_set_error_name;
pub const g_dbus_message_set_flags = _frida_g_dbus_message_set_flags;
pub const g_dbus_message_set_header = _frida_g_dbus_message_set_header;
pub const g_dbus_message_set_interface = _frida_g_dbus_message_set_interface;
pub const g_dbus_message_set_member = _frida_g_dbus_message_set_member;
pub const g_dbus_message_set_message_type = _frida_g_dbus_message_set_message_type;
pub const g_dbus_message_set_num_unix_fds = _frida_g_dbus_message_set_num_unix_fds;
pub const g_dbus_message_set_path = _frida_g_dbus_message_set_path;
pub const g_dbus_message_set_reply_serial = _frida_g_dbus_message_set_reply_serial;
pub const g_dbus_message_set_sender = _frida_g_dbus_message_set_sender;
pub const g_dbus_message_set_serial = _frida_g_dbus_message_set_serial;
pub const g_dbus_message_set_signature = _frida_g_dbus_message_set_signature;
pub const g_dbus_message_set_unix_fd_list = _frida_g_dbus_message_set_unix_fd_list;
pub const g_dbus_message_to_blob = _frida_g_dbus_message_to_blob;
pub const g_dbus_message_to_gerror = _frida_g_dbus_message_to_gerror;
pub const g_dbus_message_type_get_type = _frida_g_dbus_message_type_get_type;
pub const g_dbus_method_info_get_type = _frida_g_dbus_method_info_get_type;
pub const g_dbus_method_info_ref = _frida_g_dbus_method_info_ref;
pub const g_dbus_method_info_unref = _frida_g_dbus_method_info_unref;
pub const g_dbus_method_invocation_get_connection = _frida_g_dbus_method_invocation_get_connection;
pub const g_dbus_method_invocation_get_interface_name = _frida_g_dbus_method_invocation_get_interface_name;
pub const g_dbus_method_invocation_get_message = _frida_g_dbus_method_invocation_get_message;
pub const g_dbus_method_invocation_get_method_info = _frida_g_dbus_method_invocation_get_method_info;
pub const g_dbus_method_invocation_get_method_name = _frida_g_dbus_method_invocation_get_method_name;
pub const g_dbus_method_invocation_get_object_path = _frida_g_dbus_method_invocation_get_object_path;
pub const g_dbus_method_invocation_get_parameters = _frida_g_dbus_method_invocation_get_parameters;
pub const g_dbus_method_invocation_get_property_info = _frida_g_dbus_method_invocation_get_property_info;
pub const g_dbus_method_invocation_get_sender = _frida_g_dbus_method_invocation_get_sender;
pub const g_dbus_method_invocation_get_type = _frida_g_dbus_method_invocation_get_type;
pub const g_dbus_method_invocation_get_user_data = _frida_g_dbus_method_invocation_get_user_data;
pub const g_dbus_method_invocation_return_dbus_error = _frida_g_dbus_method_invocation_return_dbus_error;
pub const g_dbus_method_invocation_return_error = _frida_g_dbus_method_invocation_return_error;
pub const g_dbus_method_invocation_return_error_literal = _frida_g_dbus_method_invocation_return_error_literal;
pub const g_dbus_method_invocation_return_error_valist = _frida_g_dbus_method_invocation_return_error_valist;
pub const g_dbus_method_invocation_return_gerror = _frida_g_dbus_method_invocation_return_gerror;
pub const g_dbus_method_invocation_return_value = _frida_g_dbus_method_invocation_return_value;
pub const g_dbus_method_invocation_return_value_with_unix_fd_list = _frida_g_dbus_method_invocation_return_value_with_unix_fd_list;
pub const g_dbus_method_invocation_take_error = _frida_g_dbus_method_invocation_take_error;
pub const g_dbus_node_info_generate_xml = _frida_g_dbus_node_info_generate_xml;
pub const g_dbus_node_info_get_type = _frida_g_dbus_node_info_get_type;
pub const g_dbus_node_info_lookup_interface = _frida_g_dbus_node_info_lookup_interface;
pub const g_dbus_node_info_new_for_xml = _frida_g_dbus_node_info_new_for_xml;
pub const g_dbus_node_info_ref = _frida_g_dbus_node_info_ref;
pub const g_dbus_node_info_unref = _frida_g_dbus_node_info_unref;
pub const g_dbus_object_get_interface = _frida_g_dbus_object_get_interface;
pub const g_dbus_object_get_interfaces = _frida_g_dbus_object_get_interfaces;
pub const g_dbus_object_get_object_path = _frida_g_dbus_object_get_object_path;
pub const g_dbus_object_get_type = _frida_g_dbus_object_get_type;
pub const g_dbus_object_manager_client_flags_get_type = _frida_g_dbus_object_manager_client_flags_get_type;
pub const g_dbus_object_manager_client_get_connection = _frida_g_dbus_object_manager_client_get_connection;
pub const g_dbus_object_manager_client_get_flags = _frida_g_dbus_object_manager_client_get_flags;
pub const g_dbus_object_manager_client_get_name = _frida_g_dbus_object_manager_client_get_name;
pub const g_dbus_object_manager_client_get_name_owner = _frida_g_dbus_object_manager_client_get_name_owner;
pub const g_dbus_object_manager_client_get_type = _frida_g_dbus_object_manager_client_get_type;
pub const g_dbus_object_manager_client_new = _frida_g_dbus_object_manager_client_new;
pub const g_dbus_object_manager_client_new_finish = _frida_g_dbus_object_manager_client_new_finish;
pub const g_dbus_object_manager_client_new_for_bus = _frida_g_dbus_object_manager_client_new_for_bus;
pub const g_dbus_object_manager_client_new_for_bus_finish = _frida_g_dbus_object_manager_client_new_for_bus_finish;
pub const g_dbus_object_manager_client_new_for_bus_sync = _frida_g_dbus_object_manager_client_new_for_bus_sync;
pub const g_dbus_object_manager_client_new_sync = _frida_g_dbus_object_manager_client_new_sync;
pub const g_dbus_object_manager_get_interface = _frida_g_dbus_object_manager_get_interface;
pub const g_dbus_object_manager_get_object = _frida_g_dbus_object_manager_get_object;
pub const g_dbus_object_manager_get_object_path = _frida_g_dbus_object_manager_get_object_path;
pub const g_dbus_object_manager_get_objects = _frida_g_dbus_object_manager_get_objects;
pub const g_dbus_object_manager_get_type = _frida_g_dbus_object_manager_get_type;
pub const g_dbus_object_manager_server_export = _frida_g_dbus_object_manager_server_export;
pub const g_dbus_object_manager_server_export_uniquely = _frida_g_dbus_object_manager_server_export_uniquely;
pub const g_dbus_object_manager_server_get_connection = _frida_g_dbus_object_manager_server_get_connection;
pub const g_dbus_object_manager_server_get_type = _frida_g_dbus_object_manager_server_get_type;
pub const g_dbus_object_manager_server_is_exported = _frida_g_dbus_object_manager_server_is_exported;
pub const g_dbus_object_manager_server_new = _frida_g_dbus_object_manager_server_new;
pub const g_dbus_object_manager_server_set_connection = _frida_g_dbus_object_manager_server_set_connection;
pub const g_dbus_object_manager_server_unexport = _frida_g_dbus_object_manager_server_unexport;
pub const g_dbus_object_proxy_get_connection = _frida_g_dbus_object_proxy_get_connection;
pub const g_dbus_object_proxy_get_type = _frida_g_dbus_object_proxy_get_type;
pub const g_dbus_object_proxy_new = _frida_g_dbus_object_proxy_new;
pub const g_dbus_object_skeleton_add_interface = _frida_g_dbus_object_skeleton_add_interface;
pub const g_dbus_object_skeleton_flush = _frida_g_dbus_object_skeleton_flush;
pub const g_dbus_object_skeleton_get_type = _frida_g_dbus_object_skeleton_get_type;
pub const g_dbus_object_skeleton_new = _frida_g_dbus_object_skeleton_new;
pub const g_dbus_object_skeleton_remove_interface = _frida_g_dbus_object_skeleton_remove_interface;
pub const g_dbus_object_skeleton_remove_interface_by_name = _frida_g_dbus_object_skeleton_remove_interface_by_name;
pub const g_dbus_object_skeleton_set_object_path = _frida_g_dbus_object_skeleton_set_object_path;
pub const g_dbus_property_info_flags_get_type = _frida_g_dbus_property_info_flags_get_type;
pub const g_dbus_property_info_get_type = _frida_g_dbus_property_info_get_type;
pub const g_dbus_property_info_ref = _frida_g_dbus_property_info_ref;
pub const g_dbus_property_info_unref = _frida_g_dbus_property_info_unref;
pub const g_dbus_proxy_call = _frida_g_dbus_proxy_call;
pub const g_dbus_proxy_call_finish = _frida_g_dbus_proxy_call_finish;
pub const g_dbus_proxy_call_sync = _frida_g_dbus_proxy_call_sync;
pub const g_dbus_proxy_call_with_unix_fd_list = _frida_g_dbus_proxy_call_with_unix_fd_list;
pub const g_dbus_proxy_call_with_unix_fd_list_finish = _frida_g_dbus_proxy_call_with_unix_fd_list_finish;
pub const g_dbus_proxy_call_with_unix_fd_list_sync = _frida_g_dbus_proxy_call_with_unix_fd_list_sync;
pub const g_dbus_proxy_flags_get_type = _frida_g_dbus_proxy_flags_get_type;
pub const g_dbus_proxy_get_cached_property = _frida_g_dbus_proxy_get_cached_property;
pub const g_dbus_proxy_get_cached_property_names = _frida_g_dbus_proxy_get_cached_property_names;
pub const g_dbus_proxy_get_connection = _frida_g_dbus_proxy_get_connection;
pub const g_dbus_proxy_get_default_timeout = _frida_g_dbus_proxy_get_default_timeout;
pub const g_dbus_proxy_get_flags = _frida_g_dbus_proxy_get_flags;
pub const g_dbus_proxy_get_interface_info = _frida_g_dbus_proxy_get_interface_info;
pub const g_dbus_proxy_get_interface_name = _frida_g_dbus_proxy_get_interface_name;
pub const g_dbus_proxy_get_name = _frida_g_dbus_proxy_get_name;
pub const g_dbus_proxy_get_name_owner = _frida_g_dbus_proxy_get_name_owner;
pub const g_dbus_proxy_get_object_path = _frida_g_dbus_proxy_get_object_path;
pub const g_dbus_proxy_get_type = _frida_g_dbus_proxy_get_type;
pub const g_dbus_proxy_new = _frida_g_dbus_proxy_new;
pub const g_dbus_proxy_new_finish = _frida_g_dbus_proxy_new_finish;
pub const g_dbus_proxy_new_for_bus = _frida_g_dbus_proxy_new_for_bus;
pub const g_dbus_proxy_new_for_bus_finish = _frida_g_dbus_proxy_new_for_bus_finish;
pub const g_dbus_proxy_new_for_bus_sync = _frida_g_dbus_proxy_new_for_bus_sync;
pub const g_dbus_proxy_new_sync = _frida_g_dbus_proxy_new_sync;
pub const g_dbus_proxy_set_cached_property = _frida_g_dbus_proxy_set_cached_property;
pub const g_dbus_proxy_set_default_timeout = _frida_g_dbus_proxy_set_default_timeout;
pub const g_dbus_proxy_set_interface_info = _frida_g_dbus_proxy_set_interface_info;
pub const g_dbus_send_message_flags_get_type = _frida_g_dbus_send_message_flags_get_type;
pub const g_dbus_server_flags_get_type = _frida_g_dbus_server_flags_get_type;
pub const g_dbus_server_get_client_address = _frida_g_dbus_server_get_client_address;
pub const g_dbus_server_get_flags = _frida_g_dbus_server_get_flags;
pub const g_dbus_server_get_guid = _frida_g_dbus_server_get_guid;
pub const g_dbus_server_get_type = _frida_g_dbus_server_get_type;
pub const g_dbus_server_is_active = _frida_g_dbus_server_is_active;
pub const g_dbus_server_new_sync = _frida_g_dbus_server_new_sync;
pub const g_dbus_server_start = _frida_g_dbus_server_start;
pub const g_dbus_server_stop = _frida_g_dbus_server_stop;
pub const g_dbus_signal_flags_get_type = _frida_g_dbus_signal_flags_get_type;
pub const g_dbus_signal_info_get_type = _frida_g_dbus_signal_info_get_type;
pub const g_dbus_signal_info_ref = _frida_g_dbus_signal_info_ref;
pub const g_dbus_signal_info_unref = _frida_g_dbus_signal_info_unref;
pub const g_dbus_subtree_flags_get_type = _frida_g_dbus_subtree_flags_get_type;
pub const g_dbus_unescape_object_path = _frida_g_dbus_unescape_object_path;
pub const g_dcgettext = _frida_g_dcgettext;
pub const g_debug_controller_dbus_get_type = _frida_g_debug_controller_dbus_get_type;
pub const g_debug_controller_dbus_new = _frida_g_debug_controller_dbus_new;
pub const g_debug_controller_dbus_stop = _frida_g_debug_controller_dbus_stop;
pub const g_debug_controller_get_debug_enabled = _frida_g_debug_controller_get_debug_enabled;
pub const g_debug_controller_get_type = _frida_g_debug_controller_get_type;
pub const g_debug_controller_set_debug_enabled = _frida_g_debug_controller_set_debug_enabled;
pub const g_dgettext = _frida_g_dgettext;
pub const g_dir_close = _frida_g_dir_close;
pub const g_dir_make_tmp = _frida_g_dir_make_tmp;
pub const g_dir_open = _frida_g_dir_open;
pub const g_dir_read_name = _frida_g_dir_read_name;
pub const g_dir_rewind = _frida_g_dir_rewind;
pub const g_direct_equal = _frida_g_direct_equal;
pub const g_direct_hash = _frida_g_direct_hash;
pub const g_dngettext = _frida_g_dngettext;
pub const g_double_equal = _frida_g_double_equal;
pub const g_double_hash = _frida_g_double_hash;
pub const g_dpgettext = _frida_g_dpgettext;
pub const g_dpgettext2 = _frida_g_dpgettext2;
pub const g_drive_can_eject = _frida_g_drive_can_eject;
pub const g_drive_can_poll_for_media = _frida_g_drive_can_poll_for_media;
pub const g_drive_can_start = _frida_g_drive_can_start;
pub const g_drive_can_start_degraded = _frida_g_drive_can_start_degraded;
pub const g_drive_can_stop = _frida_g_drive_can_stop;
pub const g_drive_eject = _frida_g_drive_eject;
pub const g_drive_eject_finish = _frida_g_drive_eject_finish;
pub const g_drive_eject_with_operation = _frida_g_drive_eject_with_operation;
pub const g_drive_eject_with_operation_finish = _frida_g_drive_eject_with_operation_finish;
pub const g_drive_enumerate_identifiers = _frida_g_drive_enumerate_identifiers;
pub const g_drive_get_icon = _frida_g_drive_get_icon;
pub const g_drive_get_identifier = _frida_g_drive_get_identifier;
pub const g_drive_get_name = _frida_g_drive_get_name;
pub const g_drive_get_sort_key = _frida_g_drive_get_sort_key;
pub const g_drive_get_start_stop_type = _frida_g_drive_get_start_stop_type;
pub const g_drive_get_symbolic_icon = _frida_g_drive_get_symbolic_icon;
pub const g_drive_get_type = _frida_g_drive_get_type;
pub const g_drive_get_volumes = _frida_g_drive_get_volumes;
pub const g_drive_has_media = _frida_g_drive_has_media;
pub const g_drive_has_volumes = _frida_g_drive_has_volumes;
pub const g_drive_is_media_check_automatic = _frida_g_drive_is_media_check_automatic;
pub const g_drive_is_media_removable = _frida_g_drive_is_media_removable;
pub const g_drive_is_removable = _frida_g_drive_is_removable;
pub const g_drive_poll_for_media = _frida_g_drive_poll_for_media;
pub const g_drive_poll_for_media_finish = _frida_g_drive_poll_for_media_finish;
pub const g_drive_start = _frida_g_drive_start;
pub const g_drive_start_finish = _frida_g_drive_start_finish;
pub const g_drive_start_flags_get_type = _frida_g_drive_start_flags_get_type;
pub const g_drive_start_stop_type_get_type = _frida_g_drive_start_stop_type_get_type;
pub const g_drive_stop = _frida_g_drive_stop;
pub const g_drive_stop_finish = _frida_g_drive_stop_finish;
pub const g_dtls_client_connection_get_accepted_cas = _frida_g_dtls_client_connection_get_accepted_cas;
pub const g_dtls_client_connection_get_server_identity = _frida_g_dtls_client_connection_get_server_identity;
pub const g_dtls_client_connection_get_type = _frida_g_dtls_client_connection_get_type;
pub const g_dtls_client_connection_get_validation_flags = _frida_g_dtls_client_connection_get_validation_flags;
pub const g_dtls_client_connection_new = _frida_g_dtls_client_connection_new;
pub const g_dtls_client_connection_set_server_identity = _frida_g_dtls_client_connection_set_server_identity;
pub const g_dtls_client_connection_set_validation_flags = _frida_g_dtls_client_connection_set_validation_flags;
pub const g_dtls_connection_close = _frida_g_dtls_connection_close;
pub const g_dtls_connection_close_async = _frida_g_dtls_connection_close_async;
pub const g_dtls_connection_close_finish = _frida_g_dtls_connection_close_finish;
pub const g_dtls_connection_emit_accept_certificate = _frida_g_dtls_connection_emit_accept_certificate;
pub const g_dtls_connection_get_certificate = _frida_g_dtls_connection_get_certificate;
pub const g_dtls_connection_get_channel_binding_data = _frida_g_dtls_connection_get_channel_binding_data;
pub const g_dtls_connection_get_ciphersuite_name = _frida_g_dtls_connection_get_ciphersuite_name;
pub const g_dtls_connection_get_database = _frida_g_dtls_connection_get_database;
pub const g_dtls_connection_get_interaction = _frida_g_dtls_connection_get_interaction;
pub const g_dtls_connection_get_negotiated_protocol = _frida_g_dtls_connection_get_negotiated_protocol;
pub const g_dtls_connection_get_peer_certificate = _frida_g_dtls_connection_get_peer_certificate;
pub const g_dtls_connection_get_peer_certificate_errors = _frida_g_dtls_connection_get_peer_certificate_errors;
pub const g_dtls_connection_get_protocol_version = _frida_g_dtls_connection_get_protocol_version;
pub const g_dtls_connection_get_rehandshake_mode = _frida_g_dtls_connection_get_rehandshake_mode;
pub const g_dtls_connection_get_require_close_notify = _frida_g_dtls_connection_get_require_close_notify;
pub const g_dtls_connection_get_type = _frida_g_dtls_connection_get_type;
pub const g_dtls_connection_handshake = _frida_g_dtls_connection_handshake;
pub const g_dtls_connection_handshake_async = _frida_g_dtls_connection_handshake_async;
pub const g_dtls_connection_handshake_finish = _frida_g_dtls_connection_handshake_finish;
pub const g_dtls_connection_set_advertised_protocols = _frida_g_dtls_connection_set_advertised_protocols;
pub const g_dtls_connection_set_certificate = _frida_g_dtls_connection_set_certificate;
pub const g_dtls_connection_set_database = _frida_g_dtls_connection_set_database;
pub const g_dtls_connection_set_interaction = _frida_g_dtls_connection_set_interaction;
pub const g_dtls_connection_set_rehandshake_mode = _frida_g_dtls_connection_set_rehandshake_mode;
pub const g_dtls_connection_set_require_close_notify = _frida_g_dtls_connection_set_require_close_notify;
pub const g_dtls_connection_shutdown = _frida_g_dtls_connection_shutdown;
pub const g_dtls_connection_shutdown_async = _frida_g_dtls_connection_shutdown_async;
pub const g_dtls_connection_shutdown_finish = _frida_g_dtls_connection_shutdown_finish;
pub const g_dtls_server_connection_get_type = _frida_g_dtls_server_connection_get_type;
pub const g_dtls_server_connection_new = _frida_g_dtls_server_connection_new;
pub const g_emblem_get_icon = _frida_g_emblem_get_icon;
pub const g_emblem_get_origin = _frida_g_emblem_get_origin;
pub const g_emblem_get_type = _frida_g_emblem_get_type;
pub const g_emblem_new = _frida_g_emblem_new;
pub const g_emblem_new_with_origin = _frida_g_emblem_new_with_origin;
pub const g_emblem_origin_get_type = _frida_g_emblem_origin_get_type;
pub const g_emblemed_icon_add_emblem = _frida_g_emblemed_icon_add_emblem;
pub const g_emblemed_icon_clear_emblems = _frida_g_emblemed_icon_clear_emblems;
pub const g_emblemed_icon_get_emblems = _frida_g_emblemed_icon_get_emblems;
pub const g_emblemed_icon_get_icon = _frida_g_emblemed_icon_get_icon;
pub const g_emblemed_icon_get_type = _frida_g_emblemed_icon_get_type;
pub const g_emblemed_icon_new = _frida_g_emblemed_icon_new;
pub const g_enum_complete_type_info = _frida_g_enum_complete_type_info;
pub const g_enum_get_value = _frida_g_enum_get_value;
pub const g_enum_get_value_by_name = _frida_g_enum_get_value_by_name;
pub const g_enum_get_value_by_nick = _frida_g_enum_get_value_by_nick;
pub const g_enum_register_static = _frida_g_enum_register_static;
pub const g_enum_to_string = _frida_g_enum_to_string;
pub const g_environ_getenv = _frida_g_environ_getenv;
pub const g_environ_setenv = _frida_g_environ_setenv;
pub const g_environ_unsetenv = _frida_g_environ_unsetenv;
pub const g_error_copy = _frida_g_error_copy;
pub const g_error_domain_register = _frida_g_error_domain_register;
pub const g_error_domain_register_static = _frida_g_error_domain_register_static;
pub const g_error_free = _frida_g_error_free;
pub const g_error_get_type = _frida_g_error_get_type;
pub const g_error_matches = _frida_g_error_matches;
pub const g_error_new = _frida_g_error_new;
pub const g_error_new_literal = _frida_g_error_new_literal;
pub const g_error_new_valist = _frida_g_error_new_valist;
pub const g_file_append_to = _frida_g_file_append_to;
pub const g_file_append_to_async = _frida_g_file_append_to_async;
pub const g_file_append_to_finish = _frida_g_file_append_to_finish;
pub const g_file_attribute_info_flags_get_type = _frida_g_file_attribute_info_flags_get_type;
pub const g_file_attribute_info_list_add = _frida_g_file_attribute_info_list_add;
pub const g_file_attribute_info_list_dup = _frida_g_file_attribute_info_list_dup;
pub const g_file_attribute_info_list_get_type = _frida_g_file_attribute_info_list_get_type;
pub const g_file_attribute_info_list_lookup = _frida_g_file_attribute_info_list_lookup;
pub const g_file_attribute_info_list_new = _frida_g_file_attribute_info_list_new;
pub const g_file_attribute_info_list_ref = _frida_g_file_attribute_info_list_ref;
pub const g_file_attribute_info_list_unref = _frida_g_file_attribute_info_list_unref;
pub const g_file_attribute_matcher_enumerate_namespace = _frida_g_file_attribute_matcher_enumerate_namespace;
pub const g_file_attribute_matcher_enumerate_next = _frida_g_file_attribute_matcher_enumerate_next;
pub const g_file_attribute_matcher_get_type = _frida_g_file_attribute_matcher_get_type;
pub const g_file_attribute_matcher_matches = _frida_g_file_attribute_matcher_matches;
pub const g_file_attribute_matcher_matches_only = _frida_g_file_attribute_matcher_matches_only;
pub const g_file_attribute_matcher_new = _frida_g_file_attribute_matcher_new;
pub const g_file_attribute_matcher_ref = _frida_g_file_attribute_matcher_ref;
pub const g_file_attribute_matcher_subtract = _frida_g_file_attribute_matcher_subtract;
pub const g_file_attribute_matcher_to_string = _frida_g_file_attribute_matcher_to_string;
pub const g_file_attribute_matcher_unref = _frida_g_file_attribute_matcher_unref;
pub const g_file_attribute_status_get_type = _frida_g_file_attribute_status_get_type;
pub const g_file_attribute_type_get_type = _frida_g_file_attribute_type_get_type;
pub const g_file_build_attribute_list_for_copy = _frida_g_file_build_attribute_list_for_copy;
pub const g_file_copy = _frida_g_file_copy;
pub const g_file_copy_async = _frida_g_file_copy_async;
pub const g_file_copy_attributes = _frida_g_file_copy_attributes;
pub const g_file_copy_finish = _frida_g_file_copy_finish;
pub const g_file_copy_flags_get_type = _frida_g_file_copy_flags_get_type;
pub const g_file_create = _frida_g_file_create;
pub const g_file_create_async = _frida_g_file_create_async;
pub const g_file_create_finish = _frida_g_file_create_finish;
pub const g_file_create_flags_get_type = _frida_g_file_create_flags_get_type;
pub const g_file_create_readwrite = _frida_g_file_create_readwrite;
pub const g_file_create_readwrite_async = _frida_g_file_create_readwrite_async;
pub const g_file_create_readwrite_finish = _frida_g_file_create_readwrite_finish;
pub const g_file_delete = _frida_g_file_delete;
pub const g_file_delete_async = _frida_g_file_delete_async;
pub const g_file_delete_finish = _frida_g_file_delete_finish;
pub const g_file_dup = _frida_g_file_dup;
pub const g_file_eject_mountable = _frida_g_file_eject_mountable;
pub const g_file_eject_mountable_finish = _frida_g_file_eject_mountable_finish;
pub const g_file_eject_mountable_with_operation = _frida_g_file_eject_mountable_with_operation;
pub const g_file_eject_mountable_with_operation_finish = _frida_g_file_eject_mountable_with_operation_finish;
pub const g_file_enumerate_children = _frida_g_file_enumerate_children;
pub const g_file_enumerate_children_async = _frida_g_file_enumerate_children_async;
pub const g_file_enumerate_children_finish = _frida_g_file_enumerate_children_finish;
pub const g_file_enumerator_close = _frida_g_file_enumerator_close;
pub const g_file_enumerator_close_async = _frida_g_file_enumerator_close_async;
pub const g_file_enumerator_close_finish = _frida_g_file_enumerator_close_finish;
pub const g_file_enumerator_get_child = _frida_g_file_enumerator_get_child;
pub const g_file_enumerator_get_container = _frida_g_file_enumerator_get_container;
pub const g_file_enumerator_get_type = _frida_g_file_enumerator_get_type;
pub const g_file_enumerator_has_pending = _frida_g_file_enumerator_has_pending;
pub const g_file_enumerator_is_closed = _frida_g_file_enumerator_is_closed;
pub const g_file_enumerator_iterate = _frida_g_file_enumerator_iterate;
pub const g_file_enumerator_next_file = _frida_g_file_enumerator_next_file;
pub const g_file_enumerator_next_files_async = _frida_g_file_enumerator_next_files_async;
pub const g_file_enumerator_next_files_finish = _frida_g_file_enumerator_next_files_finish;
pub const g_file_enumerator_set_pending = _frida_g_file_enumerator_set_pending;
pub const g_file_equal = _frida_g_file_equal;
pub const g_file_error_from_errno = _frida_g_file_error_from_errno;
pub const g_file_error_quark = _frida_g_file_error_quark;
pub const g_file_find_enclosing_mount = _frida_g_file_find_enclosing_mount;
pub const g_file_find_enclosing_mount_async = _frida_g_file_find_enclosing_mount_async;
pub const g_file_find_enclosing_mount_finish = _frida_g_file_find_enclosing_mount_finish;
pub const g_file_get_basename = _frida_g_file_get_basename;
pub const g_file_get_child = _frida_g_file_get_child;
pub const g_file_get_child_for_display_name = _frida_g_file_get_child_for_display_name;
pub const g_file_get_contents = _frida_g_file_get_contents;
pub const g_file_get_parent = _frida_g_file_get_parent;
pub const g_file_get_parse_name = _frida_g_file_get_parse_name;
pub const g_file_get_path = _frida_g_file_get_path;
pub const g_file_get_relative_path = _frida_g_file_get_relative_path;
pub const g_file_get_type = _frida_g_file_get_type;
pub const g_file_get_uri = _frida_g_file_get_uri;
pub const g_file_get_uri_scheme = _frida_g_file_get_uri_scheme;
pub const g_file_has_parent = _frida_g_file_has_parent;
pub const g_file_has_prefix = _frida_g_file_has_prefix;
pub const g_file_has_uri_scheme = _frida_g_file_has_uri_scheme;
pub const g_file_hash = _frida_g_file_hash;
pub const g_file_icon_get_file = _frida_g_file_icon_get_file;
pub const g_file_icon_get_type = _frida_g_file_icon_get_type;
pub const g_file_icon_new = _frida_g_file_icon_new;
pub const g_file_info_clear_status = _frida_g_file_info_clear_status;
pub const g_file_info_copy_into = _frida_g_file_info_copy_into;
pub const g_file_info_dup = _frida_g_file_info_dup;
pub const g_file_info_get_access_date_time = _frida_g_file_info_get_access_date_time;
pub const g_file_info_get_attribute_as_string = _frida_g_file_info_get_attribute_as_string;
pub const g_file_info_get_attribute_boolean = _frida_g_file_info_get_attribute_boolean;
pub const g_file_info_get_attribute_byte_string = _frida_g_file_info_get_attribute_byte_string;
pub const g_file_info_get_attribute_data = _frida_g_file_info_get_attribute_data;
pub const g_file_info_get_attribute_int32 = _frida_g_file_info_get_attribute_int32;
pub const g_file_info_get_attribute_int64 = _frida_g_file_info_get_attribute_int64;
pub const g_file_info_get_attribute_object = _frida_g_file_info_get_attribute_object;
pub const g_file_info_get_attribute_status = _frida_g_file_info_get_attribute_status;
pub const g_file_info_get_attribute_string = _frida_g_file_info_get_attribute_string;
pub const g_file_info_get_attribute_stringv = _frida_g_file_info_get_attribute_stringv;
pub const g_file_info_get_attribute_type = _frida_g_file_info_get_attribute_type;
pub const g_file_info_get_attribute_uint32 = _frida_g_file_info_get_attribute_uint32;
pub const g_file_info_get_attribute_uint64 = _frida_g_file_info_get_attribute_uint64;
pub const g_file_info_get_content_type = _frida_g_file_info_get_content_type;
pub const g_file_info_get_creation_date_time = _frida_g_file_info_get_creation_date_time;
pub const g_file_info_get_deletion_date = _frida_g_file_info_get_deletion_date;
pub const g_file_info_get_display_name = _frida_g_file_info_get_display_name;
pub const g_file_info_get_edit_name = _frida_g_file_info_get_edit_name;
pub const g_file_info_get_etag = _frida_g_file_info_get_etag;
pub const g_file_info_get_file_type = _frida_g_file_info_get_file_type;
pub const g_file_info_get_icon = _frida_g_file_info_get_icon;
pub const g_file_info_get_is_backup = _frida_g_file_info_get_is_backup;
pub const g_file_info_get_is_hidden = _frida_g_file_info_get_is_hidden;
pub const g_file_info_get_is_symlink = _frida_g_file_info_get_is_symlink;
pub const g_file_info_get_modification_date_time = _frida_g_file_info_get_modification_date_time;
pub const g_file_info_get_modification_time = _frida_g_file_info_get_modification_time;
pub const g_file_info_get_name = _frida_g_file_info_get_name;
pub const g_file_info_get_size = _frida_g_file_info_get_size;
pub const g_file_info_get_sort_order = _frida_g_file_info_get_sort_order;
pub const g_file_info_get_symbolic_icon = _frida_g_file_info_get_symbolic_icon;
pub const g_file_info_get_symlink_target = _frida_g_file_info_get_symlink_target;
pub const g_file_info_get_type = _frida_g_file_info_get_type;
pub const g_file_info_has_attribute = _frida_g_file_info_has_attribute;
pub const g_file_info_has_namespace = _frida_g_file_info_has_namespace;
pub const g_file_info_list_attributes = _frida_g_file_info_list_attributes;
pub const g_file_info_new = _frida_g_file_info_new;
pub const g_file_info_remove_attribute = _frida_g_file_info_remove_attribute;
pub const g_file_info_set_access_date_time = _frida_g_file_info_set_access_date_time;
pub const g_file_info_set_attribute = _frida_g_file_info_set_attribute;
pub const g_file_info_set_attribute_boolean = _frida_g_file_info_set_attribute_boolean;
pub const g_file_info_set_attribute_byte_string = _frida_g_file_info_set_attribute_byte_string;
pub const g_file_info_set_attribute_int32 = _frida_g_file_info_set_attribute_int32;
pub const g_file_info_set_attribute_int64 = _frida_g_file_info_set_attribute_int64;
pub const g_file_info_set_attribute_mask = _frida_g_file_info_set_attribute_mask;
pub const g_file_info_set_attribute_object = _frida_g_file_info_set_attribute_object;
pub const g_file_info_set_attribute_status = _frida_g_file_info_set_attribute_status;
pub const g_file_info_set_attribute_string = _frida_g_file_info_set_attribute_string;
pub const g_file_info_set_attribute_stringv = _frida_g_file_info_set_attribute_stringv;
pub const g_file_info_set_attribute_uint32 = _frida_g_file_info_set_attribute_uint32;
pub const g_file_info_set_attribute_uint64 = _frida_g_file_info_set_attribute_uint64;
pub const g_file_info_set_content_type = _frida_g_file_info_set_content_type;
pub const g_file_info_set_creation_date_time = _frida_g_file_info_set_creation_date_time;
pub const g_file_info_set_display_name = _frida_g_file_info_set_display_name;
pub const g_file_info_set_edit_name = _frida_g_file_info_set_edit_name;
pub const g_file_info_set_file_type = _frida_g_file_info_set_file_type;
pub const g_file_info_set_icon = _frida_g_file_info_set_icon;
pub const g_file_info_set_is_hidden = _frida_g_file_info_set_is_hidden;
pub const g_file_info_set_is_symlink = _frida_g_file_info_set_is_symlink;
pub const g_file_info_set_modification_date_time = _frida_g_file_info_set_modification_date_time;
pub const g_file_info_set_modification_time = _frida_g_file_info_set_modification_time;
pub const g_file_info_set_name = _frida_g_file_info_set_name;
pub const g_file_info_set_size = _frida_g_file_info_set_size;
pub const g_file_info_set_sort_order = _frida_g_file_info_set_sort_order;
pub const g_file_info_set_symbolic_icon = _frida_g_file_info_set_symbolic_icon;
pub const g_file_info_set_symlink_target = _frida_g_file_info_set_symlink_target;
pub const g_file_info_unset_attribute_mask = _frida_g_file_info_unset_attribute_mask;
pub const g_file_input_stream_get_type = _frida_g_file_input_stream_get_type;
pub const g_file_input_stream_query_info = _frida_g_file_input_stream_query_info;
pub const g_file_input_stream_query_info_async = _frida_g_file_input_stream_query_info_async;
pub const g_file_input_stream_query_info_finish = _frida_g_file_input_stream_query_info_finish;
pub const g_file_io_stream_get_etag = _frida_g_file_io_stream_get_etag;
pub const g_file_io_stream_get_type = _frida_g_file_io_stream_get_type;
pub const g_file_io_stream_query_info = _frida_g_file_io_stream_query_info;
pub const g_file_io_stream_query_info_async = _frida_g_file_io_stream_query_info_async;
pub const g_file_io_stream_query_info_finish = _frida_g_file_io_stream_query_info_finish;
pub const g_file_is_native = _frida_g_file_is_native;
pub const g_file_load_bytes = _frida_g_file_load_bytes;
pub const g_file_load_bytes_async = _frida_g_file_load_bytes_async;
pub const g_file_load_bytes_finish = _frida_g_file_load_bytes_finish;
pub const g_file_load_contents = _frida_g_file_load_contents;
pub const g_file_load_contents_async = _frida_g_file_load_contents_async;
pub const g_file_load_contents_finish = _frida_g_file_load_contents_finish;
pub const g_file_load_partial_contents_async = _frida_g_file_load_partial_contents_async;
pub const g_file_load_partial_contents_finish = _frida_g_file_load_partial_contents_finish;
pub const g_file_make_directory = _frida_g_file_make_directory;
pub const g_file_make_directory_async = _frida_g_file_make_directory_async;
pub const g_file_make_directory_finish = _frida_g_file_make_directory_finish;
pub const g_file_make_directory_with_parents = _frida_g_file_make_directory_with_parents;
pub const g_file_make_symbolic_link = _frida_g_file_make_symbolic_link;
pub const g_file_make_symbolic_link_async = _frida_g_file_make_symbolic_link_async;
pub const g_file_make_symbolic_link_finish = _frida_g_file_make_symbolic_link_finish;
pub const g_file_measure_disk_usage = _frida_g_file_measure_disk_usage;
pub const g_file_measure_disk_usage_async = _frida_g_file_measure_disk_usage_async;
pub const g_file_measure_disk_usage_finish = _frida_g_file_measure_disk_usage_finish;
pub const g_file_measure_flags_get_type = _frida_g_file_measure_flags_get_type;
pub const g_file_monitor = _frida_g_file_monitor;
pub const g_file_monitor_cancel = _frida_g_file_monitor_cancel;
pub const g_file_monitor_directory = _frida_g_file_monitor_directory;
pub const g_file_monitor_emit_event = _frida_g_file_monitor_emit_event;
pub const g_file_monitor_event_get_type = _frida_g_file_monitor_event_get_type;
pub const g_file_monitor_file = _frida_g_file_monitor_file;
pub const g_file_monitor_flags_get_type = _frida_g_file_monitor_flags_get_type;
pub const g_file_monitor_get_type = _frida_g_file_monitor_get_type;
pub const g_file_monitor_is_cancelled = _frida_g_file_monitor_is_cancelled;
pub const g_file_monitor_set_rate_limit = _frida_g_file_monitor_set_rate_limit;
pub const g_file_mount_enclosing_volume = _frida_g_file_mount_enclosing_volume;
pub const g_file_mount_enclosing_volume_finish = _frida_g_file_mount_enclosing_volume_finish;
pub const g_file_mount_mountable = _frida_g_file_mount_mountable;
pub const g_file_mount_mountable_finish = _frida_g_file_mount_mountable_finish;
pub const g_file_move = _frida_g_file_move;
pub const g_file_move_async = _frida_g_file_move_async;
pub const g_file_move_finish = _frida_g_file_move_finish;
pub const g_file_new_build_filename = _frida_g_file_new_build_filename;
pub const g_file_new_for_commandline_arg = _frida_g_file_new_for_commandline_arg;
pub const g_file_new_for_commandline_arg_and_cwd = _frida_g_file_new_for_commandline_arg_and_cwd;
pub const g_file_new_for_path = _frida_g_file_new_for_path;
pub const g_file_new_for_uri = _frida_g_file_new_for_uri;
pub const g_file_new_tmp = _frida_g_file_new_tmp;
pub const g_file_new_tmp_async = _frida_g_file_new_tmp_async;
pub const g_file_new_tmp_dir_async = _frida_g_file_new_tmp_dir_async;
pub const g_file_new_tmp_dir_finish = _frida_g_file_new_tmp_dir_finish;
pub const g_file_new_tmp_finish = _frida_g_file_new_tmp_finish;
pub const g_file_open_readwrite = _frida_g_file_open_readwrite;
pub const g_file_open_readwrite_async = _frida_g_file_open_readwrite_async;
pub const g_file_open_readwrite_finish = _frida_g_file_open_readwrite_finish;
pub const g_file_open_tmp = _frida_g_file_open_tmp;
pub const g_file_output_stream_get_etag = _frida_g_file_output_stream_get_etag;
pub const g_file_output_stream_get_type = _frida_g_file_output_stream_get_type;
pub const g_file_output_stream_query_info = _frida_g_file_output_stream_query_info;
pub const g_file_output_stream_query_info_async = _frida_g_file_output_stream_query_info_async;
pub const g_file_output_stream_query_info_finish = _frida_g_file_output_stream_query_info_finish;
pub const g_file_parse_name = _frida_g_file_parse_name;
pub const g_file_peek_path = _frida_g_file_peek_path;
pub const g_file_poll_mountable = _frida_g_file_poll_mountable;
pub const g_file_poll_mountable_finish = _frida_g_file_poll_mountable_finish;
pub const g_file_query_default_handler = _frida_g_file_query_default_handler;
pub const g_file_query_default_handler_async = _frida_g_file_query_default_handler_async;
pub const g_file_query_default_handler_finish = _frida_g_file_query_default_handler_finish;
pub const g_file_query_exists = _frida_g_file_query_exists;
pub const g_file_query_file_type = _frida_g_file_query_file_type;
pub const g_file_query_filesystem_info = _frida_g_file_query_filesystem_info;
pub const g_file_query_filesystem_info_async = _frida_g_file_query_filesystem_info_async;
pub const g_file_query_filesystem_info_finish = _frida_g_file_query_filesystem_info_finish;
pub const g_file_query_info = _frida_g_file_query_info;
pub const g_file_query_info_async = _frida_g_file_query_info_async;
pub const g_file_query_info_finish = _frida_g_file_query_info_finish;
pub const g_file_query_info_flags_get_type = _frida_g_file_query_info_flags_get_type;
pub const g_file_query_settable_attributes = _frida_g_file_query_settable_attributes;
pub const g_file_query_writable_namespaces = _frida_g_file_query_writable_namespaces;
pub const g_file_read = _frida_g_file_read;
pub const g_file_read_async = _frida_g_file_read_async;
pub const g_file_read_finish = _frida_g_file_read_finish;
pub const g_file_read_link = _frida_g_file_read_link;
pub const g_file_replace = _frida_g_file_replace;
pub const g_file_replace_async = _frida_g_file_replace_async;
pub const g_file_replace_contents = _frida_g_file_replace_contents;
pub const g_file_replace_contents_async = _frida_g_file_replace_contents_async;
pub const g_file_replace_contents_bytes_async = _frida_g_file_replace_contents_bytes_async;
pub const g_file_replace_contents_finish = _frida_g_file_replace_contents_finish;
pub const g_file_replace_finish = _frida_g_file_replace_finish;
pub const g_file_replace_readwrite = _frida_g_file_replace_readwrite;
pub const g_file_replace_readwrite_async = _frida_g_file_replace_readwrite_async;
pub const g_file_replace_readwrite_finish = _frida_g_file_replace_readwrite_finish;
pub const g_file_resolve_relative_path = _frida_g_file_resolve_relative_path;
pub const g_file_set_attribute = _frida_g_file_set_attribute;
pub const g_file_set_attribute_byte_string = _frida_g_file_set_attribute_byte_string;
pub const g_file_set_attribute_int32 = _frida_g_file_set_attribute_int32;
pub const g_file_set_attribute_int64 = _frida_g_file_set_attribute_int64;
pub const g_file_set_attribute_string = _frida_g_file_set_attribute_string;
pub const g_file_set_attribute_uint32 = _frida_g_file_set_attribute_uint32;
pub const g_file_set_attribute_uint64 = _frida_g_file_set_attribute_uint64;
pub const g_file_set_attributes_async = _frida_g_file_set_attributes_async;
pub const g_file_set_attributes_finish = _frida_g_file_set_attributes_finish;
pub const g_file_set_attributes_from_info = _frida_g_file_set_attributes_from_info;
pub const g_file_set_contents = _frida_g_file_set_contents;
pub const g_file_set_contents_full = _frida_g_file_set_contents_full;
pub const g_file_set_display_name = _frida_g_file_set_display_name;
pub const g_file_set_display_name_async = _frida_g_file_set_display_name_async;
pub const g_file_set_display_name_finish = _frida_g_file_set_display_name_finish;
pub const g_file_start_mountable = _frida_g_file_start_mountable;
pub const g_file_start_mountable_finish = _frida_g_file_start_mountable_finish;
pub const g_file_stop_mountable = _frida_g_file_stop_mountable;
pub const g_file_stop_mountable_finish = _frida_g_file_stop_mountable_finish;
pub const g_file_supports_thread_contexts = _frida_g_file_supports_thread_contexts;
pub const g_file_test = _frida_g_file_test;
pub const g_file_trash = _frida_g_file_trash;
pub const g_file_trash_async = _frida_g_file_trash_async;
pub const g_file_trash_finish = _frida_g_file_trash_finish;
pub const g_file_type_get_type = _frida_g_file_type_get_type;
pub const g_file_unmount_mountable = _frida_g_file_unmount_mountable;
pub const g_file_unmount_mountable_finish = _frida_g_file_unmount_mountable_finish;
pub const g_file_unmount_mountable_with_operation = _frida_g_file_unmount_mountable_with_operation;
pub const g_file_unmount_mountable_with_operation_finish = _frida_g_file_unmount_mountable_with_operation_finish;
pub const g_filename_completer_get_completion_suffix = _frida_g_filename_completer_get_completion_suffix;
pub const g_filename_completer_get_completions = _frida_g_filename_completer_get_completions;
pub const g_filename_completer_get_type = _frida_g_filename_completer_get_type;
pub const g_filename_completer_new = _frida_g_filename_completer_new;
pub const g_filename_completer_set_dirs_only = _frida_g_filename_completer_set_dirs_only;
pub const g_filename_display_basename = _frida_g_filename_display_basename;
pub const g_filename_display_name = _frida_g_filename_display_name;
pub const g_filename_from_uri = _frida_g_filename_from_uri;
pub const g_filename_from_utf8 = _frida_g_filename_from_utf8;
pub const g_filename_to_uri = _frida_g_filename_to_uri;
pub const g_filename_to_utf8 = _frida_g_filename_to_utf8;
pub const g_filesystem_preview_type_get_type = _frida_g_filesystem_preview_type_get_type;
pub const g_filter_input_stream_get_base_stream = _frida_g_filter_input_stream_get_base_stream;
pub const g_filter_input_stream_get_close_base_stream = _frida_g_filter_input_stream_get_close_base_stream;
pub const g_filter_input_stream_get_type = _frida_g_filter_input_stream_get_type;
pub const g_filter_input_stream_set_close_base_stream = _frida_g_filter_input_stream_set_close_base_stream;
pub const g_filter_output_stream_get_base_stream = _frida_g_filter_output_stream_get_base_stream;
pub const g_filter_output_stream_get_close_base_stream = _frida_g_filter_output_stream_get_close_base_stream;
pub const g_filter_output_stream_get_type = _frida_g_filter_output_stream_get_type;
pub const g_filter_output_stream_set_close_base_stream = _frida_g_filter_output_stream_set_close_base_stream;
pub const g_find_program_in_path = _frida_g_find_program_in_path;
pub const g_flags_complete_type_info = _frida_g_flags_complete_type_info;
pub const g_flags_get_first_value = _frida_g_flags_get_first_value;
pub const g_flags_get_value_by_name = _frida_g_flags_get_value_by_name;
pub const g_flags_get_value_by_nick = _frida_g_flags_get_value_by_nick;
pub const g_flags_register_static = _frida_g_flags_register_static;
pub const g_flags_to_string = _frida_g_flags_to_string;
pub const g_format_size = _frida_g_format_size;
pub const g_format_size_for_display = _frida_g_format_size_for_display;
pub const g_format_size_full = _frida_g_format_size_full;
pub const g_free = _frida_g_free;
pub const g_get_application_name = _frida_g_get_application_name;
pub const g_get_charset = _frida_g_get_charset;
pub const g_get_codeset = _frida_g_get_codeset;
pub const g_get_console_charset = _frida_g_get_console_charset;
pub const g_get_current_dir = _frida_g_get_current_dir;
pub const g_get_current_time = _frida_g_get_current_time;
pub const g_get_environ = _frida_g_get_environ;
pub const g_get_filename_charsets = _frida_g_get_filename_charsets;
pub const g_get_home_dir = _frida_g_get_home_dir;
pub const g_get_host_name = _frida_g_get_host_name;
pub const g_get_language_names = _frida_g_get_language_names;
pub const g_get_language_names_with_category = _frida_g_get_language_names_with_category;
pub const g_get_locale_variants = _frida_g_get_locale_variants;
pub const g_get_monotonic_time = _frida_g_get_monotonic_time;
pub const g_get_num_processors = _frida_g_get_num_processors;
pub const g_get_os_info = _frida_g_get_os_info;
pub const g_get_prgname = _frida_g_get_prgname;
pub const g_get_real_name = _frida_g_get_real_name;
pub const g_get_real_time = _frida_g_get_real_time;
pub const g_get_system_config_dirs = _frida_g_get_system_config_dirs;
pub const g_get_system_data_dirs = _frida_g_get_system_data_dirs;
pub const g_get_tmp_dir = _frida_g_get_tmp_dir;
pub const g_get_user_cache_dir = _frida_g_get_user_cache_dir;
pub const g_get_user_config_dir = _frida_g_get_user_config_dir;
pub const g_get_user_data_dir = _frida_g_get_user_data_dir;
pub const g_get_user_name = _frida_g_get_user_name;
pub const g_get_user_runtime_dir = _frida_g_get_user_runtime_dir;
pub const g_get_user_special_dir = _frida_g_get_user_special_dir;
pub const g_get_user_state_dir = _frida_g_get_user_state_dir;
pub const g_getenv = _frida_g_getenv;
pub const g_gstring_get_type = _frida_g_gstring_get_type;
pub const g_gtype_get_type = _frida_g_gtype_get_type;
pub const g_hash_table_add = _frida_g_hash_table_add;
pub const g_hash_table_contains = _frida_g_hash_table_contains;
pub const g_hash_table_destroy = _frida_g_hash_table_destroy;
pub const g_hash_table_find = _frida_g_hash_table_find;
pub const g_hash_table_foreach = _frida_g_hash_table_foreach;
pub const g_hash_table_foreach_remove = _frida_g_hash_table_foreach_remove;
pub const g_hash_table_foreach_steal = _frida_g_hash_table_foreach_steal;
pub const g_hash_table_get_keys = _frida_g_hash_table_get_keys;
pub const g_hash_table_get_keys_as_array = _frida_g_hash_table_get_keys_as_array;
pub const g_hash_table_get_type = _frida_g_hash_table_get_type;
pub const g_hash_table_get_values = _frida_g_hash_table_get_values;
pub const g_hash_table_insert = _frida_g_hash_table_insert;
pub const g_hash_table_iter_get_hash_table = _frida_g_hash_table_iter_get_hash_table;
pub const g_hash_table_iter_init = _frida_g_hash_table_iter_init;
pub const g_hash_table_iter_next = _frida_g_hash_table_iter_next;
pub const g_hash_table_iter_remove = _frida_g_hash_table_iter_remove;
pub const g_hash_table_iter_replace = _frida_g_hash_table_iter_replace;
pub const g_hash_table_iter_steal = _frida_g_hash_table_iter_steal;
pub const g_hash_table_lookup = _frida_g_hash_table_lookup;
pub const g_hash_table_lookup_extended = _frida_g_hash_table_lookup_extended;
pub const g_hash_table_new = _frida_g_hash_table_new;
pub const g_hash_table_new_full = _frida_g_hash_table_new_full;
pub const g_hash_table_new_similar = _frida_g_hash_table_new_similar;
pub const g_hash_table_ref = _frida_g_hash_table_ref;
pub const g_hash_table_remove = _frida_g_hash_table_remove;
pub const g_hash_table_remove_all = _frida_g_hash_table_remove_all;
pub const g_hash_table_replace = _frida_g_hash_table_replace;
pub const g_hash_table_size = _frida_g_hash_table_size;
pub const g_hash_table_steal = _frida_g_hash_table_steal;
pub const g_hash_table_steal_all = _frida_g_hash_table_steal_all;
pub const g_hash_table_steal_extended = _frida_g_hash_table_steal_extended;
pub const g_hash_table_unref = _frida_g_hash_table_unref;
pub const g_hmac_copy = _frida_g_hmac_copy;
pub const g_hmac_get_digest = _frida_g_hmac_get_digest;
pub const g_hmac_get_string = _frida_g_hmac_get_string;
pub const g_hmac_new = _frida_g_hmac_new;
pub const g_hmac_ref = _frida_g_hmac_ref;
pub const g_hmac_unref = _frida_g_hmac_unref;
pub const g_hmac_update = _frida_g_hmac_update;
pub const g_hook_alloc = _frida_g_hook_alloc;
pub const g_hook_compare_ids = _frida_g_hook_compare_ids;
pub const g_hook_destroy = _frida_g_hook_destroy;
pub const g_hook_destroy_link = _frida_g_hook_destroy_link;
pub const g_hook_find = _frida_g_hook_find;
pub const g_hook_find_data = _frida_g_hook_find_data;
pub const g_hook_find_func = _frida_g_hook_find_func;
pub const g_hook_find_func_data = _frida_g_hook_find_func_data;
pub const g_hook_first_valid = _frida_g_hook_first_valid;
pub const g_hook_free = _frida_g_hook_free;
pub const g_hook_get = _frida_g_hook_get;
pub const g_hook_insert_before = _frida_g_hook_insert_before;
pub const g_hook_insert_sorted = _frida_g_hook_insert_sorted;
pub const g_hook_list_clear = _frida_g_hook_list_clear;
pub const g_hook_list_init = _frida_g_hook_list_init;
pub const g_hook_list_invoke = _frida_g_hook_list_invoke;
pub const g_hook_list_invoke_check = _frida_g_hook_list_invoke_check;
pub const g_hook_list_marshal = _frida_g_hook_list_marshal;
pub const g_hook_list_marshal_check = _frida_g_hook_list_marshal_check;
pub const g_hook_next_valid = _frida_g_hook_next_valid;
pub const g_hook_prepend = _frida_g_hook_prepend;
pub const g_hook_ref = _frida_g_hook_ref;
pub const g_hook_unref = _frida_g_hook_unref;
pub const g_hostname_is_ascii_encoded = _frida_g_hostname_is_ascii_encoded;
pub const g_hostname_is_ip_address = _frida_g_hostname_is_ip_address;
pub const g_hostname_is_non_ascii = _frida_g_hostname_is_non_ascii;
pub const g_hostname_to_ascii = _frida_g_hostname_to_ascii;
pub const g_hostname_to_unicode = _frida_g_hostname_to_unicode;
pub const g_icon_deserialize = _frida_g_icon_deserialize;
pub const g_icon_equal = _frida_g_icon_equal;
pub const g_icon_get_type = _frida_g_icon_get_type;
pub const g_icon_hash = _frida_g_icon_hash;
pub const g_icon_new_for_string = _frida_g_icon_new_for_string;
pub const g_icon_serialize = _frida_g_icon_serialize;
pub const g_icon_to_string = _frida_g_icon_to_string;
pub const g_iconv = _frida_g_iconv;
pub const g_iconv_close = _frida_g_iconv_close;
pub const g_iconv_open = _frida_g_iconv_open;
pub const g_idle_add = _frida_g_idle_add;
pub const g_idle_add_full = _frida_g_idle_add_full;
pub const g_idle_add_once = _frida_g_idle_add_once;
pub const g_idle_funcs = _frida_g_idle_funcs;
pub const g_idle_remove_by_data = _frida_g_idle_remove_by_data;
pub const g_idle_source_new = _frida_g_idle_source_new;
pub const g_inet_address_equal = _frida_g_inet_address_equal;
pub const g_inet_address_get_family = _frida_g_inet_address_get_family;
pub const g_inet_address_get_is_any = _frida_g_inet_address_get_is_any;
pub const g_inet_address_get_is_link_local = _frida_g_inet_address_get_is_link_local;
pub const g_inet_address_get_is_loopback = _frida_g_inet_address_get_is_loopback;
pub const g_inet_address_get_is_mc_global = _frida_g_inet_address_get_is_mc_global;
pub const g_inet_address_get_is_mc_link_local = _frida_g_inet_address_get_is_mc_link_local;
pub const g_inet_address_get_is_mc_node_local = _frida_g_inet_address_get_is_mc_node_local;
pub const g_inet_address_get_is_mc_org_local = _frida_g_inet_address_get_is_mc_org_local;
pub const g_inet_address_get_is_mc_site_local = _frida_g_inet_address_get_is_mc_site_local;
pub const g_inet_address_get_is_multicast = _frida_g_inet_address_get_is_multicast;
pub const g_inet_address_get_is_site_local = _frida_g_inet_address_get_is_site_local;
pub const g_inet_address_get_native_size = _frida_g_inet_address_get_native_size;
pub const g_inet_address_get_type = _frida_g_inet_address_get_type;
pub const g_inet_address_mask_equal = _frida_g_inet_address_mask_equal;
pub const g_inet_address_mask_get_address = _frida_g_inet_address_mask_get_address;
pub const g_inet_address_mask_get_family = _frida_g_inet_address_mask_get_family;
pub const g_inet_address_mask_get_length = _frida_g_inet_address_mask_get_length;
pub const g_inet_address_mask_get_type = _frida_g_inet_address_mask_get_type;
pub const g_inet_address_mask_matches = _frida_g_inet_address_mask_matches;
pub const g_inet_address_mask_new = _frida_g_inet_address_mask_new;
pub const g_inet_address_mask_new_from_string = _frida_g_inet_address_mask_new_from_string;
pub const g_inet_address_mask_to_string = _frida_g_inet_address_mask_to_string;
pub const g_inet_address_new_any = _frida_g_inet_address_new_any;
pub const g_inet_address_new_from_bytes = _frida_g_inet_address_new_from_bytes;
pub const g_inet_address_new_from_string = _frida_g_inet_address_new_from_string;
pub const g_inet_address_new_loopback = _frida_g_inet_address_new_loopback;
pub const g_inet_address_to_bytes = _frida_g_inet_address_to_bytes;
pub const g_inet_address_to_string = _frida_g_inet_address_to_string;
pub const g_inet_socket_address_get_address = _frida_g_inet_socket_address_get_address;
pub const g_inet_socket_address_get_flowinfo = _frida_g_inet_socket_address_get_flowinfo;
pub const g_inet_socket_address_get_port = _frida_g_inet_socket_address_get_port;
pub const g_inet_socket_address_get_scope_id = _frida_g_inet_socket_address_get_scope_id;
pub const g_inet_socket_address_get_type = _frida_g_inet_socket_address_get_type;
pub const g_inet_socket_address_new = _frida_g_inet_socket_address_new;
pub const g_inet_socket_address_new_from_string = _frida_g_inet_socket_address_new_from_string;
pub const g_initable_get_type = _frida_g_initable_get_type;
pub const g_initable_init = _frida_g_initable_init;
pub const g_initable_new = _frida_g_initable_new;
pub const g_initable_new_valist = _frida_g_initable_new_valist;
pub const g_initable_newv = _frida_g_initable_newv;
pub const g_initially_unowned_get_type = _frida_g_initially_unowned_get_type;
pub const g_input_stream_clear_pending = _frida_g_input_stream_clear_pending;
pub const g_input_stream_close = _frida_g_input_stream_close;
pub const g_input_stream_close_async = _frida_g_input_stream_close_async;
pub const g_input_stream_close_finish = _frida_g_input_stream_close_finish;
pub const g_input_stream_get_type = _frida_g_input_stream_get_type;
pub const g_input_stream_has_pending = _frida_g_input_stream_has_pending;
pub const g_input_stream_is_closed = _frida_g_input_stream_is_closed;
pub const g_input_stream_read = _frida_g_input_stream_read;
pub const g_input_stream_read_all = _frida_g_input_stream_read_all;
pub const g_input_stream_read_all_async = _frida_g_input_stream_read_all_async;
pub const g_input_stream_read_all_finish = _frida_g_input_stream_read_all_finish;
pub const g_input_stream_read_async = _frida_g_input_stream_read_async;
pub const g_input_stream_read_bytes = _frida_g_input_stream_read_bytes;
pub const g_input_stream_read_bytes_async = _frida_g_input_stream_read_bytes_async;
pub const g_input_stream_read_bytes_finish = _frida_g_input_stream_read_bytes_finish;
pub const g_input_stream_read_finish = _frida_g_input_stream_read_finish;
pub const g_input_stream_set_pending = _frida_g_input_stream_set_pending;
pub const g_input_stream_skip = _frida_g_input_stream_skip;
pub const g_input_stream_skip_async = _frida_g_input_stream_skip_async;
pub const g_input_stream_skip_finish = _frida_g_input_stream_skip_finish;
pub const g_int64_equal = _frida_g_int64_equal;
pub const g_int64_hash = _frida_g_int64_hash;
pub const g_int_equal = _frida_g_int_equal;
pub const g_int_hash = _frida_g_int_hash;
pub const g_intern_static_string = _frida_g_intern_static_string;
pub const g_intern_string = _frida_g_intern_string;
pub const g_io_add_watch = _frida_g_io_add_watch;
pub const g_io_add_watch_full = _frida_g_io_add_watch_full;
pub const g_io_channel_close = _frida_g_io_channel_close;
pub const g_io_channel_error_from_errno = _frida_g_io_channel_error_from_errno;
pub const g_io_channel_error_quark = _frida_g_io_channel_error_quark;
pub const g_io_channel_flush = _frida_g_io_channel_flush;
pub const g_io_channel_get_buffer_condition = _frida_g_io_channel_get_buffer_condition;
pub const g_io_channel_get_buffer_size = _frida_g_io_channel_get_buffer_size;
pub const g_io_channel_get_buffered = _frida_g_io_channel_get_buffered;
pub const g_io_channel_get_close_on_unref = _frida_g_io_channel_get_close_on_unref;
pub const g_io_channel_get_encoding = _frida_g_io_channel_get_encoding;
pub const g_io_channel_get_flags = _frida_g_io_channel_get_flags;
pub const g_io_channel_get_line_term = _frida_g_io_channel_get_line_term;
pub const g_io_channel_get_type = _frida_g_io_channel_get_type;
pub const g_io_channel_init = _frida_g_io_channel_init;
pub const g_io_channel_new_file = _frida_g_io_channel_new_file;
pub const g_io_channel_read = _frida_g_io_channel_read;
pub const g_io_channel_read_chars = _frida_g_io_channel_read_chars;
pub const g_io_channel_read_line = _frida_g_io_channel_read_line;
pub const g_io_channel_read_line_string = _frida_g_io_channel_read_line_string;
pub const g_io_channel_read_to_end = _frida_g_io_channel_read_to_end;
pub const g_io_channel_read_unichar = _frida_g_io_channel_read_unichar;
pub const g_io_channel_ref = _frida_g_io_channel_ref;
pub const g_io_channel_seek = _frida_g_io_channel_seek;
pub const g_io_channel_seek_position = _frida_g_io_channel_seek_position;
pub const g_io_channel_set_buffer_size = _frida_g_io_channel_set_buffer_size;
pub const g_io_channel_set_buffered = _frida_g_io_channel_set_buffered;
pub const g_io_channel_set_close_on_unref = _frida_g_io_channel_set_close_on_unref;
pub const g_io_channel_set_encoding = _frida_g_io_channel_set_encoding;
pub const g_io_channel_set_flags = _frida_g_io_channel_set_flags;
pub const g_io_channel_set_line_term = _frida_g_io_channel_set_line_term;
pub const g_io_channel_shutdown = _frida_g_io_channel_shutdown;
pub const g_io_channel_unix_get_fd = _frida_g_io_channel_unix_get_fd;
pub const g_io_channel_unix_new = _frida_g_io_channel_unix_new;
pub const g_io_channel_unref = _frida_g_io_channel_unref;
pub const g_io_channel_write = _frida_g_io_channel_write;
pub const g_io_channel_write_chars = _frida_g_io_channel_write_chars;
pub const g_io_channel_write_unichar = _frida_g_io_channel_write_unichar;
pub const g_io_condition_get_type = _frida_g_io_condition_get_type;
pub const g_io_create_watch = _frida_g_io_create_watch;
pub const g_io_error_enum_get_type = _frida_g_io_error_enum_get_type;
pub const g_io_error_from_errno = _frida_g_io_error_from_errno;
pub const g_io_error_from_file_error = _frida_g_io_error_from_file_error;
pub const g_io_error_quark = _frida_g_io_error_quark;
pub const g_io_extension_get_name = _frida_g_io_extension_get_name;
pub const g_io_extension_get_priority = _frida_g_io_extension_get_priority;
pub const g_io_extension_get_type = _frida_g_io_extension_get_type;
pub const g_io_extension_point_get_extension_by_name = _frida_g_io_extension_point_get_extension_by_name;
pub const g_io_extension_point_get_extensions = _frida_g_io_extension_point_get_extensions;
pub const g_io_extension_point_get_required_type = _frida_g_io_extension_point_get_required_type;
pub const g_io_extension_point_implement = _frida_g_io_extension_point_implement;
pub const g_io_extension_point_lookup = _frida_g_io_extension_point_lookup;
pub const g_io_extension_point_register = _frida_g_io_extension_point_register;
pub const g_io_extension_point_set_required_type = _frida_g_io_extension_point_set_required_type;
pub const g_io_extension_ref_class = _frida_g_io_extension_ref_class;
pub const g_io_module_get_type = _frida_g_io_module_get_type;
pub const g_io_module_new = _frida_g_io_module_new;
pub const g_io_module_scope_block = _frida_g_io_module_scope_block;
pub const g_io_module_scope_flags_get_type = _frida_g_io_module_scope_flags_get_type;
pub const g_io_module_scope_free = _frida_g_io_module_scope_free;
pub const g_io_module_scope_new = _frida_g_io_module_scope_new;
pub const g_io_modules_load_all_in_directory = _frida_g_io_modules_load_all_in_directory;
pub const g_io_modules_load_all_in_directory_with_scope = _frida_g_io_modules_load_all_in_directory_with_scope;
pub const g_io_modules_scan_all_in_directory = _frida_g_io_modules_scan_all_in_directory;
pub const g_io_modules_scan_all_in_directory_with_scope = _frida_g_io_modules_scan_all_in_directory_with_scope;
pub const g_io_scheduler_cancel_all_jobs = _frida_g_io_scheduler_cancel_all_jobs;
pub const g_io_scheduler_job_send_to_mainloop = _frida_g_io_scheduler_job_send_to_mainloop;
pub const g_io_scheduler_job_send_to_mainloop_async = _frida_g_io_scheduler_job_send_to_mainloop_async;
pub const g_io_scheduler_push_job = _frida_g_io_scheduler_push_job;
pub const g_io_stream_clear_pending = _frida_g_io_stream_clear_pending;
pub const g_io_stream_close = _frida_g_io_stream_close;
pub const g_io_stream_close_async = _frida_g_io_stream_close_async;
pub const g_io_stream_close_finish = _frida_g_io_stream_close_finish;
pub const g_io_stream_get_input_stream = _frida_g_io_stream_get_input_stream;
pub const g_io_stream_get_output_stream = _frida_g_io_stream_get_output_stream;
pub const g_io_stream_get_type = _frida_g_io_stream_get_type;
pub const g_io_stream_has_pending = _frida_g_io_stream_has_pending;
pub const g_io_stream_is_closed = _frida_g_io_stream_is_closed;
pub const g_io_stream_set_pending = _frida_g_io_stream_set_pending;
pub const g_io_stream_splice_async = _frida_g_io_stream_splice_async;
pub const g_io_stream_splice_finish = _frida_g_io_stream_splice_finish;
pub const g_io_stream_splice_flags_get_type = _frida_g_io_stream_splice_flags_get_type;
pub const g_io_watch_funcs = _frida_g_io_watch_funcs;
pub const g_key_file_error_quark = _frida_g_key_file_error_quark;
pub const g_key_file_free = _frida_g_key_file_free;
pub const g_key_file_get_boolean = _frida_g_key_file_get_boolean;
pub const g_key_file_get_boolean_list = _frida_g_key_file_get_boolean_list;
pub const g_key_file_get_comment = _frida_g_key_file_get_comment;
pub const g_key_file_get_double = _frida_g_key_file_get_double;
pub const g_key_file_get_double_list = _frida_g_key_file_get_double_list;
pub const g_key_file_get_groups = _frida_g_key_file_get_groups;
pub const g_key_file_get_int64 = _frida_g_key_file_get_int64;
pub const g_key_file_get_integer = _frida_g_key_file_get_integer;
pub const g_key_file_get_integer_list = _frida_g_key_file_get_integer_list;
pub const g_key_file_get_keys = _frida_g_key_file_get_keys;
pub const g_key_file_get_locale_for_key = _frida_g_key_file_get_locale_for_key;
pub const g_key_file_get_locale_string = _frida_g_key_file_get_locale_string;
pub const g_key_file_get_locale_string_list = _frida_g_key_file_get_locale_string_list;
pub const g_key_file_get_start_group = _frida_g_key_file_get_start_group;
pub const g_key_file_get_string = _frida_g_key_file_get_string;
pub const g_key_file_get_string_list = _frida_g_key_file_get_string_list;
pub const g_key_file_get_type = _frida_g_key_file_get_type;
pub const g_key_file_get_uint64 = _frida_g_key_file_get_uint64;
pub const g_key_file_get_value = _frida_g_key_file_get_value;
pub const g_key_file_has_group = _frida_g_key_file_has_group;
pub const g_key_file_has_key = _frida_g_key_file_has_key;
pub const g_key_file_load_from_bytes = _frida_g_key_file_load_from_bytes;
pub const g_key_file_load_from_data = _frida_g_key_file_load_from_data;
pub const g_key_file_load_from_data_dirs = _frida_g_key_file_load_from_data_dirs;
pub const g_key_file_load_from_dirs = _frida_g_key_file_load_from_dirs;
pub const g_key_file_load_from_file = _frida_g_key_file_load_from_file;
pub const g_key_file_new = _frida_g_key_file_new;
pub const g_key_file_ref = _frida_g_key_file_ref;
pub const g_key_file_remove_comment = _frida_g_key_file_remove_comment;
pub const g_key_file_remove_group = _frida_g_key_file_remove_group;
pub const g_key_file_remove_key = _frida_g_key_file_remove_key;
pub const g_key_file_save_to_file = _frida_g_key_file_save_to_file;
pub const g_key_file_set_boolean = _frida_g_key_file_set_boolean;
pub const g_key_file_set_boolean_list = _frida_g_key_file_set_boolean_list;
pub const g_key_file_set_comment = _frida_g_key_file_set_comment;
pub const g_key_file_set_double = _frida_g_key_file_set_double;
pub const g_key_file_set_double_list = _frida_g_key_file_set_double_list;
pub const g_key_file_set_int64 = _frida_g_key_file_set_int64;
pub const g_key_file_set_integer = _frida_g_key_file_set_integer;
pub const g_key_file_set_integer_list = _frida_g_key_file_set_integer_list;
pub const g_key_file_set_list_separator = _frida_g_key_file_set_list_separator;
pub const g_key_file_set_locale_string = _frida_g_key_file_set_locale_string;
pub const g_key_file_set_locale_string_list = _frida_g_key_file_set_locale_string_list;
pub const g_key_file_set_string = _frida_g_key_file_set_string;
pub const g_key_file_set_string_list = _frida_g_key_file_set_string_list;
pub const g_key_file_set_uint64 = _frida_g_key_file_set_uint64;
pub const g_key_file_set_value = _frida_g_key_file_set_value;
pub const g_key_file_to_data = _frida_g_key_file_to_data;
pub const g_key_file_unref = _frida_g_key_file_unref;
pub const g_list_alloc = _frida_g_list_alloc;
pub const g_list_append = _frida_g_list_append;
pub const g_list_concat = _frida_g_list_concat;
pub const g_list_copy = _frida_g_list_copy;
pub const g_list_copy_deep = _frida_g_list_copy_deep;
pub const g_list_delete_link = _frida_g_list_delete_link;
pub const g_list_find = _frida_g_list_find;
pub const g_list_find_custom = _frida_g_list_find_custom;
pub const g_list_first = _frida_g_list_first;
pub const g_list_foreach = _frida_g_list_foreach;
pub const g_list_free = _frida_g_list_free;
pub const g_list_free_1 = _frida_g_list_free_1;
pub const g_list_free_full = _frida_g_list_free_full;
pub const g_list_index = _frida_g_list_index;
pub const g_list_insert = _frida_g_list_insert;
pub const g_list_insert_before = _frida_g_list_insert_before;
pub const g_list_insert_before_link = _frida_g_list_insert_before_link;
pub const g_list_insert_sorted = _frida_g_list_insert_sorted;
pub const g_list_insert_sorted_with_data = _frida_g_list_insert_sorted_with_data;
pub const g_list_last = _frida_g_list_last;
pub const g_list_length = _frida_g_list_length;
pub const g_list_model_get_item = _frida_g_list_model_get_item;
pub const g_list_model_get_item_type = _frida_g_list_model_get_item_type;
pub const g_list_model_get_n_items = _frida_g_list_model_get_n_items;
pub const g_list_model_get_object = _frida_g_list_model_get_object;
pub const g_list_model_get_type = _frida_g_list_model_get_type;
pub const g_list_model_items_changed = _frida_g_list_model_items_changed;
pub const g_list_nth = _frida_g_list_nth;
pub const g_list_nth_data = _frida_g_list_nth_data;
pub const g_list_nth_prev = _frida_g_list_nth_prev;
pub const g_list_pop_allocator = _frida_g_list_pop_allocator;
pub const g_list_position = _frida_g_list_position;
pub const g_list_prepend = _frida_g_list_prepend;
pub const g_list_push_allocator = _frida_g_list_push_allocator;
pub const g_list_remove = _frida_g_list_remove;
pub const g_list_remove_all = _frida_g_list_remove_all;
pub const g_list_remove_link = _frida_g_list_remove_link;
pub const g_list_reverse = _frida_g_list_reverse;
pub const g_list_sort = _frida_g_list_sort;
pub const g_list_sort_with_data = _frida_g_list_sort_with_data;
pub const g_list_store_append = _frida_g_list_store_append;
pub const g_list_store_find = _frida_g_list_store_find;
pub const g_list_store_find_with_equal_func = _frida_g_list_store_find_with_equal_func;
pub const g_list_store_find_with_equal_func_full = _frida_g_list_store_find_with_equal_func_full;
pub const g_list_store_get_type = _frida_g_list_store_get_type;
pub const g_list_store_insert = _frida_g_list_store_insert;
pub const g_list_store_insert_sorted = _frida_g_list_store_insert_sorted;
pub const g_list_store_new = _frida_g_list_store_new;
pub const g_list_store_remove = _frida_g_list_store_remove;
pub const g_list_store_remove_all = _frida_g_list_store_remove_all;
pub const g_list_store_sort = _frida_g_list_store_sort;
pub const g_list_store_splice = _frida_g_list_store_splice;
pub const g_listenv = _frida_g_listenv;
pub const g_loadable_icon_get_type = _frida_g_loadable_icon_get_type;
pub const g_loadable_icon_load = _frida_g_loadable_icon_load;
pub const g_loadable_icon_load_async = _frida_g_loadable_icon_load_async;
pub const g_loadable_icon_load_finish = _frida_g_loadable_icon_load_finish;
pub const g_locale_from_utf8 = _frida_g_locale_from_utf8;
pub const g_locale_to_utf8 = _frida_g_locale_to_utf8;
pub const g_log = _frida_g_log;
pub const g_log_default_handler = _frida_g_log_default_handler;
pub const g_log_get_debug_enabled = _frida_g_log_get_debug_enabled;
pub const g_log_remove_handler = _frida_g_log_remove_handler;
pub const g_log_set_always_fatal = _frida_g_log_set_always_fatal;
pub const g_log_set_debug_enabled = _frida_g_log_set_debug_enabled;
pub const g_log_set_default_handler = _frida_g_log_set_default_handler;
pub const g_log_set_fatal_mask = _frida_g_log_set_fatal_mask;
pub const g_log_set_handler = _frida_g_log_set_handler;
pub const g_log_set_handler_full = _frida_g_log_set_handler_full;
pub const g_log_set_writer_func = _frida_g_log_set_writer_func;
pub const g_log_structured = _frida_g_log_structured;
pub const g_log_structured_array = _frida_g_log_structured_array;
pub const g_log_structured_standard = _frida_g_log_structured_standard;
pub const g_log_variant = _frida_g_log_variant;
pub const g_log_writer_default = _frida_g_log_writer_default;
pub const g_log_writer_default_set_use_stderr = _frida_g_log_writer_default_set_use_stderr;
pub const g_log_writer_default_would_drop = _frida_g_log_writer_default_would_drop;
pub const g_log_writer_format_fields = _frida_g_log_writer_format_fields;
pub const g_log_writer_is_journald = _frida_g_log_writer_is_journald;
pub const g_log_writer_journald = _frida_g_log_writer_journald;
pub const g_log_writer_standard_streams = _frida_g_log_writer_standard_streams;
pub const g_log_writer_supports_color = _frida_g_log_writer_supports_color;
pub const g_logv = _frida_g_logv;
pub const g_main_context_acquire = _frida_g_main_context_acquire;
pub const g_main_context_add_poll = _frida_g_main_context_add_poll;
pub const g_main_context_check = _frida_g_main_context_check;
pub const g_main_context_default = _frida_g_main_context_default;
pub const g_main_context_dispatch = _frida_g_main_context_dispatch;
pub const g_main_context_find_source_by_funcs_user_data = _frida_g_main_context_find_source_by_funcs_user_data;
pub const g_main_context_find_source_by_id = _frida_g_main_context_find_source_by_id;
pub const g_main_context_find_source_by_user_data = _frida_g_main_context_find_source_by_user_data;
pub const g_main_context_get_poll_func = _frida_g_main_context_get_poll_func;
pub const g_main_context_get_thread_default = _frida_g_main_context_get_thread_default;
pub const g_main_context_get_type = _frida_g_main_context_get_type;
pub const g_main_context_invoke = _frida_g_main_context_invoke;
pub const g_main_context_invoke_full = _frida_g_main_context_invoke_full;
pub const g_main_context_is_owner = _frida_g_main_context_is_owner;
pub const g_main_context_iteration = _frida_g_main_context_iteration;
pub const g_main_context_new = _frida_g_main_context_new;
pub const g_main_context_new_with_flags = _frida_g_main_context_new_with_flags;
pub const g_main_context_pending = _frida_g_main_context_pending;
pub const g_main_context_pop_thread_default = _frida_g_main_context_pop_thread_default;
pub const g_main_context_prepare = _frida_g_main_context_prepare;
pub const g_main_context_push_thread_default = _frida_g_main_context_push_thread_default;
pub const g_main_context_query = _frida_g_main_context_query;
pub const g_main_context_ref = _frida_g_main_context_ref;
pub const g_main_context_ref_thread_default = _frida_g_main_context_ref_thread_default;
pub const g_main_context_release = _frida_g_main_context_release;
pub const g_main_context_remove_poll = _frida_g_main_context_remove_poll;
pub const g_main_context_set_poll_func = _frida_g_main_context_set_poll_func;
pub const g_main_context_unref = _frida_g_main_context_unref;
pub const g_main_context_wait = _frida_g_main_context_wait;
pub const g_main_context_wakeup = _frida_g_main_context_wakeup;
pub const g_main_current_source = _frida_g_main_current_source;
pub const g_main_depth = _frida_g_main_depth;
pub const g_main_loop_get_context = _frida_g_main_loop_get_context;
pub const g_main_loop_get_type = _frida_g_main_loop_get_type;
pub const g_main_loop_is_running = _frida_g_main_loop_is_running;
pub const g_main_loop_new = _frida_g_main_loop_new;
pub const g_main_loop_quit = _frida_g_main_loop_quit;
pub const g_main_loop_ref = _frida_g_main_loop_ref;
pub const g_main_loop_run = _frida_g_main_loop_run;
pub const g_main_loop_unref = _frida_g_main_loop_unref;
pub const g_malloc = _frida_g_malloc;
pub const g_malloc0 = _frida_g_malloc0;
pub const g_malloc0_n = _frida_g_malloc0_n;
pub const g_malloc_n = _frida_g_malloc_n;
pub const g_mapped_file_free = _frida_g_mapped_file_free;
pub const g_mapped_file_get_bytes = _frida_g_mapped_file_get_bytes;
pub const g_mapped_file_get_contents = _frida_g_mapped_file_get_contents;
pub const g_mapped_file_get_length = _frida_g_mapped_file_get_length;
pub const g_mapped_file_get_type = _frida_g_mapped_file_get_type;
pub const g_mapped_file_new = _frida_g_mapped_file_new;
pub const g_mapped_file_new_from_fd = _frida_g_mapped_file_new_from_fd;
pub const g_mapped_file_ref = _frida_g_mapped_file_ref;
pub const g_mapped_file_unref = _frida_g_mapped_file_unref;
pub const g_markup_collect_attributes = _frida_g_markup_collect_attributes;
pub const g_markup_error_quark = _frida_g_markup_error_quark;
pub const g_markup_escape_text = _frida_g_markup_escape_text;
pub const g_markup_parse_context_end_parse = _frida_g_markup_parse_context_end_parse;
pub const g_markup_parse_context_free = _frida_g_markup_parse_context_free;
pub const g_markup_parse_context_get_element = _frida_g_markup_parse_context_get_element;
pub const g_markup_parse_context_get_element_stack = _frida_g_markup_parse_context_get_element_stack;
pub const g_markup_parse_context_get_position = _frida_g_markup_parse_context_get_position;
pub const g_markup_parse_context_get_type = _frida_g_markup_parse_context_get_type;
pub const g_markup_parse_context_get_user_data = _frida_g_markup_parse_context_get_user_data;
pub const g_markup_parse_context_new = _frida_g_markup_parse_context_new;
pub const g_markup_parse_context_parse = _frida_g_markup_parse_context_parse;
pub const g_markup_parse_context_pop = _frida_g_markup_parse_context_pop;
pub const g_markup_parse_context_push = _frida_g_markup_parse_context_push;
pub const g_markup_parse_context_ref = _frida_g_markup_parse_context_ref;
pub const g_markup_parse_context_unref = _frida_g_markup_parse_context_unref;
pub const g_markup_printf_escaped = _frida_g_markup_printf_escaped;
pub const g_markup_vprintf_escaped = _frida_g_markup_vprintf_escaped;
pub const g_match_info_expand_references = _frida_g_match_info_expand_references;
pub const g_match_info_fetch = _frida_g_match_info_fetch;
pub const g_match_info_fetch_all = _frida_g_match_info_fetch_all;
pub const g_match_info_fetch_named = _frida_g_match_info_fetch_named;
pub const g_match_info_fetch_named_pos = _frida_g_match_info_fetch_named_pos;
pub const g_match_info_fetch_pos = _frida_g_match_info_fetch_pos;
pub const g_match_info_free = _frida_g_match_info_free;
pub const g_match_info_get_match_count = _frida_g_match_info_get_match_count;
pub const g_match_info_get_regex = _frida_g_match_info_get_regex;
pub const g_match_info_get_string = _frida_g_match_info_get_string;
pub const g_match_info_get_type = _frida_g_match_info_get_type;
pub const g_match_info_is_partial_match = _frida_g_match_info_is_partial_match;
pub const g_match_info_matches = _frida_g_match_info_matches;
pub const g_match_info_next = _frida_g_match_info_next;
pub const g_match_info_ref = _frida_g_match_info_ref;
pub const g_match_info_unref = _frida_g_match_info_unref;
pub const g_mem_chunk_alloc = _frida_g_mem_chunk_alloc;
pub const g_mem_chunk_alloc0 = _frida_g_mem_chunk_alloc0;
pub const g_mem_chunk_clean = _frida_g_mem_chunk_clean;
pub const g_mem_chunk_destroy = _frida_g_mem_chunk_destroy;
pub const g_mem_chunk_free = _frida_g_mem_chunk_free;
pub const g_mem_chunk_info = _frida_g_mem_chunk_info;
pub const g_mem_chunk_new = _frida_g_mem_chunk_new;
pub const g_mem_chunk_print = _frida_g_mem_chunk_print;
pub const g_mem_chunk_reset = _frida_g_mem_chunk_reset;
pub const g_mem_gc_friendly = _frida_g_mem_gc_friendly;
pub const g_mem_is_system_malloc = _frida_g_mem_is_system_malloc;
pub const g_mem_profile = _frida_g_mem_profile;
pub const g_mem_set_vtable = _frida_g_mem_set_vtable;
pub const g_memdup = _frida_g_memdup;
pub const g_memdup2 = _frida_g_memdup2;
pub const g_memory_input_stream_add_bytes = _frida_g_memory_input_stream_add_bytes;
pub const g_memory_input_stream_add_data = _frida_g_memory_input_stream_add_data;
pub const g_memory_input_stream_get_type = _frida_g_memory_input_stream_get_type;
pub const g_memory_input_stream_new = _frida_g_memory_input_stream_new;
pub const g_memory_input_stream_new_from_bytes = _frida_g_memory_input_stream_new_from_bytes;
pub const g_memory_input_stream_new_from_data = _frida_g_memory_input_stream_new_from_data;
pub const g_memory_monitor_dup_default = _frida_g_memory_monitor_dup_default;
pub const g_memory_monitor_get_type = _frida_g_memory_monitor_get_type;
pub const g_memory_monitor_warning_level_get_type = _frida_g_memory_monitor_warning_level_get_type;
pub const g_memory_output_stream_get_data = _frida_g_memory_output_stream_get_data;
pub const g_memory_output_stream_get_data_size = _frida_g_memory_output_stream_get_data_size;
pub const g_memory_output_stream_get_size = _frida_g_memory_output_stream_get_size;
pub const g_memory_output_stream_get_type = _frida_g_memory_output_stream_get_type;
pub const g_memory_output_stream_new = _frida_g_memory_output_stream_new;
pub const g_memory_output_stream_new_resizable = _frida_g_memory_output_stream_new_resizable;
pub const g_memory_output_stream_steal_as_bytes = _frida_g_memory_output_stream_steal_as_bytes;
pub const g_memory_output_stream_steal_data = _frida_g_memory_output_stream_steal_data;
pub const g_menu_append = _frida_g_menu_append;
pub const g_menu_append_item = _frida_g_menu_append_item;
pub const g_menu_append_section = _frida_g_menu_append_section;
pub const g_menu_append_submenu = _frida_g_menu_append_submenu;
pub const g_menu_attribute_iter_get_name = _frida_g_menu_attribute_iter_get_name;
pub const g_menu_attribute_iter_get_next = _frida_g_menu_attribute_iter_get_next;
pub const g_menu_attribute_iter_get_type = _frida_g_menu_attribute_iter_get_type;
pub const g_menu_attribute_iter_get_value = _frida_g_menu_attribute_iter_get_value;
pub const g_menu_attribute_iter_next = _frida_g_menu_attribute_iter_next;
pub const g_menu_freeze = _frida_g_menu_freeze;
pub const g_menu_get_type = _frida_g_menu_get_type;
pub const g_menu_insert = _frida_g_menu_insert;
pub const g_menu_insert_item = _frida_g_menu_insert_item;
pub const g_menu_insert_section = _frida_g_menu_insert_section;
pub const g_menu_insert_submenu = _frida_g_menu_insert_submenu;
pub const g_menu_item_get_attribute = _frida_g_menu_item_get_attribute;
pub const g_menu_item_get_attribute_value = _frida_g_menu_item_get_attribute_value;
pub const g_menu_item_get_link = _frida_g_menu_item_get_link;
pub const g_menu_item_get_type = _frida_g_menu_item_get_type;
pub const g_menu_item_new = _frida_g_menu_item_new;
pub const g_menu_item_new_from_model = _frida_g_menu_item_new_from_model;
pub const g_menu_item_new_section = _frida_g_menu_item_new_section;
pub const g_menu_item_new_submenu = _frida_g_menu_item_new_submenu;
pub const g_menu_item_set_action_and_target = _frida_g_menu_item_set_action_and_target;
pub const g_menu_item_set_action_and_target_value = _frida_g_menu_item_set_action_and_target_value;
pub const g_menu_item_set_attribute = _frida_g_menu_item_set_attribute;
pub const g_menu_item_set_attribute_value = _frida_g_menu_item_set_attribute_value;
pub const g_menu_item_set_detailed_action = _frida_g_menu_item_set_detailed_action;
pub const g_menu_item_set_icon = _frida_g_menu_item_set_icon;
pub const g_menu_item_set_label = _frida_g_menu_item_set_label;
pub const g_menu_item_set_link = _frida_g_menu_item_set_link;
pub const g_menu_item_set_section = _frida_g_menu_item_set_section;
pub const g_menu_item_set_submenu = _frida_g_menu_item_set_submenu;
pub const g_menu_link_iter_get_name = _frida_g_menu_link_iter_get_name;
pub const g_menu_link_iter_get_next = _frida_g_menu_link_iter_get_next;
pub const g_menu_link_iter_get_type = _frida_g_menu_link_iter_get_type;
pub const g_menu_link_iter_get_value = _frida_g_menu_link_iter_get_value;
pub const g_menu_link_iter_next = _frida_g_menu_link_iter_next;
pub const g_menu_model_get_item_attribute = _frida_g_menu_model_get_item_attribute;
pub const g_menu_model_get_item_attribute_value = _frida_g_menu_model_get_item_attribute_value;
pub const g_menu_model_get_item_link = _frida_g_menu_model_get_item_link;
pub const g_menu_model_get_n_items = _frida_g_menu_model_get_n_items;
pub const g_menu_model_get_type = _frida_g_menu_model_get_type;
pub const g_menu_model_is_mutable = _frida_g_menu_model_is_mutable;
pub const g_menu_model_items_changed = _frida_g_menu_model_items_changed;
pub const g_menu_model_iterate_item_attributes = _frida_g_menu_model_iterate_item_attributes;
pub const g_menu_model_iterate_item_links = _frida_g_menu_model_iterate_item_links;
pub const g_menu_new = _frida_g_menu_new;
pub const g_menu_prepend = _frida_g_menu_prepend;
pub const g_menu_prepend_item = _frida_g_menu_prepend_item;
pub const g_menu_prepend_section = _frida_g_menu_prepend_section;
pub const g_menu_prepend_submenu = _frida_g_menu_prepend_submenu;
pub const g_menu_remove = _frida_g_menu_remove;
pub const g_menu_remove_all = _frida_g_menu_remove_all;
pub const g_mkdir_with_parents = _frida_g_mkdir_with_parents;
pub const g_mkdtemp = _frida_g_mkdtemp;
pub const g_mkdtemp_full = _frida_g_mkdtemp_full;
pub const g_mkstemp = _frida_g_mkstemp;
pub const g_mkstemp_full = _frida_g_mkstemp_full;
pub const g_module_build_path = _frida_g_module_build_path;
pub const g_module_close = _frida_g_module_close;
pub const g_module_error = _frida_g_module_error;
pub const g_module_error_quark = _frida_g_module_error_quark;
pub const g_module_make_resident = _frida_g_module_make_resident;
pub const g_module_name = _frida_g_module_name;
pub const g_module_open = _frida_g_module_open;
pub const g_module_open_full = _frida_g_module_open_full;
pub const g_module_supported = _frida_g_module_supported;
pub const g_module_symbol = _frida_g_module_symbol;
pub const g_mount_can_eject = _frida_g_mount_can_eject;
pub const g_mount_can_unmount = _frida_g_mount_can_unmount;
pub const g_mount_eject = _frida_g_mount_eject;
pub const g_mount_eject_finish = _frida_g_mount_eject_finish;
pub const g_mount_eject_with_operation = _frida_g_mount_eject_with_operation;
pub const g_mount_eject_with_operation_finish = _frida_g_mount_eject_with_operation_finish;
pub const g_mount_get_default_location = _frida_g_mount_get_default_location;
pub const g_mount_get_drive = _frida_g_mount_get_drive;
pub const g_mount_get_icon = _frida_g_mount_get_icon;
pub const g_mount_get_name = _frida_g_mount_get_name;
pub const g_mount_get_root = _frida_g_mount_get_root;
pub const g_mount_get_sort_key = _frida_g_mount_get_sort_key;
pub const g_mount_get_symbolic_icon = _frida_g_mount_get_symbolic_icon;
pub const g_mount_get_type = _frida_g_mount_get_type;
pub const g_mount_get_uuid = _frida_g_mount_get_uuid;
pub const g_mount_get_volume = _frida_g_mount_get_volume;
pub const g_mount_guess_content_type = _frida_g_mount_guess_content_type;
pub const g_mount_guess_content_type_finish = _frida_g_mount_guess_content_type_finish;
pub const g_mount_guess_content_type_sync = _frida_g_mount_guess_content_type_sync;
pub const g_mount_is_shadowed = _frida_g_mount_is_shadowed;
pub const g_mount_mount_flags_get_type = _frida_g_mount_mount_flags_get_type;
pub const g_mount_operation_get_anonymous = _frida_g_mount_operation_get_anonymous;
pub const g_mount_operation_get_choice = _frida_g_mount_operation_get_choice;
pub const g_mount_operation_get_domain = _frida_g_mount_operation_get_domain;
pub const g_mount_operation_get_is_tcrypt_hidden_volume = _frida_g_mount_operation_get_is_tcrypt_hidden_volume;
pub const g_mount_operation_get_is_tcrypt_system_volume = _frida_g_mount_operation_get_is_tcrypt_system_volume;
pub const g_mount_operation_get_password = _frida_g_mount_operation_get_password;
pub const g_mount_operation_get_password_save = _frida_g_mount_operation_get_password_save;
pub const g_mount_operation_get_pim = _frida_g_mount_operation_get_pim;
pub const g_mount_operation_get_type = _frida_g_mount_operation_get_type;
pub const g_mount_operation_get_username = _frida_g_mount_operation_get_username;
pub const g_mount_operation_new = _frida_g_mount_operation_new;
pub const g_mount_operation_reply = _frida_g_mount_operation_reply;
pub const g_mount_operation_result_get_type = _frida_g_mount_operation_result_get_type;
pub const g_mount_operation_set_anonymous = _frida_g_mount_operation_set_anonymous;
pub const g_mount_operation_set_choice = _frida_g_mount_operation_set_choice;
pub const g_mount_operation_set_domain = _frida_g_mount_operation_set_domain;
pub const g_mount_operation_set_is_tcrypt_hidden_volume = _frida_g_mount_operation_set_is_tcrypt_hidden_volume;
pub const g_mount_operation_set_is_tcrypt_system_volume = _frida_g_mount_operation_set_is_tcrypt_system_volume;
pub const g_mount_operation_set_password = _frida_g_mount_operation_set_password;
pub const g_mount_operation_set_password_save = _frida_g_mount_operation_set_password_save;
pub const g_mount_operation_set_pim = _frida_g_mount_operation_set_pim;
pub const g_mount_operation_set_username = _frida_g_mount_operation_set_username;
pub const g_mount_remount = _frida_g_mount_remount;
pub const g_mount_remount_finish = _frida_g_mount_remount_finish;
pub const g_mount_shadow = _frida_g_mount_shadow;
pub const g_mount_unmount = _frida_g_mount_unmount;
pub const g_mount_unmount_finish = _frida_g_mount_unmount_finish;
pub const g_mount_unmount_flags_get_type = _frida_g_mount_unmount_flags_get_type;
pub const g_mount_unmount_with_operation = _frida_g_mount_unmount_with_operation;
pub const g_mount_unmount_with_operation_finish = _frida_g_mount_unmount_with_operation_finish;
pub const g_mount_unshadow = _frida_g_mount_unshadow;
pub const g_mutex_clear = _frida_g_mutex_clear;
pub const g_mutex_free = _frida_g_mutex_free;
pub const g_mutex_init = _frida_g_mutex_init;
pub const g_mutex_lock = _frida_g_mutex_lock;
pub const g_mutex_new = _frida_g_mutex_new;
pub const g_mutex_trylock = _frida_g_mutex_trylock;
pub const g_mutex_unlock = _frida_g_mutex_unlock;
pub const g_native_socket_address_get_type = _frida_g_native_socket_address_get_type;
pub const g_native_socket_address_new = _frida_g_native_socket_address_new;
pub const g_native_volume_monitor_get_type = _frida_g_native_volume_monitor_get_type;
pub const g_network_address_get_hostname = _frida_g_network_address_get_hostname;
pub const g_network_address_get_port = _frida_g_network_address_get_port;
pub const g_network_address_get_scheme = _frida_g_network_address_get_scheme;
pub const g_network_address_get_type = _frida_g_network_address_get_type;
pub const g_network_address_new = _frida_g_network_address_new;
pub const g_network_address_new_loopback = _frida_g_network_address_new_loopback;
pub const g_network_address_parse = _frida_g_network_address_parse;
pub const g_network_address_parse_uri = _frida_g_network_address_parse_uri;
pub const g_network_connectivity_get_type = _frida_g_network_connectivity_get_type;
pub const g_network_monitor_can_reach = _frida_g_network_monitor_can_reach;
pub const g_network_monitor_can_reach_async = _frida_g_network_monitor_can_reach_async;
pub const g_network_monitor_can_reach_finish = _frida_g_network_monitor_can_reach_finish;
pub const g_network_monitor_get_connectivity = _frida_g_network_monitor_get_connectivity;
pub const g_network_monitor_get_default = _frida_g_network_monitor_get_default;
pub const g_network_monitor_get_network_available = _frida_g_network_monitor_get_network_available;
pub const g_network_monitor_get_network_metered = _frida_g_network_monitor_get_network_metered;
pub const g_network_monitor_get_type = _frida_g_network_monitor_get_type;
pub const g_network_service_get_domain = _frida_g_network_service_get_domain;
pub const g_network_service_get_protocol = _frida_g_network_service_get_protocol;
pub const g_network_service_get_scheme = _frida_g_network_service_get_scheme;
pub const g_network_service_get_service = _frida_g_network_service_get_service;
pub const g_network_service_get_type = _frida_g_network_service_get_type;
pub const g_network_service_new = _frida_g_network_service_new;
pub const g_network_service_set_scheme = _frida_g_network_service_set_scheme;
pub const g_node_child_index = _frida_g_node_child_index;
pub const g_node_child_position = _frida_g_node_child_position;
pub const g_node_children_foreach = _frida_g_node_children_foreach;
pub const g_node_copy = _frida_g_node_copy;
pub const g_node_copy_deep = _frida_g_node_copy_deep;
pub const g_node_depth = _frida_g_node_depth;
pub const g_node_destroy = _frida_g_node_destroy;
pub const g_node_find = _frida_g_node_find;
pub const g_node_find_child = _frida_g_node_find_child;
pub const g_node_first_sibling = _frida_g_node_first_sibling;
pub const g_node_get_root = _frida_g_node_get_root;
pub const g_node_insert = _frida_g_node_insert;
pub const g_node_insert_after = _frida_g_node_insert_after;
pub const g_node_insert_before = _frida_g_node_insert_before;
pub const g_node_is_ancestor = _frida_g_node_is_ancestor;
pub const g_node_last_child = _frida_g_node_last_child;
pub const g_node_last_sibling = _frida_g_node_last_sibling;
pub const g_node_max_height = _frida_g_node_max_height;
pub const g_node_n_children = _frida_g_node_n_children;
pub const g_node_n_nodes = _frida_g_node_n_nodes;
pub const g_node_new = _frida_g_node_new;
pub const g_node_nth_child = _frida_g_node_nth_child;
pub const g_node_pop_allocator = _frida_g_node_pop_allocator;
pub const g_node_prepend = _frida_g_node_prepend;
pub const g_node_push_allocator = _frida_g_node_push_allocator;
pub const g_node_reverse_children = _frida_g_node_reverse_children;
pub const g_node_traverse = _frida_g_node_traverse;
pub const g_node_unlink = _frida_g_node_unlink;
pub const g_normalize_mode_get_type = _frida_g_normalize_mode_get_type;
pub const g_notification_add_button = _frida_g_notification_add_button;
pub const g_notification_add_button_with_target = _frida_g_notification_add_button_with_target;
pub const g_notification_add_button_with_target_value = _frida_g_notification_add_button_with_target_value;
pub const g_notification_get_type = _frida_g_notification_get_type;
pub const g_notification_new = _frida_g_notification_new;
pub const g_notification_priority_get_type = _frida_g_notification_priority_get_type;
pub const g_notification_set_body = _frida_g_notification_set_body;
pub const g_notification_set_category = _frida_g_notification_set_category;
pub const g_notification_set_default_action = _frida_g_notification_set_default_action;
pub const g_notification_set_default_action_and_target = _frida_g_notification_set_default_action_and_target;
pub const g_notification_set_default_action_and_target_value = _frida_g_notification_set_default_action_and_target_value;
pub const g_notification_set_icon = _frida_g_notification_set_icon;
pub const g_notification_set_priority = _frida_g_notification_set_priority;
pub const g_notification_set_title = _frida_g_notification_set_title;
pub const g_notification_set_urgent = _frida_g_notification_set_urgent;
pub const g_nullify_pointer = _frida_g_nullify_pointer;
pub const g_number_parser_error_quark = _frida_g_number_parser_error_quark;
pub const g_object_add_toggle_ref = _frida_g_object_add_toggle_ref;
pub const g_object_add_weak_pointer = _frida_g_object_add_weak_pointer;
pub const g_object_bind_property = _frida_g_object_bind_property;
pub const g_object_bind_property_full = _frida_g_object_bind_property_full;
pub const g_object_bind_property_with_closures = _frida_g_object_bind_property_with_closures;
pub const g_object_class_find_property = _frida_g_object_class_find_property;
pub const g_object_class_install_properties = _frida_g_object_class_install_properties;
pub const g_object_class_install_property = _frida_g_object_class_install_property;
pub const g_object_class_list_properties = _frida_g_object_class_list_properties;
pub const g_object_class_override_property = _frida_g_object_class_override_property;
pub const g_object_compat_control = _frida_g_object_compat_control;
pub const g_object_connect = _frida_g_object_connect;
pub const g_object_disconnect = _frida_g_object_disconnect;
pub const g_object_dup_data = _frida_g_object_dup_data;
pub const g_object_dup_qdata = _frida_g_object_dup_qdata;
pub const g_object_force_floating = _frida_g_object_force_floating;
pub const g_object_freeze_notify = _frida_g_object_freeze_notify;
pub const g_object_get = _frida_g_object_get;
pub const g_object_get_data = _frida_g_object_get_data;
pub const g_object_get_property = _frida_g_object_get_property;
pub const g_object_get_qdata = _frida_g_object_get_qdata;
pub const g_object_get_type = _frida_g_object_get_type;
pub const g_object_get_valist = _frida_g_object_get_valist;
pub const g_object_getv = _frida_g_object_getv;
pub const g_object_interface_find_property = _frida_g_object_interface_find_property;
pub const g_object_interface_install_property = _frida_g_object_interface_install_property;
pub const g_object_interface_list_properties = _frida_g_object_interface_list_properties;
pub const g_object_is_floating = _frida_g_object_is_floating;
pub const g_object_new = _frida_g_object_new;
pub const g_object_new_valist = _frida_g_object_new_valist;
pub const g_object_new_with_properties = _frida_g_object_new_with_properties;
pub const g_object_newv = _frida_g_object_newv;
pub const g_object_notify = _frida_g_object_notify;
pub const g_object_notify_by_pspec = _frida_g_object_notify_by_pspec;
pub const g_object_ref = _frida_g_object_ref;
pub const g_object_ref_sink = _frida_g_object_ref_sink;
pub const g_object_remove_toggle_ref = _frida_g_object_remove_toggle_ref;
pub const g_object_remove_weak_pointer = _frida_g_object_remove_weak_pointer;
pub const g_object_replace_data = _frida_g_object_replace_data;
pub const g_object_replace_qdata = _frida_g_object_replace_qdata;
pub const g_object_run_dispose = _frida_g_object_run_dispose;
pub const g_object_set = _frida_g_object_set;
pub const g_object_set_data = _frida_g_object_set_data;
pub const g_object_set_data_full = _frida_g_object_set_data_full;
pub const g_object_set_property = _frida_g_object_set_property;
pub const g_object_set_qdata = _frida_g_object_set_qdata;
pub const g_object_set_qdata_full = _frida_g_object_set_qdata_full;
pub const g_object_set_valist = _frida_g_object_set_valist;
pub const g_object_setv = _frida_g_object_setv;
pub const g_object_steal_data = _frida_g_object_steal_data;
pub const g_object_steal_qdata = _frida_g_object_steal_qdata;
pub const g_object_take_ref = _frida_g_object_take_ref;
pub const g_object_thaw_notify = _frida_g_object_thaw_notify;
pub const g_object_unref = _frida_g_object_unref;
pub const g_object_watch_closure = _frida_g_object_watch_closure;
pub const g_object_weak_ref = _frida_g_object_weak_ref;
pub const g_object_weak_unref = _frida_g_object_weak_unref;
pub const g_on_error_query = _frida_g_on_error_query;
pub const g_on_error_stack_trace = _frida_g_on_error_stack_trace;
pub const g_once_impl = _frida_g_once_impl;
pub const g_once_init_enter = _frida_g_once_init_enter;
pub const g_once_init_enter_impl = _frida_g_once_init_enter_impl;
pub const g_once_init_leave = _frida_g_once_init_leave;
pub const g_option_context_add_group = _frida_g_option_context_add_group;
pub const g_option_context_add_main_entries = _frida_g_option_context_add_main_entries;
pub const g_option_context_free = _frida_g_option_context_free;
pub const g_option_context_get_description = _frida_g_option_context_get_description;
pub const g_option_context_get_help = _frida_g_option_context_get_help;
pub const g_option_context_get_help_enabled = _frida_g_option_context_get_help_enabled;
pub const g_option_context_get_ignore_unknown_options = _frida_g_option_context_get_ignore_unknown_options;
pub const g_option_context_get_main_group = _frida_g_option_context_get_main_group;
pub const g_option_context_get_strict_posix = _frida_g_option_context_get_strict_posix;
pub const g_option_context_get_summary = _frida_g_option_context_get_summary;
pub const g_option_context_new = _frida_g_option_context_new;
pub const g_option_context_parse = _frida_g_option_context_parse;
pub const g_option_context_parse_strv = _frida_g_option_context_parse_strv;
pub const g_option_context_set_description = _frida_g_option_context_set_description;
pub const g_option_context_set_help_enabled = _frida_g_option_context_set_help_enabled;
pub const g_option_context_set_ignore_unknown_options = _frida_g_option_context_set_ignore_unknown_options;
pub const g_option_context_set_main_group = _frida_g_option_context_set_main_group;
pub const g_option_context_set_strict_posix = _frida_g_option_context_set_strict_posix;
pub const g_option_context_set_summary = _frida_g_option_context_set_summary;
pub const g_option_context_set_translate_func = _frida_g_option_context_set_translate_func;
pub const g_option_context_set_translation_domain = _frida_g_option_context_set_translation_domain;
pub const g_option_error_quark = _frida_g_option_error_quark;
pub const g_option_group_add_entries = _frida_g_option_group_add_entries;
pub const g_option_group_free = _frida_g_option_group_free;
pub const g_option_group_get_type = _frida_g_option_group_get_type;
pub const g_option_group_new = _frida_g_option_group_new;
pub const g_option_group_ref = _frida_g_option_group_ref;
pub const g_option_group_set_error_hook = _frida_g_option_group_set_error_hook;
pub const g_option_group_set_parse_hooks = _frida_g_option_group_set_parse_hooks;
pub const g_option_group_set_translate_func = _frida_g_option_group_set_translate_func;
pub const g_option_group_set_translation_domain = _frida_g_option_group_set_translation_domain;
pub const g_option_group_unref = _frida_g_option_group_unref;
pub const g_output_stream_clear_pending = _frida_g_output_stream_clear_pending;
pub const g_output_stream_close = _frida_g_output_stream_close;
pub const g_output_stream_close_async = _frida_g_output_stream_close_async;
pub const g_output_stream_close_finish = _frida_g_output_stream_close_finish;
pub const g_output_stream_flush = _frida_g_output_stream_flush;
pub const g_output_stream_flush_async = _frida_g_output_stream_flush_async;
pub const g_output_stream_flush_finish = _frida_g_output_stream_flush_finish;
pub const g_output_stream_get_type = _frida_g_output_stream_get_type;
pub const g_output_stream_has_pending = _frida_g_output_stream_has_pending;
pub const g_output_stream_is_closed = _frida_g_output_stream_is_closed;
pub const g_output_stream_is_closing = _frida_g_output_stream_is_closing;
pub const g_output_stream_printf = _frida_g_output_stream_printf;
pub const g_output_stream_set_pending = _frida_g_output_stream_set_pending;
pub const g_output_stream_splice = _frida_g_output_stream_splice;
pub const g_output_stream_splice_async = _frida_g_output_stream_splice_async;
pub const g_output_stream_splice_finish = _frida_g_output_stream_splice_finish;
pub const g_output_stream_splice_flags_get_type = _frida_g_output_stream_splice_flags_get_type;
pub const g_output_stream_vprintf = _frida_g_output_stream_vprintf;
pub const g_output_stream_write = _frida_g_output_stream_write;
pub const g_output_stream_write_all = _frida_g_output_stream_write_all;
pub const g_output_stream_write_all_async = _frida_g_output_stream_write_all_async;
pub const g_output_stream_write_all_finish = _frida_g_output_stream_write_all_finish;
pub const g_output_stream_write_async = _frida_g_output_stream_write_async;
pub const g_output_stream_write_bytes = _frida_g_output_stream_write_bytes;
pub const g_output_stream_write_bytes_async = _frida_g_output_stream_write_bytes_async;
pub const g_output_stream_write_bytes_finish = _frida_g_output_stream_write_bytes_finish;
pub const g_output_stream_write_finish = _frida_g_output_stream_write_finish;
pub const g_output_stream_writev = _frida_g_output_stream_writev;
pub const g_output_stream_writev_all = _frida_g_output_stream_writev_all;
pub const g_output_stream_writev_all_async = _frida_g_output_stream_writev_all_async;
pub const g_output_stream_writev_all_finish = _frida_g_output_stream_writev_all_finish;
pub const g_output_stream_writev_async = _frida_g_output_stream_writev_async;
pub const g_output_stream_writev_finish = _frida_g_output_stream_writev_finish;
pub const g_param_spec_boolean = _frida_g_param_spec_boolean;
pub const g_param_spec_boxed = _frida_g_param_spec_boxed;
pub const g_param_spec_char = _frida_g_param_spec_char;
pub const g_param_spec_double = _frida_g_param_spec_double;
pub const g_param_spec_enum = _frida_g_param_spec_enum;
pub const g_param_spec_flags = _frida_g_param_spec_flags;
pub const g_param_spec_float = _frida_g_param_spec_float;
pub const g_param_spec_get_blurb = _frida_g_param_spec_get_blurb;
pub const g_param_spec_get_default_value = _frida_g_param_spec_get_default_value;
pub const g_param_spec_get_name = _frida_g_param_spec_get_name;
pub const g_param_spec_get_name_quark = _frida_g_param_spec_get_name_quark;
pub const g_param_spec_get_nick = _frida_g_param_spec_get_nick;
pub const g_param_spec_get_qdata = _frida_g_param_spec_get_qdata;
pub const g_param_spec_get_redirect_target = _frida_g_param_spec_get_redirect_target;
pub const g_param_spec_gtype = _frida_g_param_spec_gtype;
pub const g_param_spec_int = _frida_g_param_spec_int;
pub const g_param_spec_int64 = _frida_g_param_spec_int64;
pub const g_param_spec_internal = _frida_g_param_spec_internal;
pub const g_param_spec_is_valid_name = _frida_g_param_spec_is_valid_name;
pub const g_param_spec_long = _frida_g_param_spec_long;
pub const g_param_spec_object = _frida_g_param_spec_object;
pub const g_param_spec_override = _frida_g_param_spec_override;
pub const g_param_spec_param = _frida_g_param_spec_param;
pub const g_param_spec_pointer = _frida_g_param_spec_pointer;
pub const g_param_spec_pool_insert = _frida_g_param_spec_pool_insert;
pub const g_param_spec_pool_list = _frida_g_param_spec_pool_list;
pub const g_param_spec_pool_list_owned = _frida_g_param_spec_pool_list_owned;
pub const g_param_spec_pool_lookup = _frida_g_param_spec_pool_lookup;
pub const g_param_spec_pool_new = _frida_g_param_spec_pool_new;
pub const g_param_spec_pool_remove = _frida_g_param_spec_pool_remove;
pub const g_param_spec_ref = _frida_g_param_spec_ref;
pub const g_param_spec_ref_sink = _frida_g_param_spec_ref_sink;
pub const g_param_spec_set_qdata = _frida_g_param_spec_set_qdata;
pub const g_param_spec_set_qdata_full = _frida_g_param_spec_set_qdata_full;
pub const g_param_spec_sink = _frida_g_param_spec_sink;
pub const g_param_spec_steal_qdata = _frida_g_param_spec_steal_qdata;
pub const g_param_spec_string = _frida_g_param_spec_string;
pub const g_param_spec_types = _frida_g_param_spec_types;
pub const g_param_spec_uchar = _frida_g_param_spec_uchar;
pub const g_param_spec_uint = _frida_g_param_spec_uint;
pub const g_param_spec_uint64 = _frida_g_param_spec_uint64;
pub const g_param_spec_ulong = _frida_g_param_spec_ulong;
pub const g_param_spec_unichar = _frida_g_param_spec_unichar;
pub const g_param_spec_unref = _frida_g_param_spec_unref;
pub const g_param_spec_value_array = _frida_g_param_spec_value_array;
pub const g_param_spec_variant = _frida_g_param_spec_variant;
pub const g_param_type_register_static = _frida_g_param_type_register_static;
pub const g_param_value_convert = _frida_g_param_value_convert;
pub const g_param_value_defaults = _frida_g_param_value_defaults;
pub const g_param_value_is_valid = _frida_g_param_value_is_valid;
pub const g_param_value_set_default = _frida_g_param_value_set_default;
pub const g_param_value_validate = _frida_g_param_value_validate;
pub const g_param_values_cmp = _frida_g_param_values_cmp;
pub const g_parse_debug_string = _frida_g_parse_debug_string;
pub const g_password_save_get_type = _frida_g_password_save_get_type;
pub const g_path_get_basename = _frida_g_path_get_basename;
pub const g_path_get_dirname = _frida_g_path_get_dirname;
pub const g_path_is_absolute = _frida_g_path_is_absolute;
pub const g_path_skip_root = _frida_g_path_skip_root;
pub const g_pattern_match = _frida_g_pattern_match;
pub const g_pattern_match_simple = _frida_g_pattern_match_simple;
pub const g_pattern_match_string = _frida_g_pattern_match_string;
pub const g_pattern_spec_copy = _frida_g_pattern_spec_copy;
pub const g_pattern_spec_equal = _frida_g_pattern_spec_equal;
pub const g_pattern_spec_free = _frida_g_pattern_spec_free;
pub const g_pattern_spec_get_type = _frida_g_pattern_spec_get_type;
pub const g_pattern_spec_match = _frida_g_pattern_spec_match;
pub const g_pattern_spec_match_string = _frida_g_pattern_spec_match_string;
pub const g_pattern_spec_new = _frida_g_pattern_spec_new;
pub const g_permission_acquire = _frida_g_permission_acquire;
pub const g_permission_acquire_async = _frida_g_permission_acquire_async;
pub const g_permission_acquire_finish = _frida_g_permission_acquire_finish;
pub const g_permission_get_allowed = _frida_g_permission_get_allowed;
pub const g_permission_get_can_acquire = _frida_g_permission_get_can_acquire;
pub const g_permission_get_can_release = _frida_g_permission_get_can_release;
pub const g_permission_get_type = _frida_g_permission_get_type;
pub const g_permission_impl_update = _frida_g_permission_impl_update;
pub const g_permission_release = _frida_g_permission_release;
pub const g_permission_release_async = _frida_g_permission_release_async;
pub const g_permission_release_finish = _frida_g_permission_release_finish;
pub const g_platform_audit_set_fd_callbacks = _frida_g_platform_audit_set_fd_callbacks;
pub const g_pointer_bit_lock = _frida_g_pointer_bit_lock;
pub const g_pointer_bit_trylock = _frida_g_pointer_bit_trylock;
pub const g_pointer_bit_unlock = _frida_g_pointer_bit_unlock;
pub const g_pointer_type_register_static = _frida_g_pointer_type_register_static;
pub const g_poll = _frida_g_poll;
pub const g_pollable_input_stream_can_poll = _frida_g_pollable_input_stream_can_poll;
pub const g_pollable_input_stream_create_source = _frida_g_pollable_input_stream_create_source;
pub const g_pollable_input_stream_get_type = _frida_g_pollable_input_stream_get_type;
pub const g_pollable_input_stream_is_readable = _frida_g_pollable_input_stream_is_readable;
pub const g_pollable_input_stream_read_nonblocking = _frida_g_pollable_input_stream_read_nonblocking;
pub const g_pollable_output_stream_can_poll = _frida_g_pollable_output_stream_can_poll;
pub const g_pollable_output_stream_create_source = _frida_g_pollable_output_stream_create_source;
pub const g_pollable_output_stream_get_type = _frida_g_pollable_output_stream_get_type;
pub const g_pollable_output_stream_is_writable = _frida_g_pollable_output_stream_is_writable;
pub const g_pollable_output_stream_write_nonblocking = _frida_g_pollable_output_stream_write_nonblocking;
pub const g_pollable_output_stream_writev_nonblocking = _frida_g_pollable_output_stream_writev_nonblocking;
pub const g_pollable_return_get_type = _frida_g_pollable_return_get_type;
pub const g_pollable_source_new = _frida_g_pollable_source_new;
pub const g_pollable_source_new_full = _frida_g_pollable_source_new_full;
pub const g_pollable_stream_read = _frida_g_pollable_stream_read;
pub const g_pollable_stream_write = _frida_g_pollable_stream_write;
pub const g_pollable_stream_write_all = _frida_g_pollable_stream_write_all;
pub const g_pollfd_get_type = _frida_g_pollfd_get_type;
pub const g_power_profile_monitor_dup_default = _frida_g_power_profile_monitor_dup_default;
pub const g_power_profile_monitor_get_power_saver_enabled = _frida_g_power_profile_monitor_get_power_saver_enabled;
pub const g_power_profile_monitor_get_type = _frida_g_power_profile_monitor_get_type;
pub const g_prefix_error = _frida_g_prefix_error;
pub const g_prefix_error_literal = _frida_g_prefix_error_literal;
pub const g_print = _frida_g_print;
pub const g_printerr = _frida_g_printerr;
pub const g_printf_string_upper_bound = _frida_g_printf_string_upper_bound;
pub const g_private_get = _frida_g_private_get;
pub const g_private_new = _frida_g_private_new;
pub const g_private_replace = _frida_g_private_replace;
pub const g_private_set = _frida_g_private_set;
pub const g_propagate_error = _frida_g_propagate_error;
pub const g_propagate_prefixed_error = _frida_g_propagate_prefixed_error;
pub const g_property_action_get_type = _frida_g_property_action_get_type;
pub const g_property_action_new = _frida_g_property_action_new;
pub const g_proxy_address_enumerator_get_type = _frida_g_proxy_address_enumerator_get_type;
pub const g_proxy_address_get_destination_hostname = _frida_g_proxy_address_get_destination_hostname;
pub const g_proxy_address_get_destination_port = _frida_g_proxy_address_get_destination_port;
pub const g_proxy_address_get_destination_protocol = _frida_g_proxy_address_get_destination_protocol;
pub const g_proxy_address_get_password = _frida_g_proxy_address_get_password;
pub const g_proxy_address_get_protocol = _frida_g_proxy_address_get_protocol;
pub const g_proxy_address_get_type = _frida_g_proxy_address_get_type;
pub const g_proxy_address_get_uri = _frida_g_proxy_address_get_uri;
pub const g_proxy_address_get_username = _frida_g_proxy_address_get_username;
pub const g_proxy_address_new = _frida_g_proxy_address_new;
pub const g_proxy_connect = _frida_g_proxy_connect;
pub const g_proxy_connect_async = _frida_g_proxy_connect_async;
pub const g_proxy_connect_finish = _frida_g_proxy_connect_finish;
pub const g_proxy_get_default_for_protocol = _frida_g_proxy_get_default_for_protocol;
pub const g_proxy_get_type = _frida_g_proxy_get_type;
pub const g_proxy_resolver_get_default = _frida_g_proxy_resolver_get_default;
pub const g_proxy_resolver_get_type = _frida_g_proxy_resolver_get_type;
pub const g_proxy_resolver_is_supported = _frida_g_proxy_resolver_is_supported;
pub const g_proxy_resolver_lookup = _frida_g_proxy_resolver_lookup;
pub const g_proxy_resolver_lookup_async = _frida_g_proxy_resolver_lookup_async;
pub const g_proxy_resolver_lookup_finish = _frida_g_proxy_resolver_lookup_finish;
pub const g_proxy_supports_hostname = _frida_g_proxy_supports_hostname;
pub const g_ptr_array_add = _frida_g_ptr_array_add;
pub const g_ptr_array_copy = _frida_g_ptr_array_copy;
pub const g_ptr_array_extend = _frida_g_ptr_array_extend;
pub const g_ptr_array_extend_and_steal = _frida_g_ptr_array_extend_and_steal;
pub const g_ptr_array_find = _frida_g_ptr_array_find;
pub const g_ptr_array_find_with_equal_func = _frida_g_ptr_array_find_with_equal_func;
pub const g_ptr_array_foreach = _frida_g_ptr_array_foreach;
pub const g_ptr_array_free = _frida_g_ptr_array_free;
pub const g_ptr_array_get_type = _frida_g_ptr_array_get_type;
pub const g_ptr_array_insert = _frida_g_ptr_array_insert;
pub const g_ptr_array_is_null_terminated = _frida_g_ptr_array_is_null_terminated;
pub const g_ptr_array_new = _frida_g_ptr_array_new;
pub const g_ptr_array_new_full = _frida_g_ptr_array_new_full;
pub const g_ptr_array_new_null_terminated = _frida_g_ptr_array_new_null_terminated;
pub const g_ptr_array_new_with_free_func = _frida_g_ptr_array_new_with_free_func;
pub const g_ptr_array_ref = _frida_g_ptr_array_ref;
pub const g_ptr_array_remove = _frida_g_ptr_array_remove;
pub const g_ptr_array_remove_fast = _frida_g_ptr_array_remove_fast;
pub const g_ptr_array_remove_index = _frida_g_ptr_array_remove_index;
pub const g_ptr_array_remove_index_fast = _frida_g_ptr_array_remove_index_fast;
pub const g_ptr_array_remove_range = _frida_g_ptr_array_remove_range;
pub const g_ptr_array_set_free_func = _frida_g_ptr_array_set_free_func;
pub const g_ptr_array_set_size = _frida_g_ptr_array_set_size;
pub const g_ptr_array_sized_new = _frida_g_ptr_array_sized_new;
pub const g_ptr_array_sort = _frida_g_ptr_array_sort;
pub const g_ptr_array_sort_with_data = _frida_g_ptr_array_sort_with_data;
pub const g_ptr_array_steal = _frida_g_ptr_array_steal;
pub const g_ptr_array_steal_index = _frida_g_ptr_array_steal_index;
pub const g_ptr_array_steal_index_fast = _frida_g_ptr_array_steal_index_fast;
pub const g_ptr_array_unref = _frida_g_ptr_array_unref;
pub const g_qsort_with_data = _frida_g_qsort_with_data;
pub const g_quark_from_static_string = _frida_g_quark_from_static_string;
pub const g_quark_from_string = _frida_g_quark_from_string;
pub const g_quark_to_string = _frida_g_quark_to_string;
pub const g_quark_try_string = _frida_g_quark_try_string;
pub const g_queue_clear = _frida_g_queue_clear;
pub const g_queue_clear_full = _frida_g_queue_clear_full;
pub const g_queue_copy = _frida_g_queue_copy;
pub const g_queue_delete_link = _frida_g_queue_delete_link;
pub const g_queue_find = _frida_g_queue_find;
pub const g_queue_find_custom = _frida_g_queue_find_custom;
pub const g_queue_foreach = _frida_g_queue_foreach;
pub const g_queue_free = _frida_g_queue_free;
pub const g_queue_free_full = _frida_g_queue_free_full;
pub const g_queue_get_length = _frida_g_queue_get_length;
pub const g_queue_index = _frida_g_queue_index;
pub const g_queue_init = _frida_g_queue_init;
pub const g_queue_insert_after = _frida_g_queue_insert_after;
pub const g_queue_insert_after_link = _frida_g_queue_insert_after_link;
pub const g_queue_insert_before = _frida_g_queue_insert_before;
pub const g_queue_insert_before_link = _frida_g_queue_insert_before_link;
pub const g_queue_insert_sorted = _frida_g_queue_insert_sorted;
pub const g_queue_is_empty = _frida_g_queue_is_empty;
pub const g_queue_link_index = _frida_g_queue_link_index;
pub const g_queue_new = _frida_g_queue_new;
pub const g_queue_peek_head = _frida_g_queue_peek_head;
pub const g_queue_peek_head_link = _frida_g_queue_peek_head_link;
pub const g_queue_peek_nth = _frida_g_queue_peek_nth;
pub const g_queue_peek_nth_link = _frida_g_queue_peek_nth_link;
pub const g_queue_peek_tail = _frida_g_queue_peek_tail;
pub const g_queue_peek_tail_link = _frida_g_queue_peek_tail_link;
pub const g_queue_pop_head = _frida_g_queue_pop_head;
pub const g_queue_pop_head_link = _frida_g_queue_pop_head_link;
pub const g_queue_pop_nth = _frida_g_queue_pop_nth;
pub const g_queue_pop_nth_link = _frida_g_queue_pop_nth_link;
pub const g_queue_pop_tail = _frida_g_queue_pop_tail;
pub const g_queue_pop_tail_link = _frida_g_queue_pop_tail_link;
pub const g_queue_push_head = _frida_g_queue_push_head;
pub const g_queue_push_head_link = _frida_g_queue_push_head_link;
pub const g_queue_push_nth = _frida_g_queue_push_nth;
pub const g_queue_push_nth_link = _frida_g_queue_push_nth_link;
pub const g_queue_push_tail = _frida_g_queue_push_tail;
pub const g_queue_push_tail_link = _frida_g_queue_push_tail_link;
pub const g_queue_remove = _frida_g_queue_remove;
pub const g_queue_remove_all = _frida_g_queue_remove_all;
pub const g_queue_reverse = _frida_g_queue_reverse;
pub const g_queue_sort = _frida_g_queue_sort;
pub const g_queue_unlink = _frida_g_queue_unlink;
pub const g_rand_copy = _frida_g_rand_copy;
pub const g_rand_double = _frida_g_rand_double;
pub const g_rand_double_range = _frida_g_rand_double_range;
pub const g_rand_free = _frida_g_rand_free;
pub const g_rand_int = _frida_g_rand_int;
pub const g_rand_int_range = _frida_g_rand_int_range;
pub const g_rand_new = _frida_g_rand_new;
pub const g_rand_new_with_seed = _frida_g_rand_new_with_seed;
pub const g_rand_new_with_seed_array = _frida_g_rand_new_with_seed_array;
pub const g_rand_set_seed = _frida_g_rand_set_seed;
pub const g_rand_set_seed_array = _frida_g_rand_set_seed_array;
pub const g_random_double = _frida_g_random_double;
pub const g_random_double_range = _frida_g_random_double_range;
pub const g_random_int = _frida_g_random_int;
pub const g_random_int_range = _frida_g_random_int_range;
pub const g_random_set_seed = _frida_g_random_set_seed;
pub const g_rc_box_acquire = _frida_g_rc_box_acquire;
pub const g_rc_box_alloc = _frida_g_rc_box_alloc;
pub const g_rc_box_alloc0 = _frida_g_rc_box_alloc0;
pub const g_rc_box_dup = _frida_g_rc_box_dup;
pub const g_rc_box_get_size = _frida_g_rc_box_get_size;
pub const g_rc_box_release = _frida_g_rc_box_release;
pub const g_rc_box_release_full = _frida_g_rc_box_release_full;
pub const g_realloc = _frida_g_realloc;
pub const g_realloc_n = _frida_g_realloc_n;
pub const g_rec_mutex_clear = _frida_g_rec_mutex_clear;
pub const g_rec_mutex_init = _frida_g_rec_mutex_init;
pub const g_rec_mutex_lock = _frida_g_rec_mutex_lock;
pub const g_rec_mutex_trylock = _frida_g_rec_mutex_trylock;
pub const g_rec_mutex_unlock = _frida_g_rec_mutex_unlock;
pub const g_ref_count_compare = _frida_g_ref_count_compare;
pub const g_ref_count_dec = _frida_g_ref_count_dec;
pub const g_ref_count_inc = _frida_g_ref_count_inc;
pub const g_ref_count_init = _frida_g_ref_count_init;
pub const g_ref_string_acquire = _frida_g_ref_string_acquire;
pub const g_ref_string_length = _frida_g_ref_string_length;
pub const g_ref_string_new = _frida_g_ref_string_new;
pub const g_ref_string_new_intern = _frida_g_ref_string_new_intern;
pub const g_ref_string_new_len = _frida_g_ref_string_new_len;
pub const g_ref_string_release = _frida_g_ref_string_release;
pub const g_regex_check_replacement = _frida_g_regex_check_replacement;
pub const g_regex_error_quark = _frida_g_regex_error_quark;
pub const g_regex_escape_nul = _frida_g_regex_escape_nul;
pub const g_regex_escape_string = _frida_g_regex_escape_string;
pub const g_regex_get_capture_count = _frida_g_regex_get_capture_count;
pub const g_regex_get_compile_flags = _frida_g_regex_get_compile_flags;
pub const g_regex_get_has_cr_or_lf = _frida_g_regex_get_has_cr_or_lf;
pub const g_regex_get_match_flags = _frida_g_regex_get_match_flags;
pub const g_regex_get_max_backref = _frida_g_regex_get_max_backref;
pub const g_regex_get_max_lookbehind = _frida_g_regex_get_max_lookbehind;
pub const g_regex_get_pattern = _frida_g_regex_get_pattern;
pub const g_regex_get_string_number = _frida_g_regex_get_string_number;
pub const g_regex_get_type = _frida_g_regex_get_type;
pub const g_regex_match = _frida_g_regex_match;
pub const g_regex_match_all = _frida_g_regex_match_all;
pub const g_regex_match_all_full = _frida_g_regex_match_all_full;
pub const g_regex_match_full = _frida_g_regex_match_full;
pub const g_regex_match_simple = _frida_g_regex_match_simple;
pub const g_regex_new = _frida_g_regex_new;
pub const g_regex_ref = _frida_g_regex_ref;
pub const g_regex_replace = _frida_g_regex_replace;
pub const g_regex_replace_eval = _frida_g_regex_replace_eval;
pub const g_regex_replace_literal = _frida_g_regex_replace_literal;
pub const g_regex_split = _frida_g_regex_split;
pub const g_regex_split_full = _frida_g_regex_split_full;
pub const g_regex_split_simple = _frida_g_regex_split_simple;
pub const g_regex_unref = _frida_g_regex_unref;
pub const g_relation_count = _frida_g_relation_count;
pub const g_relation_delete = _frida_g_relation_delete;
pub const g_relation_destroy = _frida_g_relation_destroy;
pub const g_relation_exists = _frida_g_relation_exists;
pub const g_relation_index = _frida_g_relation_index;
pub const g_relation_insert = _frida_g_relation_insert;
pub const g_relation_new = _frida_g_relation_new;
pub const g_relation_print = _frida_g_relation_print;
pub const g_relation_select = _frida_g_relation_select;
pub const g_reload_user_special_dirs_cache = _frida_g_reload_user_special_dirs_cache;
pub const g_remote_action_group_activate_action_full = _frida_g_remote_action_group_activate_action_full;
pub const g_remote_action_group_change_action_state_full = _frida_g_remote_action_group_change_action_state_full;
pub const g_remote_action_group_get_type = _frida_g_remote_action_group_get_type;
pub const g_resolver_error_get_type = _frida_g_resolver_error_get_type;
pub const g_resolver_error_quark = _frida_g_resolver_error_quark;
pub const g_resolver_free_addresses = _frida_g_resolver_free_addresses;
pub const g_resolver_free_targets = _frida_g_resolver_free_targets;
pub const g_resolver_get_default = _frida_g_resolver_get_default;
pub const g_resolver_get_type = _frida_g_resolver_get_type;
pub const g_resolver_lookup_by_address = _frida_g_resolver_lookup_by_address;
pub const g_resolver_lookup_by_address_async = _frida_g_resolver_lookup_by_address_async;
pub const g_resolver_lookup_by_address_finish = _frida_g_resolver_lookup_by_address_finish;
pub const g_resolver_lookup_by_name = _frida_g_resolver_lookup_by_name;
pub const g_resolver_lookup_by_name_async = _frida_g_resolver_lookup_by_name_async;
pub const g_resolver_lookup_by_name_finish = _frida_g_resolver_lookup_by_name_finish;
pub const g_resolver_lookup_by_name_with_flags = _frida_g_resolver_lookup_by_name_with_flags;
pub const g_resolver_lookup_by_name_with_flags_async = _frida_g_resolver_lookup_by_name_with_flags_async;
pub const g_resolver_lookup_by_name_with_flags_finish = _frida_g_resolver_lookup_by_name_with_flags_finish;
pub const g_resolver_lookup_records = _frida_g_resolver_lookup_records;
pub const g_resolver_lookup_records_async = _frida_g_resolver_lookup_records_async;
pub const g_resolver_lookup_records_finish = _frida_g_resolver_lookup_records_finish;
pub const g_resolver_lookup_service = _frida_g_resolver_lookup_service;
pub const g_resolver_lookup_service_async = _frida_g_resolver_lookup_service_async;
pub const g_resolver_lookup_service_finish = _frida_g_resolver_lookup_service_finish;
pub const g_resolver_name_lookup_flags_get_type = _frida_g_resolver_name_lookup_flags_get_type;
pub const g_resolver_record_type_get_type = _frida_g_resolver_record_type_get_type;
pub const g_resolver_set_default = _frida_g_resolver_set_default;
pub const g_resource_enumerate_children = _frida_g_resource_enumerate_children;
pub const g_resource_error_get_type = _frida_g_resource_error_get_type;
pub const g_resource_error_quark = _frida_g_resource_error_quark;
pub const g_resource_flags_get_type = _frida_g_resource_flags_get_type;
pub const g_resource_get_info = _frida_g_resource_get_info;
pub const g_resource_get_type = _frida_g_resource_get_type;
pub const g_resource_load = _frida_g_resource_load;
pub const g_resource_lookup_data = _frida_g_resource_lookup_data;
pub const g_resource_lookup_flags_get_type = _frida_g_resource_lookup_flags_get_type;
pub const g_resource_new_from_data = _frida_g_resource_new_from_data;
pub const g_resource_open_stream = _frida_g_resource_open_stream;
pub const g_resource_ref = _frida_g_resource_ref;
pub const g_resource_unref = _frida_g_resource_unref;
pub const g_resources_enumerate_children = _frida_g_resources_enumerate_children;
pub const g_resources_get_info = _frida_g_resources_get_info;
pub const g_resources_lookup_data = _frida_g_resources_lookup_data;
pub const g_resources_open_stream = _frida_g_resources_open_stream;
pub const g_resources_register = _frida_g_resources_register;
pub const g_resources_unregister = _frida_g_resources_unregister;
pub const g_return_if_fail_warning = _frida_g_return_if_fail_warning;
pub const g_rw_lock_clear = _frida_g_rw_lock_clear;
pub const g_rw_lock_init = _frida_g_rw_lock_init;
pub const g_rw_lock_reader_lock = _frida_g_rw_lock_reader_lock;
pub const g_rw_lock_reader_trylock = _frida_g_rw_lock_reader_trylock;
pub const g_rw_lock_reader_unlock = _frida_g_rw_lock_reader_unlock;
pub const g_rw_lock_writer_lock = _frida_g_rw_lock_writer_lock;
pub const g_rw_lock_writer_trylock = _frida_g_rw_lock_writer_trylock;
pub const g_rw_lock_writer_unlock = _frida_g_rw_lock_writer_unlock;
pub const g_scanner_cur_line = _frida_g_scanner_cur_line;
pub const g_scanner_cur_position = _frida_g_scanner_cur_position;
pub const g_scanner_cur_token = _frida_g_scanner_cur_token;
pub const g_scanner_cur_value = _frida_g_scanner_cur_value;
pub const g_scanner_destroy = _frida_g_scanner_destroy;
pub const g_scanner_eof = _frida_g_scanner_eof;
pub const g_scanner_error = _frida_g_scanner_error;
pub const g_scanner_get_next_token = _frida_g_scanner_get_next_token;
pub const g_scanner_input_file = _frida_g_scanner_input_file;
pub const g_scanner_input_text = _frida_g_scanner_input_text;
pub const g_scanner_lookup_symbol = _frida_g_scanner_lookup_symbol;
pub const g_scanner_new = _frida_g_scanner_new;
pub const g_scanner_peek_next_token = _frida_g_scanner_peek_next_token;
pub const g_scanner_scope_add_symbol = _frida_g_scanner_scope_add_symbol;
pub const g_scanner_scope_foreach_symbol = _frida_g_scanner_scope_foreach_symbol;
pub const g_scanner_scope_lookup_symbol = _frida_g_scanner_scope_lookup_symbol;
pub const g_scanner_scope_remove_symbol = _frida_g_scanner_scope_remove_symbol;
pub const g_scanner_set_scope = _frida_g_scanner_set_scope;
pub const g_scanner_sync_file_offset = _frida_g_scanner_sync_file_offset;
pub const g_scanner_unexp_token = _frida_g_scanner_unexp_token;
pub const g_scanner_warn = _frida_g_scanner_warn;
pub const g_seekable_can_seek = _frida_g_seekable_can_seek;
pub const g_seekable_can_truncate = _frida_g_seekable_can_truncate;
pub const g_seekable_get_type = _frida_g_seekable_get_type;
pub const g_seekable_seek = _frida_g_seekable_seek;
pub const g_seekable_tell = _frida_g_seekable_tell;
pub const g_seekable_truncate = _frida_g_seekable_truncate;
pub const g_sequence_append = _frida_g_sequence_append;
pub const g_sequence_foreach = _frida_g_sequence_foreach;
pub const g_sequence_foreach_range = _frida_g_sequence_foreach_range;
pub const g_sequence_free = _frida_g_sequence_free;
pub const g_sequence_get = _frida_g_sequence_get;
pub const g_sequence_get_begin_iter = _frida_g_sequence_get_begin_iter;
pub const g_sequence_get_end_iter = _frida_g_sequence_get_end_iter;
pub const g_sequence_get_iter_at_pos = _frida_g_sequence_get_iter_at_pos;
pub const g_sequence_get_length = _frida_g_sequence_get_length;
pub const g_sequence_insert_before = _frida_g_sequence_insert_before;
pub const g_sequence_insert_sorted = _frida_g_sequence_insert_sorted;
pub const g_sequence_insert_sorted_iter = _frida_g_sequence_insert_sorted_iter;
pub const g_sequence_is_empty = _frida_g_sequence_is_empty;
pub const g_sequence_iter_compare = _frida_g_sequence_iter_compare;
pub const g_sequence_iter_get_position = _frida_g_sequence_iter_get_position;
pub const g_sequence_iter_get_sequence = _frida_g_sequence_iter_get_sequence;
pub const g_sequence_iter_is_begin = _frida_g_sequence_iter_is_begin;
pub const g_sequence_iter_is_end = _frida_g_sequence_iter_is_end;
pub const g_sequence_iter_move = _frida_g_sequence_iter_move;
pub const g_sequence_iter_next = _frida_g_sequence_iter_next;
pub const g_sequence_iter_prev = _frida_g_sequence_iter_prev;
pub const g_sequence_lookup = _frida_g_sequence_lookup;
pub const g_sequence_lookup_iter = _frida_g_sequence_lookup_iter;
pub const g_sequence_move = _frida_g_sequence_move;
pub const g_sequence_move_range = _frida_g_sequence_move_range;
pub const g_sequence_new = _frida_g_sequence_new;
pub const g_sequence_prepend = _frida_g_sequence_prepend;
pub const g_sequence_range_get_midpoint = _frida_g_sequence_range_get_midpoint;
pub const g_sequence_remove = _frida_g_sequence_remove;
pub const g_sequence_remove_range = _frida_g_sequence_remove_range;
pub const g_sequence_search = _frida_g_sequence_search;
pub const g_sequence_search_iter = _frida_g_sequence_search_iter;
pub const g_sequence_set = _frida_g_sequence_set;
pub const g_sequence_sort = _frida_g_sequence_sort;
pub const g_sequence_sort_changed = _frida_g_sequence_sort_changed;
pub const g_sequence_sort_changed_iter = _frida_g_sequence_sort_changed_iter;
pub const g_sequence_sort_iter = _frida_g_sequence_sort_iter;
pub const g_sequence_swap = _frida_g_sequence_swap;
pub const g_set_application_name = _frida_g_set_application_name;
pub const g_set_error = _frida_g_set_error;
pub const g_set_error_literal = _frida_g_set_error_literal;
pub const g_set_prgname = _frida_g_set_prgname;
pub const g_set_print_handler = _frida_g_set_print_handler;
pub const g_set_printerr_handler = _frida_g_set_printerr_handler;
pub const g_setenv = _frida_g_setenv;
pub const g_settings_apply = _frida_g_settings_apply;
pub const g_settings_bind = _frida_g_settings_bind;
pub const g_settings_bind_flags_get_type = _frida_g_settings_bind_flags_get_type;
pub const g_settings_bind_with_mapping = _frida_g_settings_bind_with_mapping;
pub const g_settings_bind_writable = _frida_g_settings_bind_writable;
pub const g_settings_create_action = _frida_g_settings_create_action;
pub const g_settings_delay = _frida_g_settings_delay;
pub const g_settings_get = _frida_g_settings_get;
pub const g_settings_get_boolean = _frida_g_settings_get_boolean;
pub const g_settings_get_child = _frida_g_settings_get_child;
pub const g_settings_get_default_value = _frida_g_settings_get_default_value;
pub const g_settings_get_double = _frida_g_settings_get_double;
pub const g_settings_get_enum = _frida_g_settings_get_enum;
pub const g_settings_get_flags = _frida_g_settings_get_flags;
pub const g_settings_get_has_unapplied = _frida_g_settings_get_has_unapplied;
pub const g_settings_get_int = _frida_g_settings_get_int;
pub const g_settings_get_int64 = _frida_g_settings_get_int64;
pub const g_settings_get_mapped = _frida_g_settings_get_mapped;
pub const g_settings_get_range = _frida_g_settings_get_range;
pub const g_settings_get_string = _frida_g_settings_get_string;
pub const g_settings_get_strv = _frida_g_settings_get_strv;
pub const g_settings_get_type = _frida_g_settings_get_type;
pub const g_settings_get_uint = _frida_g_settings_get_uint;
pub const g_settings_get_uint64 = _frida_g_settings_get_uint64;
pub const g_settings_get_user_value = _frida_g_settings_get_user_value;
pub const g_settings_get_value = _frida_g_settings_get_value;
pub const g_settings_is_writable = _frida_g_settings_is_writable;
pub const g_settings_list_children = _frida_g_settings_list_children;
pub const g_settings_list_keys = _frida_g_settings_list_keys;
pub const g_settings_list_relocatable_schemas = _frida_g_settings_list_relocatable_schemas;
pub const g_settings_list_schemas = _frida_g_settings_list_schemas;
pub const g_settings_new = _frida_g_settings_new;
pub const g_settings_new_full = _frida_g_settings_new_full;
pub const g_settings_new_with_backend = _frida_g_settings_new_with_backend;
pub const g_settings_new_with_backend_and_path = _frida_g_settings_new_with_backend_and_path;
pub const g_settings_new_with_path = _frida_g_settings_new_with_path;
pub const g_settings_range_check = _frida_g_settings_range_check;
pub const g_settings_reset = _frida_g_settings_reset;
pub const g_settings_revert = _frida_g_settings_revert;
pub const g_settings_schema_get_id = _frida_g_settings_schema_get_id;
pub const g_settings_schema_get_key = _frida_g_settings_schema_get_key;
pub const g_settings_schema_get_path = _frida_g_settings_schema_get_path;
pub const g_settings_schema_get_type = _frida_g_settings_schema_get_type;
pub const g_settings_schema_has_key = _frida_g_settings_schema_has_key;
pub const g_settings_schema_key_get_default_value = _frida_g_settings_schema_key_get_default_value;
pub const g_settings_schema_key_get_description = _frida_g_settings_schema_key_get_description;
pub const g_settings_schema_key_get_name = _frida_g_settings_schema_key_get_name;
pub const g_settings_schema_key_get_range = _frida_g_settings_schema_key_get_range;
pub const g_settings_schema_key_get_summary = _frida_g_settings_schema_key_get_summary;
pub const g_settings_schema_key_get_type = _frida_g_settings_schema_key_get_type;
pub const g_settings_schema_key_get_value_type = _frida_g_settings_schema_key_get_value_type;
pub const g_settings_schema_key_range_check = _frida_g_settings_schema_key_range_check;
pub const g_settings_schema_key_ref = _frida_g_settings_schema_key_ref;
pub const g_settings_schema_key_unref = _frida_g_settings_schema_key_unref;
pub const g_settings_schema_list_children = _frida_g_settings_schema_list_children;
pub const g_settings_schema_list_keys = _frida_g_settings_schema_list_keys;
pub const g_settings_schema_ref = _frida_g_settings_schema_ref;
pub const g_settings_schema_source_get_default = _frida_g_settings_schema_source_get_default;
pub const g_settings_schema_source_get_type = _frida_g_settings_schema_source_get_type;
pub const g_settings_schema_source_list_schemas = _frida_g_settings_schema_source_list_schemas;
pub const g_settings_schema_source_lookup = _frida_g_settings_schema_source_lookup;
pub const g_settings_schema_source_new_from_directory = _frida_g_settings_schema_source_new_from_directory;
pub const g_settings_schema_source_ref = _frida_g_settings_schema_source_ref;
pub const g_settings_schema_source_unref = _frida_g_settings_schema_source_unref;
pub const g_settings_schema_unref = _frida_g_settings_schema_unref;
pub const g_settings_set = _frida_g_settings_set;
pub const g_settings_set_boolean = _frida_g_settings_set_boolean;
pub const g_settings_set_double = _frida_g_settings_set_double;
pub const g_settings_set_enum = _frida_g_settings_set_enum;
pub const g_settings_set_flags = _frida_g_settings_set_flags;
pub const g_settings_set_int = _frida_g_settings_set_int;
pub const g_settings_set_int64 = _frida_g_settings_set_int64;
pub const g_settings_set_string = _frida_g_settings_set_string;
pub const g_settings_set_strv = _frida_g_settings_set_strv;
pub const g_settings_set_uint = _frida_g_settings_set_uint;
pub const g_settings_set_uint64 = _frida_g_settings_set_uint64;
pub const g_settings_set_value = _frida_g_settings_set_value;
pub const g_settings_sync = _frida_g_settings_sync;
pub const g_settings_unbind = _frida_g_settings_unbind;
pub const g_shell_error_quark = _frida_g_shell_error_quark;
pub const g_shell_parse_argv = _frida_g_shell_parse_argv;
pub const g_shell_quote = _frida_g_shell_quote;
pub const g_shell_unquote = _frida_g_shell_unquote;
pub const g_signal_accumulator_first_wins = _frida_g_signal_accumulator_first_wins;
pub const g_signal_accumulator_true_handled = _frida_g_signal_accumulator_true_handled;
pub const g_signal_add_emission_hook = _frida_g_signal_add_emission_hook;
pub const g_signal_chain_from_overridden = _frida_g_signal_chain_from_overridden;
pub const g_signal_chain_from_overridden_handler = _frida_g_signal_chain_from_overridden_handler;
pub const g_signal_connect_closure = _frida_g_signal_connect_closure;
pub const g_signal_connect_closure_by_id = _frida_g_signal_connect_closure_by_id;
pub const g_signal_connect_data = _frida_g_signal_connect_data;
pub const g_signal_connect_object = _frida_g_signal_connect_object;
pub const g_signal_emit = _frida_g_signal_emit;
pub const g_signal_emit_by_name = _frida_g_signal_emit_by_name;
pub const g_signal_emit_valist = _frida_g_signal_emit_valist;
pub const g_signal_emitv = _frida_g_signal_emitv;
pub const g_signal_get_invocation_hint = _frida_g_signal_get_invocation_hint;
pub const g_signal_group_block = _frida_g_signal_group_block;
pub const g_signal_group_connect = _frida_g_signal_group_connect;
pub const g_signal_group_connect_after = _frida_g_signal_group_connect_after;
pub const g_signal_group_connect_closure = _frida_g_signal_group_connect_closure;
pub const g_signal_group_connect_data = _frida_g_signal_group_connect_data;
pub const g_signal_group_connect_object = _frida_g_signal_group_connect_object;
pub const g_signal_group_connect_swapped = _frida_g_signal_group_connect_swapped;
pub const g_signal_group_dup_target = _frida_g_signal_group_dup_target;
pub const g_signal_group_get_type = _frida_g_signal_group_get_type;
pub const g_signal_group_new = _frida_g_signal_group_new;
pub const g_signal_group_set_target = _frida_g_signal_group_set_target;
pub const g_signal_group_unblock = _frida_g_signal_group_unblock;
pub const g_signal_handler_block = _frida_g_signal_handler_block;
pub const g_signal_handler_disconnect = _frida_g_signal_handler_disconnect;
pub const g_signal_handler_find = _frida_g_signal_handler_find;
pub const g_signal_handler_is_connected = _frida_g_signal_handler_is_connected;
pub const g_signal_handler_unblock = _frida_g_signal_handler_unblock;
pub const g_signal_handlers_block_matched = _frida_g_signal_handlers_block_matched;
pub const g_signal_handlers_destroy = _frida_g_signal_handlers_destroy;
pub const g_signal_handlers_disconnect_matched = _frida_g_signal_handlers_disconnect_matched;
pub const g_signal_handlers_unblock_matched = _frida_g_signal_handlers_unblock_matched;
pub const g_signal_has_handler_pending = _frida_g_signal_has_handler_pending;
pub const g_signal_is_valid_name = _frida_g_signal_is_valid_name;
pub const g_signal_list_ids = _frida_g_signal_list_ids;
pub const g_signal_lookup = _frida_g_signal_lookup;
pub const g_signal_name = _frida_g_signal_name;
pub const g_signal_new = _frida_g_signal_new;
pub const g_signal_new_class_handler = _frida_g_signal_new_class_handler;
pub const g_signal_new_valist = _frida_g_signal_new_valist;
pub const g_signal_newv = _frida_g_signal_newv;
pub const g_signal_override_class_closure = _frida_g_signal_override_class_closure;
pub const g_signal_override_class_handler = _frida_g_signal_override_class_handler;
pub const g_signal_parse_name = _frida_g_signal_parse_name;
pub const g_signal_query = _frida_g_signal_query;
pub const g_signal_remove_emission_hook = _frida_g_signal_remove_emission_hook;
pub const g_signal_set_va_marshaller = _frida_g_signal_set_va_marshaller;
pub const g_signal_stop_emission = _frida_g_signal_stop_emission;
pub const g_signal_stop_emission_by_name = _frida_g_signal_stop_emission_by_name;
pub const g_signal_type_cclosure_new = _frida_g_signal_type_cclosure_new;
pub const g_simple_action_get_type = _frida_g_simple_action_get_type;
pub const g_simple_action_group_add_entries = _frida_g_simple_action_group_add_entries;
pub const g_simple_action_group_get_type = _frida_g_simple_action_group_get_type;
pub const g_simple_action_group_insert = _frida_g_simple_action_group_insert;
pub const g_simple_action_group_lookup = _frida_g_simple_action_group_lookup;
pub const g_simple_action_group_new = _frida_g_simple_action_group_new;
pub const g_simple_action_group_remove = _frida_g_simple_action_group_remove;
pub const g_simple_action_new = _frida_g_simple_action_new;
pub const g_simple_action_new_stateful = _frida_g_simple_action_new_stateful;
pub const g_simple_action_set_enabled = _frida_g_simple_action_set_enabled;
pub const g_simple_action_set_state = _frida_g_simple_action_set_state;
pub const g_simple_action_set_state_hint = _frida_g_simple_action_set_state_hint;
pub const g_simple_async_report_error_in_idle = _frida_g_simple_async_report_error_in_idle;
pub const g_simple_async_report_gerror_in_idle = _frida_g_simple_async_report_gerror_in_idle;
pub const g_simple_async_report_take_gerror_in_idle = _frida_g_simple_async_report_take_gerror_in_idle;
pub const g_simple_async_result_complete = _frida_g_simple_async_result_complete;
pub const g_simple_async_result_complete_in_idle = _frida_g_simple_async_result_complete_in_idle;
pub const g_simple_async_result_get_op_res_gboolean = _frida_g_simple_async_result_get_op_res_gboolean;
pub const g_simple_async_result_get_op_res_gpointer = _frida_g_simple_async_result_get_op_res_gpointer;
pub const g_simple_async_result_get_op_res_gssize = _frida_g_simple_async_result_get_op_res_gssize;
pub const g_simple_async_result_get_source_tag = _frida_g_simple_async_result_get_source_tag;
pub const g_simple_async_result_get_type = _frida_g_simple_async_result_get_type;
pub const g_simple_async_result_is_valid = _frida_g_simple_async_result_is_valid;
pub const g_simple_async_result_new = _frida_g_simple_async_result_new;
pub const g_simple_async_result_new_error = _frida_g_simple_async_result_new_error;
pub const g_simple_async_result_new_from_error = _frida_g_simple_async_result_new_from_error;
pub const g_simple_async_result_new_take_error = _frida_g_simple_async_result_new_take_error;
pub const g_simple_async_result_propagate_error = _frida_g_simple_async_result_propagate_error;
pub const g_simple_async_result_run_in_thread = _frida_g_simple_async_result_run_in_thread;
pub const g_simple_async_result_set_check_cancellable = _frida_g_simple_async_result_set_check_cancellable;
pub const g_simple_async_result_set_error = _frida_g_simple_async_result_set_error;
pub const g_simple_async_result_set_error_va = _frida_g_simple_async_result_set_error_va;
pub const g_simple_async_result_set_from_error = _frida_g_simple_async_result_set_from_error;
pub const g_simple_async_result_set_handle_cancellation = _frida_g_simple_async_result_set_handle_cancellation;
pub const g_simple_async_result_set_op_res_gboolean = _frida_g_simple_async_result_set_op_res_gboolean;
pub const g_simple_async_result_set_op_res_gpointer = _frida_g_simple_async_result_set_op_res_gpointer;
pub const g_simple_async_result_set_op_res_gssize = _frida_g_simple_async_result_set_op_res_gssize;
pub const g_simple_async_result_take_error = _frida_g_simple_async_result_take_error;
pub const g_simple_io_stream_get_type = _frida_g_simple_io_stream_get_type;
pub const g_simple_io_stream_new = _frida_g_simple_io_stream_new;
pub const g_simple_permission_get_type = _frida_g_simple_permission_get_type;
pub const g_simple_permission_new = _frida_g_simple_permission_new;
pub const g_simple_proxy_resolver_get_type = _frida_g_simple_proxy_resolver_get_type;
pub const g_simple_proxy_resolver_new = _frida_g_simple_proxy_resolver_new;
pub const g_simple_proxy_resolver_set_default_proxy = _frida_g_simple_proxy_resolver_set_default_proxy;
pub const g_simple_proxy_resolver_set_ignore_hosts = _frida_g_simple_proxy_resolver_set_ignore_hosts;
pub const g_simple_proxy_resolver_set_uri_proxy = _frida_g_simple_proxy_resolver_set_uri_proxy;
pub const g_slice_alloc = _frida_g_slice_alloc;
pub const g_slice_alloc0 = _frida_g_slice_alloc0;
pub const g_slice_copy = _frida_g_slice_copy;
pub const g_slice_free1 = _frida_g_slice_free1;
pub const g_slice_free_chain_with_offset = _frida_g_slice_free_chain_with_offset;
pub const g_slice_get_config = _frida_g_slice_get_config;
pub const g_slice_get_config_state = _frida_g_slice_get_config_state;
pub const g_slice_set_config = _frida_g_slice_set_config;
pub const g_slist_alloc = _frida_g_slist_alloc;
pub const g_slist_append = _frida_g_slist_append;
pub const g_slist_concat = _frida_g_slist_concat;
pub const g_slist_copy = _frida_g_slist_copy;
pub const g_slist_copy_deep = _frida_g_slist_copy_deep;
pub const g_slist_delete_link = _frida_g_slist_delete_link;
pub const g_slist_find = _frida_g_slist_find;
pub const g_slist_find_custom = _frida_g_slist_find_custom;
pub const g_slist_foreach = _frida_g_slist_foreach;
pub const g_slist_free = _frida_g_slist_free;
pub const g_slist_free_1 = _frida_g_slist_free_1;
pub const g_slist_free_full = _frida_g_slist_free_full;
pub const g_slist_index = _frida_g_slist_index;
pub const g_slist_insert = _frida_g_slist_insert;
pub const g_slist_insert_before = _frida_g_slist_insert_before;
pub const g_slist_insert_sorted = _frida_g_slist_insert_sorted;
pub const g_slist_insert_sorted_with_data = _frida_g_slist_insert_sorted_with_data;
pub const g_slist_last = _frida_g_slist_last;
pub const g_slist_length = _frida_g_slist_length;
pub const g_slist_nth = _frida_g_slist_nth;
pub const g_slist_nth_data = _frida_g_slist_nth_data;
pub const g_slist_pop_allocator = _frida_g_slist_pop_allocator;
pub const g_slist_position = _frida_g_slist_position;
pub const g_slist_prepend = _frida_g_slist_prepend;
pub const g_slist_push_allocator = _frida_g_slist_push_allocator;
pub const g_slist_remove = _frida_g_slist_remove;
pub const g_slist_remove_all = _frida_g_slist_remove_all;
pub const g_slist_remove_link = _frida_g_slist_remove_link;
pub const g_slist_reverse = _frida_g_slist_reverse;
pub const g_slist_sort = _frida_g_slist_sort;
pub const g_slist_sort_with_data = _frida_g_slist_sort_with_data;
pub const g_snprintf = _frida_g_snprintf;
pub const g_socket_accept = _frida_g_socket_accept;
pub const g_socket_address_enumerator_get_type = _frida_g_socket_address_enumerator_get_type;
pub const g_socket_address_enumerator_next = _frida_g_socket_address_enumerator_next;
pub const g_socket_address_enumerator_next_async = _frida_g_socket_address_enumerator_next_async;
pub const g_socket_address_enumerator_next_finish = _frida_g_socket_address_enumerator_next_finish;
pub const g_socket_address_get_family = _frida_g_socket_address_get_family;
pub const g_socket_address_get_native_size = _frida_g_socket_address_get_native_size;
pub const g_socket_address_get_type = _frida_g_socket_address_get_type;
pub const g_socket_address_new_from_native = _frida_g_socket_address_new_from_native;
pub const g_socket_address_to_native = _frida_g_socket_address_to_native;
pub const g_socket_bind = _frida_g_socket_bind;
pub const g_socket_check_connect_result = _frida_g_socket_check_connect_result;
pub const g_socket_client_add_application_proxy = _frida_g_socket_client_add_application_proxy;
pub const g_socket_client_connect = _frida_g_socket_client_connect;
pub const g_socket_client_connect_async = _frida_g_socket_client_connect_async;
pub const g_socket_client_connect_finish = _frida_g_socket_client_connect_finish;
pub const g_socket_client_connect_to_host = _frida_g_socket_client_connect_to_host;
pub const g_socket_client_connect_to_host_async = _frida_g_socket_client_connect_to_host_async;
pub const g_socket_client_connect_to_host_finish = _frida_g_socket_client_connect_to_host_finish;
pub const g_socket_client_connect_to_service = _frida_g_socket_client_connect_to_service;
pub const g_socket_client_connect_to_service_async = _frida_g_socket_client_connect_to_service_async;
pub const g_socket_client_connect_to_service_finish = _frida_g_socket_client_connect_to_service_finish;
pub const g_socket_client_connect_to_uri = _frida_g_socket_client_connect_to_uri;
pub const g_socket_client_connect_to_uri_async = _frida_g_socket_client_connect_to_uri_async;
pub const g_socket_client_connect_to_uri_finish = _frida_g_socket_client_connect_to_uri_finish;
pub const g_socket_client_event_get_type = _frida_g_socket_client_event_get_type;
pub const g_socket_client_get_enable_proxy = _frida_g_socket_client_get_enable_proxy;
pub const g_socket_client_get_family = _frida_g_socket_client_get_family;
pub const g_socket_client_get_local_address = _frida_g_socket_client_get_local_address;
pub const g_socket_client_get_protocol = _frida_g_socket_client_get_protocol;
pub const g_socket_client_get_proxy_resolver = _frida_g_socket_client_get_proxy_resolver;
pub const g_socket_client_get_socket_type = _frida_g_socket_client_get_socket_type;
pub const g_socket_client_get_timeout = _frida_g_socket_client_get_timeout;
pub const g_socket_client_get_tls = _frida_g_socket_client_get_tls;
pub const g_socket_client_get_tls_validation_flags = _frida_g_socket_client_get_tls_validation_flags;
pub const g_socket_client_get_type = _frida_g_socket_client_get_type;
pub const g_socket_client_new = _frida_g_socket_client_new;
pub const g_socket_client_set_enable_proxy = _frida_g_socket_client_set_enable_proxy;
pub const g_socket_client_set_family = _frida_g_socket_client_set_family;
pub const g_socket_client_set_local_address = _frida_g_socket_client_set_local_address;
pub const g_socket_client_set_protocol = _frida_g_socket_client_set_protocol;
pub const g_socket_client_set_proxy_resolver = _frida_g_socket_client_set_proxy_resolver;
pub const g_socket_client_set_socket_type = _frida_g_socket_client_set_socket_type;
pub const g_socket_client_set_timeout = _frida_g_socket_client_set_timeout;
pub const g_socket_client_set_tls = _frida_g_socket_client_set_tls;
pub const g_socket_client_set_tls_validation_flags = _frida_g_socket_client_set_tls_validation_flags;
pub const g_socket_close = _frida_g_socket_close;
pub const g_socket_condition_check = _frida_g_socket_condition_check;
pub const g_socket_condition_timed_wait = _frida_g_socket_condition_timed_wait;
pub const g_socket_condition_wait = _frida_g_socket_condition_wait;
pub const g_socket_connect = _frida_g_socket_connect;
pub const g_socket_connectable_enumerate = _frida_g_socket_connectable_enumerate;
pub const g_socket_connectable_get_type = _frida_g_socket_connectable_get_type;
pub const g_socket_connectable_proxy_enumerate = _frida_g_socket_connectable_proxy_enumerate;
pub const g_socket_connectable_to_string = _frida_g_socket_connectable_to_string;
pub const g_socket_connection_connect = _frida_g_socket_connection_connect;
pub const g_socket_connection_connect_async = _frida_g_socket_connection_connect_async;
pub const g_socket_connection_connect_finish = _frida_g_socket_connection_connect_finish;
pub const g_socket_connection_factory_create_connection = _frida_g_socket_connection_factory_create_connection;
pub const g_socket_connection_factory_lookup_type = _frida_g_socket_connection_factory_lookup_type;
pub const g_socket_connection_factory_register_type = _frida_g_socket_connection_factory_register_type;
pub const g_socket_connection_get_local_address = _frida_g_socket_connection_get_local_address;
pub const g_socket_connection_get_remote_address = _frida_g_socket_connection_get_remote_address;
pub const g_socket_connection_get_socket = _frida_g_socket_connection_get_socket;
pub const g_socket_connection_get_type = _frida_g_socket_connection_get_type;
pub const g_socket_connection_is_connected = _frida_g_socket_connection_is_connected;
pub const g_socket_control_message_deserialize = _frida_g_socket_control_message_deserialize;
pub const g_socket_control_message_get_level = _frida_g_socket_control_message_get_level;
pub const g_socket_control_message_get_msg_type = _frida_g_socket_control_message_get_msg_type;
pub const g_socket_control_message_get_size = _frida_g_socket_control_message_get_size;
pub const g_socket_control_message_get_type = _frida_g_socket_control_message_get_type;
pub const g_socket_control_message_serialize = _frida_g_socket_control_message_serialize;
pub const g_socket_create_source = _frida_g_socket_create_source;
pub const g_socket_family_get_type = _frida_g_socket_family_get_type;
pub const g_socket_get_available_bytes = _frida_g_socket_get_available_bytes;
pub const g_socket_get_blocking = _frida_g_socket_get_blocking;
pub const g_socket_get_broadcast = _frida_g_socket_get_broadcast;
pub const g_socket_get_credentials = _frida_g_socket_get_credentials;
pub const g_socket_get_family = _frida_g_socket_get_family;
pub const g_socket_get_fd = _frida_g_socket_get_fd;
pub const g_socket_get_keepalive = _frida_g_socket_get_keepalive;
pub const g_socket_get_listen_backlog = _frida_g_socket_get_listen_backlog;
pub const g_socket_get_local_address = _frida_g_socket_get_local_address;
pub const g_socket_get_multicast_loopback = _frida_g_socket_get_multicast_loopback;
pub const g_socket_get_multicast_ttl = _frida_g_socket_get_multicast_ttl;
pub const g_socket_get_option = _frida_g_socket_get_option;
pub const g_socket_get_protocol = _frida_g_socket_get_protocol;
pub const g_socket_get_remote_address = _frida_g_socket_get_remote_address;
pub const g_socket_get_socket_type = _frida_g_socket_get_socket_type;
pub const g_socket_get_timeout = _frida_g_socket_get_timeout;
pub const g_socket_get_ttl = _frida_g_socket_get_ttl;
pub const g_socket_get_type = _frida_g_socket_get_type;
pub const g_socket_is_closed = _frida_g_socket_is_closed;
pub const g_socket_is_connected = _frida_g_socket_is_connected;
pub const g_socket_join_multicast_group = _frida_g_socket_join_multicast_group;
pub const g_socket_join_multicast_group_ssm = _frida_g_socket_join_multicast_group_ssm;
pub const g_socket_leave_multicast_group = _frida_g_socket_leave_multicast_group;
pub const g_socket_leave_multicast_group_ssm = _frida_g_socket_leave_multicast_group_ssm;
pub const g_socket_listen = _frida_g_socket_listen;
pub const g_socket_listener_accept = _frida_g_socket_listener_accept;
pub const g_socket_listener_accept_async = _frida_g_socket_listener_accept_async;
pub const g_socket_listener_accept_finish = _frida_g_socket_listener_accept_finish;
pub const g_socket_listener_accept_socket = _frida_g_socket_listener_accept_socket;
pub const g_socket_listener_accept_socket_async = _frida_g_socket_listener_accept_socket_async;
pub const g_socket_listener_accept_socket_finish = _frida_g_socket_listener_accept_socket_finish;
pub const g_socket_listener_add_address = _frida_g_socket_listener_add_address;
pub const g_socket_listener_add_any_inet_port = _frida_g_socket_listener_add_any_inet_port;
pub const g_socket_listener_add_inet_port = _frida_g_socket_listener_add_inet_port;
pub const g_socket_listener_add_socket = _frida_g_socket_listener_add_socket;
pub const g_socket_listener_close = _frida_g_socket_listener_close;
pub const g_socket_listener_event_get_type = _frida_g_socket_listener_event_get_type;
pub const g_socket_listener_get_type = _frida_g_socket_listener_get_type;
pub const g_socket_listener_new = _frida_g_socket_listener_new;
pub const g_socket_listener_set_backlog = _frida_g_socket_listener_set_backlog;
pub const g_socket_msg_flags_get_type = _frida_g_socket_msg_flags_get_type;
pub const g_socket_new = _frida_g_socket_new;
pub const g_socket_new_from_fd = _frida_g_socket_new_from_fd;
pub const g_socket_protocol_get_type = _frida_g_socket_protocol_get_type;
pub const g_socket_receive = _frida_g_socket_receive;
pub const g_socket_receive_from = _frida_g_socket_receive_from;
pub const g_socket_receive_message = _frida_g_socket_receive_message;
pub const g_socket_receive_messages = _frida_g_socket_receive_messages;
pub const g_socket_receive_with_blocking = _frida_g_socket_receive_with_blocking;
pub const g_socket_send = _frida_g_socket_send;
pub const g_socket_send_message = _frida_g_socket_send_message;
pub const g_socket_send_message_with_timeout = _frida_g_socket_send_message_with_timeout;
pub const g_socket_send_messages = _frida_g_socket_send_messages;
pub const g_socket_send_to = _frida_g_socket_send_to;
pub const g_socket_send_with_blocking = _frida_g_socket_send_with_blocking;
pub const g_socket_service_get_type = _frida_g_socket_service_get_type;
pub const g_socket_service_is_active = _frida_g_socket_service_is_active;
pub const g_socket_service_new = _frida_g_socket_service_new;
pub const g_socket_service_start = _frida_g_socket_service_start;
pub const g_socket_service_stop = _frida_g_socket_service_stop;
pub const g_socket_set_blocking = _frida_g_socket_set_blocking;
pub const g_socket_set_broadcast = _frida_g_socket_set_broadcast;
pub const g_socket_set_keepalive = _frida_g_socket_set_keepalive;
pub const g_socket_set_listen_backlog = _frida_g_socket_set_listen_backlog;
pub const g_socket_set_multicast_loopback = _frida_g_socket_set_multicast_loopback;
pub const g_socket_set_multicast_ttl = _frida_g_socket_set_multicast_ttl;
pub const g_socket_set_option = _frida_g_socket_set_option;
pub const g_socket_set_timeout = _frida_g_socket_set_timeout;
pub const g_socket_set_ttl = _frida_g_socket_set_ttl;
pub const g_socket_shutdown = _frida_g_socket_shutdown;
pub const g_socket_speaks_ipv4 = _frida_g_socket_speaks_ipv4;
pub const g_socket_type_get_type = _frida_g_socket_type_get_type;
pub const g_source_add_child_source = _frida_g_source_add_child_source;
pub const g_source_add_poll = _frida_g_source_add_poll;
pub const g_source_add_unix_fd = _frida_g_source_add_unix_fd;
pub const g_source_attach = _frida_g_source_attach;
pub const g_source_destroy = _frida_g_source_destroy;
pub const g_source_get_can_recurse = _frida_g_source_get_can_recurse;
pub const g_source_get_context = _frida_g_source_get_context;
pub const g_source_get_current_time = _frida_g_source_get_current_time;
pub const g_source_get_id = _frida_g_source_get_id;
pub const g_source_get_name = _frida_g_source_get_name;
pub const g_source_get_priority = _frida_g_source_get_priority;
pub const g_source_get_ready_time = _frida_g_source_get_ready_time;
pub const g_source_get_time = _frida_g_source_get_time;
pub const g_source_get_type = _frida_g_source_get_type;
pub const g_source_is_destroyed = _frida_g_source_is_destroyed;
pub const g_source_modify_unix_fd = _frida_g_source_modify_unix_fd;
pub const g_source_new = _frida_g_source_new;
pub const g_source_query_unix_fd = _frida_g_source_query_unix_fd;
pub const g_source_ref = _frida_g_source_ref;
pub const g_source_remove = _frida_g_source_remove;
pub const g_source_remove_by_funcs_user_data = _frida_g_source_remove_by_funcs_user_data;
pub const g_source_remove_by_user_data = _frida_g_source_remove_by_user_data;
pub const g_source_remove_child_source = _frida_g_source_remove_child_source;
pub const g_source_remove_poll = _frida_g_source_remove_poll;
pub const g_source_remove_unix_fd = _frida_g_source_remove_unix_fd;
pub const g_source_set_callback = _frida_g_source_set_callback;
pub const g_source_set_callback_indirect = _frida_g_source_set_callback_indirect;
pub const g_source_set_can_recurse = _frida_g_source_set_can_recurse;
pub const g_source_set_closure = _frida_g_source_set_closure;
pub const g_source_set_dispose_function = _frida_g_source_set_dispose_function;
pub const g_source_set_dummy_callback = _frida_g_source_set_dummy_callback;
pub const g_source_set_funcs = _frida_g_source_set_funcs;
pub const g_source_set_name = _frida_g_source_set_name;
pub const g_source_set_name_by_id = _frida_g_source_set_name_by_id;
pub const g_source_set_priority = _frida_g_source_set_priority;
pub const g_source_set_ready_time = _frida_g_source_set_ready_time;
pub const g_source_set_static_name = _frida_g_source_set_static_name;
pub const g_source_unref = _frida_g_source_unref;
pub const g_spaced_primes_closest = _frida_g_spaced_primes_closest;
pub const g_spawn_async = _frida_g_spawn_async;
pub const g_spawn_async_with_fds = _frida_g_spawn_async_with_fds;
pub const g_spawn_async_with_pipes = _frida_g_spawn_async_with_pipes;
pub const g_spawn_async_with_pipes_and_fds = _frida_g_spawn_async_with_pipes_and_fds;
pub const g_spawn_check_exit_status = _frida_g_spawn_check_exit_status;
pub const g_spawn_check_wait_status = _frida_g_spawn_check_wait_status;
pub const g_spawn_close_pid = _frida_g_spawn_close_pid;
pub const g_spawn_command_line_async = _frida_g_spawn_command_line_async;
pub const g_spawn_command_line_sync = _frida_g_spawn_command_line_sync;
pub const g_spawn_error_quark = _frida_g_spawn_error_quark;
pub const g_spawn_exit_error_quark = _frida_g_spawn_exit_error_quark;
pub const g_spawn_sync = _frida_g_spawn_sync;
pub const g_srv_target_copy = _frida_g_srv_target_copy;
pub const g_srv_target_free = _frida_g_srv_target_free;
pub const g_srv_target_get_hostname = _frida_g_srv_target_get_hostname;
pub const g_srv_target_get_port = _frida_g_srv_target_get_port;
pub const g_srv_target_get_priority = _frida_g_srv_target_get_priority;
pub const g_srv_target_get_type = _frida_g_srv_target_get_type;
pub const g_srv_target_get_weight = _frida_g_srv_target_get_weight;
pub const g_srv_target_list_sort = _frida_g_srv_target_list_sort;
pub const g_srv_target_new = _frida_g_srv_target_new;
pub const g_static_mutex_free = _frida_g_static_mutex_free;
pub const g_static_mutex_get_mutex_impl = _frida_g_static_mutex_get_mutex_impl;
pub const g_static_mutex_init = _frida_g_static_mutex_init;
pub const g_static_private_free = _frida_g_static_private_free;
pub const g_static_private_get = _frida_g_static_private_get;
pub const g_static_private_init = _frida_g_static_private_init;
pub const g_static_private_set = _frida_g_static_private_set;
pub const g_static_rec_mutex_free = _frida_g_static_rec_mutex_free;
pub const g_static_rec_mutex_init = _frida_g_static_rec_mutex_init;
pub const g_static_rec_mutex_lock = _frida_g_static_rec_mutex_lock;
pub const g_static_rec_mutex_lock_full = _frida_g_static_rec_mutex_lock_full;
pub const g_static_rec_mutex_trylock = _frida_g_static_rec_mutex_trylock;
pub const g_static_rec_mutex_unlock = _frida_g_static_rec_mutex_unlock;
pub const g_static_rec_mutex_unlock_full = _frida_g_static_rec_mutex_unlock_full;
pub const g_static_resource_fini = _frida_g_static_resource_fini;
pub const g_static_resource_get_resource = _frida_g_static_resource_get_resource;
pub const g_static_resource_init = _frida_g_static_resource_init;
pub const g_static_rw_lock_free = _frida_g_static_rw_lock_free;
pub const g_static_rw_lock_init = _frida_g_static_rw_lock_init;
pub const g_static_rw_lock_reader_lock = _frida_g_static_rw_lock_reader_lock;
pub const g_static_rw_lock_reader_trylock = _frida_g_static_rw_lock_reader_trylock;
pub const g_static_rw_lock_reader_unlock = _frida_g_static_rw_lock_reader_unlock;
pub const g_static_rw_lock_writer_lock = _frida_g_static_rw_lock_writer_lock;
pub const g_static_rw_lock_writer_trylock = _frida_g_static_rw_lock_writer_trylock;
pub const g_static_rw_lock_writer_unlock = _frida_g_static_rw_lock_writer_unlock;
pub const g_stpcpy = _frida_g_stpcpy;
pub const g_str_equal = _frida_g_str_equal;
pub const g_str_has_prefix = _frida_g_str_has_prefix;
pub const g_str_has_suffix = _frida_g_str_has_suffix;
pub const g_str_hash = _frida_g_str_hash;
pub const g_str_is_ascii = _frida_g_str_is_ascii;
pub const g_str_match_string = _frida_g_str_match_string;
pub const g_str_to_ascii = _frida_g_str_to_ascii;
pub const g_str_tokenize_and_fold = _frida_g_str_tokenize_and_fold;
pub const g_strcanon = _frida_g_strcanon;
pub const g_strcasecmp = _frida_g_strcasecmp;
pub const g_strchomp = _frida_g_strchomp;
pub const g_strchug = _frida_g_strchug;
pub const g_strcmp0 = _frida_g_strcmp0;
pub const g_strcompress = _frida_g_strcompress;
pub const g_strconcat = _frida_g_strconcat;
pub const g_strdelimit = _frida_g_strdelimit;
pub const g_strdown = _frida_g_strdown;
pub const g_strdup = _frida_g_strdup;
pub const g_strdup_printf = _frida_g_strdup_printf;
pub const g_strdup_value_contents = _frida_g_strdup_value_contents;
pub const g_strdup_vprintf = _frida_g_strdup_vprintf;
pub const g_strdupv = _frida_g_strdupv;
pub const g_strerror = _frida_g_strerror;
pub const g_strescape = _frida_g_strescape;
pub const g_strfreev = _frida_g_strfreev;
pub const g_string_append = _frida_g_string_append;
pub const g_string_append_c = _frida_g_string_append_c;
pub const g_string_append_len = _frida_g_string_append_len;
pub const g_string_append_printf = _frida_g_string_append_printf;
pub const g_string_append_unichar = _frida_g_string_append_unichar;
pub const g_string_append_uri_escaped = _frida_g_string_append_uri_escaped;
pub const g_string_append_vprintf = _frida_g_string_append_vprintf;
pub const g_string_ascii_down = _frida_g_string_ascii_down;
pub const g_string_ascii_up = _frida_g_string_ascii_up;
pub const g_string_assign = _frida_g_string_assign;
pub const g_string_chunk_clear = _frida_g_string_chunk_clear;
pub const g_string_chunk_free = _frida_g_string_chunk_free;
pub const g_string_chunk_insert = _frida_g_string_chunk_insert;
pub const g_string_chunk_insert_const = _frida_g_string_chunk_insert_const;
pub const g_string_chunk_insert_len = _frida_g_string_chunk_insert_len;
pub const g_string_chunk_new = _frida_g_string_chunk_new;
pub const g_string_down = _frida_g_string_down;
pub const g_string_equal = _frida_g_string_equal;
pub const g_string_erase = _frida_g_string_erase;
pub const g_string_free = _frida_g_string_free;
pub const g_string_free_to_bytes = _frida_g_string_free_to_bytes;
pub const g_string_hash = _frida_g_string_hash;
pub const g_string_insert = _frida_g_string_insert;
pub const g_string_insert_c = _frida_g_string_insert_c;
pub const g_string_insert_len = _frida_g_string_insert_len;
pub const g_string_insert_unichar = _frida_g_string_insert_unichar;
pub const g_string_new = _frida_g_string_new;
pub const g_string_new_len = _frida_g_string_new_len;
pub const g_string_overwrite = _frida_g_string_overwrite;
pub const g_string_overwrite_len = _frida_g_string_overwrite_len;
pub const g_string_prepend = _frida_g_string_prepend;
pub const g_string_prepend_c = _frida_g_string_prepend_c;
pub const g_string_prepend_len = _frida_g_string_prepend_len;
pub const g_string_prepend_unichar = _frida_g_string_prepend_unichar;
pub const g_string_printf = _frida_g_string_printf;
pub const g_string_replace = _frida_g_string_replace;
pub const g_string_set_size = _frida_g_string_set_size;
pub const g_string_sized_new = _frida_g_string_sized_new;
pub const g_string_truncate = _frida_g_string_truncate;
pub const g_string_up = _frida_g_string_up;
pub const g_string_vprintf = _frida_g_string_vprintf;
pub const g_strip_context = _frida_g_strip_context;
pub const g_strjoin = _frida_g_strjoin;
pub const g_strjoinv = _frida_g_strjoinv;
pub const g_strlcat = _frida_g_strlcat;
pub const g_strlcpy = _frida_g_strlcpy;
pub const g_strncasecmp = _frida_g_strncasecmp;
pub const g_strndup = _frida_g_strndup;
pub const g_strnfill = _frida_g_strnfill;
pub const g_strreverse = _frida_g_strreverse;
pub const g_strrstr = _frida_g_strrstr;
pub const g_strrstr_len = _frida_g_strrstr_len;
pub const g_strsignal = _frida_g_strsignal;
pub const g_strsplit = _frida_g_strsplit;
pub const g_strsplit_set = _frida_g_strsplit_set;
pub const g_strstr_len = _frida_g_strstr_len;
pub const g_strtod = _frida_g_strtod;
pub const g_strup = _frida_g_strup;
pub const g_strv_builder_add = _frida_g_strv_builder_add;
pub const g_strv_builder_add_many = _frida_g_strv_builder_add_many;
pub const g_strv_builder_addv = _frida_g_strv_builder_addv;
pub const g_strv_builder_end = _frida_g_strv_builder_end;
pub const g_strv_builder_new = _frida_g_strv_builder_new;
pub const g_strv_builder_ref = _frida_g_strv_builder_ref;
pub const g_strv_builder_unref = _frida_g_strv_builder_unref;
pub const g_strv_contains = _frida_g_strv_contains;
pub const g_strv_equal = _frida_g_strv_equal;
pub const g_strv_get_type = _frida_g_strv_get_type;
pub const g_strv_length = _frida_g_strv_length;
pub const g_subprocess_communicate = _frida_g_subprocess_communicate;
pub const g_subprocess_communicate_async = _frida_g_subprocess_communicate_async;
pub const g_subprocess_communicate_finish = _frida_g_subprocess_communicate_finish;
pub const g_subprocess_communicate_utf8 = _frida_g_subprocess_communicate_utf8;
pub const g_subprocess_communicate_utf8_async = _frida_g_subprocess_communicate_utf8_async;
pub const g_subprocess_communicate_utf8_finish = _frida_g_subprocess_communicate_utf8_finish;
pub const g_subprocess_flags_get_type = _frida_g_subprocess_flags_get_type;
pub const g_subprocess_force_exit = _frida_g_subprocess_force_exit;
pub const g_subprocess_get_exit_status = _frida_g_subprocess_get_exit_status;
pub const g_subprocess_get_identifier = _frida_g_subprocess_get_identifier;
pub const g_subprocess_get_if_exited = _frida_g_subprocess_get_if_exited;
pub const g_subprocess_get_if_signaled = _frida_g_subprocess_get_if_signaled;
pub const g_subprocess_get_status = _frida_g_subprocess_get_status;
pub const g_subprocess_get_stderr_pipe = _frida_g_subprocess_get_stderr_pipe;
pub const g_subprocess_get_stdin_pipe = _frida_g_subprocess_get_stdin_pipe;
pub const g_subprocess_get_stdout_pipe = _frida_g_subprocess_get_stdout_pipe;
pub const g_subprocess_get_successful = _frida_g_subprocess_get_successful;
pub const g_subprocess_get_term_sig = _frida_g_subprocess_get_term_sig;
pub const g_subprocess_get_type = _frida_g_subprocess_get_type;
pub const g_subprocess_launcher_close = _frida_g_subprocess_launcher_close;
pub const g_subprocess_launcher_get_type = _frida_g_subprocess_launcher_get_type;
pub const g_subprocess_launcher_getenv = _frida_g_subprocess_launcher_getenv;
pub const g_subprocess_launcher_new = _frida_g_subprocess_launcher_new;
pub const g_subprocess_launcher_set_child_setup = _frida_g_subprocess_launcher_set_child_setup;
pub const g_subprocess_launcher_set_cwd = _frida_g_subprocess_launcher_set_cwd;
pub const g_subprocess_launcher_set_environ = _frida_g_subprocess_launcher_set_environ;
pub const g_subprocess_launcher_set_flags = _frida_g_subprocess_launcher_set_flags;
pub const g_subprocess_launcher_set_stderr_file_path = _frida_g_subprocess_launcher_set_stderr_file_path;
pub const g_subprocess_launcher_set_stdin_file_path = _frida_g_subprocess_launcher_set_stdin_file_path;
pub const g_subprocess_launcher_set_stdout_file_path = _frida_g_subprocess_launcher_set_stdout_file_path;
pub const g_subprocess_launcher_setenv = _frida_g_subprocess_launcher_setenv;
pub const g_subprocess_launcher_spawn = _frida_g_subprocess_launcher_spawn;
pub const g_subprocess_launcher_spawnv = _frida_g_subprocess_launcher_spawnv;
pub const g_subprocess_launcher_take_fd = _frida_g_subprocess_launcher_take_fd;
pub const g_subprocess_launcher_take_stderr_fd = _frida_g_subprocess_launcher_take_stderr_fd;
pub const g_subprocess_launcher_take_stdin_fd = _frida_g_subprocess_launcher_take_stdin_fd;
pub const g_subprocess_launcher_take_stdout_fd = _frida_g_subprocess_launcher_take_stdout_fd;
pub const g_subprocess_launcher_unsetenv = _frida_g_subprocess_launcher_unsetenv;
pub const g_subprocess_new = _frida_g_subprocess_new;
pub const g_subprocess_newv = _frida_g_subprocess_newv;
pub const g_subprocess_send_signal = _frida_g_subprocess_send_signal;
pub const g_subprocess_wait = _frida_g_subprocess_wait;
pub const g_subprocess_wait_async = _frida_g_subprocess_wait_async;
pub const g_subprocess_wait_check = _frida_g_subprocess_wait_check;
pub const g_subprocess_wait_check_async = _frida_g_subprocess_wait_check_async;
pub const g_subprocess_wait_check_finish = _frida_g_subprocess_wait_check_finish;
pub const g_subprocess_wait_finish = _frida_g_subprocess_wait_finish;
pub const g_task_attach_source = _frida_g_task_attach_source;
pub const g_task_get_cancellable = _frida_g_task_get_cancellable;
pub const g_task_get_check_cancellable = _frida_g_task_get_check_cancellable;
pub const g_task_get_completed = _frida_g_task_get_completed;
pub const g_task_get_context = _frida_g_task_get_context;
pub const g_task_get_name = _frida_g_task_get_name;
pub const g_task_get_priority = _frida_g_task_get_priority;
pub const g_task_get_return_on_cancel = _frida_g_task_get_return_on_cancel;
pub const g_task_get_source_object = _frida_g_task_get_source_object;
pub const g_task_get_source_tag = _frida_g_task_get_source_tag;
pub const g_task_get_task_data = _frida_g_task_get_task_data;
pub const g_task_get_type = _frida_g_task_get_type;
pub const g_task_had_error = _frida_g_task_had_error;
pub const g_task_is_valid = _frida_g_task_is_valid;
pub const g_task_new = _frida_g_task_new;
pub const g_task_propagate_boolean = _frida_g_task_propagate_boolean;
pub const g_task_propagate_int = _frida_g_task_propagate_int;
pub const g_task_propagate_pointer = _frida_g_task_propagate_pointer;
pub const g_task_propagate_value = _frida_g_task_propagate_value;
pub const g_task_report_error = _frida_g_task_report_error;
pub const g_task_report_new_error = _frida_g_task_report_new_error;
pub const g_task_return_boolean = _frida_g_task_return_boolean;
pub const g_task_return_error = _frida_g_task_return_error;
pub const g_task_return_error_if_cancelled = _frida_g_task_return_error_if_cancelled;
pub const g_task_return_int = _frida_g_task_return_int;
pub const g_task_return_new_error = _frida_g_task_return_new_error;
pub const g_task_return_pointer = _frida_g_task_return_pointer;
pub const g_task_return_value = _frida_g_task_return_value;
pub const g_task_run_in_thread = _frida_g_task_run_in_thread;
pub const g_task_run_in_thread_sync = _frida_g_task_run_in_thread_sync;
pub const g_task_set_check_cancellable = _frida_g_task_set_check_cancellable;
pub const g_task_set_name = _frida_g_task_set_name;
pub const g_task_set_priority = _frida_g_task_set_priority;
pub const g_task_set_return_on_cancel = _frida_g_task_set_return_on_cancel;
pub const g_task_set_source_tag = _frida_g_task_set_source_tag;
pub const g_task_set_static_name = _frida_g_task_set_static_name;
pub const g_task_set_task_data = _frida_g_task_set_task_data;
pub const g_tcp_connection_get_graceful_disconnect = _frida_g_tcp_connection_get_graceful_disconnect;
pub const g_tcp_connection_get_type = _frida_g_tcp_connection_get_type;
pub const g_tcp_connection_set_graceful_disconnect = _frida_g_tcp_connection_set_graceful_disconnect;
pub const g_tcp_wrapper_connection_get_base_io_stream = _frida_g_tcp_wrapper_connection_get_base_io_stream;
pub const g_tcp_wrapper_connection_get_type = _frida_g_tcp_wrapper_connection_get_type;
pub const g_tcp_wrapper_connection_new = _frida_g_tcp_wrapper_connection_new;
pub const g_test_add_data_func = _frida_g_test_add_data_func;
pub const g_test_add_data_func_full = _frida_g_test_add_data_func_full;
pub const g_test_add_func = _frida_g_test_add_func;
pub const g_test_add_vtable = _frida_g_test_add_vtable;
pub const g_test_assert_expected_messages_internal = _frida_g_test_assert_expected_messages_internal;
pub const g_test_bug = _frida_g_test_bug;
pub const g_test_bug_base = _frida_g_test_bug_base;
pub const g_test_build_filename = _frida_g_test_build_filename;
pub const g_test_case_free = _frida_g_test_case_free;
pub const g_test_config_vars = _frida_g_test_config_vars;
pub const g_test_create_case = _frida_g_test_create_case;
pub const g_test_create_suite = _frida_g_test_create_suite;
pub const g_test_dbus_add_service_dir = _frida_g_test_dbus_add_service_dir;
pub const g_test_dbus_down = _frida_g_test_dbus_down;
pub const g_test_dbus_flags_get_type = _frida_g_test_dbus_flags_get_type;
pub const g_test_dbus_get_bus_address = _frida_g_test_dbus_get_bus_address;
pub const g_test_dbus_get_flags = _frida_g_test_dbus_get_flags;
pub const g_test_dbus_get_type = _frida_g_test_dbus_get_type;
pub const g_test_dbus_new = _frida_g_test_dbus_new;
pub const g_test_dbus_stop = _frida_g_test_dbus_stop;
pub const g_test_dbus_unset = _frida_g_test_dbus_unset;
pub const g_test_dbus_up = _frida_g_test_dbus_up;
pub const g_test_expect_message = _frida_g_test_expect_message;
pub const g_test_fail = _frida_g_test_fail;
pub const g_test_fail_printf = _frida_g_test_fail_printf;
pub const g_test_failed = _frida_g_test_failed;
pub const g_test_get_dir = _frida_g_test_get_dir;
pub const g_test_get_filename = _frida_g_test_get_filename;
pub const g_test_get_path = _frida_g_test_get_path;
pub const g_test_get_root = _frida_g_test_get_root;
pub const g_test_incomplete = _frida_g_test_incomplete;
pub const g_test_incomplete_printf = _frida_g_test_incomplete_printf;
pub const g_test_init = _frida_g_test_init;
pub const g_test_log_buffer_free = _frida_g_test_log_buffer_free;
pub const g_test_log_buffer_new = _frida_g_test_log_buffer_new;
pub const g_test_log_buffer_pop = _frida_g_test_log_buffer_pop;
pub const g_test_log_buffer_push = _frida_g_test_log_buffer_push;
pub const g_test_log_msg_free = _frida_g_test_log_msg_free;
pub const g_test_log_set_fatal_handler = _frida_g_test_log_set_fatal_handler;
pub const g_test_log_type_name = _frida_g_test_log_type_name;
pub const g_test_maximized_result = _frida_g_test_maximized_result;
pub const g_test_message = _frida_g_test_message;
pub const g_test_minimized_result = _frida_g_test_minimized_result;
pub const g_test_queue_destroy = _frida_g_test_queue_destroy;
pub const g_test_queue_free = _frida_g_test_queue_free;
pub const g_test_rand_double = _frida_g_test_rand_double;
pub const g_test_rand_double_range = _frida_g_test_rand_double_range;
pub const g_test_rand_int = _frida_g_test_rand_int;
pub const g_test_rand_int_range = _frida_g_test_rand_int_range;
pub const g_test_run = _frida_g_test_run;
pub const g_test_run_suite = _frida_g_test_run_suite;
pub const g_test_set_nonfatal_assertions = _frida_g_test_set_nonfatal_assertions;
pub const g_test_skip = _frida_g_test_skip;
pub const g_test_skip_printf = _frida_g_test_skip_printf;
pub const g_test_subprocess = _frida_g_test_subprocess;
pub const g_test_suite_add = _frida_g_test_suite_add;
pub const g_test_suite_add_suite = _frida_g_test_suite_add_suite;
pub const g_test_suite_free = _frida_g_test_suite_free;
pub const g_test_summary = _frida_g_test_summary;
pub const g_test_timer_elapsed = _frida_g_test_timer_elapsed;
pub const g_test_timer_last = _frida_g_test_timer_last;
pub const g_test_timer_start = _frida_g_test_timer_start;
pub const g_test_trap_assertions = _frida_g_test_trap_assertions;
pub const g_test_trap_fork = _frida_g_test_trap_fork;
pub const g_test_trap_has_passed = _frida_g_test_trap_has_passed;
pub const g_test_trap_reached_timeout = _frida_g_test_trap_reached_timeout;
pub const g_test_trap_subprocess = _frida_g_test_trap_subprocess;
pub const g_themed_icon_append_name = _frida_g_themed_icon_append_name;
pub const g_themed_icon_get_names = _frida_g_themed_icon_get_names;
pub const g_themed_icon_get_type = _frida_g_themed_icon_get_type;
pub const g_themed_icon_new = _frida_g_themed_icon_new;
pub const g_themed_icon_new_from_names = _frida_g_themed_icon_new_from_names;
pub const g_themed_icon_new_with_default_fallbacks = _frida_g_themed_icon_new_with_default_fallbacks;
pub const g_themed_icon_prepend_name = _frida_g_themed_icon_prepend_name;
pub const g_thread_create = _frida_g_thread_create;
pub const g_thread_create_full = _frida_g_thread_create_full;
pub const g_thread_error_quark = _frida_g_thread_error_quark;
pub const g_thread_exit = _frida_g_thread_exit;
pub const g_thread_foreach = _frida_g_thread_foreach;
pub const g_thread_functions_for_glib_use = _frida_g_thread_functions_for_glib_use;
pub const g_thread_garbage_collect = _frida_g_thread_garbage_collect;
pub const g_thread_get_initialized = _frida_g_thread_get_initialized;
pub const g_thread_get_type = _frida_g_thread_get_type;
pub inline fn g_thread_gettime() guint64 {
    return _frida_g_thread_gettime.?();
}
pub const g_thread_init = _frida_g_thread_init;
pub const g_thread_init_with_errorcheck_mutexes = _frida_g_thread_init_with_errorcheck_mutexes;
pub const g_thread_join = _frida_g_thread_join;
pub const g_thread_new = _frida_g_thread_new;
pub const g_thread_pool_free = _frida_g_thread_pool_free;
pub const g_thread_pool_get_max_idle_time = _frida_g_thread_pool_get_max_idle_time;
pub const g_thread_pool_get_max_threads = _frida_g_thread_pool_get_max_threads;
pub const g_thread_pool_get_max_unused_threads = _frida_g_thread_pool_get_max_unused_threads;
pub const g_thread_pool_get_num_threads = _frida_g_thread_pool_get_num_threads;
pub const g_thread_pool_get_num_unused_threads = _frida_g_thread_pool_get_num_unused_threads;
pub const g_thread_pool_move_to_front = _frida_g_thread_pool_move_to_front;
pub const g_thread_pool_new = _frida_g_thread_pool_new;
pub const g_thread_pool_new_full = _frida_g_thread_pool_new_full;
pub const g_thread_pool_push = _frida_g_thread_pool_push;
pub const g_thread_pool_set_max_idle_time = _frida_g_thread_pool_set_max_idle_time;
pub const g_thread_pool_set_max_threads = _frida_g_thread_pool_set_max_threads;
pub const g_thread_pool_set_max_unused_threads = _frida_g_thread_pool_set_max_unused_threads;
pub const g_thread_pool_set_sort_function = _frida_g_thread_pool_set_sort_function;
pub const g_thread_pool_stop_unused_threads = _frida_g_thread_pool_stop_unused_threads;
pub const g_thread_pool_unprocessed = _frida_g_thread_pool_unprocessed;
pub const g_thread_ref = _frida_g_thread_ref;
pub const g_thread_self = _frida_g_thread_self;
pub const g_thread_set_callbacks = _frida_g_thread_set_callbacks;
pub const g_thread_set_garbage_handler = _frida_g_thread_set_garbage_handler;
pub const g_thread_set_priority = _frida_g_thread_set_priority;
pub const g_thread_try_new = _frida_g_thread_try_new;
pub const g_thread_unref = _frida_g_thread_unref;
pub const g_thread_use_default_impl = _frida_g_thread_use_default_impl;
pub const g_thread_yield = _frida_g_thread_yield;
pub const g_threaded_socket_service_get_type = _frida_g_threaded_socket_service_get_type;
pub const g_threaded_socket_service_new = _frida_g_threaded_socket_service_new;
pub const g_threads_got_initialized = _frida_g_threads_got_initialized;
pub const g_time_val_add = _frida_g_time_val_add;
pub const g_time_val_from_iso8601 = _frida_g_time_val_from_iso8601;
pub const g_time_val_to_iso8601 = _frida_g_time_val_to_iso8601;
pub const g_time_zone_adjust_time = _frida_g_time_zone_adjust_time;
pub const g_time_zone_find_interval = _frida_g_time_zone_find_interval;
pub const g_time_zone_get_abbreviation = _frida_g_time_zone_get_abbreviation;
pub const g_time_zone_get_identifier = _frida_g_time_zone_get_identifier;
pub const g_time_zone_get_offset = _frida_g_time_zone_get_offset;
pub const g_time_zone_get_type = _frida_g_time_zone_get_type;
pub const g_time_zone_is_dst = _frida_g_time_zone_is_dst;
pub const g_time_zone_new = _frida_g_time_zone_new;
pub const g_time_zone_new_identifier = _frida_g_time_zone_new_identifier;
pub const g_time_zone_new_local = _frida_g_time_zone_new_local;
pub const g_time_zone_new_offset = _frida_g_time_zone_new_offset;
pub const g_time_zone_new_utc = _frida_g_time_zone_new_utc;
pub const g_time_zone_ref = _frida_g_time_zone_ref;
pub const g_time_zone_unref = _frida_g_time_zone_unref;
pub const g_timeout_add = _frida_g_timeout_add;
pub const g_timeout_add_full = _frida_g_timeout_add_full;
pub const g_timeout_add_once = _frida_g_timeout_add_once;
pub const g_timeout_add_seconds = _frida_g_timeout_add_seconds;
pub const g_timeout_add_seconds_full = _frida_g_timeout_add_seconds_full;
pub const g_timeout_funcs = _frida_g_timeout_funcs;
pub const g_timeout_source_new = _frida_g_timeout_source_new;
pub const g_timeout_source_new_seconds = _frida_g_timeout_source_new_seconds;
pub const g_timer_continue = _frida_g_timer_continue;
pub const g_timer_destroy = _frida_g_timer_destroy;
pub const g_timer_elapsed = _frida_g_timer_elapsed;
pub const g_timer_is_active = _frida_g_timer_is_active;
pub const g_timer_new = _frida_g_timer_new;
pub const g_timer_reset = _frida_g_timer_reset;
pub const g_timer_start = _frida_g_timer_start;
pub const g_timer_stop = _frida_g_timer_stop;
pub const g_tls_authentication_mode_get_type = _frida_g_tls_authentication_mode_get_type;
pub const g_tls_backend_get_certificate_type = _frida_g_tls_backend_get_certificate_type;
pub const g_tls_backend_get_client_connection_type = _frida_g_tls_backend_get_client_connection_type;
pub const g_tls_backend_get_default = _frida_g_tls_backend_get_default;
pub const g_tls_backend_get_default_database = _frida_g_tls_backend_get_default_database;
pub const g_tls_backend_get_dtls_client_connection_type = _frida_g_tls_backend_get_dtls_client_connection_type;
pub const g_tls_backend_get_dtls_server_connection_type = _frida_g_tls_backend_get_dtls_server_connection_type;
pub const g_tls_backend_get_file_database_type = _frida_g_tls_backend_get_file_database_type;
pub const g_tls_backend_get_server_connection_type = _frida_g_tls_backend_get_server_connection_type;
pub const g_tls_backend_get_type = _frida_g_tls_backend_get_type;
pub const g_tls_backend_set_default_database = _frida_g_tls_backend_set_default_database;
pub const g_tls_backend_supports_dtls = _frida_g_tls_backend_supports_dtls;
pub const g_tls_backend_supports_tls = _frida_g_tls_backend_supports_tls;
pub const g_tls_certificate_flags_get_type = _frida_g_tls_certificate_flags_get_type;
pub const g_tls_certificate_get_dns_names = _frida_g_tls_certificate_get_dns_names;
pub const g_tls_certificate_get_ip_addresses = _frida_g_tls_certificate_get_ip_addresses;
pub const g_tls_certificate_get_issuer = _frida_g_tls_certificate_get_issuer;
pub const g_tls_certificate_get_issuer_name = _frida_g_tls_certificate_get_issuer_name;
pub const g_tls_certificate_get_not_valid_after = _frida_g_tls_certificate_get_not_valid_after;
pub const g_tls_certificate_get_not_valid_before = _frida_g_tls_certificate_get_not_valid_before;
pub const g_tls_certificate_get_subject_name = _frida_g_tls_certificate_get_subject_name;
pub const g_tls_certificate_get_type = _frida_g_tls_certificate_get_type;
pub const g_tls_certificate_is_same = _frida_g_tls_certificate_is_same;
pub const g_tls_certificate_list_new_from_file = _frida_g_tls_certificate_list_new_from_file;
pub const g_tls_certificate_new_from_file = _frida_g_tls_certificate_new_from_file;
pub const g_tls_certificate_new_from_file_with_password = _frida_g_tls_certificate_new_from_file_with_password;
pub const g_tls_certificate_new_from_files = _frida_g_tls_certificate_new_from_files;
pub const g_tls_certificate_new_from_pem = _frida_g_tls_certificate_new_from_pem;
pub const g_tls_certificate_new_from_pkcs11_uris = _frida_g_tls_certificate_new_from_pkcs11_uris;
pub const g_tls_certificate_new_from_pkcs12 = _frida_g_tls_certificate_new_from_pkcs12;
pub const g_tls_certificate_request_flags_get_type = _frida_g_tls_certificate_request_flags_get_type;
pub const g_tls_certificate_verify = _frida_g_tls_certificate_verify;
pub const g_tls_channel_binding_error_get_type = _frida_g_tls_channel_binding_error_get_type;
pub const g_tls_channel_binding_error_quark = _frida_g_tls_channel_binding_error_quark;
pub const g_tls_channel_binding_type_get_type = _frida_g_tls_channel_binding_type_get_type;
pub const g_tls_client_connection_copy_session_state = _frida_g_tls_client_connection_copy_session_state;
pub const g_tls_client_connection_get_accepted_cas = _frida_g_tls_client_connection_get_accepted_cas;
pub const g_tls_client_connection_get_server_identity = _frida_g_tls_client_connection_get_server_identity;
pub const g_tls_client_connection_get_type = _frida_g_tls_client_connection_get_type;
pub const g_tls_client_connection_get_use_ssl3 = _frida_g_tls_client_connection_get_use_ssl3;
pub const g_tls_client_connection_get_validation_flags = _frida_g_tls_client_connection_get_validation_flags;
pub const g_tls_client_connection_new = _frida_g_tls_client_connection_new;
pub const g_tls_client_connection_set_server_identity = _frida_g_tls_client_connection_set_server_identity;
pub const g_tls_client_connection_set_use_ssl3 = _frida_g_tls_client_connection_set_use_ssl3;
pub const g_tls_client_connection_set_validation_flags = _frida_g_tls_client_connection_set_validation_flags;
pub const g_tls_connection_emit_accept_certificate = _frida_g_tls_connection_emit_accept_certificate;
pub const g_tls_connection_get_certificate = _frida_g_tls_connection_get_certificate;
pub const g_tls_connection_get_channel_binding_data = _frida_g_tls_connection_get_channel_binding_data;
pub const g_tls_connection_get_ciphersuite_name = _frida_g_tls_connection_get_ciphersuite_name;
pub const g_tls_connection_get_database = _frida_g_tls_connection_get_database;
pub const g_tls_connection_get_interaction = _frida_g_tls_connection_get_interaction;
pub const g_tls_connection_get_negotiated_protocol = _frida_g_tls_connection_get_negotiated_protocol;
pub const g_tls_connection_get_peer_certificate = _frida_g_tls_connection_get_peer_certificate;
pub const g_tls_connection_get_peer_certificate_errors = _frida_g_tls_connection_get_peer_certificate_errors;
pub const g_tls_connection_get_protocol_version = _frida_g_tls_connection_get_protocol_version;
pub const g_tls_connection_get_rehandshake_mode = _frida_g_tls_connection_get_rehandshake_mode;
pub const g_tls_connection_get_require_close_notify = _frida_g_tls_connection_get_require_close_notify;
pub const g_tls_connection_get_type = _frida_g_tls_connection_get_type;
pub const g_tls_connection_get_use_system_certdb = _frida_g_tls_connection_get_use_system_certdb;
pub const g_tls_connection_handshake = _frida_g_tls_connection_handshake;
pub const g_tls_connection_handshake_async = _frida_g_tls_connection_handshake_async;
pub const g_tls_connection_handshake_finish = _frida_g_tls_connection_handshake_finish;
pub const g_tls_connection_set_advertised_protocols = _frida_g_tls_connection_set_advertised_protocols;
pub const g_tls_connection_set_certificate = _frida_g_tls_connection_set_certificate;
pub const g_tls_connection_set_database = _frida_g_tls_connection_set_database;
pub const g_tls_connection_set_interaction = _frida_g_tls_connection_set_interaction;
pub const g_tls_connection_set_rehandshake_mode = _frida_g_tls_connection_set_rehandshake_mode;
pub const g_tls_connection_set_require_close_notify = _frida_g_tls_connection_set_require_close_notify;
pub const g_tls_connection_set_use_system_certdb = _frida_g_tls_connection_set_use_system_certdb;
pub const g_tls_database_create_certificate_handle = _frida_g_tls_database_create_certificate_handle;
pub const g_tls_database_get_type = _frida_g_tls_database_get_type;
pub const g_tls_database_lookup_certificate_for_handle = _frida_g_tls_database_lookup_certificate_for_handle;
pub const g_tls_database_lookup_certificate_for_handle_async = _frida_g_tls_database_lookup_certificate_for_handle_async;
pub const g_tls_database_lookup_certificate_for_handle_finish = _frida_g_tls_database_lookup_certificate_for_handle_finish;
pub const g_tls_database_lookup_certificate_issuer = _frida_g_tls_database_lookup_certificate_issuer;
pub const g_tls_database_lookup_certificate_issuer_async = _frida_g_tls_database_lookup_certificate_issuer_async;
pub const g_tls_database_lookup_certificate_issuer_finish = _frida_g_tls_database_lookup_certificate_issuer_finish;
pub const g_tls_database_lookup_certificates_issued_by = _frida_g_tls_database_lookup_certificates_issued_by;
pub const g_tls_database_lookup_certificates_issued_by_async = _frida_g_tls_database_lookup_certificates_issued_by_async;
pub const g_tls_database_lookup_certificates_issued_by_finish = _frida_g_tls_database_lookup_certificates_issued_by_finish;
pub const g_tls_database_lookup_flags_get_type = _frida_g_tls_database_lookup_flags_get_type;
pub const g_tls_database_verify_chain = _frida_g_tls_database_verify_chain;
pub const g_tls_database_verify_chain_async = _frida_g_tls_database_verify_chain_async;
pub const g_tls_database_verify_chain_finish = _frida_g_tls_database_verify_chain_finish;
pub const g_tls_database_verify_flags_get_type = _frida_g_tls_database_verify_flags_get_type;
pub const g_tls_error_get_type = _frida_g_tls_error_get_type;
pub const g_tls_error_quark = _frida_g_tls_error_quark;
pub const g_tls_file_database_get_type = _frida_g_tls_file_database_get_type;
pub const g_tls_file_database_new = _frida_g_tls_file_database_new;
pub const g_tls_interaction_ask_password = _frida_g_tls_interaction_ask_password;
pub const g_tls_interaction_ask_password_async = _frida_g_tls_interaction_ask_password_async;
pub const g_tls_interaction_ask_password_finish = _frida_g_tls_interaction_ask_password_finish;
pub const g_tls_interaction_get_type = _frida_g_tls_interaction_get_type;
pub const g_tls_interaction_invoke_ask_password = _frida_g_tls_interaction_invoke_ask_password;
pub const g_tls_interaction_invoke_request_certificate = _frida_g_tls_interaction_invoke_request_certificate;
pub const g_tls_interaction_request_certificate = _frida_g_tls_interaction_request_certificate;
pub const g_tls_interaction_request_certificate_async = _frida_g_tls_interaction_request_certificate_async;
pub const g_tls_interaction_request_certificate_finish = _frida_g_tls_interaction_request_certificate_finish;
pub const g_tls_interaction_result_get_type = _frida_g_tls_interaction_result_get_type;
pub const g_tls_password_flags_get_type = _frida_g_tls_password_flags_get_type;
pub const g_tls_password_get_description = _frida_g_tls_password_get_description;
pub const g_tls_password_get_flags = _frida_g_tls_password_get_flags;
pub const g_tls_password_get_type = _frida_g_tls_password_get_type;
pub const g_tls_password_get_value = _frida_g_tls_password_get_value;
pub const g_tls_password_get_warning = _frida_g_tls_password_get_warning;
pub const g_tls_password_new = _frida_g_tls_password_new;
pub const g_tls_password_set_description = _frida_g_tls_password_set_description;
pub const g_tls_password_set_flags = _frida_g_tls_password_set_flags;
pub const g_tls_password_set_value = _frida_g_tls_password_set_value;
pub const g_tls_password_set_value_full = _frida_g_tls_password_set_value_full;
pub const g_tls_password_set_warning = _frida_g_tls_password_set_warning;
pub const g_tls_protocol_version_get_type = _frida_g_tls_protocol_version_get_type;
pub const g_tls_rehandshake_mode_get_type = _frida_g_tls_rehandshake_mode_get_type;
pub const g_tls_server_connection_get_type = _frida_g_tls_server_connection_get_type;
pub const g_tls_server_connection_new = _frida_g_tls_server_connection_new;
pub const g_trash_stack_height = _frida_g_trash_stack_height;
pub const g_trash_stack_peek = _frida_g_trash_stack_peek;
pub const g_trash_stack_pop = _frida_g_trash_stack_pop;
pub const g_trash_stack_push = _frida_g_trash_stack_push;
pub const g_tree_destroy = _frida_g_tree_destroy;
pub const g_tree_foreach = _frida_g_tree_foreach;
pub const g_tree_foreach_node = _frida_g_tree_foreach_node;
pub const g_tree_get_type = _frida_g_tree_get_type;
pub const g_tree_height = _frida_g_tree_height;
pub const g_tree_insert = _frida_g_tree_insert;
pub const g_tree_insert_node = _frida_g_tree_insert_node;
pub const g_tree_lookup = _frida_g_tree_lookup;
pub const g_tree_lookup_extended = _frida_g_tree_lookup_extended;
pub const g_tree_lookup_node = _frida_g_tree_lookup_node;
pub const g_tree_lower_bound = _frida_g_tree_lower_bound;
pub const g_tree_new = _frida_g_tree_new;
pub const g_tree_new_full = _frida_g_tree_new_full;
pub const g_tree_new_with_data = _frida_g_tree_new_with_data;
pub const g_tree_nnodes = _frida_g_tree_nnodes;
pub const g_tree_node_first = _frida_g_tree_node_first;
pub const g_tree_node_key = _frida_g_tree_node_key;
pub const g_tree_node_last = _frida_g_tree_node_last;
pub const g_tree_node_next = _frida_g_tree_node_next;
pub const g_tree_node_previous = _frida_g_tree_node_previous;
pub const g_tree_node_value = _frida_g_tree_node_value;
pub const g_tree_ref = _frida_g_tree_ref;
pub const g_tree_remove = _frida_g_tree_remove;
pub const g_tree_remove_all = _frida_g_tree_remove_all;
pub const g_tree_replace = _frida_g_tree_replace;
pub const g_tree_replace_node = _frida_g_tree_replace_node;
pub const g_tree_search = _frida_g_tree_search;
pub const g_tree_search_node = _frida_g_tree_search_node;
pub const g_tree_steal = _frida_g_tree_steal;
pub const g_tree_traverse = _frida_g_tree_traverse;
pub const g_tree_unref = _frida_g_tree_unref;
pub const g_tree_upper_bound = _frida_g_tree_upper_bound;
pub const g_try_malloc = _frida_g_try_malloc;
pub const g_try_malloc0 = _frida_g_try_malloc0;
pub const g_try_malloc0_n = _frida_g_try_malloc0_n;
pub const g_try_malloc_n = _frida_g_try_malloc_n;
pub const g_try_realloc = _frida_g_try_realloc;
pub const g_try_realloc_n = _frida_g_try_realloc_n;
pub const g_tuples_destroy = _frida_g_tuples_destroy;
pub const g_tuples_index = _frida_g_tuples_index;
pub const g_type_add_class_cache_func = _frida_g_type_add_class_cache_func;
pub const g_type_add_class_private = _frida_g_type_add_class_private;
pub const g_type_add_instance_private = _frida_g_type_add_instance_private;
pub const g_type_add_interface_check = _frida_g_type_add_interface_check;
pub const g_type_add_interface_dynamic = _frida_g_type_add_interface_dynamic;
pub const g_type_add_interface_static = _frida_g_type_add_interface_static;
pub const g_type_check_class_cast = _frida_g_type_check_class_cast;
pub const g_type_check_class_is_a = _frida_g_type_check_class_is_a;
pub const g_type_check_instance = _frida_g_type_check_instance;
pub const g_type_check_instance_cast = _frida_g_type_check_instance_cast;
pub const g_type_check_instance_is_a = _frida_g_type_check_instance_is_a;
pub const g_type_check_instance_is_fundamentally_a = _frida_g_type_check_instance_is_fundamentally_a;
pub const g_type_check_is_value_type = _frida_g_type_check_is_value_type;
pub const g_type_check_value = _frida_g_type_check_value;
pub const g_type_check_value_holds = _frida_g_type_check_value_holds;
pub const g_type_children = _frida_g_type_children;
pub const g_type_class_add_private = _frida_g_type_class_add_private;
pub const g_type_class_adjust_private_offset = _frida_g_type_class_adjust_private_offset;
pub const g_type_class_get_instance_private_offset = _frida_g_type_class_get_instance_private_offset;
pub const g_type_class_get_private = _frida_g_type_class_get_private;
pub const g_type_class_peek = _frida_g_type_class_peek;
pub const g_type_class_peek_parent = _frida_g_type_class_peek_parent;
pub const g_type_class_peek_static = _frida_g_type_class_peek_static;
pub const g_type_class_ref = _frida_g_type_class_ref;
pub const g_type_class_unref = _frida_g_type_class_unref;
pub const g_type_class_unref_uncached = _frida_g_type_class_unref_uncached;
pub const g_type_create_instance = _frida_g_type_create_instance;
pub const g_type_default_interface_peek = _frida_g_type_default_interface_peek;
pub const g_type_default_interface_ref = _frida_g_type_default_interface_ref;
pub const g_type_default_interface_unref = _frida_g_type_default_interface_unref;
pub const g_type_depth = _frida_g_type_depth;
pub const g_type_ensure = _frida_g_type_ensure;
pub const g_type_free_instance = _frida_g_type_free_instance;
pub const g_type_from_name = _frida_g_type_from_name;
pub const g_type_fundamental = _frida_g_type_fundamental;
pub const g_type_fundamental_next = _frida_g_type_fundamental_next;
pub const g_type_get_instance_count = _frida_g_type_get_instance_count;
pub const g_type_get_plugin = _frida_g_type_get_plugin;
pub const g_type_get_qdata = _frida_g_type_get_qdata;
pub const g_type_get_type_registration_serial = _frida_g_type_get_type_registration_serial;
pub const g_type_init = _frida_g_type_init;
pub const g_type_init_with_debug_flags = _frida_g_type_init_with_debug_flags;
pub const g_type_instance_get_private = _frida_g_type_instance_get_private;
pub const g_type_interface_add_prerequisite = _frida_g_type_interface_add_prerequisite;
pub const g_type_interface_get_plugin = _frida_g_type_interface_get_plugin;
pub const g_type_interface_instantiatable_prerequisite = _frida_g_type_interface_instantiatable_prerequisite;
pub const g_type_interface_peek = _frida_g_type_interface_peek;
pub const g_type_interface_peek_parent = _frida_g_type_interface_peek_parent;
pub const g_type_interface_prerequisites = _frida_g_type_interface_prerequisites;
pub const g_type_interfaces = _frida_g_type_interfaces;
pub const g_type_is_a = _frida_g_type_is_a;
pub const g_type_module_add_interface = _frida_g_type_module_add_interface;
pub const g_type_module_get_type = _frida_g_type_module_get_type;
pub const g_type_module_register_enum = _frida_g_type_module_register_enum;
pub const g_type_module_register_flags = _frida_g_type_module_register_flags;
pub const g_type_module_register_type = _frida_g_type_module_register_type;
pub const g_type_module_set_name = _frida_g_type_module_set_name;
pub const g_type_module_unuse = _frida_g_type_module_unuse;
pub const g_type_module_use = _frida_g_type_module_use;
pub const g_type_name = _frida_g_type_name;
pub const g_type_name_from_class = _frida_g_type_name_from_class;
pub const g_type_name_from_instance = _frida_g_type_name_from_instance;
pub const g_type_next_base = _frida_g_type_next_base;
pub const g_type_parent = _frida_g_type_parent;
pub const g_type_plugin_complete_interface_info = _frida_g_type_plugin_complete_interface_info;
pub const g_type_plugin_complete_type_info = _frida_g_type_plugin_complete_type_info;
pub const g_type_plugin_get_type = _frida_g_type_plugin_get_type;
pub const g_type_plugin_unuse = _frida_g_type_plugin_unuse;
pub const g_type_plugin_use = _frida_g_type_plugin_use;
pub const g_type_qname = _frida_g_type_qname;
pub const g_type_query = _frida_g_type_query;
pub const g_type_register_dynamic = _frida_g_type_register_dynamic;
pub const g_type_register_fundamental = _frida_g_type_register_fundamental;
pub const g_type_register_static = _frida_g_type_register_static;
pub const g_type_register_static_simple = _frida_g_type_register_static_simple;
pub const g_type_remove_class_cache_func = _frida_g_type_remove_class_cache_func;
pub const g_type_remove_interface_check = _frida_g_type_remove_interface_check;
pub const g_type_set_qdata = _frida_g_type_set_qdata;
pub const g_type_test_flags = _frida_g_type_test_flags;
pub const g_type_value_table_peek = _frida_g_type_value_table_peek;
pub const g_ucs4_to_utf16 = _frida_g_ucs4_to_utf16;
pub const g_ucs4_to_utf8 = _frida_g_ucs4_to_utf8;
pub const g_unichar_break_type = _frida_g_unichar_break_type;
pub const g_unichar_combining_class = _frida_g_unichar_combining_class;
pub const g_unichar_compose = _frida_g_unichar_compose;
pub const g_unichar_decompose = _frida_g_unichar_decompose;
pub const g_unichar_digit_value = _frida_g_unichar_digit_value;
pub const g_unichar_fully_decompose = _frida_g_unichar_fully_decompose;
pub const g_unichar_get_mirror_char = _frida_g_unichar_get_mirror_char;
pub const g_unichar_get_script = _frida_g_unichar_get_script;
pub const g_unichar_isalnum = _frida_g_unichar_isalnum;
pub const g_unichar_isalpha = _frida_g_unichar_isalpha;
pub const g_unichar_iscntrl = _frida_g_unichar_iscntrl;
pub const g_unichar_isdefined = _frida_g_unichar_isdefined;
pub const g_unichar_isdigit = _frida_g_unichar_isdigit;
pub const g_unichar_isgraph = _frida_g_unichar_isgraph;
pub const g_unichar_islower = _frida_g_unichar_islower;
pub const g_unichar_ismark = _frida_g_unichar_ismark;
pub const g_unichar_isprint = _frida_g_unichar_isprint;
pub const g_unichar_ispunct = _frida_g_unichar_ispunct;
pub const g_unichar_isspace = _frida_g_unichar_isspace;
pub const g_unichar_istitle = _frida_g_unichar_istitle;
pub const g_unichar_isupper = _frida_g_unichar_isupper;
pub const g_unichar_iswide = _frida_g_unichar_iswide;
pub const g_unichar_iswide_cjk = _frida_g_unichar_iswide_cjk;
pub const g_unichar_isxdigit = _frida_g_unichar_isxdigit;
pub const g_unichar_iszerowidth = _frida_g_unichar_iszerowidth;
pub const g_unichar_to_utf8 = _frida_g_unichar_to_utf8;
pub const g_unichar_tolower = _frida_g_unichar_tolower;
pub const g_unichar_totitle = _frida_g_unichar_totitle;
pub const g_unichar_toupper = _frida_g_unichar_toupper;
pub const g_unichar_type = _frida_g_unichar_type;
pub const g_unichar_validate = _frida_g_unichar_validate;
pub const g_unichar_xdigit_value = _frida_g_unichar_xdigit_value;
pub const g_unicode_break_type_get_type = _frida_g_unicode_break_type_get_type;
pub const g_unicode_canonical_decomposition = _frida_g_unicode_canonical_decomposition;
pub const g_unicode_canonical_ordering = _frida_g_unicode_canonical_ordering;
pub const g_unicode_script_from_iso15924 = _frida_g_unicode_script_from_iso15924;
pub const g_unicode_script_get_type = _frida_g_unicode_script_get_type;
pub const g_unicode_script_to_iso15924 = _frida_g_unicode_script_to_iso15924;
pub const g_unicode_type_get_type = _frida_g_unicode_type_get_type;
pub const g_unix_connection_get_type = _frida_g_unix_connection_get_type;
pub const g_unix_connection_receive_credentials = _frida_g_unix_connection_receive_credentials;
pub const g_unix_connection_receive_credentials_async = _frida_g_unix_connection_receive_credentials_async;
pub const g_unix_connection_receive_credentials_finish = _frida_g_unix_connection_receive_credentials_finish;
pub const g_unix_connection_receive_fd = _frida_g_unix_connection_receive_fd;
pub const g_unix_connection_send_credentials = _frida_g_unix_connection_send_credentials;
pub const g_unix_connection_send_credentials_async = _frida_g_unix_connection_send_credentials_async;
pub const g_unix_connection_send_credentials_finish = _frida_g_unix_connection_send_credentials_finish;
pub const g_unix_connection_send_fd = _frida_g_unix_connection_send_fd;
pub const g_unix_credentials_message_get_credentials = _frida_g_unix_credentials_message_get_credentials;
pub const g_unix_credentials_message_get_type = _frida_g_unix_credentials_message_get_type;
pub const g_unix_credentials_message_is_supported = _frida_g_unix_credentials_message_is_supported;
pub const g_unix_credentials_message_new = _frida_g_unix_credentials_message_new;
pub const g_unix_credentials_message_new_with_credentials = _frida_g_unix_credentials_message_new_with_credentials;
pub const g_unix_fd_list_append = _frida_g_unix_fd_list_append;
pub const g_unix_fd_list_get = _frida_g_unix_fd_list_get;
pub const g_unix_fd_list_get_length = _frida_g_unix_fd_list_get_length;
pub const g_unix_fd_list_get_type = _frida_g_unix_fd_list_get_type;
pub const g_unix_fd_list_new = _frida_g_unix_fd_list_new;
pub const g_unix_fd_list_new_from_array = _frida_g_unix_fd_list_new_from_array;
pub const g_unix_fd_list_peek_fds = _frida_g_unix_fd_list_peek_fds;
pub const g_unix_fd_list_steal_fds = _frida_g_unix_fd_list_steal_fds;
pub const g_unix_fd_source_funcs = _frida_g_unix_fd_source_funcs;
pub const g_unix_signal_funcs = _frida_g_unix_signal_funcs;
pub const g_unix_socket_address_abstract_names_supported = _frida_g_unix_socket_address_abstract_names_supported;
pub const g_unix_socket_address_get_address_type = _frida_g_unix_socket_address_get_address_type;
pub const g_unix_socket_address_get_is_abstract = _frida_g_unix_socket_address_get_is_abstract;
pub const g_unix_socket_address_get_path = _frida_g_unix_socket_address_get_path;
pub const g_unix_socket_address_get_path_len = _frida_g_unix_socket_address_get_path_len;
pub const g_unix_socket_address_get_type = _frida_g_unix_socket_address_get_type;
pub const g_unix_socket_address_new = _frida_g_unix_socket_address_new;
pub const g_unix_socket_address_new_abstract = _frida_g_unix_socket_address_new_abstract;
pub const g_unix_socket_address_new_with_type = _frida_g_unix_socket_address_new_with_type;
pub const g_unix_socket_address_type_get_type = _frida_g_unix_socket_address_type_get_type;
pub const g_unsetenv = _frida_g_unsetenv;
pub const g_uri_build = _frida_g_uri_build;
pub const g_uri_build_with_user = _frida_g_uri_build_with_user;
pub const g_uri_error_quark = _frida_g_uri_error_quark;
pub const g_uri_escape_bytes = _frida_g_uri_escape_bytes;
pub const g_uri_escape_string = _frida_g_uri_escape_string;
pub const g_uri_get_auth_params = _frida_g_uri_get_auth_params;
pub const g_uri_get_flags = _frida_g_uri_get_flags;
pub const g_uri_get_fragment = _frida_g_uri_get_fragment;
pub const g_uri_get_host = _frida_g_uri_get_host;
pub const g_uri_get_password = _frida_g_uri_get_password;
pub const g_uri_get_path = _frida_g_uri_get_path;
pub const g_uri_get_port = _frida_g_uri_get_port;
pub const g_uri_get_query = _frida_g_uri_get_query;
pub const g_uri_get_scheme = _frida_g_uri_get_scheme;
pub const g_uri_get_type = _frida_g_uri_get_type;
pub const g_uri_get_user = _frida_g_uri_get_user;
pub const g_uri_get_userinfo = _frida_g_uri_get_userinfo;
pub const g_uri_is_valid = _frida_g_uri_is_valid;
pub const g_uri_join = _frida_g_uri_join;
pub const g_uri_join_with_user = _frida_g_uri_join_with_user;
pub const g_uri_list_extract_uris = _frida_g_uri_list_extract_uris;
pub const g_uri_params_iter_init = _frida_g_uri_params_iter_init;
pub const g_uri_params_iter_next = _frida_g_uri_params_iter_next;
pub const g_uri_parse = _frida_g_uri_parse;
pub const g_uri_parse_params = _frida_g_uri_parse_params;
pub const g_uri_parse_relative = _frida_g_uri_parse_relative;
pub const g_uri_parse_scheme = _frida_g_uri_parse_scheme;
pub const g_uri_peek_scheme = _frida_g_uri_peek_scheme;
pub const g_uri_ref = _frida_g_uri_ref;
pub const g_uri_resolve_relative = _frida_g_uri_resolve_relative;
pub const g_uri_split = _frida_g_uri_split;
pub const g_uri_split_network = _frida_g_uri_split_network;
pub const g_uri_split_with_user = _frida_g_uri_split_with_user;
pub const g_uri_to_string = _frida_g_uri_to_string;
pub const g_uri_to_string_partial = _frida_g_uri_to_string_partial;
pub const g_uri_unescape_bytes = _frida_g_uri_unescape_bytes;
pub const g_uri_unescape_segment = _frida_g_uri_unescape_segment;
pub const g_uri_unescape_string = _frida_g_uri_unescape_string;
pub const g_uri_unref = _frida_g_uri_unref;
pub const g_usleep = _frida_g_usleep;
pub const g_utf16_to_ucs4 = _frida_g_utf16_to_ucs4;
pub const g_utf16_to_utf8 = _frida_g_utf16_to_utf8;
pub const g_utf8_casefold = _frida_g_utf8_casefold;
pub const g_utf8_collate = _frida_g_utf8_collate;
pub const g_utf8_collate_key = _frida_g_utf8_collate_key;
pub const g_utf8_collate_key_for_filename = _frida_g_utf8_collate_key_for_filename;
pub const g_utf8_find_next_char = _frida_g_utf8_find_next_char;
pub const g_utf8_find_prev_char = _frida_g_utf8_find_prev_char;
pub const g_utf8_get_char = _frida_g_utf8_get_char;
pub const g_utf8_get_char_validated = _frida_g_utf8_get_char_validated;
pub const g_utf8_make_valid = _frida_g_utf8_make_valid;
pub const g_utf8_normalize = _frida_g_utf8_normalize;
pub const g_utf8_offset_to_pointer = _frida_g_utf8_offset_to_pointer;
pub const g_utf8_pointer_to_offset = _frida_g_utf8_pointer_to_offset;
pub const g_utf8_prev_char = _frida_g_utf8_prev_char;
pub const g_utf8_skip = _frida_g_utf8_skip;
pub const g_utf8_strchr = _frida_g_utf8_strchr;
pub const g_utf8_strdown = _frida_g_utf8_strdown;
pub const g_utf8_strlen = _frida_g_utf8_strlen;
pub const g_utf8_strncpy = _frida_g_utf8_strncpy;
pub const g_utf8_strrchr = _frida_g_utf8_strrchr;
pub const g_utf8_strreverse = _frida_g_utf8_strreverse;
pub const g_utf8_strup = _frida_g_utf8_strup;
pub const g_utf8_substring = _frida_g_utf8_substring;
pub const g_utf8_to_ucs4 = _frida_g_utf8_to_ucs4;
pub const g_utf8_to_ucs4_fast = _frida_g_utf8_to_ucs4_fast;
pub const g_utf8_to_utf16 = _frida_g_utf8_to_utf16;
pub const g_utf8_validate = _frida_g_utf8_validate;
pub const g_utf8_validate_len = _frida_g_utf8_validate_len;
pub const g_uuid_string_is_valid = _frida_g_uuid_string_is_valid;
pub const g_uuid_string_random = _frida_g_uuid_string_random;
pub const g_value_array_append = _frida_g_value_array_append;
pub const g_value_array_copy = _frida_g_value_array_copy;
pub const g_value_array_free = _frida_g_value_array_free;
pub const g_value_array_get_nth = _frida_g_value_array_get_nth;
pub const g_value_array_get_type = _frida_g_value_array_get_type;
pub const g_value_array_insert = _frida_g_value_array_insert;
pub const g_value_array_new = _frida_g_value_array_new;
pub const g_value_array_prepend = _frida_g_value_array_prepend;
pub const g_value_array_remove = _frida_g_value_array_remove;
pub const g_value_array_sort = _frida_g_value_array_sort;
pub const g_value_array_sort_with_data = _frida_g_value_array_sort_with_data;
pub const g_value_copy = _frida_g_value_copy;
pub const g_value_dup_boxed = _frida_g_value_dup_boxed;
pub const g_value_dup_object = _frida_g_value_dup_object;
pub const g_value_dup_param = _frida_g_value_dup_param;
pub const g_value_dup_string = _frida_g_value_dup_string;
pub const g_value_dup_variant = _frida_g_value_dup_variant;
pub const g_value_fits_pointer = _frida_g_value_fits_pointer;
pub const g_value_get_boolean = _frida_g_value_get_boolean;
pub const g_value_get_boxed = _frida_g_value_get_boxed;
pub const g_value_get_char = _frida_g_value_get_char;
pub const g_value_get_double = _frida_g_value_get_double;
pub const g_value_get_enum = _frida_g_value_get_enum;
pub const g_value_get_flags = _frida_g_value_get_flags;
pub const g_value_get_float = _frida_g_value_get_float;
pub const g_value_get_gtype = _frida_g_value_get_gtype;
pub const g_value_get_int = _frida_g_value_get_int;
pub const g_value_get_int64 = _frida_g_value_get_int64;
pub const g_value_get_long = _frida_g_value_get_long;
pub const g_value_get_object = _frida_g_value_get_object;
pub const g_value_get_param = _frida_g_value_get_param;
pub const g_value_get_pointer = _frida_g_value_get_pointer;
pub const g_value_get_schar = _frida_g_value_get_schar;
pub const g_value_get_string = _frida_g_value_get_string;
pub const g_value_get_type = _frida_g_value_get_type;
pub const g_value_get_uchar = _frida_g_value_get_uchar;
pub const g_value_get_uint = _frida_g_value_get_uint;
pub const g_value_get_uint64 = _frida_g_value_get_uint64;
pub const g_value_get_ulong = _frida_g_value_get_ulong;
pub const g_value_get_variant = _frida_g_value_get_variant;
pub const g_value_init = _frida_g_value_init;
pub const g_value_init_from_instance = _frida_g_value_init_from_instance;
pub const g_value_peek_pointer = _frida_g_value_peek_pointer;
pub const g_value_register_transform_func = _frida_g_value_register_transform_func;
pub const g_value_reset = _frida_g_value_reset;
pub const g_value_set_boolean = _frida_g_value_set_boolean;
pub const g_value_set_boxed = _frida_g_value_set_boxed;
pub const g_value_set_boxed_take_ownership = _frida_g_value_set_boxed_take_ownership;
pub const g_value_set_char = _frida_g_value_set_char;
pub const g_value_set_double = _frida_g_value_set_double;
pub const g_value_set_enum = _frida_g_value_set_enum;
pub const g_value_set_flags = _frida_g_value_set_flags;
pub const g_value_set_float = _frida_g_value_set_float;
pub const g_value_set_gtype = _frida_g_value_set_gtype;
pub const g_value_set_instance = _frida_g_value_set_instance;
pub const g_value_set_int = _frida_g_value_set_int;
pub const g_value_set_int64 = _frida_g_value_set_int64;
pub const g_value_set_interned_string = _frida_g_value_set_interned_string;
pub const g_value_set_long = _frida_g_value_set_long;
pub const g_value_set_object = _frida_g_value_set_object;
pub const g_value_set_object_take_ownership = _frida_g_value_set_object_take_ownership;
pub const g_value_set_param = _frida_g_value_set_param;
pub const g_value_set_param_take_ownership = _frida_g_value_set_param_take_ownership;
pub const g_value_set_pointer = _frida_g_value_set_pointer;
pub const g_value_set_schar = _frida_g_value_set_schar;
pub const g_value_set_static_boxed = _frida_g_value_set_static_boxed;
pub const g_value_set_static_string = _frida_g_value_set_static_string;
pub const g_value_set_string = _frida_g_value_set_string;
pub const g_value_set_string_take_ownership = _frida_g_value_set_string_take_ownership;
pub const g_value_set_uchar = _frida_g_value_set_uchar;
pub const g_value_set_uint = _frida_g_value_set_uint;
pub const g_value_set_uint64 = _frida_g_value_set_uint64;
pub const g_value_set_ulong = _frida_g_value_set_ulong;
pub const g_value_set_variant = _frida_g_value_set_variant;
pub const g_value_take_boxed = _frida_g_value_take_boxed;
pub const g_value_take_object = _frida_g_value_take_object;
pub const g_value_take_param = _frida_g_value_take_param;
pub const g_value_take_string = _frida_g_value_take_string;
pub const g_value_take_variant = _frida_g_value_take_variant;
pub const g_value_transform = _frida_g_value_transform;
pub const g_value_type_compatible = _frida_g_value_type_compatible;
pub const g_value_type_transformable = _frida_g_value_type_transformable;
pub const g_value_unset = _frida_g_value_unset;
pub const g_variant_builder_add = _frida_g_variant_builder_add;
pub const g_variant_builder_add_parsed = _frida_g_variant_builder_add_parsed;
pub const g_variant_builder_add_value = _frida_g_variant_builder_add_value;
pub const g_variant_builder_clear = _frida_g_variant_builder_clear;
pub const g_variant_builder_close = _frida_g_variant_builder_close;
pub const g_variant_builder_end = _frida_g_variant_builder_end;
pub const g_variant_builder_get_type = _frida_g_variant_builder_get_type;
pub const g_variant_builder_init = _frida_g_variant_builder_init;
pub const g_variant_builder_new = _frida_g_variant_builder_new;
pub const g_variant_builder_open = _frida_g_variant_builder_open;
pub const g_variant_builder_ref = _frida_g_variant_builder_ref;
pub const g_variant_builder_unref = _frida_g_variant_builder_unref;
pub const g_variant_byteswap = _frida_g_variant_byteswap;
pub const g_variant_check_format_string = _frida_g_variant_check_format_string;
pub const g_variant_classify = _frida_g_variant_classify;
pub const g_variant_compare = _frida_g_variant_compare;
pub const g_variant_dict_clear = _frida_g_variant_dict_clear;
pub const g_variant_dict_contains = _frida_g_variant_dict_contains;
pub const g_variant_dict_end = _frida_g_variant_dict_end;
pub const g_variant_dict_get_type = _frida_g_variant_dict_get_type;
pub const g_variant_dict_init = _frida_g_variant_dict_init;
pub const g_variant_dict_insert = _frida_g_variant_dict_insert;
pub const g_variant_dict_insert_value = _frida_g_variant_dict_insert_value;
pub const g_variant_dict_lookup = _frida_g_variant_dict_lookup;
pub const g_variant_dict_lookup_value = _frida_g_variant_dict_lookup_value;
pub const g_variant_dict_new = _frida_g_variant_dict_new;
pub const g_variant_dict_ref = _frida_g_variant_dict_ref;
pub const g_variant_dict_remove = _frida_g_variant_dict_remove;
pub const g_variant_dict_unref = _frida_g_variant_dict_unref;
pub const g_variant_dup_bytestring = _frida_g_variant_dup_bytestring;
pub const g_variant_dup_bytestring_array = _frida_g_variant_dup_bytestring_array;
pub const g_variant_dup_objv = _frida_g_variant_dup_objv;
pub const g_variant_dup_string = _frida_g_variant_dup_string;
pub const g_variant_dup_strv = _frida_g_variant_dup_strv;
pub const g_variant_equal = _frida_g_variant_equal;
pub const g_variant_get = _frida_g_variant_get;
pub const g_variant_get_boolean = _frida_g_variant_get_boolean;
pub const g_variant_get_byte = _frida_g_variant_get_byte;
pub const g_variant_get_bytestring = _frida_g_variant_get_bytestring;
pub const g_variant_get_bytestring_array = _frida_g_variant_get_bytestring_array;
pub const g_variant_get_child = _frida_g_variant_get_child;
pub const g_variant_get_child_value = _frida_g_variant_get_child_value;
pub const g_variant_get_data = _frida_g_variant_get_data;
pub const g_variant_get_data_as_bytes = _frida_g_variant_get_data_as_bytes;
pub const g_variant_get_double = _frida_g_variant_get_double;
pub const g_variant_get_fixed_array = _frida_g_variant_get_fixed_array;
pub const g_variant_get_gtype = _frida_g_variant_get_gtype;
pub const g_variant_get_handle = _frida_g_variant_get_handle;
pub const g_variant_get_int16 = _frida_g_variant_get_int16;
pub const g_variant_get_int32 = _frida_g_variant_get_int32;
pub const g_variant_get_int64 = _frida_g_variant_get_int64;
pub const g_variant_get_maybe = _frida_g_variant_get_maybe;
pub const g_variant_get_normal_form = _frida_g_variant_get_normal_form;
pub const g_variant_get_objv = _frida_g_variant_get_objv;
pub const g_variant_get_size = _frida_g_variant_get_size;
pub const g_variant_get_string = _frida_g_variant_get_string;
pub const g_variant_get_strv = _frida_g_variant_get_strv;
pub const g_variant_get_type = _frida_g_variant_get_type;
pub const g_variant_get_type_string = _frida_g_variant_get_type_string;
pub const g_variant_get_uint16 = _frida_g_variant_get_uint16;
pub const g_variant_get_uint32 = _frida_g_variant_get_uint32;
pub const g_variant_get_uint64 = _frida_g_variant_get_uint64;
pub const g_variant_get_va = _frida_g_variant_get_va;
pub const g_variant_get_variant = _frida_g_variant_get_variant;
pub const g_variant_hash = _frida_g_variant_hash;
pub const g_variant_is_container = _frida_g_variant_is_container;
pub const g_variant_is_floating = _frida_g_variant_is_floating;
pub const g_variant_is_normal_form = _frida_g_variant_is_normal_form;
pub const g_variant_is_object_path = _frida_g_variant_is_object_path;
pub const g_variant_is_of_type = _frida_g_variant_is_of_type;
pub const g_variant_is_signature = _frida_g_variant_is_signature;
pub const g_variant_iter_copy = _frida_g_variant_iter_copy;
pub const g_variant_iter_free = _frida_g_variant_iter_free;
pub const g_variant_iter_init = _frida_g_variant_iter_init;
pub const g_variant_iter_loop = _frida_g_variant_iter_loop;
pub const g_variant_iter_n_children = _frida_g_variant_iter_n_children;
pub const g_variant_iter_new = _frida_g_variant_iter_new;
pub const g_variant_iter_next = _frida_g_variant_iter_next;
pub const g_variant_iter_next_value = _frida_g_variant_iter_next_value;
pub const g_variant_lookup = _frida_g_variant_lookup;
pub const g_variant_lookup_value = _frida_g_variant_lookup_value;
pub const g_variant_n_children = _frida_g_variant_n_children;
pub const g_variant_new = _frida_g_variant_new;
pub const g_variant_new_array = _frida_g_variant_new_array;
pub const g_variant_new_boolean = _frida_g_variant_new_boolean;
pub const g_variant_new_byte = _frida_g_variant_new_byte;
pub const g_variant_new_bytestring = _frida_g_variant_new_bytestring;
pub const g_variant_new_bytestring_array = _frida_g_variant_new_bytestring_array;
pub const g_variant_new_dict_entry = _frida_g_variant_new_dict_entry;
pub const g_variant_new_double = _frida_g_variant_new_double;
pub const g_variant_new_fixed_array = _frida_g_variant_new_fixed_array;
pub const g_variant_new_from_bytes = _frida_g_variant_new_from_bytes;
pub const g_variant_new_from_data = _frida_g_variant_new_from_data;
pub const g_variant_new_handle = _frida_g_variant_new_handle;
pub const g_variant_new_int16 = _frida_g_variant_new_int16;
pub const g_variant_new_int32 = _frida_g_variant_new_int32;
pub const g_variant_new_int64 = _frida_g_variant_new_int64;
pub const g_variant_new_maybe = _frida_g_variant_new_maybe;
pub const g_variant_new_object_path = _frida_g_variant_new_object_path;
pub const g_variant_new_objv = _frida_g_variant_new_objv;
pub const g_variant_new_parsed = _frida_g_variant_new_parsed;
pub const g_variant_new_parsed_va = _frida_g_variant_new_parsed_va;
pub const g_variant_new_printf = _frida_g_variant_new_printf;
pub const g_variant_new_signature = _frida_g_variant_new_signature;
pub const g_variant_new_string = _frida_g_variant_new_string;
pub const g_variant_new_strv = _frida_g_variant_new_strv;
pub const g_variant_new_take_string = _frida_g_variant_new_take_string;
pub const g_variant_new_tuple = _frida_g_variant_new_tuple;
pub const g_variant_new_uint16 = _frida_g_variant_new_uint16;
pub const g_variant_new_uint32 = _frida_g_variant_new_uint32;
pub const g_variant_new_uint64 = _frida_g_variant_new_uint64;
pub const g_variant_new_va = _frida_g_variant_new_va;
pub const g_variant_new_variant = _frida_g_variant_new_variant;
pub const g_variant_parse = _frida_g_variant_parse;
pub const g_variant_parse_error_print_context = _frida_g_variant_parse_error_print_context;
pub const g_variant_parse_error_quark = _frida_g_variant_parse_error_quark;
pub const g_variant_parser_get_error_quark = _frida_g_variant_parser_get_error_quark;
pub const g_variant_print = _frida_g_variant_print;
pub const g_variant_print_string = _frida_g_variant_print_string;
pub const g_variant_ref = _frida_g_variant_ref;
pub const g_variant_ref_sink = _frida_g_variant_ref_sink;
pub const g_variant_store = _frida_g_variant_store;
pub const g_variant_take_ref = _frida_g_variant_take_ref;
pub const g_variant_type_checked_ = _frida_g_variant_type_checked_;
pub const g_variant_type_copy = _frida_g_variant_type_copy;
pub const g_variant_type_dup_string = _frida_g_variant_type_dup_string;
pub const g_variant_type_element = _frida_g_variant_type_element;
pub const g_variant_type_equal = _frida_g_variant_type_equal;
pub const g_variant_type_first = _frida_g_variant_type_first;
pub const g_variant_type_free = _frida_g_variant_type_free;
pub const g_variant_type_get_gtype = _frida_g_variant_type_get_gtype;
pub const g_variant_type_get_string_length = _frida_g_variant_type_get_string_length;
pub const g_variant_type_hash = _frida_g_variant_type_hash;
pub const g_variant_type_is_array = _frida_g_variant_type_is_array;
pub const g_variant_type_is_basic = _frida_g_variant_type_is_basic;
pub const g_variant_type_is_container = _frida_g_variant_type_is_container;
pub const g_variant_type_is_definite = _frida_g_variant_type_is_definite;
pub const g_variant_type_is_dict_entry = _frida_g_variant_type_is_dict_entry;
pub const g_variant_type_is_maybe = _frida_g_variant_type_is_maybe;
pub const g_variant_type_is_subtype_of = _frida_g_variant_type_is_subtype_of;
pub const g_variant_type_is_tuple = _frida_g_variant_type_is_tuple;
pub const g_variant_type_is_variant = _frida_g_variant_type_is_variant;
pub const g_variant_type_key = _frida_g_variant_type_key;
pub const g_variant_type_n_items = _frida_g_variant_type_n_items;
pub const g_variant_type_new = _frida_g_variant_type_new;
pub const g_variant_type_new_array = _frida_g_variant_type_new_array;
pub const g_variant_type_new_dict_entry = _frida_g_variant_type_new_dict_entry;
pub const g_variant_type_new_maybe = _frida_g_variant_type_new_maybe;
pub const g_variant_type_new_tuple = _frida_g_variant_type_new_tuple;
pub const g_variant_type_next = _frida_g_variant_type_next;
pub const g_variant_type_peek_string = _frida_g_variant_type_peek_string;
pub const g_variant_type_string_get_depth_ = _frida_g_variant_type_string_get_depth_;
pub const g_variant_type_string_is_valid = _frida_g_variant_type_string_is_valid;
pub const g_variant_type_string_scan = _frida_g_variant_type_string_scan;
pub const g_variant_type_value = _frida_g_variant_type_value;
pub const g_variant_unref = _frida_g_variant_unref;
pub const g_vfs_get_default = _frida_g_vfs_get_default;
pub const g_vfs_get_file_for_path = _frida_g_vfs_get_file_for_path;
pub const g_vfs_get_file_for_uri = _frida_g_vfs_get_file_for_uri;
pub const g_vfs_get_local = _frida_g_vfs_get_local;
pub const g_vfs_get_supported_uri_schemes = _frida_g_vfs_get_supported_uri_schemes;
pub const g_vfs_get_type = _frida_g_vfs_get_type;
pub const g_vfs_is_active = _frida_g_vfs_is_active;
pub const g_vfs_parse_name = _frida_g_vfs_parse_name;
pub const g_vfs_register_uri_scheme = _frida_g_vfs_register_uri_scheme;
pub const g_vfs_unregister_uri_scheme = _frida_g_vfs_unregister_uri_scheme;
pub const g_volume_can_eject = _frida_g_volume_can_eject;
pub const g_volume_can_mount = _frida_g_volume_can_mount;
pub const g_volume_eject = _frida_g_volume_eject;
pub const g_volume_eject_finish = _frida_g_volume_eject_finish;
pub const g_volume_eject_with_operation = _frida_g_volume_eject_with_operation;
pub const g_volume_eject_with_operation_finish = _frida_g_volume_eject_with_operation_finish;
pub const g_volume_enumerate_identifiers = _frida_g_volume_enumerate_identifiers;
pub const g_volume_get_activation_root = _frida_g_volume_get_activation_root;
pub const g_volume_get_drive = _frida_g_volume_get_drive;
pub const g_volume_get_icon = _frida_g_volume_get_icon;
pub const g_volume_get_identifier = _frida_g_volume_get_identifier;
pub const g_volume_get_mount = _frida_g_volume_get_mount;
pub const g_volume_get_name = _frida_g_volume_get_name;
pub const g_volume_get_sort_key = _frida_g_volume_get_sort_key;
pub const g_volume_get_symbolic_icon = _frida_g_volume_get_symbolic_icon;
pub const g_volume_get_type = _frida_g_volume_get_type;
pub const g_volume_get_uuid = _frida_g_volume_get_uuid;
pub const g_volume_monitor_adopt_orphan_mount = _frida_g_volume_monitor_adopt_orphan_mount;
pub const g_volume_monitor_get = _frida_g_volume_monitor_get;
pub const g_volume_monitor_get_connected_drives = _frida_g_volume_monitor_get_connected_drives;
pub const g_volume_monitor_get_mount_for_uuid = _frida_g_volume_monitor_get_mount_for_uuid;
pub const g_volume_monitor_get_mounts = _frida_g_volume_monitor_get_mounts;
pub const g_volume_monitor_get_type = _frida_g_volume_monitor_get_type;
pub const g_volume_monitor_get_volume_for_uuid = _frida_g_volume_monitor_get_volume_for_uuid;
pub const g_volume_monitor_get_volumes = _frida_g_volume_monitor_get_volumes;
pub const g_volume_mount = _frida_g_volume_mount;
pub const g_volume_mount_finish = _frida_g_volume_mount_finish;
pub const g_volume_should_automount = _frida_g_volume_should_automount;
pub const g_vsnprintf = _frida_g_vsnprintf;
pub const g_warn_message = _frida_g_warn_message;
pub const g_weak_ref_clear = _frida_g_weak_ref_clear;
pub const g_weak_ref_get = _frida_g_weak_ref_get;
pub const g_weak_ref_init = _frida_g_weak_ref_init;
pub const g_weak_ref_set = _frida_g_weak_ref_set;
pub const g_zlib_compressor_format_get_type = _frida_g_zlib_compressor_format_get_type;
pub const g_zlib_compressor_get_file_info = _frida_g_zlib_compressor_get_file_info;
pub const g_zlib_compressor_get_type = _frida_g_zlib_compressor_get_type;
pub const g_zlib_compressor_new = _frida_g_zlib_compressor_new;
pub const g_zlib_compressor_set_file_info = _frida_g_zlib_compressor_set_file_info;
pub const g_zlib_decompressor_get_file_info = _frida_g_zlib_decompressor_get_file_info;
pub const g_zlib_decompressor_get_type = _frida_g_zlib_decompressor_get_type;
pub const g_zlib_decompressor_new = _frida_g_zlib_decompressor_new;
pub const gio_deinit = _frida_gio_deinit;
pub const gio_init = _frida_gio_init;
pub const gio_prepare_to_fork = _frida_gio_prepare_to_fork;
pub const gio_recover_from_fork_in_child = _frida_gio_recover_from_fork_in_child;
pub const gio_recover_from_fork_in_parent = _frida_gio_recover_from_fork_in_parent;
pub const gio_shutdown = _frida_gio_shutdown;
pub const glib_binary_age = _frida_glib_binary_age;
pub const glib_check_version = _frida_glib_check_version;
pub const glib_deinit = _frida_glib_deinit;
pub const glib_enable_io_features = _frida_glib_enable_io_features;
pub const glib_fd_callbacks = _frida_glib_fd_callbacks;
pub const glib_init = _frida_glib_init;
pub const glib_interface_age = _frida_glib_interface_age;
pub const glib_major_version = _frida_glib_major_version;
pub const glib_mem_profiler_table = _frida_glib_mem_profiler_table;
pub const glib_mem_table = _frida_glib_mem_table;
pub const glib_micro_version = _frida_glib_micro_version;
pub const glib_minor_version = _frida_glib_minor_version;
pub const glib_prepare_to_fork = _frida_glib_prepare_to_fork;
pub const glib_recover_from_fork_in_child = _frida_glib_recover_from_fork_in_child;
pub const glib_recover_from_fork_in_parent = _frida_glib_recover_from_fork_in_parent;
pub const glib_shutdown = _frida_glib_shutdown;
pub const glib_thread_callbacks = _frida_glib_thread_callbacks;
pub const gobject_init = _frida_gobject_init;
pub const json_array_add_array_element = _frida_json_array_add_array_element;
pub const json_array_add_boolean_element = _frida_json_array_add_boolean_element;
pub const json_array_add_double_element = _frida_json_array_add_double_element;
pub const json_array_add_element = _frida_json_array_add_element;
pub const json_array_add_int_element = _frida_json_array_add_int_element;
pub const json_array_add_null_element = _frida_json_array_add_null_element;
pub const json_array_add_object_element = _frida_json_array_add_object_element;
pub const json_array_add_string_element = _frida_json_array_add_string_element;
pub const json_array_dup_element = _frida_json_array_dup_element;
pub const json_array_equal = _frida_json_array_equal;
pub const json_array_foreach_element = _frida_json_array_foreach_element;
pub const json_array_get_array_element = _frida_json_array_get_array_element;
pub const json_array_get_boolean_element = _frida_json_array_get_boolean_element;
pub const json_array_get_double_element = _frida_json_array_get_double_element;
pub const json_array_get_element = _frida_json_array_get_element;
pub const json_array_get_elements = _frida_json_array_get_elements;
pub const json_array_get_int_element = _frida_json_array_get_int_element;
pub const json_array_get_length = _frida_json_array_get_length;
pub const json_array_get_null_element = _frida_json_array_get_null_element;
pub const json_array_get_object_element = _frida_json_array_get_object_element;
pub const json_array_get_string_element = _frida_json_array_get_string_element;
pub const json_array_get_type = _frida_json_array_get_type;
pub const json_array_hash = _frida_json_array_hash;
pub const json_array_is_immutable = _frida_json_array_is_immutable;
pub const json_array_new = _frida_json_array_new;
pub const json_array_ref = _frida_json_array_ref;
pub const json_array_remove_element = _frida_json_array_remove_element;
pub const json_array_seal = _frida_json_array_seal;
pub const json_array_sized_new = _frida_json_array_sized_new;
pub const json_array_unref = _frida_json_array_unref;
pub const json_boxed_can_deserialize = _frida_json_boxed_can_deserialize;
pub const json_boxed_can_serialize = _frida_json_boxed_can_serialize;
pub const json_boxed_deserialize = _frida_json_boxed_deserialize;
pub const json_boxed_register_deserialize_func = _frida_json_boxed_register_deserialize_func;
pub const json_boxed_register_serialize_func = _frida_json_boxed_register_serialize_func;
pub const json_boxed_serialize = _frida_json_boxed_serialize;
pub const json_builder_add_boolean_value = _frida_json_builder_add_boolean_value;
pub const json_builder_add_double_value = _frida_json_builder_add_double_value;
pub const json_builder_add_int_value = _frida_json_builder_add_int_value;
pub const json_builder_add_null_value = _frida_json_builder_add_null_value;
pub const json_builder_add_string_value = _frida_json_builder_add_string_value;
pub const json_builder_add_value = _frida_json_builder_add_value;
pub const json_builder_begin_array = _frida_json_builder_begin_array;
pub const json_builder_begin_object = _frida_json_builder_begin_object;
pub const json_builder_end_array = _frida_json_builder_end_array;
pub const json_builder_end_object = _frida_json_builder_end_object;
pub const json_builder_get_root = _frida_json_builder_get_root;
pub const json_builder_get_type = _frida_json_builder_get_type;
pub const json_builder_new = _frida_json_builder_new;
pub const json_builder_new_immutable = _frida_json_builder_new_immutable;
pub const json_builder_reset = _frida_json_builder_reset;
pub const json_builder_set_member_name = _frida_json_builder_set_member_name;
pub const json_construct_gobject = _frida_json_construct_gobject;
pub const json_from_string = _frida_json_from_string;
pub const json_generator_get_indent = _frida_json_generator_get_indent;
pub const json_generator_get_indent_char = _frida_json_generator_get_indent_char;
pub const json_generator_get_pretty = _frida_json_generator_get_pretty;
pub const json_generator_get_root = _frida_json_generator_get_root;
pub const json_generator_get_type = _frida_json_generator_get_type;
pub const json_generator_new = _frida_json_generator_new;
pub const json_generator_set_indent = _frida_json_generator_set_indent;
pub const json_generator_set_indent_char = _frida_json_generator_set_indent_char;
pub const json_generator_set_pretty = _frida_json_generator_set_pretty;
pub const json_generator_set_root = _frida_json_generator_set_root;
pub const json_generator_to_data = _frida_json_generator_to_data;
pub const json_generator_to_file = _frida_json_generator_to_file;
pub const json_generator_to_gstring = _frida_json_generator_to_gstring;
pub const json_generator_to_stream = _frida_json_generator_to_stream;
pub const json_gobject_deserialize = _frida_json_gobject_deserialize;
pub const json_gobject_from_data = _frida_json_gobject_from_data;
pub const json_gobject_serialize = _frida_json_gobject_serialize;
pub const json_gobject_to_data = _frida_json_gobject_to_data;
pub const json_gvariant_deserialize = _frida_json_gvariant_deserialize;
pub const json_gvariant_deserialize_data = _frida_json_gvariant_deserialize_data;
pub const json_gvariant_serialize = _frida_json_gvariant_serialize;
pub const json_gvariant_serialize_data = _frida_json_gvariant_serialize_data;
pub const json_node_alloc = _frida_json_node_alloc;
pub const json_node_copy = _frida_json_node_copy;
pub const json_node_dup_array = _frida_json_node_dup_array;
pub const json_node_dup_object = _frida_json_node_dup_object;
pub const json_node_dup_string = _frida_json_node_dup_string;
pub const json_node_equal = _frida_json_node_equal;
pub const json_node_free = _frida_json_node_free;
pub const json_node_get_array = _frida_json_node_get_array;
pub const json_node_get_boolean = _frida_json_node_get_boolean;
pub const json_node_get_double = _frida_json_node_get_double;
pub const json_node_get_int = _frida_json_node_get_int;
pub const json_node_get_node_type = _frida_json_node_get_node_type;
pub const json_node_get_object = _frida_json_node_get_object;
pub const json_node_get_parent = _frida_json_node_get_parent;
pub const json_node_get_string = _frida_json_node_get_string;
pub const json_node_get_type = _frida_json_node_get_type;
pub const json_node_get_value = _frida_json_node_get_value;
pub const json_node_get_value_type = _frida_json_node_get_value_type;
pub const json_node_hash = _frida_json_node_hash;
pub const json_node_init = _frida_json_node_init;
pub const json_node_init_array = _frida_json_node_init_array;
pub const json_node_init_boolean = _frida_json_node_init_boolean;
pub const json_node_init_double = _frida_json_node_init_double;
pub const json_node_init_int = _frida_json_node_init_int;
pub const json_node_init_null = _frida_json_node_init_null;
pub const json_node_init_object = _frida_json_node_init_object;
pub const json_node_init_string = _frida_json_node_init_string;
pub const json_node_is_immutable = _frida_json_node_is_immutable;
pub const json_node_is_null = _frida_json_node_is_null;
pub const json_node_new = _frida_json_node_new;
pub const json_node_ref = _frida_json_node_ref;
pub const json_node_seal = _frida_json_node_seal;
pub const json_node_set_array = _frida_json_node_set_array;
pub const json_node_set_boolean = _frida_json_node_set_boolean;
pub const json_node_set_double = _frida_json_node_set_double;
pub const json_node_set_int = _frida_json_node_set_int;
pub const json_node_set_object = _frida_json_node_set_object;
pub const json_node_set_parent = _frida_json_node_set_parent;
pub const json_node_set_string = _frida_json_node_set_string;
pub const json_node_set_value = _frida_json_node_set_value;
pub const json_node_take_array = _frida_json_node_take_array;
pub const json_node_take_object = _frida_json_node_take_object;
pub const json_node_type_get_type = _frida_json_node_type_get_type;
pub const json_node_type_name = _frida_json_node_type_name;
pub const json_node_unref = _frida_json_node_unref;
pub const json_object_add_member = _frida_json_object_add_member;
pub const json_object_dup_member = _frida_json_object_dup_member;
pub const json_object_equal = _frida_json_object_equal;
pub const json_object_foreach_member = _frida_json_object_foreach_member;
pub const json_object_get_array_member = _frida_json_object_get_array_member;
pub const json_object_get_boolean_member = _frida_json_object_get_boolean_member;
pub const json_object_get_boolean_member_with_default = _frida_json_object_get_boolean_member_with_default;
pub const json_object_get_double_member = _frida_json_object_get_double_member;
pub const json_object_get_double_member_with_default = _frida_json_object_get_double_member_with_default;
pub const json_object_get_int_member = _frida_json_object_get_int_member;
pub const json_object_get_int_member_with_default = _frida_json_object_get_int_member_with_default;
pub const json_object_get_member = _frida_json_object_get_member;
pub const json_object_get_members = _frida_json_object_get_members;
pub const json_object_get_null_member = _frida_json_object_get_null_member;
pub const json_object_get_object_member = _frida_json_object_get_object_member;
pub const json_object_get_size = _frida_json_object_get_size;
pub const json_object_get_string_member = _frida_json_object_get_string_member;
pub const json_object_get_string_member_with_default = _frida_json_object_get_string_member_with_default;
pub const json_object_get_type = _frida_json_object_get_type;
pub const json_object_get_values = _frida_json_object_get_values;
pub const json_object_has_member = _frida_json_object_has_member;
pub const json_object_hash = _frida_json_object_hash;
pub const json_object_is_immutable = _frida_json_object_is_immutable;
pub const json_object_iter_init = _frida_json_object_iter_init;
pub const json_object_iter_init_ordered = _frida_json_object_iter_init_ordered;
pub const json_object_iter_next = _frida_json_object_iter_next;
pub const json_object_iter_next_ordered = _frida_json_object_iter_next_ordered;
pub const json_object_new = _frida_json_object_new;
pub const json_object_ref = _frida_json_object_ref;
pub const json_object_remove_member = _frida_json_object_remove_member;
pub const json_object_seal = _frida_json_object_seal;
pub const json_object_set_array_member = _frida_json_object_set_array_member;
pub const json_object_set_boolean_member = _frida_json_object_set_boolean_member;
pub const json_object_set_double_member = _frida_json_object_set_double_member;
pub const json_object_set_int_member = _frida_json_object_set_int_member;
pub const json_object_set_member = _frida_json_object_set_member;
pub const json_object_set_null_member = _frida_json_object_set_null_member;
pub const json_object_set_object_member = _frida_json_object_set_object_member;
pub const json_object_set_string_member = _frida_json_object_set_string_member;
pub const json_object_unref = _frida_json_object_unref;
pub const json_parser_error_get_type = _frida_json_parser_error_get_type;
pub const json_parser_error_quark = _frida_json_parser_error_quark;
pub const json_parser_get_current_line = _frida_json_parser_get_current_line;
pub const json_parser_get_current_pos = _frida_json_parser_get_current_pos;
pub const json_parser_get_root = _frida_json_parser_get_root;
pub const json_parser_get_type = _frida_json_parser_get_type;
pub const json_parser_has_assignment = _frida_json_parser_has_assignment;
pub const json_parser_load_from_data = _frida_json_parser_load_from_data;
pub const json_parser_load_from_file = _frida_json_parser_load_from_file;
pub const json_parser_load_from_mapped_file = _frida_json_parser_load_from_mapped_file;
pub const json_parser_load_from_stream = _frida_json_parser_load_from_stream;
pub const json_parser_load_from_stream_async = _frida_json_parser_load_from_stream_async;
pub const json_parser_load_from_stream_finish = _frida_json_parser_load_from_stream_finish;
pub const json_parser_new = _frida_json_parser_new;
pub const json_parser_new_immutable = _frida_json_parser_new_immutable;
pub const json_parser_steal_root = _frida_json_parser_steal_root;
pub const json_path_compile = _frida_json_path_compile;
pub const json_path_error_get_type = _frida_json_path_error_get_type;
pub const json_path_error_quark = _frida_json_path_error_quark;
pub const json_path_get_type = _frida_json_path_get_type;
pub const json_path_match = _frida_json_path_match;
pub const json_path_new = _frida_json_path_new;
pub const json_path_query = _frida_json_path_query;
pub const json_reader_count_elements = _frida_json_reader_count_elements;
pub const json_reader_count_members = _frida_json_reader_count_members;
pub const json_reader_end_element = _frida_json_reader_end_element;
pub const json_reader_end_member = _frida_json_reader_end_member;
pub const json_reader_error_get_type = _frida_json_reader_error_get_type;
pub const json_reader_error_quark = _frida_json_reader_error_quark;
pub const json_reader_get_boolean_value = _frida_json_reader_get_boolean_value;
pub const json_reader_get_current_node = _frida_json_reader_get_current_node;
pub const json_reader_get_double_value = _frida_json_reader_get_double_value;
pub const json_reader_get_error = _frida_json_reader_get_error;
pub const json_reader_get_int_value = _frida_json_reader_get_int_value;
pub const json_reader_get_member_name = _frida_json_reader_get_member_name;
pub const json_reader_get_null_value = _frida_json_reader_get_null_value;
pub const json_reader_get_string_value = _frida_json_reader_get_string_value;
pub const json_reader_get_type = _frida_json_reader_get_type;
pub const json_reader_get_value = _frida_json_reader_get_value;
pub const json_reader_is_array = _frida_json_reader_is_array;
pub const json_reader_is_object = _frida_json_reader_is_object;
pub const json_reader_is_value = _frida_json_reader_is_value;
pub const json_reader_list_members = _frida_json_reader_list_members;
pub const json_reader_new = _frida_json_reader_new;
pub const json_reader_read_element = _frida_json_reader_read_element;
pub const json_reader_read_member = _frida_json_reader_read_member;
pub const json_reader_set_root = _frida_json_reader_set_root;
pub const json_serializable_default_deserialize_property = _frida_json_serializable_default_deserialize_property;
pub const json_serializable_default_serialize_property = _frida_json_serializable_default_serialize_property;
pub const json_serializable_deserialize_property = _frida_json_serializable_deserialize_property;
pub const json_serializable_find_property = _frida_json_serializable_find_property;
pub const json_serializable_get_property = _frida_json_serializable_get_property;
pub const json_serializable_get_type = _frida_json_serializable_get_type;
pub const json_serializable_list_properties = _frida_json_serializable_list_properties;
pub const json_serializable_serialize_property = _frida_json_serializable_serialize_property;
pub const json_serializable_set_property = _frida_json_serializable_set_property;
pub const json_serialize_gobject = _frida_json_serialize_gobject;
pub const json_string_compare = _frida_json_string_compare;
pub const json_string_equal = _frida_json_string_equal;
pub const json_string_hash = _frida_json_string_hash;
pub const json_to_string = _frida_json_to_string;
pub const __FRIDA_CORE_H__ = "";
pub const __G_LIB_H__ = "";
pub const __GLIB_H_INSIDE__ = "";
pub const __G_ALLOCA_H__ = "";
pub const __G_TYPES_H__ = "";
pub const __GLIBCONFIG_H__ = "";
pub const __G_MACROS_H__ = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub inline fn G_GNUC_CHECK_VERSION(major: anytype, minor: anytype) @TypeOf((__GNUC__ > major) or ((__GNUC__ == major) and (__GNUC_MINOR__ >= minor))) {
    return (__GNUC__ > major) or ((__GNUC__ == major) and (__GNUC_MINOR__ >= minor));
}
pub const G_CAN_INLINE = "";
pub const g_macro__has_builtin = __has_builtin;
pub const G_GNUC_FUNCTION = ("" ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(G_STRFUNC);
pub const G_GNUC_PRETTY_FUNCTION = ("" ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(G_STRFUNC);
pub const G_ANALYZER_ANALYZING = @as(c_int, 0);
pub const G_ANALYZER_NORETURN = "";
pub inline fn G_STRINGIFY(macro_or_string: anytype) @TypeOf(G_STRINGIFY_ARG(macro_or_string)) {
    return G_STRINGIFY_ARG(macro_or_string);
}
pub inline fn G_PASTE(identifier1: anytype, identifier2: anytype) @TypeOf(G_PASTE_ARGS(identifier1, identifier2)) {
    return G_PASTE_ARGS(identifier1, identifier2);
}
pub const G_BEGIN_DECLS = "";
pub const G_END_DECLS = "";
pub const FALSE = @as(c_int, 0);
pub const TRUE = !(FALSE != 0);
pub inline fn MAX(a: anytype, b: anytype) @TypeOf(if (a > b) a else b) {
    return if (a > b) a else b;
}
pub inline fn MIN(a: anytype, b: anytype) @TypeOf(if (a < b) a else b) {
    return if (a < b) a else b;
}
pub inline fn ABS(a: anytype) @TypeOf(if (a < @as(c_int, 0)) -a else a) {
    return if (a < @as(c_int, 0)) -a else a;
}
pub inline fn CLAMP(x: anytype, low: anytype, high: anytype) @TypeOf(if (x > high) high else if (x < low) low else x) {
    return if (x > high) high else if (x < low) low else x;
}
pub inline fn G_APPROX_VALUE(a: anytype, b: anytype, epsilon: anytype) @TypeOf((if (a > b) a - b else b - a) < epsilon) {
    return (if (a > b) a - b else b - a) < epsilon;
}
pub inline fn GPOINTER_TO_SIZE(p: anytype) gsize {
    return @import("std").zig.c_translation.cast(gsize, p);
}
pub inline fn GSIZE_TO_POINTER(s: anytype) gpointer {
    return @import("std").zig.c_translation.cast(gpointer, @import("std").zig.c_translation.cast(gsize, s));
}
pub inline fn G_STRUCT_OFFSET(struct_type: anytype, member: anytype) glong {
    return @import("std").zig.c_translation.cast(glong, offsetof(struct_type, member));
}
pub inline fn G_STRUCT_MEMBER_P(struct_p: anytype, struct_offset: anytype) gpointer {
    return @import("std").zig.c_translation.cast(gpointer, @import("std").zig.c_translation.cast([*c]guint8, struct_p) + @import("std").zig.c_translation.cast(glong, struct_offset));
}
pub inline fn G_LIKELY(expr: anytype) @TypeOf(expr) {
    return expr;
}
pub inline fn G_UNLIKELY(expr: anytype) @TypeOf(expr) {
    return expr;
}
pub const G_HAVE_GNUC_VISIBILITY = @as(c_int, 1);
pub const GLIB_DEPRECATED_ENUMERATOR = G_DEPRECATED;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_FOR(f: anytype) @TypeOf(G_DEPRECATED_FOR(f)) {
    return G_DEPRECATED_FOR(f);
}
pub inline fn GLIB_UNAVAILABLE_ENUMERATOR(maj: anytype, min: anytype) @TypeOf(G_UNAVAILABLE(maj, min)) {
    return G_UNAVAILABLE(maj, min);
}
pub const GLIB_DEPRECATED_TYPE = G_DEPRECATED;
pub inline fn GLIB_DEPRECATED_TYPE_FOR(f: anytype) @TypeOf(G_DEPRECATED_FOR(f)) {
    return G_DEPRECATED_FOR(f);
}
pub inline fn GLIB_UNAVAILABLE_TYPE(maj: anytype, min: anytype) @TypeOf(G_UNAVAILABLE(maj, min)) {
    return G_UNAVAILABLE(maj, min);
}
pub inline fn _GLIB_DEFINE_AUTOPTR_CHAINUP(ModuleObjName: anytype, ParentName: anytype) @TypeOf(_GLIB_DEFINE_AUTOPTR_CLEANUP_FUNCS(ModuleObjName, ParentName, _GLIB_AUTOPTR_CLEAR_FUNC_NAME(ParentName))) {
    return _GLIB_DEFINE_AUTOPTR_CLEANUP_FUNCS(ModuleObjName, ParentName, _GLIB_AUTOPTR_CLEAR_FUNC_NAME(ParentName));
}
pub inline fn G_DEFINE_AUTOPTR_CLEANUP_FUNC(TypeName: anytype, func: anytype) @TypeOf(_GLIB_DEFINE_AUTOPTR_CLEANUP_FUNCS(TypeName, TypeName, func)) {
    return _GLIB_DEFINE_AUTOPTR_CLEANUP_FUNCS(TypeName, TypeName, func);
}
pub const g_autofree = _GLIB_CLEANUP(g_autoptr_cleanup_generic_gfree);
pub const __CLANG_LIMITS_H = "";
pub const _GCC_LIMITS_H_ = "";
pub const _LIBC_LIMITS_H_ = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2X = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    return __has_builtin(name);
}
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub inline fn __P(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    return __bos(__o);
}
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub inline fn __ASMNAME(cname: anytype) @TypeOf(__ASMNAME2(__USER_LABEL_PREFIX__, cname)) {
    return __ASMNAME2(__USER_LABEL_PREFIX__, cname);
}
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    return __attribute_nonnull__(params);
}
pub const __wur = "";
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = @TypeOf(alias);
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = @TypeOf(alias);
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __attr_dealloc_free = "";
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const MB_LEN_MAX = @as(c_int, 16);
pub const LLONG_MIN = -LLONG_MAX - @as(c_int, 1);
pub const LLONG_MAX = __LONG_LONG_MAX__;
pub const ULLONG_MAX = (LLONG_MAX * @as(c_ulonglong, 2)) + @as(c_int, 1);
pub const _BITS_POSIX1_LIM_H = @as(c_int, 1);
pub const _POSIX_AIO_LISTIO_MAX = @as(c_int, 2);
pub const _POSIX_AIO_MAX = @as(c_int, 1);
pub const _POSIX_ARG_MAX = @as(c_int, 4096);
pub const _POSIX_CHILD_MAX = @as(c_int, 25);
pub const _POSIX_DELAYTIMER_MAX = @as(c_int, 32);
pub const _POSIX_HOST_NAME_MAX = @as(c_int, 255);
pub const _POSIX_LINK_MAX = @as(c_int, 8);
pub const _POSIX_LOGIN_NAME_MAX = @as(c_int, 9);
pub const _POSIX_MAX_CANON = @as(c_int, 255);
pub const _POSIX_MAX_INPUT = @as(c_int, 255);
pub const _POSIX_MQ_OPEN_MAX = @as(c_int, 8);
pub const _POSIX_MQ_PRIO_MAX = @as(c_int, 32);
pub const _POSIX_NAME_MAX = @as(c_int, 14);
pub const _POSIX_NGROUPS_MAX = @as(c_int, 8);
pub const _POSIX_OPEN_MAX = @as(c_int, 20);
pub const _POSIX_PATH_MAX = @as(c_int, 256);
pub const _POSIX_PIPE_BUF = @as(c_int, 512);
pub const _POSIX_RE_DUP_MAX = @as(c_int, 255);
pub const _POSIX_RTSIG_MAX = @as(c_int, 8);
pub const _POSIX_SEM_NSEMS_MAX = @as(c_int, 256);
pub const _POSIX_SEM_VALUE_MAX = @as(c_int, 32767);
pub const _POSIX_SIGQUEUE_MAX = @as(c_int, 32);
pub const _POSIX_SSIZE_MAX = @as(c_int, 32767);
pub const _POSIX_STREAM_MAX = @as(c_int, 8);
pub const _POSIX_SYMLINK_MAX = @as(c_int, 255);
pub const _POSIX_SYMLOOP_MAX = @as(c_int, 8);
pub const _POSIX_TIMER_MAX = @as(c_int, 32);
pub const _POSIX_TTY_NAME_MAX = @as(c_int, 9);
pub const _POSIX_TZNAME_MAX = @as(c_int, 6);
pub const _POSIX_CLOCKRES_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20000000, .decimal);
pub const __undef_NR_OPEN = "";
pub const __undef_LINK_MAX = "";
pub const __undef_OPEN_MAX = "";
pub const __undef_ARG_MAX = "";
pub const _LINUX_LIMITS_H = "";
pub const NR_OPEN = @as(c_int, 1024);
pub const NGROUPS_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const ARG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 131072, .decimal);
pub const LINK_MAX = @as(c_int, 127);
pub const MAX_CANON = @as(c_int, 255);
pub const MAX_INPUT = @as(c_int, 255);
pub const NAME_MAX = @as(c_int, 255);
pub const PATH_MAX = @as(c_int, 4096);
pub const PIPE_BUF = @as(c_int, 4096);
pub const XATTR_NAME_MAX = @as(c_int, 255);
pub const XATTR_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const XATTR_LIST_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const RTSIG_MAX = @as(c_int, 32);
pub const _POSIX_THREAD_KEYS_MAX = @as(c_int, 128);
pub const PTHREAD_KEYS_MAX = @as(c_int, 1024);
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const PTHREAD_DESTRUCTOR_ITERATIONS = _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
pub const _POSIX_THREAD_THREADS_MAX = @as(c_int, 64);
pub const AIO_PRIO_DELTA_MAX = @as(c_int, 20);
pub const PTHREAD_STACK_MIN = @as(c_int, 16384);
pub const DELAYTIMER_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const TTY_NAME_MAX = @as(c_int, 32);
pub const LOGIN_NAME_MAX = @as(c_int, 256);
pub const HOST_NAME_MAX = @as(c_int, 64);
pub const MQ_PRIO_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SEM_VALUE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SSIZE_MAX = LONG_MAX;
pub const _BITS_POSIX2_LIM_H = @as(c_int, 1);
pub const _POSIX2_BC_BASE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_DIM_MAX = @as(c_int, 2048);
pub const _POSIX2_BC_SCALE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_STRING_MAX = @as(c_int, 1000);
pub const _POSIX2_COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const _POSIX2_EXPR_NEST_MAX = @as(c_int, 32);
pub const _POSIX2_LINE_MAX = @as(c_int, 2048);
pub const _POSIX2_RE_DUP_MAX = @as(c_int, 255);
pub const _POSIX2_CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const BC_BASE_MAX = _POSIX2_BC_BASE_MAX;
pub const BC_DIM_MAX = _POSIX2_BC_DIM_MAX;
pub const BC_SCALE_MAX = _POSIX2_BC_SCALE_MAX;
pub const BC_STRING_MAX = _POSIX2_BC_STRING_MAX;
pub const COLL_WEIGHTS_MAX = @as(c_int, 255);
pub const EXPR_NEST_MAX = _POSIX2_EXPR_NEST_MAX;
pub const LINE_MAX = _POSIX2_LINE_MAX;
pub const CHARCLASS_NAME_MAX = @as(c_int, 2048);
pub const RE_DUP_MAX = @as(c_int, 0x7fff);
pub const SCHAR_MAX = __SCHAR_MAX__;
pub const SHRT_MAX = __SHRT_MAX__;
pub const INT_MAX = __INT_MAX__;
pub const LONG_MAX = __LONG_MAX__;
pub const SCHAR_MIN = -__SCHAR_MAX__ - @as(c_int, 1);
pub const SHRT_MIN = -__SHRT_MAX__ - @as(c_int, 1);
pub const INT_MIN = -__INT_MAX__ - @as(c_int, 1);
pub const LONG_MIN = -__LONG_MAX__ - @as(c_long, 1);
pub const UCHAR_MAX = (__SCHAR_MAX__ * @as(c_int, 2)) + @as(c_int, 1);
pub const USHRT_MAX = (__SHRT_MAX__ * @as(c_int, 2)) + @as(c_int, 1);
pub const UINT_MAX = (__INT_MAX__ * @as(c_uint, 2)) + @as(c_uint, 1);
pub const ULONG_MAX = (__LONG_MAX__ * @as(c_ulong, 2)) + @as(c_ulong, 1);
pub const CHAR_BIT = __CHAR_BIT__;
pub const CHAR_MIN = SCHAR_MIN;
pub const CHAR_MAX = __SCHAR_MAX__;
pub const __CLANG_FLOAT_H = "";
pub const FLT_RADIX = __FLT_RADIX__;
pub const FLT_MANT_DIG = __FLT_MANT_DIG__;
pub const DBL_MANT_DIG = __DBL_MANT_DIG__;
pub const LDBL_MANT_DIG = __LDBL_MANT_DIG__;
pub const DECIMAL_DIG = __DECIMAL_DIG__;
pub const FLT_DIG = __FLT_DIG__;
pub const DBL_DIG = __DBL_DIG__;
pub const LDBL_DIG = __LDBL_DIG__;
pub const FLT_MIN_EXP = __FLT_MIN_EXP__;
pub const DBL_MIN_EXP = __DBL_MIN_EXP__;
pub const LDBL_MIN_EXP = __LDBL_MIN_EXP__;
pub const FLT_MIN_10_EXP = __FLT_MIN_10_EXP__;
pub const DBL_MIN_10_EXP = __DBL_MIN_10_EXP__;
pub const LDBL_MIN_10_EXP = __LDBL_MIN_10_EXP__;
pub const FLT_MAX_EXP = __FLT_MAX_EXP__;
pub const DBL_MAX_EXP = __DBL_MAX_EXP__;
pub const LDBL_MAX_EXP = __LDBL_MAX_EXP__;
pub const FLT_MAX_10_EXP = __FLT_MAX_10_EXP__;
pub const DBL_MAX_10_EXP = __DBL_MAX_10_EXP__;
pub const LDBL_MAX_10_EXP = __LDBL_MAX_10_EXP__;
pub const FLT_MAX = __FLT_MAX__;
pub const DBL_MAX = __DBL_MAX__;
pub const LDBL_MAX = __LDBL_MAX__;
pub const FLT_EPSILON = __FLT_EPSILON__;
pub const DBL_EPSILON = __DBL_EPSILON__;
pub const LDBL_EPSILON = __LDBL_EPSILON__;
pub const FLT_MIN = __FLT_MIN__;
pub const DBL_MIN = __DBL_MIN__;
pub const LDBL_MIN = __LDBL_MIN__;
pub const FLT_TRUE_MIN = __FLT_DENORM_MIN__;
pub const DBL_TRUE_MIN = __DBL_DENORM_MIN__;
pub const LDBL_TRUE_MIN = __LDBL_DENORM_MIN__;
pub const FLT_DECIMAL_DIG = __FLT_DECIMAL_DIG__;
pub const DBL_DECIMAL_DIG = __DBL_DECIMAL_DIG__;
pub const LDBL_DECIMAL_DIG = __LDBL_DECIMAL_DIG__;
pub const FLT_HAS_SUBNORM = __FLT_HAS_DENORM__;
pub const DBL_HAS_SUBNORM = __DBL_HAS_DENORM__;
pub const LDBL_HAS_SUBNORM = __LDBL_HAS_DENORM__;
pub const GLIB_HAVE_ALLOCA_H = "";
pub const GLIB_STATIC_COMPILATION = @as(c_int, 1);
pub const GOBJECT_STATIC_COMPILATION = @as(c_int, 1);
pub const GIO_STATIC_COMPILATION = @as(c_int, 1);
pub const GMODULE_STATIC_COMPILATION = @as(c_int, 1);
pub const G_INTL_STATIC_COMPILATION = @as(c_int, 1);
pub const GLIB_DYNAMIC_UNLOADING = @as(c_int, 1);
pub const G_MINFLOAT = FLT_MIN;
pub const G_MAXFLOAT = FLT_MAX;
pub const G_MINDOUBLE = DBL_MIN;
pub const G_MAXDOUBLE = DBL_MAX;
pub const G_MINSHORT = SHRT_MIN;
pub const G_MAXSHORT = SHRT_MAX;
pub const G_MAXUSHORT = USHRT_MAX;
pub const G_MININT = INT_MIN;
pub const G_MAXINT = INT_MAX;
pub const G_MAXUINT = UINT_MAX;
pub const G_MINLONG = LONG_MIN;
pub const G_MAXLONG = LONG_MAX;
pub const G_MAXULONG = ULONG_MAX;
pub const G_GINT16_MODIFIER = "h";
pub const G_GINT16_FORMAT = "hi";
pub const G_GUINT16_FORMAT = "hu";
pub const G_GINT32_MODIFIER = "";
pub const G_GINT32_FORMAT = "i";
pub const G_GUINT32_FORMAT = "u";
pub const G_HAVE_GINT64 = @as(c_int, 1);
pub const G_GINT64_CONSTANT = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const G_GUINT64_CONSTANT = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const G_GINT64_MODIFIER = "l";
pub const G_GINT64_FORMAT = "li";
pub const G_GUINT64_FORMAT = "lu";
pub const GLIB_SIZEOF_VOID_P = @as(c_int, 8);
pub const GLIB_SIZEOF_LONG = @as(c_int, 8);
pub const GLIB_SIZEOF_SIZE_T = @as(c_int, 8);
pub const GLIB_SIZEOF_SSIZE_T = @as(c_int, 8);
pub const G_GSIZE_MODIFIER = "l";
pub const G_GSSIZE_MODIFIER = "l";
pub const G_GSIZE_FORMAT = "lu";
pub const G_GSSIZE_FORMAT = "li";
pub const G_MAXSIZE = G_MAXULONG;
pub const G_MINSSIZE = G_MINLONG;
pub const G_MAXSSIZE = G_MAXLONG;
pub const G_MINOFFSET = G_MININT64;
pub const G_MAXOFFSET = G_MAXINT64;
pub const G_GOFFSET_MODIFIER = G_GINT64_MODIFIER;
pub const G_GOFFSET_FORMAT = G_GINT64_FORMAT;
pub inline fn G_GOFFSET_CONSTANT(val: anytype) @TypeOf(G_GINT64_CONSTANT(val)) {
    return G_GINT64_CONSTANT(val);
}
pub const G_POLLFD_STANDARD = "";
pub const G_POLLFD_FORMAT = "%d";
pub inline fn GPOINTER_TO_INT(p: anytype) gint {
    return @import("std").zig.c_translation.cast(gint, @import("std").zig.c_translation.cast(glong, p));
}
pub inline fn GPOINTER_TO_UINT(p: anytype) guint {
    return @import("std").zig.c_translation.cast(guint, @import("std").zig.c_translation.cast(gulong, p));
}
pub inline fn GINT_TO_POINTER(i: anytype) gpointer {
    return @import("std").zig.c_translation.cast(gpointer, @import("std").zig.c_translation.cast(glong, i));
}
pub inline fn GUINT_TO_POINTER(u: anytype) gpointer {
    return @import("std").zig.c_translation.cast(gpointer, @import("std").zig.c_translation.cast(gulong, u));
}
pub const G_GINTPTR_MODIFIER = "l";
pub const G_GINTPTR_FORMAT = "li";
pub const G_GUINTPTR_FORMAT = "lu";
pub const GLIB_MAJOR_VERSION = @as(c_int, 2);
pub const GLIB_MINOR_VERSION = @as(c_int, 75);
pub const GLIB_MICRO_VERSION = @as(c_int, 0);
pub const G_OS_UNIX = "";
pub const G_VA_COPY = va_copy;
pub const G_HAVE_ISO_VARARGS = @as(c_int, 1);
pub const G_HAVE_GROWING_STACK = @as(c_int, 0);
pub const G_HAVE_GNUC_VARARGS = @as(c_int, 1);
pub const G_THREADS_ENABLED = "";
pub const G_THREADS_IMPL_POSIX = "";
pub const G_ATOMIC_LOCK_FREE = "";
pub inline fn GINT16_TO_LE(val: anytype) gint16 {
    return @import("std").zig.c_translation.cast(gint16, val);
}
pub inline fn GUINT16_TO_LE(val: anytype) guint16 {
    return @import("std").zig.c_translation.cast(guint16, val);
}
pub inline fn GINT16_TO_BE(val: anytype) gint16 {
    return @import("std").zig.c_translation.cast(gint16, GUINT16_SWAP_LE_BE(val));
}
pub inline fn GUINT16_TO_BE(val: anytype) @TypeOf(GUINT16_SWAP_LE_BE(val)) {
    return GUINT16_SWAP_LE_BE(val);
}
pub inline fn GINT32_TO_LE(val: anytype) gint32 {
    return @import("std").zig.c_translation.cast(gint32, val);
}
pub inline fn GUINT32_TO_LE(val: anytype) guint32 {
    return @import("std").zig.c_translation.cast(guint32, val);
}
pub inline fn GINT32_TO_BE(val: anytype) gint32 {
    return @import("std").zig.c_translation.cast(gint32, GUINT32_SWAP_LE_BE(val));
}
pub inline fn GUINT32_TO_BE(val: anytype) @TypeOf(GUINT32_SWAP_LE_BE(val)) {
    return GUINT32_SWAP_LE_BE(val);
}
pub inline fn GINT64_TO_LE(val: anytype) gint64 {
    return @import("std").zig.c_translation.cast(gint64, val);
}
pub inline fn GUINT64_TO_LE(val: anytype) guint64 {
    return @import("std").zig.c_translation.cast(guint64, val);
}
pub inline fn GINT64_TO_BE(val: anytype) gint64 {
    return @import("std").zig.c_translation.cast(gint64, GUINT64_SWAP_LE_BE(val));
}
pub inline fn GUINT64_TO_BE(val: anytype) @TypeOf(GUINT64_SWAP_LE_BE(val)) {
    return GUINT64_SWAP_LE_BE(val);
}
pub inline fn GLONG_TO_LE(val: anytype) glong {
    return @import("std").zig.c_translation.cast(glong, GINT64_TO_LE(val));
}
pub inline fn GULONG_TO_LE(val: anytype) gulong {
    return @import("std").zig.c_translation.cast(gulong, GUINT64_TO_LE(val));
}
pub inline fn GLONG_TO_BE(val: anytype) glong {
    return @import("std").zig.c_translation.cast(glong, GINT64_TO_BE(val));
}
pub inline fn GULONG_TO_BE(val: anytype) gulong {
    return @import("std").zig.c_translation.cast(gulong, GUINT64_TO_BE(val));
}
pub inline fn GINT_TO_LE(val: anytype) gint {
    return @import("std").zig.c_translation.cast(gint, GINT32_TO_LE(val));
}
pub inline fn GUINT_TO_LE(val: anytype) guint {
    return @import("std").zig.c_translation.cast(guint, GUINT32_TO_LE(val));
}
pub inline fn GINT_TO_BE(val: anytype) gint {
    return @import("std").zig.c_translation.cast(gint, GINT32_TO_BE(val));
}
pub inline fn GUINT_TO_BE(val: anytype) guint {
    return @import("std").zig.c_translation.cast(guint, GUINT32_TO_BE(val));
}
pub inline fn GSIZE_TO_LE(val: anytype) gsize {
    return @import("std").zig.c_translation.cast(gsize, GUINT64_TO_LE(val));
}
pub inline fn GSSIZE_TO_LE(val: anytype) gssize {
    return @import("std").zig.c_translation.cast(gssize, GINT64_TO_LE(val));
}
pub inline fn GSIZE_TO_BE(val: anytype) gsize {
    return @import("std").zig.c_translation.cast(gsize, GUINT64_TO_BE(val));
}
pub inline fn GSSIZE_TO_BE(val: anytype) gssize {
    return @import("std").zig.c_translation.cast(gssize, GINT64_TO_BE(val));
}
pub const G_BYTE_ORDER = G_LITTLE_ENDIAN;
pub const G_MODULE_SUFFIX = "so";
pub const G_PID_FORMAT = "i";
pub const GLIB_SYSDEF_AF_UNIX = @as(c_int, 1);
pub const GLIB_SYSDEF_AF_INET = @as(c_int, 2);
pub const GLIB_SYSDEF_AF_INET6 = @as(c_int, 10);
pub const GLIB_SYSDEF_MSG_OOB = @as(c_int, 1);
pub const GLIB_SYSDEF_MSG_PEEK = @as(c_int, 2);
pub const GLIB_SYSDEF_MSG_DONTROUTE = @as(c_int, 4);
pub const G_DIR_SEPARATOR = '/';
pub const G_DIR_SEPARATOR_S = "/";
pub const G_SEARCHPATH_SEPARATOR = ':';
pub const G_SEARCHPATH_SEPARATOR_S = ":";
pub const __G_VERSION_MACROS_H__ = "";
pub inline fn G_ENCODE_VERSION(major: anytype, minor: anytype) @TypeOf((major << @as(c_int, 16)) | (minor << @as(c_int, 8))) {
    return (major << @as(c_int, 16)) | (minor << @as(c_int, 8));
}
pub const GLIB_VERSION_2_2 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 2));
pub const GLIB_VERSION_2_4 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 4));
pub const GLIB_VERSION_2_6 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 6));
pub const GLIB_VERSION_2_8 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 8));
pub const GLIB_VERSION_2_10 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 10));
pub const GLIB_VERSION_2_12 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 12));
pub const GLIB_VERSION_2_14 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 14));
pub const GLIB_VERSION_2_16 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 16));
pub const GLIB_VERSION_2_18 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 18));
pub const GLIB_VERSION_2_20 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 20));
pub const GLIB_VERSION_2_22 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 22));
pub const GLIB_VERSION_2_24 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 24));
pub const GLIB_VERSION_2_26 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 26));
pub const GLIB_VERSION_2_28 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 28));
pub const GLIB_VERSION_2_30 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 30));
pub const GLIB_VERSION_2_32 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 32));
pub const GLIB_VERSION_2_34 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 34));
pub const GLIB_VERSION_2_36 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 36));
pub const GLIB_VERSION_2_38 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 38));
pub const GLIB_VERSION_2_40 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 40));
pub const GLIB_VERSION_2_42 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 42));
pub const GLIB_VERSION_2_44 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 44));
pub const GLIB_VERSION_2_46 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 46));
pub const GLIB_VERSION_2_48 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 48));
pub const GLIB_VERSION_2_50 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 50));
pub const GLIB_VERSION_2_52 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 52));
pub const GLIB_VERSION_2_54 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 54));
pub const GLIB_VERSION_2_56 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 56));
pub const GLIB_VERSION_2_58 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 58));
pub const GLIB_VERSION_2_60 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 60));
pub const GLIB_VERSION_2_62 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 62));
pub const GLIB_VERSION_2_64 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 64));
pub const GLIB_VERSION_2_66 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 66));
pub const GLIB_VERSION_2_68 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 68));
pub const GLIB_VERSION_2_70 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 70));
pub const GLIB_VERSION_2_72 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 72));
pub const GLIB_VERSION_2_74 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 74));
pub const GLIB_VERSION_2_76 = G_ENCODE_VERSION(@as(c_int, 2), @as(c_int, 76));
pub const GLIB_VERSION_CUR_STABLE = G_ENCODE_VERSION(GLIB_MAJOR_VERSION, GLIB_MINOR_VERSION + @as(c_int, 1));
pub const GLIB_VERSION_PREV_STABLE = G_ENCODE_VERSION(GLIB_MAJOR_VERSION, GLIB_MINOR_VERSION - @as(c_int, 1));
pub const GLIB_VERSION_MIN_REQUIRED = GLIB_VERSION_CUR_STABLE;
pub const GLIB_VERSION_MAX_ALLOWED = GLIB_VERSION_CUR_STABLE;
pub const _GLIB_IMPORT = "";
pub const _GLIB_API = _GLIB_IMPORT;
pub const GLIB_VAR = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_IN_ALL = _GLIB_EXTERN;
pub const GLIB_DEPRECATED = G_DEPRECATED ++ _GLIB_EXTERN;
pub inline fn GLIB_UNAVAILABLE_STATIC_INLINE(maj: anytype, min: anytype) @TypeOf(G_UNAVAILABLE(maj, min)) {
    return G_UNAVAILABLE(maj, min);
}
pub const GLIB_DEPRECATED_IN_2_26 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_26 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_26 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_26 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_26 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_26 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_26 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_26 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_26 = "";
pub const GLIB_DEPRECATED_IN_2_28 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_28 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_28 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_28 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_28 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_28 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_28 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_28 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_28 = "";
pub const GLIB_DEPRECATED_IN_2_30 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_30 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_30 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_30 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_30 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_30 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_30 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_30 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_30 = "";
pub const GLIB_DEPRECATED_IN_2_32 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_32 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_32 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_32 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_32 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_32 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_32 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_32 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_32 = "";
pub const GLIB_DEPRECATED_IN_2_34 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_34 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_34 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_34 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_34 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_34 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_34 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_34 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_34 = "";
pub const GLIB_DEPRECATED_IN_2_36 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_36 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_36 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_36 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_36 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_36 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_36 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_36 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_36 = "";
pub const GLIB_DEPRECATED_IN_2_38 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_38 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_38 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_38 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_38 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_38 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_38 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_38 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_38 = "";
pub const GLIB_DEPRECATED_IN_2_40 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_40 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_40 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_40 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_40 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_40 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_40 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_40 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_40 = "";
pub const GLIB_DEPRECATED_IN_2_42 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_42 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_42 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_42 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_42 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_42 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_42 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_42 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_42 = "";
pub const GLIB_DEPRECATED_IN_2_44 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_44 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_44 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_44 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_44 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_44 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_44 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_44 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_44 = "";
pub const GLIB_DEPRECATED_IN_2_46 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_46 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_46 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_46 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_46 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_46 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_46 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_46 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_46 = "";
pub const GLIB_DEPRECATED_IN_2_48 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_48 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_48 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_48 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_48 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_48 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_48 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_48 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_48 = "";
pub const GLIB_DEPRECATED_IN_2_50 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_50 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_50 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_50 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_50 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_50 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_50 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_50 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_50 = "";
pub const GLIB_DEPRECATED_IN_2_52 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_52 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_52 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_52 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_52 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_52 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_52 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_52 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_52 = "";
pub const GLIB_DEPRECATED_IN_2_54 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_54 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_54 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_54 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_54 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_54 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_54 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_54 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_54 = "";
pub const GLIB_DEPRECATED_IN_2_56 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_56 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_56 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_56 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_56 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_56 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_56 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_56 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_56 = "";
pub const GLIB_DEPRECATED_IN_2_58 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_58 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_58 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_58 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_58 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_58 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_58 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_58 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_58 = "";
pub const GLIB_DEPRECATED_IN_2_60 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_60 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_60 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_60 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_60 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_60 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_60 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_60 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_60 = "";
pub const GLIB_DEPRECATED_IN_2_62 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_62 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_62 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_62 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_62 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_62 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_62 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_62 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_62 = "";
pub const GLIB_DEPRECATED_IN_2_64 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_64 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_64 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_64 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_64 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_64 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_64 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_64 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_64 = "";
pub const GLIB_DEPRECATED_IN_2_66 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_66 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_66 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_66 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_66 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_66 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_66 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_66 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_66 = "";
pub const GLIB_DEPRECATED_IN_2_68 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_68 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_68 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_68 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_68 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_68 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_68 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_68 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_68 = "";
pub const GLIB_DEPRECATED_IN_2_70 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_70 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_70 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_70 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_70 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_70 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_70 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_70 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_70 = "";
pub const GLIB_DEPRECATED_IN_2_72 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_72 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_72 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_72 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_72 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_72 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_72 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_72 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_72 = "";
pub const GLIB_DEPRECATED_IN_2_74 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_74 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_74 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_74 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_74 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_74 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_74 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_74 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_74 = "";
pub const GLIB_DEPRECATED_IN_2_76 = GLIB_DEPRECATED;
pub inline fn GLIB_DEPRECATED_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_FOR(f)) {
    return GLIB_DEPRECATED_FOR(f);
}
pub const GLIB_DEPRECATED_MACRO_IN_2_76 = GLIB_DEPRECATED_MACRO;
pub inline fn GLIB_DEPRECATED_MACRO_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GLIB_DEPRECATED_ENUMERATOR_IN_2_76 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GLIB_DEPRECATED_ENUMERATOR_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GLIB_DEPRECATED_TYPE_IN_2_76 = GLIB_DEPRECATED_TYPE;
pub inline fn GLIB_DEPRECATED_TYPE_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GLIB_AVAILABLE_IN_2_76 = _GLIB_EXTERN;
pub const GLIB_AVAILABLE_STATIC_INLINE_IN_2_76 = "";
pub const GLIB_AVAILABLE_MACRO_IN_2_76 = "";
pub const GLIB_AVAILABLE_ENUMERATOR_IN_2_76 = "";
pub const GLIB_AVAILABLE_TYPE_IN_2_76 = "";
pub const _TIME_H = @as(c_int, 1);
pub const _BITS_TIME_H = @as(c_int, 1);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const CLOCKS_PER_SEC = @import("std").zig.c_translation.cast(__clock_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal));
pub const CLOCK_REALTIME = @as(c_int, 0);
pub const CLOCK_MONOTONIC = @as(c_int, 1);
pub const CLOCK_PROCESS_CPUTIME_ID = @as(c_int, 2);
pub const CLOCK_THREAD_CPUTIME_ID = @as(c_int, 3);
pub const CLOCK_MONOTONIC_RAW = @as(c_int, 4);
pub const CLOCK_REALTIME_COARSE = @as(c_int, 5);
pub const CLOCK_MONOTONIC_COARSE = @as(c_int, 6);
pub const CLOCK_BOOTTIME = @as(c_int, 7);
pub const CLOCK_REALTIME_ALARM = @as(c_int, 8);
pub const CLOCK_BOOTTIME_ALARM = @as(c_int, 9);
pub const CLOCK_TAI = @as(c_int, 11);
pub const TIMER_ABSTIME = @as(c_int, 1);
pub const __clock_t_defined = @as(c_int, 1);
pub const __time_t_defined = @as(c_int, 1);
pub const __struct_tm_defined = @as(c_int, 1);
pub const _STRUCT_TIMESPEC = @as(c_int, 1);
pub const _BITS_ENDIAN_H = @as(c_int, 1);
pub const __LITTLE_ENDIAN = @as(c_int, 1234);
pub const __BIG_ENDIAN = @as(c_int, 4321);
pub const __PDP_ENDIAN = @as(c_int, 3412);
pub const _BITS_ENDIANNESS_H = @as(c_int, 1);
pub const __BYTE_ORDER = __LITTLE_ENDIAN;
pub const __FLOAT_WORD_ORDER = __BYTE_ORDER;
pub inline fn __LONG_LONG_PAIR(HI: anytype, LO: anytype) @TypeOf(HI) {
    return blk: {
        _ = @TypeOf(LO);
        break :blk HI;
    };
}
pub const __clockid_t_defined = @as(c_int, 1);
pub const __timer_t_defined = @as(c_int, 1);
pub const __itimerspec_defined = @as(c_int, 1);
pub const __pid_t_defined = "";
pub const _BITS_TYPES_LOCALE_T_H = @as(c_int, 1);
pub const _BITS_TYPES___LOCALE_T_H = @as(c_int, 1);
pub const TIME_UTC = @as(c_int, 1);
pub inline fn __isleap(year: anytype) @TypeOf((@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 4)) == @as(c_int, 0)) and ((@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 100)) != @as(c_int, 0)) or (@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 400)) == @as(c_int, 0)))) {
    return (@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 4)) == @as(c_int, 0)) and ((@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 100)) != @as(c_int, 0)) or (@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 400)) == @as(c_int, 0)));
}
pub const G_MININT8 = @import("std").zig.c_translation.cast(gint8, -G_MAXINT8 - @as(c_int, 1));
pub const G_MAXINT8 = @import("std").zig.c_translation.cast(gint8, @as(c_int, 0x7f));
pub const G_MAXUINT8 = @import("std").zig.c_translation.cast(guint8, @as(c_int, 0xff));
pub const G_MININT16 = @import("std").zig.c_translation.cast(gint16, -G_MAXINT16 - @as(c_int, 1));
pub const G_MAXINT16 = @import("std").zig.c_translation.cast(gint16, @as(c_int, 0x7fff));
pub const G_MAXUINT16 = @import("std").zig.c_translation.cast(guint16, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal));
pub const G_MININT32 = @import("std").zig.c_translation.cast(gint32, -G_MAXINT32 - @as(c_int, 1));
pub const G_MAXINT32 = @import("std").zig.c_translation.cast(gint32, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal));
pub const G_MAXUINT32 = @import("std").zig.c_translation.cast(guint32, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const G_MININT64 = @import("std").zig.c_translation.cast(gint64, -G_MAXINT64 - G_GINT64_CONSTANT(@as(c_int, 1)));
pub const G_MAXINT64 = G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffffffffffff, .hexadecimal));
pub const G_MAXUINT64 = G_GUINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffffffffffff, .hexadecimal));
pub const G_E = @as(f64, 2.7182818284590452353602874713526624977572470937000);
pub const G_LN2 = @as(f64, 0.69314718055994530941723212145817656807550013436026);
pub const G_LN10 = @as(f64, 2.3025850929940456840179914546843642076011014886288);
pub const G_PI = @as(f64, 3.1415926535897932384626433832795028841971693993751);
pub const G_PI_2 = @as(f64, 1.5707963267948966192313216916397514420985846996876);
pub const G_PI_4 = @as(f64, 0.78539816339744830961566084581987572104929234984378);
pub const G_SQRT2 = @as(f64, 1.4142135623730950488016887242096980785696718753769);
pub const G_LITTLE_ENDIAN = @as(c_int, 1234);
pub const G_BIG_ENDIAN = @as(c_int, 4321);
pub const G_PDP_ENDIAN = @as(c_int, 3412);
pub inline fn GUINT16_SWAP_LE_BE_CONSTANT(val: anytype) guint16 {
    return @import("std").zig.c_translation.cast(guint16, @import("std").zig.c_translation.cast(guint16, @import("std").zig.c_translation.cast(guint16, val) >> @as(c_int, 8)) | @import("std").zig.c_translation.cast(guint16, @import("std").zig.c_translation.cast(guint16, val) << @as(c_int, 8)));
}
pub inline fn GUINT32_SWAP_LE_BE_CONSTANT(val: anytype) guint32 {
    return @import("std").zig.c_translation.cast(guint32, ((((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @as(c_uint, 0x000000ff))) << @as(c_int, 24)) | ((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @as(c_uint, 0x0000ff00))) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hexadecimal))) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hexadecimal))) >> @as(c_int, 24)));
}
pub inline fn GUINT64_SWAP_LE_BE_CONSTANT(val: anytype) guint64 {
    return @import("std").zig.c_translation.cast(guint64, ((((((((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@as(c_uint, 0x00000000000000ff)))) << @as(c_int, 56)) | ((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@as(c_uint, 0x000000000000ff00)))) << @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0000000000ff0000, .hexadecimal)))) << @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00000000ff000000, .hexadecimal)))) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000000ff00000000, .hexadecimal)))) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0000ff0000000000, .hexadecimal)))) >> @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff000000000000, .hexadecimal)))) >> @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(guint64, val) & @import("std").zig.c_translation.cast(guint64, G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff00000000000000, .hexadecimal)))) >> @as(c_int, 56)));
}
pub inline fn GUINT16_SWAP_LE_BE(val: anytype) @TypeOf(GUINT16_SWAP_LE_BE_CONSTANT(val)) {
    return GUINT16_SWAP_LE_BE_CONSTANT(val);
}
pub inline fn GUINT32_SWAP_LE_BE(val: anytype) @TypeOf(GUINT32_SWAP_LE_BE_CONSTANT(val)) {
    return GUINT32_SWAP_LE_BE_CONSTANT(val);
}
pub inline fn GUINT64_SWAP_LE_BE(val: anytype) @TypeOf(GUINT64_SWAP_LE_BE_CONSTANT(val)) {
    return GUINT64_SWAP_LE_BE_CONSTANT(val);
}
pub inline fn GUINT16_SWAP_LE_PDP(val: anytype) guint16 {
    return @import("std").zig.c_translation.cast(guint16, val);
}
pub inline fn GUINT16_SWAP_BE_PDP(val: anytype) @TypeOf(GUINT16_SWAP_LE_BE(val)) {
    return GUINT16_SWAP_LE_BE(val);
}
pub inline fn GUINT32_SWAP_LE_PDP(val: anytype) guint32 {
    return @import("std").zig.c_translation.cast(guint32, ((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @as(c_uint, 0x0000ffff))) << @as(c_int, 16)) | ((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffff0000, .hexadecimal))) >> @as(c_int, 16)));
}
pub inline fn GUINT32_SWAP_BE_PDP(val: anytype) guint32 {
    return @import("std").zig.c_translation.cast(guint32, ((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff00ff, .hexadecimal))) << @as(c_int, 8)) | ((@import("std").zig.c_translation.cast(guint32, val) & @import("std").zig.c_translation.cast(guint32, @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff00ff00, .hexadecimal))) >> @as(c_int, 8)));
}
pub inline fn GINT16_FROM_LE(val: anytype) @TypeOf(GINT16_TO_LE(val)) {
    return GINT16_TO_LE(val);
}
pub inline fn GUINT16_FROM_LE(val: anytype) @TypeOf(GUINT16_TO_LE(val)) {
    return GUINT16_TO_LE(val);
}
pub inline fn GINT16_FROM_BE(val: anytype) @TypeOf(GINT16_TO_BE(val)) {
    return GINT16_TO_BE(val);
}
pub inline fn GUINT16_FROM_BE(val: anytype) @TypeOf(GUINT16_TO_BE(val)) {
    return GUINT16_TO_BE(val);
}
pub inline fn GINT32_FROM_LE(val: anytype) @TypeOf(GINT32_TO_LE(val)) {
    return GINT32_TO_LE(val);
}
pub inline fn GUINT32_FROM_LE(val: anytype) @TypeOf(GUINT32_TO_LE(val)) {
    return GUINT32_TO_LE(val);
}
pub inline fn GINT32_FROM_BE(val: anytype) @TypeOf(GINT32_TO_BE(val)) {
    return GINT32_TO_BE(val);
}
pub inline fn GUINT32_FROM_BE(val: anytype) @TypeOf(GUINT32_TO_BE(val)) {
    return GUINT32_TO_BE(val);
}
pub inline fn GINT64_FROM_LE(val: anytype) @TypeOf(GINT64_TO_LE(val)) {
    return GINT64_TO_LE(val);
}
pub inline fn GUINT64_FROM_LE(val: anytype) @TypeOf(GUINT64_TO_LE(val)) {
    return GUINT64_TO_LE(val);
}
pub inline fn GINT64_FROM_BE(val: anytype) @TypeOf(GINT64_TO_BE(val)) {
    return GINT64_TO_BE(val);
}
pub inline fn GUINT64_FROM_BE(val: anytype) @TypeOf(GUINT64_TO_BE(val)) {
    return GUINT64_TO_BE(val);
}
pub inline fn GLONG_FROM_LE(val: anytype) @TypeOf(GLONG_TO_LE(val)) {
    return GLONG_TO_LE(val);
}
pub inline fn GULONG_FROM_LE(val: anytype) @TypeOf(GULONG_TO_LE(val)) {
    return GULONG_TO_LE(val);
}
pub inline fn GLONG_FROM_BE(val: anytype) @TypeOf(GLONG_TO_BE(val)) {
    return GLONG_TO_BE(val);
}
pub inline fn GULONG_FROM_BE(val: anytype) @TypeOf(GULONG_TO_BE(val)) {
    return GULONG_TO_BE(val);
}
pub inline fn GINT_FROM_LE(val: anytype) @TypeOf(GINT_TO_LE(val)) {
    return GINT_TO_LE(val);
}
pub inline fn GUINT_FROM_LE(val: anytype) @TypeOf(GUINT_TO_LE(val)) {
    return GUINT_TO_LE(val);
}
pub inline fn GINT_FROM_BE(val: anytype) @TypeOf(GINT_TO_BE(val)) {
    return GINT_TO_BE(val);
}
pub inline fn GUINT_FROM_BE(val: anytype) @TypeOf(GUINT_TO_BE(val)) {
    return GUINT_TO_BE(val);
}
pub inline fn GSIZE_FROM_LE(val: anytype) @TypeOf(GSIZE_TO_LE(val)) {
    return GSIZE_TO_LE(val);
}
pub inline fn GSSIZE_FROM_LE(val: anytype) @TypeOf(GSSIZE_TO_LE(val)) {
    return GSSIZE_TO_LE(val);
}
pub inline fn GSIZE_FROM_BE(val: anytype) @TypeOf(GSIZE_TO_BE(val)) {
    return GSIZE_TO_BE(val);
}
pub inline fn GSSIZE_FROM_BE(val: anytype) @TypeOf(GSSIZE_TO_BE(val)) {
    return GSSIZE_TO_BE(val);
}
pub inline fn g_ntohl(val: anytype) @TypeOf(GUINT32_FROM_BE(val)) {
    return GUINT32_FROM_BE(val);
}
pub inline fn g_ntohs(val: anytype) @TypeOf(GUINT16_FROM_BE(val)) {
    return GUINT16_FROM_BE(val);
}
pub inline fn g_htonl(val: anytype) @TypeOf(GUINT32_TO_BE(val)) {
    return GUINT32_TO_BE(val);
}
pub inline fn g_htons(val: anytype) @TypeOf(GUINT16_TO_BE(val)) {
    return GUINT16_TO_BE(val);
}
pub const _GLIB_HAVE_BUILTIN_OVERFLOW_CHECKS = "";
pub inline fn g_uint_checked_mul(dest: anytype, a: anytype, b: anytype) @TypeOf(!(__builtin_mul_overflow(a, b, dest) != 0)) {
    return !(__builtin_mul_overflow(a, b, dest) != 0);
}
pub inline fn g_uint64_checked_mul(dest: anytype, a: anytype, b: anytype) @TypeOf(!(__builtin_mul_overflow(a, b, dest) != 0)) {
    return !(__builtin_mul_overflow(a, b, dest) != 0);
}
pub inline fn g_size_checked_mul(dest: anytype, a: anytype, b: anytype) @TypeOf(!(__builtin_mul_overflow(a, b, dest) != 0)) {
    return !(__builtin_mul_overflow(a, b, dest) != 0);
}
pub const G_IEEE754_FLOAT_BIAS = @as(c_int, 127);
pub const G_IEEE754_DOUBLE_BIAS = @as(c_int, 1023);
pub const G_LOG_2_BASE_10 = @as(f64, 0.30102999566398119521);
pub const _STRING_H = @as(c_int, 1);
pub const _STRINGS_H = @as(c_int, 1);
pub inline fn g_alloca(size: anytype) @TypeOf(alloca(size)) {
    return alloca(size);
}
pub inline fn g_alloca0(size: anytype) @TypeOf(if (size == @as(c_int, 0)) NULL else memset(g_alloca(size), @as(c_int, 0), size)) {
    return if (size == @as(c_int, 0)) NULL else memset(g_alloca(size), @as(c_int, 0), size);
}
pub const __G_ARRAY_H__ = "";
pub inline fn g_array_append_val(a: anytype, v: anytype) @TypeOf(g_array_append_vals(a, &v, @as(c_int, 1))) {
    return g_array_append_vals(a, &v, @as(c_int, 1));
}
pub inline fn g_array_prepend_val(a: anytype, v: anytype) @TypeOf(g_array_prepend_vals(a, &v, @as(c_int, 1))) {
    return g_array_prepend_vals(a, &v, @as(c_int, 1));
}
pub inline fn g_array_insert_val(a: anytype, i: anytype, v: anytype) @TypeOf(g_array_insert_vals(a, i, &v, @as(c_int, 1))) {
    return g_array_insert_vals(a, i, &v, @as(c_int, 1));
}
pub inline fn g_ptr_array_index(array: anytype, index_: anytype) @TypeOf(array.*.pdata[@intCast(usize, index_)]) {
    return array.*.pdata[@intCast(usize, index_)];
}
pub const __G_ASYNCQUEUE_H__ = "";
pub const __G_THREAD_H__ = "";
pub const __G_ATOMIC_H__ = "";
pub const __GLIB_TYPEOF_H__ = "";
pub const __G_ERROR_H__ = "";
pub const __GNUC_VA_LIST = "";
pub const __STDARG_H = "";
pub const _VA_LIST = "";
pub const __G_QUARK_H__ = "";
pub const __G_UTILS_H__ = "";
pub const G_OS_INFO_KEY_NAME = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "NAME";
pub const G_OS_INFO_KEY_PRETTY_NAME = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "PRETTY_NAME";
pub const G_OS_INFO_KEY_VERSION = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "VERSION";
pub const G_OS_INFO_KEY_VERSION_CODENAME = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "VERSION_CODENAME";
pub const G_OS_INFO_KEY_VERSION_ID = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "VERSION_ID";
pub const G_OS_INFO_KEY_ID = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "ID";
pub const G_OS_INFO_KEY_HOME_URL = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "HOME_URL";
pub const G_OS_INFO_KEY_DOCUMENTATION_URL = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "DOCUMENTATION_URL";
pub const G_OS_INFO_KEY_SUPPORT_URL = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "SUPPORT_URL";
pub const G_OS_INFO_KEY_BUG_REPORT_URL = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "BUG_REPORT_URL";
pub const G_OS_INFO_KEY_PRIVACY_POLICY_URL = GLIB_AVAILABLE_MACRO_IN_2_64 ++ "PRIVACY_POLICY_URL";
pub inline fn g_ATEXIT(proc: anytype) @TypeOf(atexit(proc) ++ GLIB_DEPRECATED_MACRO_IN_2_32) {
    return atexit(proc) ++ GLIB_DEPRECATED_MACRO_IN_2_32;
}
pub const _STDLIB_H = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 1);
pub const WUNTRACED = @as(c_int, 2);
pub const WSTOPPED = @as(c_int, 2);
pub const WEXITED = @as(c_int, 4);
pub const WCONTINUED = @as(c_int, 8);
pub const WNOWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const __WNOTHREAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const __WALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const __WCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub inline fn __WEXITSTATUS(status: anytype) @TypeOf((status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal)) >> @as(c_int, 8)) {
    return (status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal)) >> @as(c_int, 8);
}
pub inline fn __WTERMSIG(status: anytype) @TypeOf(status & @as(c_int, 0x7f)) {
    return status & @as(c_int, 0x7f);
}
pub inline fn __WSTOPSIG(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    return __WEXITSTATUS(status);
}
pub inline fn __WIFEXITED(status: anytype) @TypeOf(__WTERMSIG(status) == @as(c_int, 0)) {
    return __WTERMSIG(status) == @as(c_int, 0);
}
pub inline fn __WIFSIGNALED(status: anytype) @TypeOf((@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0)) {
    return (@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0);
}
pub inline fn __WIFSTOPPED(status: anytype) @TypeOf((status & @as(c_int, 0xff)) == @as(c_int, 0x7f)) {
    return (status & @as(c_int, 0xff)) == @as(c_int, 0x7f);
}
pub inline fn __WIFCONTINUED(status: anytype) @TypeOf(status == __W_CONTINUED) {
    return status == __W_CONTINUED;
}
pub inline fn __WCOREDUMP(status: anytype) @TypeOf(status & __WCOREFLAG) {
    return status & __WCOREFLAG;
}
pub inline fn __W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn __W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | @as(c_int, 0x7f)) {
    return (sig << @as(c_int, 8)) | @as(c_int, 0x7f);
}
pub const __W_CONTINUED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const __WCOREFLAG = @as(c_int, 0x80);
pub inline fn WEXITSTATUS(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    return __WEXITSTATUS(status);
}
pub inline fn WTERMSIG(status: anytype) @TypeOf(__WTERMSIG(status)) {
    return __WTERMSIG(status);
}
pub inline fn WSTOPSIG(status: anytype) @TypeOf(__WSTOPSIG(status)) {
    return __WSTOPSIG(status);
}
pub inline fn WIFEXITED(status: anytype) @TypeOf(__WIFEXITED(status)) {
    return __WIFEXITED(status);
}
pub inline fn WIFSIGNALED(status: anytype) @TypeOf(__WIFSIGNALED(status)) {
    return __WIFSIGNALED(status);
}
pub inline fn WIFSTOPPED(status: anytype) @TypeOf(__WIFSTOPPED(status)) {
    return __WIFSTOPPED(status);
}
pub inline fn WIFCONTINUED(status: anytype) @TypeOf(__WIFCONTINUED(status)) {
    return __WIFCONTINUED(status);
}
pub const _BITS_FLOATN_H = "";
pub const __HAVE_FLOAT128 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128 = @as(c_int, 0);
pub const __HAVE_FLOAT64X = @as(c_int, 1);
pub const __HAVE_FLOAT64X_LONG_DOUBLE = @as(c_int, 1);
pub const _BITS_FLOATN_COMMON_H = "";
pub const __HAVE_FLOAT16 = @as(c_int, 0);
pub const __HAVE_FLOAT32 = @as(c_int, 1);
pub const __HAVE_FLOAT64 = @as(c_int, 1);
pub const __HAVE_FLOAT32X = @as(c_int, 1);
pub const __HAVE_FLOAT128X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT16 = __HAVE_FLOAT16;
pub const __HAVE_DISTINCT_FLOAT32 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT32X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128X = __HAVE_FLOAT128X;
pub const __HAVE_FLOAT128_UNLIKE_LDBL = (__HAVE_DISTINCT_FLOAT128 != 0) and (__LDBL_MANT_DIG__ != @as(c_int, 113));
pub const __HAVE_FLOATN_NOT_TYPEDEF = @as(c_int, 0);
pub const __f32 = @import("std").zig.c_translation.Macros.F_SUFFIX;
pub inline fn __f64(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __f32x(x: anytype) @TypeOf(x) {
    return x;
}
pub const __f64x = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn __builtin_huge_valf32() @TypeOf(__builtin_huge_valf()) {
    return __builtin_huge_valf();
}
pub inline fn __builtin_inff32() @TypeOf(__builtin_inff()) {
    return __builtin_inff();
}
pub inline fn __builtin_nanf32(x: anytype) @TypeOf(__builtin_nanf(x)) {
    return __builtin_nanf(x);
}
pub const __ldiv_t_defined = @as(c_int, 1);
pub const __lldiv_t_defined = @as(c_int, 1);
pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const MB_CUR_MAX = __ctype_get_mb_cur_max();
pub const _SYS_TYPES_H = @as(c_int, 1);
pub const __u_char_defined = "";
pub const __ino_t_defined = "";
pub const __dev_t_defined = "";
pub const __gid_t_defined = "";
pub const __mode_t_defined = "";
pub const __nlink_t_defined = "";
pub const __uid_t_defined = "";
pub const __off_t_defined = "";
pub const __id_t_defined = "";
pub const __ssize_t_defined = "";
pub const __daddr_t_defined = "";
pub const __key_t_defined = "";
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const __BIT_TYPES_DEFINED__ = @as(c_int, 1);
pub const _ENDIAN_H = @as(c_int, 1);
pub const LITTLE_ENDIAN = __LITTLE_ENDIAN;
pub const BIG_ENDIAN = __BIG_ENDIAN;
pub const PDP_ENDIAN = __PDP_ENDIAN;
pub const BYTE_ORDER = __BYTE_ORDER;
pub const _BITS_BYTESWAP_H = @as(c_int, 1);
pub inline fn __bswap_constant_16(x: anytype) __uint16_t {
    return @import("std").zig.c_translation.cast(__uint16_t, ((x >> @as(c_int, 8)) & @as(c_int, 0xff)) | ((x & @as(c_int, 0xff)) << @as(c_int, 8)));
}
pub inline fn __bswap_constant_32(x: anytype) @TypeOf(((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hexadecimal)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hexadecimal)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24))) {
    return ((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hexadecimal)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hexadecimal)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24));
}
pub inline fn __bswap_constant_64(x: anytype) @TypeOf(((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56))) {
    return ((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56));
}
pub const _BITS_UINTN_IDENTITY_H = @as(c_int, 1);
pub inline fn htobe16(x: anytype) @TypeOf(__bswap_16(x)) {
    return __bswap_16(x);
}
pub inline fn htole16(x: anytype) @TypeOf(__uint16_identity(x)) {
    return __uint16_identity(x);
}
pub inline fn be16toh(x: anytype) @TypeOf(__bswap_16(x)) {
    return __bswap_16(x);
}
pub inline fn le16toh(x: anytype) @TypeOf(__uint16_identity(x)) {
    return __uint16_identity(x);
}
pub inline fn htobe32(x: anytype) @TypeOf(__bswap_32(x)) {
    return __bswap_32(x);
}
pub inline fn htole32(x: anytype) @TypeOf(__uint32_identity(x)) {
    return __uint32_identity(x);
}
pub inline fn be32toh(x: anytype) @TypeOf(__bswap_32(x)) {
    return __bswap_32(x);
}
pub inline fn le32toh(x: anytype) @TypeOf(__uint32_identity(x)) {
    return __uint32_identity(x);
}
pub inline fn htobe64(x: anytype) @TypeOf(__bswap_64(x)) {
    return __bswap_64(x);
}
pub inline fn htole64(x: anytype) @TypeOf(__uint64_identity(x)) {
    return __uint64_identity(x);
}
pub inline fn be64toh(x: anytype) @TypeOf(__bswap_64(x)) {
    return __bswap_64(x);
}
pub inline fn le64toh(x: anytype) @TypeOf(__uint64_identity(x)) {
    return __uint64_identity(x);
}
pub const _SYS_SELECT_H = @as(c_int, 1);
pub inline fn __FD_ISSET(d: anytype, s: anytype) @TypeOf((__FDS_BITS(s)[@intCast(usize, __FD_ELT(d))] & __FD_MASK(d)) != @as(c_int, 0)) {
    return (__FDS_BITS(s)[@intCast(usize, __FD_ELT(d))] & __FD_MASK(d)) != @as(c_int, 0);
}
pub const __sigset_t_defined = @as(c_int, 1);
pub const ____sigset_t_defined = "";
pub const _SIGSET_NWORDS = @import("std").zig.c_translation.MacroArithmetic.div(@as(c_int, 1024), @as(c_int, 8) * @import("std").zig.c_translation.sizeof(c_ulong));
pub const __timeval_defined = @as(c_int, 1);
pub const __suseconds_t_defined = "";
pub const __NFDBITS = @as(c_int, 8) * @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.sizeof(__fd_mask));
pub inline fn __FD_ELT(d: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS)) {
    return @import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS);
}
pub inline fn __FD_MASK(d: anytype) __fd_mask {
    return @import("std").zig.c_translation.cast(__fd_mask, @as(c_ulong, 1) << @import("std").zig.c_translation.MacroArithmetic.rem(d, __NFDBITS));
}
pub inline fn __FDS_BITS(set: anytype) @TypeOf(set.*.__fds_bits) {
    return set.*.__fds_bits;
}
pub const FD_SETSIZE = __FD_SETSIZE;
pub const NFDBITS = __NFDBITS;
pub inline fn FD_SET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_SET(fd, fdsetp)) {
    return __FD_SET(fd, fdsetp);
}
pub inline fn FD_CLR(fd: anytype, fdsetp: anytype) @TypeOf(__FD_CLR(fd, fdsetp)) {
    return __FD_CLR(fd, fdsetp);
}
pub inline fn FD_ISSET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_ISSET(fd, fdsetp)) {
    return __FD_ISSET(fd, fdsetp);
}
pub inline fn FD_ZERO(fdsetp: anytype) @TypeOf(__FD_ZERO(fdsetp)) {
    return __FD_ZERO(fdsetp);
}
pub const __blksize_t_defined = "";
pub const __blkcnt_t_defined = "";
pub const __fsblkcnt_t_defined = "";
pub const __fsfilcnt_t_defined = "";
pub const _BITS_PTHREADTYPES_COMMON_H = @as(c_int, 1);
pub const _THREAD_SHARED_TYPES_H = @as(c_int, 1);
pub const _BITS_PTHREADTYPES_ARCH_H = @as(c_int, 1);
pub const __SIZEOF_PTHREAD_MUTEX_T = @as(c_int, 40);
pub const __SIZEOF_PTHREAD_ATTR_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_RWLOCK_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_BARRIER_T = @as(c_int, 32);
pub const __SIZEOF_PTHREAD_MUTEXATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_COND_T = @as(c_int, 48);
pub const __SIZEOF_PTHREAD_CONDATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T = @as(c_int, 8);
pub const __SIZEOF_PTHREAD_BARRIERATTR_T = @as(c_int, 4);
pub const __LOCK_ALIGNMENT = "";
pub const __ONCE_ALIGNMENT = "";
pub const _BITS_ATOMIC_WIDE_COUNTER_H = "";
pub const _THREAD_MUTEX_INTERNAL_H = @as(c_int, 1);
pub const __PTHREAD_MUTEX_HAVE_PREV = @as(c_int, 1);
pub const _RWLOCK_INTERNAL_H = "";
pub inline fn __PTHREAD_RWLOCK_INITIALIZER(__flags: anytype) @TypeOf(__flags) {
    return blk: {
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @TypeOf(__PTHREAD_RWLOCK_ELISION_EXTRA);
        _ = @as(c_int, 0);
        break :blk __flags;
    };
}
pub const __have_pthread_attr_t = @as(c_int, 1);
pub const _ALLOCA_H = @as(c_int, 1);
pub const __COMPAR_FN_T = "";
pub inline fn g_abort() @TypeOf(abort()) {
    return abort();
}
pub const G_THREAD_ERROR = g_thread_error_quark();
pub inline fn G_LOCK_DEFINE(name: anytype) @TypeOf((GMutex ++ G_LOCK_NAME)(name)) {
    return (GMutex ++ G_LOCK_NAME)(name);
}
pub inline fn G_LOCK(name: anytype) @TypeOf(g_mutex_lock(&G_LOCK_NAME(name))) {
    return g_mutex_lock(&G_LOCK_NAME(name));
}
pub inline fn G_UNLOCK(name: anytype) @TypeOf(g_mutex_unlock(&G_LOCK_NAME(name))) {
    return g_mutex_unlock(&G_LOCK_NAME(name));
}
pub inline fn G_TRYLOCK(name: anytype) @TypeOf(g_mutex_trylock(&G_LOCK_NAME(name))) {
    return g_mutex_trylock(&G_LOCK_NAME(name));
}
pub const __G_BACKTRACE_H__ = "";
pub const _SIGNAL_H = "";
pub const _BITS_SIGNUM_GENERIC_H = @as(c_int, 1);
pub const SIG_ERR = @import("std").zig.c_translation.cast(__sighandler_t, -@as(c_int, 1));
pub const SIG_DFL = @import("std").zig.c_translation.cast(__sighandler_t, @as(c_int, 0));
pub const SIG_IGN = @import("std").zig.c_translation.cast(__sighandler_t, @as(c_int, 1));
pub const SIGINT = @as(c_int, 2);
pub const SIGILL = @as(c_int, 4);
pub const SIGABRT = @as(c_int, 6);
pub const SIGFPE = @as(c_int, 8);
pub const SIGSEGV = @as(c_int, 11);
pub const SIGTERM = @as(c_int, 15);
pub const SIGHUP = @as(c_int, 1);
pub const SIGQUIT = @as(c_int, 3);
pub const SIGTRAP = @as(c_int, 5);
pub const SIGKILL = @as(c_int, 9);
pub const SIGPIPE = @as(c_int, 13);
pub const SIGALRM = @as(c_int, 14);
pub const SIGIO = SIGPOLL;
pub const SIGIOT = SIGABRT;
pub const SIGCLD = SIGCHLD;
pub const _BITS_SIGNUM_ARCH_H = @as(c_int, 1);
pub const SIGSTKFLT = @as(c_int, 16);
pub const SIGPWR = @as(c_int, 30);
pub const SIGBUS = @as(c_int, 7);
pub const SIGSYS = @as(c_int, 31);
pub const SIGURG = @as(c_int, 23);
pub const SIGSTOP = @as(c_int, 19);
pub const SIGTSTP = @as(c_int, 20);
pub const SIGCONT = @as(c_int, 18);
pub const SIGCHLD = @as(c_int, 17);
pub const SIGTTIN = @as(c_int, 21);
pub const SIGTTOU = @as(c_int, 22);
pub const SIGPOLL = @as(c_int, 29);
pub const SIGXFSZ = @as(c_int, 25);
pub const SIGXCPU = @as(c_int, 24);
pub const SIGVTALRM = @as(c_int, 26);
pub const SIGPROF = @as(c_int, 27);
pub const SIGUSR1 = @as(c_int, 10);
pub const SIGUSR2 = @as(c_int, 12);
pub const SIGWINCH = @as(c_int, 28);
pub const __SIGRTMIN = @as(c_int, 32);
pub const __SIGRTMAX = @as(c_int, 64);
pub const _NSIG = __SIGRTMAX + @as(c_int, 1);
pub const __sig_atomic_t_defined = @as(c_int, 1);
pub const __siginfo_t_defined = @as(c_int, 1);
pub const ____sigval_t_defined = "";
pub const __SI_MAX_SIZE = @as(c_int, 128);
pub const __SI_PAD_SIZE = @import("std").zig.c_translation.MacroArithmetic.div(__SI_MAX_SIZE, @import("std").zig.c_translation.sizeof(c_int)) - @as(c_int, 4);
pub const _BITS_SIGINFO_ARCH_H = @as(c_int, 1);
pub const __SI_ALIGNMENT = "";
pub const __SI_BAND_TYPE = c_long;
pub const __SI_CLOCK_T = __clock_t;
pub const __SI_ERRNO_THEN_CODE = @as(c_int, 1);
pub const __SI_HAVE_SIGSYS = @as(c_int, 1);
pub const __SI_SIGFAULT_ADDL = "";
pub const _BITS_SIGINFO_CONSTS_H = @as(c_int, 1);
pub const __SI_ASYNCIO_AFTER_SIGIO = @as(c_int, 1);
pub const __sigval_t_defined = "";
pub const __sigevent_t_defined = @as(c_int, 1);
pub const __SIGEV_MAX_SIZE = @as(c_int, 64);
pub const __SIGEV_PAD_SIZE = @import("std").zig.c_translation.MacroArithmetic.div(__SIGEV_MAX_SIZE, @import("std").zig.c_translation.sizeof(c_int)) - @as(c_int, 4);
pub const _BITS_SIGEVENT_CONSTS_H = @as(c_int, 1);
pub inline fn sigmask(sig: anytype) @TypeOf(__glibc_macro_warning("sigmask is deprecated")(@import("std").zig.c_translation.cast(c_int, @as(c_uint, 1) << (sig - @as(c_int, 1))))) {
    return __glibc_macro_warning("sigmask is deprecated")(@import("std").zig.c_translation.cast(c_int, @as(c_uint, 1) << (sig - @as(c_int, 1))));
}
pub const NSIG = _NSIG;
pub const _BITS_SIGACTION_H = @as(c_int, 1);
pub const SA_NOCLDSTOP = @as(c_int, 1);
pub const SA_NOCLDWAIT = @as(c_int, 2);
pub const SA_SIGINFO = @as(c_int, 4);
pub const SA_ONSTACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const SA_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const SA_NODEFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const SA_RESETHAND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const SA_INTERRUPT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const SA_NOMASK = SA_NODEFER;
pub const SA_ONESHOT = SA_RESETHAND;
pub const SA_STACK = SA_ONSTACK;
pub const SIG_BLOCK = @as(c_int, 0);
pub const SIG_UNBLOCK = @as(c_int, 1);
pub const SIG_SETMASK = @as(c_int, 2);
pub const _BITS_SIGCONTEXT_H = @as(c_int, 1);
pub const FP_XSTATE_MAGIC1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x46505853, .hexadecimal);
pub const FP_XSTATE_MAGIC2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x46505845, .hexadecimal);
pub const FP_XSTATE_MAGIC2_SIZE = @import("std").zig.c_translation.sizeof(FP_XSTATE_MAGIC2);
pub const __stack_t_defined = @as(c_int, 1);
pub const _SYS_UCONTEXT_H = @as(c_int, 1);
pub inline fn __ctx(fld: anytype) @TypeOf(fld) {
    return fld;
}
pub const __NGREG = @as(c_int, 23);
pub const NGREG = __NGREG;
pub const _BITS_SIGSTACK_H = @as(c_int, 1);
pub const MINSIGSTKSZ = @as(c_int, 2048);
pub const SIGSTKSZ = @as(c_int, 8192);
pub const _BITS_SS_FLAGS_H = @as(c_int, 1);
pub const __sigstack_defined = @as(c_int, 1);
pub const _BITS_SIGTHREAD_H = @as(c_int, 1);
pub const SIGRTMIN = __libc_current_sigrtmin();
pub const SIGRTMAX = __libc_current_sigrtmax();
pub const __G_BASE64_H__ = "";
pub const __G_BITLOCK_H__ = "";
pub const __G_BOOKMARK_FILE_H__ = "";
pub const __G_DATE_TIME_H__ = "";
pub const __G_TIME_ZONE_H__ = "";
pub const G_TIME_SPAN_DAY = G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_int, 86400000000, .decimal));
pub const G_TIME_SPAN_HOUR = G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_int, 3600000000, .decimal));
pub const G_TIME_SPAN_MINUTE = G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_int, 60000000, .decimal));
pub const G_TIME_SPAN_SECOND = G_GINT64_CONSTANT(@import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal));
pub const G_TIME_SPAN_MILLISECOND = G_GINT64_CONSTANT(@as(c_int, 1000));
pub const G_BOOKMARK_FILE_ERROR = g_bookmark_file_error_quark();
pub const __G_BYTES_H__ = "";
pub const __G_CHARSET_H__ = "";
pub const __G_CHECKSUM_H__ = "";
pub const __G_CONVERT_H__ = "";
pub const G_CONVERT_ERROR = g_convert_error_quark();
pub const __G_DATASET_H__ = "";
pub const G_DATALIST_FLAGS_MASK = @as(c_int, 0x3);
pub inline fn g_datalist_id_set_data(dl: anytype, q: anytype, d: anytype) @TypeOf(g_datalist_id_set_data_full(dl, q, d, NULL)) {
    return g_datalist_id_set_data_full(dl, q, d, NULL);
}
pub inline fn g_datalist_id_remove_data(dl: anytype, q: anytype) @TypeOf(g_datalist_id_set_data(dl, q, NULL)) {
    return g_datalist_id_set_data(dl, q, NULL);
}
pub inline fn g_datalist_set_data_full(dl: anytype, k: anytype, d: anytype, f: anytype) @TypeOf(g_datalist_id_set_data_full(dl, g_quark_from_string(k), d, f)) {
    return g_datalist_id_set_data_full(dl, g_quark_from_string(k), d, f);
}
pub inline fn g_datalist_remove_no_notify(dl: anytype, k: anytype) @TypeOf(g_datalist_id_remove_no_notify(dl, g_quark_try_string(k))) {
    return g_datalist_id_remove_no_notify(dl, g_quark_try_string(k));
}
pub inline fn g_datalist_set_data(dl: anytype, k: anytype, d: anytype) @TypeOf(g_datalist_set_data_full(dl, k, d, NULL)) {
    return g_datalist_set_data_full(dl, k, d, NULL);
}
pub inline fn g_datalist_remove_data(dl: anytype, k: anytype) @TypeOf(g_datalist_id_set_data(dl, g_quark_try_string(k), NULL)) {
    return g_datalist_id_set_data(dl, g_quark_try_string(k), NULL);
}
pub inline fn g_dataset_id_set_data(l: anytype, k: anytype, d: anytype) @TypeOf(g_dataset_id_set_data_full(l, k, d, NULL)) {
    return g_dataset_id_set_data_full(l, k, d, NULL);
}
pub inline fn g_dataset_id_remove_data(l: anytype, k: anytype) @TypeOf(g_dataset_id_set_data(l, k, NULL)) {
    return g_dataset_id_set_data(l, k, NULL);
}
pub inline fn g_dataset_get_data(l: anytype, k: anytype) @TypeOf(g_dataset_id_get_data(l, g_quark_try_string(k))) {
    return g_dataset_id_get_data(l, g_quark_try_string(k));
}
pub inline fn g_dataset_set_data_full(l: anytype, k: anytype, d: anytype, f: anytype) @TypeOf(g_dataset_id_set_data_full(l, g_quark_from_string(k), d, f)) {
    return g_dataset_id_set_data_full(l, g_quark_from_string(k), d, f);
}
pub inline fn g_dataset_remove_no_notify(l: anytype, k: anytype) @TypeOf(g_dataset_id_remove_no_notify(l, g_quark_try_string(k))) {
    return g_dataset_id_remove_no_notify(l, g_quark_try_string(k));
}
pub inline fn g_dataset_set_data(l: anytype, k: anytype, d: anytype) @TypeOf(g_dataset_set_data_full(l, k, d, NULL)) {
    return g_dataset_set_data_full(l, k, d, NULL);
}
pub inline fn g_dataset_remove_data(l: anytype, k: anytype) @TypeOf(g_dataset_id_set_data(l, g_quark_try_string(k), NULL)) {
    return g_dataset_id_set_data(l, g_quark_try_string(k), NULL);
}
pub const __G_DATE_H__ = "";
pub const G_DATE_BAD_JULIAN = @as(c_uint, 0);
pub const G_DATE_BAD_DAY = @as(c_uint, 0);
pub const G_DATE_BAD_YEAR = @as(c_uint, 0);
pub const g_date_weekday = (g_date_get_weekday ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_weekday);
pub const g_date_month = (g_date_get_month ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_month);
pub const g_date_year = (g_date_get_year ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_year);
pub const g_date_day = (g_date_get_day ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_day);
pub const g_date_julian = (g_date_get_julian ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_julian);
pub const g_date_day_of_year = (g_date_get_day_of_year ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_day_of_year);
pub const g_date_monday_week_of_year = (g_date_get_monday_week_of_year ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_monday_week_of_year);
pub const g_date_sunday_week_of_year = (g_date_get_sunday_week_of_year ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_sunday_week_of_year);
pub const g_date_days_in_month = (g_date_get_days_in_month ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_days_in_month);
pub const g_date_monday_weeks_in_year = (g_date_get_monday_weeks_in_year ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_monday_weeks_in_year);
pub const g_date_sunday_weeks_in_year = (g_date_get_sunday_weeks_in_year ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_date_get_sunday_weeks_in_year);
pub const __G_DIR_H__ = "";
pub const _DIRENT_H = @as(c_int, 1);
pub const _DIRENT_HAVE_D_RECLEN = "";
pub const _DIRENT_HAVE_D_OFF = "";
pub const _DIRENT_HAVE_D_TYPE = "";
pub const _DIRENT_MATCHES_DIRENT64 = @as(c_int, 1);
pub inline fn _D_EXACT_NAMLEN(d: anytype) @TypeOf(strlen(d.*.d_name)) {
    return strlen(d.*.d_name);
}
pub inline fn _D_ALLOC_NAMLEN(d: anytype) @TypeOf((@import("std").zig.c_translation.cast([*c]u8, d) + d.*.d_reclen) - (&d.*.d_name[@intCast(usize, @as(c_int, 0))])) {
    return (@import("std").zig.c_translation.cast([*c]u8, d) + d.*.d_reclen) - (&d.*.d_name[@intCast(usize, @as(c_int, 0))]);
}
pub inline fn IFTODT(mode: anytype) @TypeOf((mode & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o170000, .octal)) >> @as(c_int, 12)) {
    return (mode & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o170000, .octal)) >> @as(c_int, 12);
}
pub inline fn DTTOIF(dirtype: anytype) @TypeOf(dirtype << @as(c_int, 12)) {
    return dirtype << @as(c_int, 12);
}
pub const MAXNAMLEN = NAME_MAX;
pub const __G_ENVIRON_H__ = "";
pub const __G_FILEUTILS_H__ = "";
pub const G_FILE_ERROR = g_file_error_quark();
pub inline fn G_IS_DIR_SEPARATOR(c: anytype) @TypeOf(c == G_DIR_SEPARATOR) {
    return c == G_DIR_SEPARATOR;
}
pub const g_dirname = (g_path_get_dirname ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_path_get_dirname);
pub const __G_GETTEXT_H__ = "";
pub const __G_HASH_H__ = "";
pub const __G_LIST_H__ = "";
pub const __G_MEM_H__ = "";
pub const G_MEM_ALIGN = GLIB_SIZEOF_LONG;
pub inline fn g_new(struct_type: anytype, n_structs: anytype) @TypeOf(_G_NEW(struct_type, n_structs, malloc)) {
    return _G_NEW(struct_type, n_structs, malloc);
}
pub inline fn g_renew(struct_type: anytype, mem: anytype, n_structs: anytype) @TypeOf(_G_RENEW(struct_type, mem, n_structs, realloc)) {
    return _G_RENEW(struct_type, mem, n_structs, realloc);
}
pub const __G_NODE_H__ = "";
pub inline fn G_NODE_IS_ROOT(node: anytype) @TypeOf(((@import("std").zig.c_translation.cast([*c]GNode, node).*.parent == NULL) and (@import("std").zig.c_translation.cast([*c]GNode, node).*.prev == NULL)) and (@import("std").zig.c_translation.cast([*c]GNode, node).*.next == NULL)) {
    return ((@import("std").zig.c_translation.cast([*c]GNode, node).*.parent == NULL) and (@import("std").zig.c_translation.cast([*c]GNode, node).*.prev == NULL)) and (@import("std").zig.c_translation.cast([*c]GNode, node).*.next == NULL);
}
pub inline fn G_NODE_IS_LEAF(node: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]GNode, node).*.children == NULL) {
    return @import("std").zig.c_translation.cast([*c]GNode, node).*.children == NULL;
}
pub inline fn g_node_append(parent: anytype, node: anytype) @TypeOf(g_node_insert_before(parent, NULL, node)) {
    return g_node_insert_before(parent, NULL, node);
}
pub inline fn g_node_insert_data(parent: anytype, position: anytype, data: anytype) @TypeOf(g_node_insert(parent, position, g_node_new(data))) {
    return g_node_insert(parent, position, g_node_new(data));
}
pub inline fn g_node_insert_data_after(parent: anytype, sibling: anytype, data: anytype) @TypeOf(g_node_insert_after(parent, sibling, g_node_new(data))) {
    return g_node_insert_after(parent, sibling, g_node_new(data));
}
pub inline fn g_node_insert_data_before(parent: anytype, sibling: anytype, data: anytype) @TypeOf(g_node_insert_before(parent, sibling, g_node_new(data))) {
    return g_node_insert_before(parent, sibling, g_node_new(data));
}
pub inline fn g_node_prepend_data(parent: anytype, data: anytype) @TypeOf(g_node_prepend(parent, g_node_new(data))) {
    return g_node_prepend(parent, g_node_new(data));
}
pub inline fn g_node_append_data(parent: anytype, data: anytype) @TypeOf(g_node_insert_before(parent, NULL, g_node_new(data))) {
    return g_node_insert_before(parent, NULL, g_node_new(data));
}
pub inline fn g_node_prev_sibling(node: anytype) @TypeOf(if (node) @import("std").zig.c_translation.cast([*c]GNode, node).*.prev else NULL) {
    return if (node) @import("std").zig.c_translation.cast([*c]GNode, node).*.prev else NULL;
}
pub inline fn g_node_next_sibling(node: anytype) @TypeOf(if (node) @import("std").zig.c_translation.cast([*c]GNode, node).*.next else NULL) {
    return if (node) @import("std").zig.c_translation.cast([*c]GNode, node).*.next else NULL;
}
pub inline fn g_node_first_child(node: anytype) @TypeOf(if (node) @import("std").zig.c_translation.cast([*c]GNode, node).*.children else NULL) {
    return if (node) @import("std").zig.c_translation.cast([*c]GNode, node).*.children else NULL;
}
pub const g_list_free1 = g_list_free_1;
pub inline fn g_list_previous(list: anytype) @TypeOf(if (list) @import("std").zig.c_translation.cast([*c]GList, list).*.prev else NULL) {
    return if (list) @import("std").zig.c_translation.cast([*c]GList, list).*.prev else NULL;
}
pub inline fn g_list_next(list: anytype) @TypeOf(if (list) @import("std").zig.c_translation.cast([*c]GList, list).*.next else NULL) {
    return if (list) @import("std").zig.c_translation.cast([*c]GList, list).*.next else NULL;
}
pub inline fn g_hash_table_freeze(hash_table: anytype) @TypeOf(@import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26) {
    _ = @TypeOf(hash_table);
    return @import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26;
}
pub inline fn g_hash_table_thaw(hash_table: anytype) @TypeOf(@import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26) {
    _ = @TypeOf(hash_table);
    return @import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26;
}
pub const __G_HMAC_H__ = "";
pub const __G_HOOK_H__ = "";
pub const G_HOOK_FLAG_USER_SHIFT = @as(c_int, 4);
pub inline fn G_HOOK(hook: anytype) [*c]GHook {
    return @import("std").zig.c_translation.cast([*c]GHook, hook);
}
pub inline fn G_HOOK_FLAGS(hook: anytype) @TypeOf(G_HOOK(hook).*.flags) {
    return G_HOOK(hook).*.flags;
}
pub inline fn G_HOOK_ACTIVE(hook: anytype) @TypeOf((G_HOOK_FLAGS(hook) & G_HOOK_FLAG_ACTIVE) != @as(c_int, 0)) {
    return (G_HOOK_FLAGS(hook) & G_HOOK_FLAG_ACTIVE) != @as(c_int, 0);
}
pub inline fn G_HOOK_IN_CALL(hook: anytype) @TypeOf((G_HOOK_FLAGS(hook) & G_HOOK_FLAG_IN_CALL) != @as(c_int, 0)) {
    return (G_HOOK_FLAGS(hook) & G_HOOK_FLAG_IN_CALL) != @as(c_int, 0);
}
pub inline fn G_HOOK_IS_VALID(hook: anytype) @TypeOf((G_HOOK(hook).*.hook_id != @as(c_int, 0)) and ((G_HOOK_FLAGS(hook) & G_HOOK_FLAG_ACTIVE) != 0)) {
    return (G_HOOK(hook).*.hook_id != @as(c_int, 0)) and ((G_HOOK_FLAGS(hook) & G_HOOK_FLAG_ACTIVE) != 0);
}
pub inline fn G_HOOK_IS_UNLINKED(hook: anytype) @TypeOf((((G_HOOK(hook).*.next == NULL) and (G_HOOK(hook).*.prev == NULL)) and (G_HOOK(hook).*.hook_id == @as(c_int, 0))) and (G_HOOK(hook).*.ref_count == @as(c_int, 0))) {
    return (((G_HOOK(hook).*.next == NULL) and (G_HOOK(hook).*.prev == NULL)) and (G_HOOK(hook).*.hook_id == @as(c_int, 0))) and (G_HOOK(hook).*.ref_count == @as(c_int, 0));
}
pub inline fn g_hook_append(hook_list: anytype, hook: anytype) @TypeOf(g_hook_insert_before(hook_list, NULL, hook)) {
    return g_hook_insert_before(hook_list, NULL, hook);
}
pub const __G_HOST_UTILS_H__ = "";
pub const __G_IOCHANNEL_H__ = "";
pub const __G_MAIN_H__ = "";
pub const __G_POLL_H__ = "";
pub const __G_SLIST_H__ = "";
pub const g_slist_free1 = g_slist_free_1;
pub inline fn g_slist_next(slist: anytype) @TypeOf(if (slist) @import("std").zig.c_translation.cast([*c]GSList, slist).*.next else NULL) {
    return if (slist) @import("std").zig.c_translation.cast([*c]GSList, slist).*.next else NULL;
}
pub const G_PRIORITY_HIGH = -@as(c_int, 100);
pub const G_PRIORITY_DEFAULT = @as(c_int, 0);
pub const G_PRIORITY_HIGH_IDLE = @as(c_int, 100);
pub const G_PRIORITY_DEFAULT_IDLE = @as(c_int, 200);
pub const G_PRIORITY_LOW = @as(c_int, 300);
pub const G_SOURCE_REMOVE = FALSE;
pub const G_SOURCE_CONTINUE = TRUE;
pub const __G_STRING_H__ = "";
pub const __G_UNICODE_H__ = "";
pub const G_UNICODE_COMBINING_MARK = (G_UNICODE_SPACING_MARK ++ GLIB_DEPRECATED_MACRO_IN_2_30_FOR)(G_UNICODE_SPACING_MARK);
pub const G_UNICHAR_MAX_DECOMPOSITION_LENGTH = @as(c_int, 18);
pub const g_string_sprintf = (g_string_printf ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_string_printf);
pub const g_string_sprintfa = (g_string_append_printf ++ GLIB_DEPRECATED_MACRO_IN_2_26_FOR)(g_string_append_printf);
pub const G_IO_CHANNEL_ERROR = g_io_channel_error_quark();
pub const G_KQUEUE_WAKEUP_HANDLE = -@as(c_int, 42);
pub const __G_KEY_FILE_H__ = "";
pub const G_KEY_FILE_ERROR = g_key_file_error_quark();
pub const G_KEY_FILE_DESKTOP_GROUP = "Desktop Entry";
pub const G_KEY_FILE_DESKTOP_KEY_TYPE = "Type";
pub const G_KEY_FILE_DESKTOP_KEY_VERSION = "Version";
pub const G_KEY_FILE_DESKTOP_KEY_NAME = "Name";
pub const G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName";
pub const G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay";
pub const G_KEY_FILE_DESKTOP_KEY_COMMENT = "Comment";
pub const G_KEY_FILE_DESKTOP_KEY_ICON = "Icon";
pub const G_KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden";
pub const G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn";
pub const G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn";
pub const G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec";
pub const G_KEY_FILE_DESKTOP_KEY_EXEC = "Exec";
pub const G_KEY_FILE_DESKTOP_KEY_PATH = "Path";
pub const G_KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal";
pub const G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType";
pub const G_KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories";
pub const G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify";
pub const G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass";
pub const G_KEY_FILE_DESKTOP_KEY_URL = "URL";
pub const G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = "DBusActivatable";
pub const G_KEY_FILE_DESKTOP_KEY_ACTIONS = "Actions";
pub const G_KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application";
pub const G_KEY_FILE_DESKTOP_TYPE_LINK = "Link";
pub const G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory";
pub const __G_MAPPED_FILE_H__ = "";
pub const __G_MARKUP_H__ = "";
pub const G_MARKUP_ERROR = g_markup_error_quark();
pub const __G_MESSAGES_H__ = "";
pub const __G_VARIANT_H__ = "";
pub const __G_VARIANT_TYPE_H__ = "";
pub inline fn G_VARIANT_TYPE(type_string: anytype) @TypeOf(g_variant_type_checked_(type_string)) {
    return g_variant_type_checked_(type_string);
}
pub const G_VARIANT_PARSE_ERROR = g_variant_parse_error_quark();
pub const G_LOG_LEVEL_USER_SHIFT = @as(c_int, 8);
pub const G_LOG_FATAL_MASK = G_LOG_FLAG_RECURSION | G_LOG_LEVEL_ERROR;
pub const G_LOG_DOMAIN = @import("std").zig.c_translation.cast([*c]gchar, @as(c_int, 0));
pub const __G_OPTION_H__ = "";
pub const G_OPTION_ERROR = g_option_error_quark();
pub const G_OPTION_REMAINING = "";
pub const G_OPTION_ENTRY_NULL = @import("std").mem.zeroInit(GLIB_AVAILABLE_MACRO_IN_2_70, .{ NULL, @as(c_int, 0), @as(c_int, 0), @as(c_int, 0), NULL, NULL, NULL });
pub const __G_PATTERN_H__ = "";
pub const __G_PLATFORM_AUDIT_H__ = "";
pub const __G_PRIMES_H__ = "";
pub const __G_QSORT_H__ = "";
pub const __G_QUEUE_H__ = "";
pub const __G_RAND_H__ = "";
pub inline fn g_rand_boolean(rand_: anytype) @TypeOf((g_rand_int(rand_) & (@as(c_int, 1) << @as(c_int, 15))) != @as(c_int, 0)) {
    return (g_rand_int(rand_) & (@as(c_int, 1) << @as(c_int, 15))) != @as(c_int, 0);
}
pub inline fn g_random_boolean() @TypeOf((g_random_int() & (@as(c_int, 1) << @as(c_int, 15))) != @as(c_int, 0)) {
    return (g_random_int() & (@as(c_int, 1) << @as(c_int, 15))) != @as(c_int, 0);
}
pub const __G_RCBOX_H__ = "";
pub const __GREFCOUNT_H__ = "";
pub const __G_REFSTRING_H__ = "";
pub const __G_REGEX_H__ = "";
pub const G_REGEX_ERROR = g_regex_error_quark();
pub const __G_SCANNER_H__ = "";
pub const G_CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
pub const G_CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz";
pub const G_CSET_DIGITS = "0123456789";
pub const G_CSET_LATINC = "\xc0\xc1\xc2\xc3\xc4\xc5\xc6" ++ "\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0" ++ "\xd1\xd2\xd3\xd4\xd5\xd6" ++ "\xd8\xd9\xda\xdb\xdc\xdd\xde";
pub const G_CSET_LATINS = "\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6" ++ "\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0" ++ "\xf1\xf2\xf3\xf4\xf5\xf6" ++ "\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff";
pub inline fn g_scanner_freeze_symbol_table(scanner: anytype) @TypeOf(@import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26) {
    _ = @TypeOf(scanner);
    return @import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26;
}
pub inline fn g_scanner_thaw_symbol_table(scanner: anytype) @TypeOf(@import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26) {
    _ = @TypeOf(scanner);
    return @import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0)) ++ GLIB_DEPRECATED_MACRO_IN_2_26;
}
pub const __G_SEQUENCE_H__ = "";
pub const __G_SHELL_H__ = "";
pub const G_SHELL_ERROR = g_shell_error_quark();
pub const __G_SLICE_H__ = "";
pub const __G_SPAWN_H__ = "";
pub const G_SPAWN_ERROR = g_spawn_error_quark();
pub const G_SPAWN_EXIT_ERROR = g_spawn_exit_error_quark();
pub const __G_STRFUNCS_H__ = "";
pub inline fn g_ascii_isalnum(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_ALNUM) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_ALNUM) != @as(c_int, 0);
}
pub inline fn g_ascii_isalpha(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_ALPHA) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_ALPHA) != @as(c_int, 0);
}
pub inline fn g_ascii_iscntrl(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_CNTRL) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_CNTRL) != @as(c_int, 0);
}
pub inline fn g_ascii_isdigit(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_DIGIT) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_DIGIT) != @as(c_int, 0);
}
pub inline fn g_ascii_isgraph(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_GRAPH) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_GRAPH) != @as(c_int, 0);
}
pub inline fn g_ascii_islower(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_LOWER) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_LOWER) != @as(c_int, 0);
}
pub inline fn g_ascii_isprint(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_PRINT) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_PRINT) != @as(c_int, 0);
}
pub inline fn g_ascii_ispunct(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_PUNCT) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_PUNCT) != @as(c_int, 0);
}
pub inline fn g_ascii_isspace(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_SPACE) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_SPACE) != @as(c_int, 0);
}
pub inline fn g_ascii_isupper(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_UPPER) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_UPPER) != @as(c_int, 0);
}
pub inline fn g_ascii_isxdigit(c: anytype) @TypeOf((g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_XDIGIT) != @as(c_int, 0)) {
    return (g_ascii_table[@intCast(usize, @import("std").zig.c_translation.cast(guchar, c))] & G_ASCII_XDIGIT) != @as(c_int, 0);
}
pub const G_STR_DELIMITERS = "_-|> <.";
pub inline fn _G_STR_NONNULL(x: anytype) @TypeOf(x + @boolToInt(!(x != 0))) {
    return x + @boolToInt(!(x != 0));
}
pub const G_ASCII_DTOSTR_BUF_SIZE = @as(c_int, 29) + @as(c_int, 10);
pub inline fn g_strstrip(string: anytype) @TypeOf(g_strchomp(g_strchug(string))) {
    return g_strchomp(g_strchug(string));
}
pub const G_NUMBER_PARSER_ERROR = g_number_parser_error_quark();
pub const __G_STRINGCHUNK_H__ = "";
pub const __G_STRVBUILDER_H__ = "";
pub const __G_TEST_UTILS_H__ = "";
pub const _ERRNO_H = @as(c_int, 1);
pub const _BITS_ERRNO_H = @as(c_int, 1);
pub const _ASM_GENERIC_ERRNO_H = "";
pub const _ASM_GENERIC_ERRNO_BASE_H = "";
pub const EPERM = @as(c_int, 1);
pub const ENOENT = @as(c_int, 2);
pub const ESRCH = @as(c_int, 3);
pub const EINTR = @as(c_int, 4);
pub const EIO = @as(c_int, 5);
pub const ENXIO = @as(c_int, 6);
pub const E2BIG = @as(c_int, 7);
pub const ENOEXEC = @as(c_int, 8);
pub const EBADF = @as(c_int, 9);
pub const ECHILD = @as(c_int, 10);
pub const EAGAIN = @as(c_int, 11);
pub const ENOMEM = @as(c_int, 12);
pub const EACCES = @as(c_int, 13);
pub const EFAULT = @as(c_int, 14);
pub const ENOTBLK = @as(c_int, 15);
pub const EBUSY = @as(c_int, 16);
pub const EEXIST = @as(c_int, 17);
pub const EXDEV = @as(c_int, 18);
pub const ENODEV = @as(c_int, 19);
pub const ENOTDIR = @as(c_int, 20);
pub const EISDIR = @as(c_int, 21);
pub const EINVAL = @as(c_int, 22);
pub const ENFILE = @as(c_int, 23);
pub const EMFILE = @as(c_int, 24);
pub const ENOTTY = @as(c_int, 25);
pub const ETXTBSY = @as(c_int, 26);
pub const EFBIG = @as(c_int, 27);
pub const ENOSPC = @as(c_int, 28);
pub const ESPIPE = @as(c_int, 29);
pub const EROFS = @as(c_int, 30);
pub const EMLINK = @as(c_int, 31);
pub const EPIPE = @as(c_int, 32);
pub const EDOM = @as(c_int, 33);
pub const ERANGE = @as(c_int, 34);
pub const EDEADLK = @as(c_int, 35);
pub const ENAMETOOLONG = @as(c_int, 36);
pub const ENOLCK = @as(c_int, 37);
pub const ENOSYS = @as(c_int, 38);
pub const ENOTEMPTY = @as(c_int, 39);
pub const ELOOP = @as(c_int, 40);
pub const EWOULDBLOCK = EAGAIN;
pub const ENOMSG = @as(c_int, 42);
pub const EIDRM = @as(c_int, 43);
pub const ECHRNG = @as(c_int, 44);
pub const EL2NSYNC = @as(c_int, 45);
pub const EL3HLT = @as(c_int, 46);
pub const EL3RST = @as(c_int, 47);
pub const ELNRNG = @as(c_int, 48);
pub const EUNATCH = @as(c_int, 49);
pub const ENOCSI = @as(c_int, 50);
pub const EL2HLT = @as(c_int, 51);
pub const EBADE = @as(c_int, 52);
pub const EBADR = @as(c_int, 53);
pub const EXFULL = @as(c_int, 54);
pub const ENOANO = @as(c_int, 55);
pub const EBADRQC = @as(c_int, 56);
pub const EBADSLT = @as(c_int, 57);
pub const EDEADLOCK = EDEADLK;
pub const EBFONT = @as(c_int, 59);
pub const ENOSTR = @as(c_int, 60);
pub const ENODATA = @as(c_int, 61);
pub const ETIME = @as(c_int, 62);
pub const ENOSR = @as(c_int, 63);
pub const ENONET = @as(c_int, 64);
pub const ENOPKG = @as(c_int, 65);
pub const EREMOTE = @as(c_int, 66);
pub const ENOLINK = @as(c_int, 67);
pub const EADV = @as(c_int, 68);
pub const ESRMNT = @as(c_int, 69);
pub const ECOMM = @as(c_int, 70);
pub const EPROTO = @as(c_int, 71);
pub const EMULTIHOP = @as(c_int, 72);
pub const EDOTDOT = @as(c_int, 73);
pub const EBADMSG = @as(c_int, 74);
pub const EOVERFLOW = @as(c_int, 75);
pub const ENOTUNIQ = @as(c_int, 76);
pub const EBADFD = @as(c_int, 77);
pub const EREMCHG = @as(c_int, 78);
pub const ELIBACC = @as(c_int, 79);
pub const ELIBBAD = @as(c_int, 80);
pub const ELIBSCN = @as(c_int, 81);
pub const ELIBMAX = @as(c_int, 82);
pub const ELIBEXEC = @as(c_int, 83);
pub const EILSEQ = @as(c_int, 84);
pub const ERESTART = @as(c_int, 85);
pub const ESTRPIPE = @as(c_int, 86);
pub const EUSERS = @as(c_int, 87);
pub const ENOTSOCK = @as(c_int, 88);
pub const EDESTADDRREQ = @as(c_int, 89);
pub const EMSGSIZE = @as(c_int, 90);
pub const EPROTOTYPE = @as(c_int, 91);
pub const ENOPROTOOPT = @as(c_int, 92);
pub const EPROTONOSUPPORT = @as(c_int, 93);
pub const ESOCKTNOSUPPORT = @as(c_int, 94);
pub const EOPNOTSUPP = @as(c_int, 95);
pub const EPFNOSUPPORT = @as(c_int, 96);
pub const EAFNOSUPPORT = @as(c_int, 97);
pub const EADDRINUSE = @as(c_int, 98);
pub const EADDRNOTAVAIL = @as(c_int, 99);
pub const ENETDOWN = @as(c_int, 100);
pub const ENETUNREACH = @as(c_int, 101);
pub const ENETRESET = @as(c_int, 102);
pub const ECONNABORTED = @as(c_int, 103);
pub const ECONNRESET = @as(c_int, 104);
pub const ENOBUFS = @as(c_int, 105);
pub const EISCONN = @as(c_int, 106);
pub const ENOTCONN = @as(c_int, 107);
pub const ESHUTDOWN = @as(c_int, 108);
pub const ETOOMANYREFS = @as(c_int, 109);
pub const ETIMEDOUT = @as(c_int, 110);
pub const ECONNREFUSED = @as(c_int, 111);
pub const EHOSTDOWN = @as(c_int, 112);
pub const EHOSTUNREACH = @as(c_int, 113);
pub const EALREADY = @as(c_int, 114);
pub const EINPROGRESS = @as(c_int, 115);
pub const ESTALE = @as(c_int, 116);
pub const EUCLEAN = @as(c_int, 117);
pub const ENOTNAM = @as(c_int, 118);
pub const ENAVAIL = @as(c_int, 119);
pub const EISNAM = @as(c_int, 120);
pub const EREMOTEIO = @as(c_int, 121);
pub const EDQUOT = @as(c_int, 122);
pub const ENOMEDIUM = @as(c_int, 123);
pub const EMEDIUMTYPE = @as(c_int, 124);
pub const ECANCELED = @as(c_int, 125);
pub const ENOKEY = @as(c_int, 126);
pub const EKEYEXPIRED = @as(c_int, 127);
pub const EKEYREVOKED = @as(c_int, 128);
pub const EKEYREJECTED = @as(c_int, 129);
pub const EOWNERDEAD = @as(c_int, 130);
pub const ENOTRECOVERABLE = @as(c_int, 131);
pub const ERFKILL = @as(c_int, 132);
pub const EHWPOISON = @as(c_int, 133);
pub const ENOTSUP = EOPNOTSUPP;
pub const errno = __errno_location().*;
pub const G_TEST_OPTION_ISOLATE_DIRS = "isolate_dirs";
pub inline fn g_test_initialized() @TypeOf(g_test_config_vars.*.test_initialized) {
    return g_test_config_vars.*.test_initialized;
}
pub inline fn g_test_quick() @TypeOf(g_test_config_vars.*.test_quick) {
    return g_test_config_vars.*.test_quick;
}
pub inline fn g_test_slow() @TypeOf(!(g_test_config_vars.*.test_quick != 0)) {
    return !(g_test_config_vars.*.test_quick != 0);
}
pub inline fn g_test_thorough() @TypeOf(!(g_test_config_vars.*.test_quick != 0)) {
    return !(g_test_config_vars.*.test_quick != 0);
}
pub inline fn g_test_perf() @TypeOf(g_test_config_vars.*.test_perf) {
    return g_test_config_vars.*.test_perf;
}
pub inline fn g_test_verbose() @TypeOf(g_test_config_vars.*.test_verbose) {
    return g_test_config_vars.*.test_verbose;
}
pub inline fn g_test_quiet() @TypeOf(g_test_config_vars.*.test_quiet) {
    return g_test_config_vars.*.test_quiet;
}
pub inline fn g_test_undefined() @TypeOf(g_test_config_vars.*.test_undefined) {
    return g_test_config_vars.*.test_undefined;
}
pub inline fn g_test_queue_unref(gobject: anytype) @TypeOf(g_test_queue_destroy(g_object_unref, gobject)) {
    return g_test_queue_destroy(g_object_unref, gobject);
}
pub inline fn g_test_rand_bit() @TypeOf(@as(c_int, 0) != (g_test_rand_int() & (@as(c_int, 1) << @as(c_int, 15)))) {
    return @as(c_int, 0) != (g_test_rand_int() & (@as(c_int, 1) << @as(c_int, 15)));
}
pub const __G_THREADPOOL_H__ = "";
pub const __G_TIMER_H__ = "";
pub const G_USEC_PER_SEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const __G_TRASH_STACK_H__ = "";
pub const __G_TREE_H__ = "";
pub const __G_URI_H__ = "";
pub const G_URI_ERROR = g_uri_error_quark() ++ GLIB_AVAILABLE_MACRO_IN_2_66;
pub const G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@";
pub const G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!$&'()*+,;=";
pub const G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT = G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS ++ ":@";
pub const G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT ++ "/";
pub const G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS ++ ":";
pub const __G_UUID_H__ = "";
pub const __G_VERSION_H__ = "";
pub inline fn GLIB_CHECK_VERSION(major: anytype, minor: anytype, micro: anytype) @TypeOf(((GLIB_MAJOR_VERSION > major) or ((GLIB_MAJOR_VERSION == major) and (GLIB_MINOR_VERSION > minor))) or (((GLIB_MAJOR_VERSION == major) and (GLIB_MINOR_VERSION == minor)) and (GLIB_MICRO_VERSION >= micro))) {
    return ((GLIB_MAJOR_VERSION > major) or ((GLIB_MAJOR_VERSION == major) and (GLIB_MINOR_VERSION > minor))) or (((GLIB_MAJOR_VERSION == major) and (GLIB_MINOR_VERSION == minor)) and (GLIB_MICRO_VERSION >= micro));
}
pub const __G_ALLOCATOR_H__ = "";
pub const G_ALLOC_ONLY = @as(c_int, 1);
pub const G_ALLOC_AND_FREE = @as(c_int, 2);
pub const G_ALLOCATOR_LIST = @as(c_int, 1);
pub const G_ALLOCATOR_SLIST = @as(c_int, 2);
pub const G_ALLOCATOR_NODE = @as(c_int, 3);
pub inline fn g_chunk_free(mem: anytype, mem_chunk: anytype) @TypeOf(g_mem_chunk_free(mem_chunk, mem)) {
    return g_mem_chunk_free(mem_chunk, mem);
}
pub inline fn g_mem_chunk_create(@"type": anytype, x: anytype, y: anytype) @TypeOf(g_mem_chunk_new(NULL, @import("std").zig.c_translation.sizeof(@"type"), @as(c_int, 0), @as(c_int, 0))) {
    _ = @TypeOf(@"type");
    _ = @TypeOf(x);
    _ = @TypeOf(y);
    return g_mem_chunk_new(NULL, @import("std").zig.c_translation.sizeof(@"type"), @as(c_int, 0), @as(c_int, 0));
}
pub const __G_CACHE_H__ = "";
pub const __G_COMPLETION_H__ = "";
pub const __G_DEPRECATED_MAIN_H__ = "";
pub const __G_REL_H__ = "";
pub const __G_DEPRECATED_THREAD_H__ = "";
pub const _PTHREAD_H = @as(c_int, 1);
pub const _SCHED_H = @as(c_int, 1);
pub const _BITS_SCHED_H = @as(c_int, 1);
pub const SCHED_OTHER = @as(c_int, 0);
pub const SCHED_FIFO = @as(c_int, 1);
pub const SCHED_RR = @as(c_int, 2);
pub const _BITS_TYPES_STRUCT_SCHED_PARAM = @as(c_int, 1);
pub const _BITS_CPU_SET_H = @as(c_int, 1);
pub const __CPU_SETSIZE = @as(c_int, 1024);
pub const __NCPUBITS = @as(c_int, 8) * @import("std").zig.c_translation.sizeof(__cpu_mask);
pub inline fn __CPUELT(cpu: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(cpu, __NCPUBITS)) {
    return @import("std").zig.c_translation.MacroArithmetic.div(cpu, __NCPUBITS);
}
pub inline fn __CPUMASK(cpu: anytype) @TypeOf(@import("std").zig.c_translation.cast(__cpu_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(cpu, __NCPUBITS)) {
    return @import("std").zig.c_translation.cast(__cpu_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(cpu, __NCPUBITS);
}
pub inline fn __CPU_COUNT_S(setsize: anytype, cpusetp: anytype) @TypeOf(__sched_cpucount(setsize, cpusetp)) {
    return __sched_cpucount(setsize, cpusetp);
}
pub inline fn __CPU_ALLOC_SIZE(count: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div((count + __NCPUBITS) - @as(c_int, 1), __NCPUBITS) * @import("std").zig.c_translation.sizeof(__cpu_mask)) {
    return @import("std").zig.c_translation.MacroArithmetic.div((count + __NCPUBITS) - @as(c_int, 1), __NCPUBITS) * @import("std").zig.c_translation.sizeof(__cpu_mask);
}
pub inline fn __CPU_ALLOC(count: anytype) @TypeOf(__sched_cpualloc(count)) {
    return __sched_cpualloc(count);
}
pub inline fn __CPU_FREE(cpuset: anytype) @TypeOf(__sched_cpufree(cpuset)) {
    return __sched_cpufree(cpuset);
}
pub const _BITS_SETJMP_H = @as(c_int, 1);
pub const __jmp_buf_tag_defined = @as(c_int, 1);
pub const PTHREAD_CANCELED = @import("std").zig.c_translation.cast(?*anyopaque, -@as(c_int, 1));
pub const PTHREAD_ONCE_INIT = @as(c_int, 0);
pub const PTHREAD_BARRIER_SERIAL_THREAD = -@as(c_int, 1);
pub const __cleanup_fct_attribute = "";
pub inline fn __sigsetjmp_cancel(env: anytype, savemask: anytype) @TypeOf(__sigsetjmp(@import("std").zig.c_translation.cast([*c]struct___jmp_buf_tag, @import("std").zig.c_translation.cast(?*anyopaque, env)), savemask)) {
    return __sigsetjmp(@import("std").zig.c_translation.cast([*c]struct___jmp_buf_tag, @import("std").zig.c_translation.cast(?*anyopaque, env)), savemask);
}
pub const g_static_mutex_get_mutex = g_static_mutex_get_mutex_impl ++ GLIB_DEPRECATED_MACRO_IN_2_32;
pub inline fn g_thread_supported() @TypeOf(@as(c_int, 1) ++ GLIB_DEPRECATED_MACRO_IN_2_32) {
    return @as(c_int, 1) ++ GLIB_DEPRECATED_MACRO_IN_2_32;
}
pub const __GLIB_GOBJECT_H__ = "";
pub const __GLIB_GOBJECT_H_INSIDE__ = "";
pub const __G_BINDING_H__ = "";
pub const __G_OBJECT_H__ = "";
pub const __G_TYPE_H__ = "";
pub const _GOBJECT_IMPORT = "";
pub const _GOBJECT_API = _GOBJECT_IMPORT;
pub const GOBJECT_VAR = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_IN_ALL = _GOBJECT_EXTERN;
pub const GOBJECT_DEPRECATED = G_DEPRECATED ++ _GOBJECT_EXTERN;
pub inline fn GOBJECT_UNAVAILABLE_STATIC_INLINE(maj: anytype, min: anytype) @TypeOf(G_UNAVAILABLE(maj, min)) {
    return G_UNAVAILABLE(maj, min);
}
pub const GOBJECT_DEPRECATED_IN_2_26 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_26_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_26 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_26 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_26 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_26 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_26 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_26 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_26 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_26 = "";
pub const GOBJECT_DEPRECATED_IN_2_28 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_28_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_28 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_28 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_28 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_28 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_28 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_28 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_28 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_28 = "";
pub const GOBJECT_DEPRECATED_IN_2_30 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_30_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_30 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_30 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_30 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_30 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_30 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_30 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_30 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_30 = "";
pub const GOBJECT_DEPRECATED_IN_2_32 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_32_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_32 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_32 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_32 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_32 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_32 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_32 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_32 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_32 = "";
pub const GOBJECT_DEPRECATED_IN_2_34 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_34_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_34 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_34 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_34 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_34 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_34 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_34 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_34 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_34 = "";
pub const GOBJECT_DEPRECATED_IN_2_36 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_36_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_36 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_36 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_36 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_36 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_36 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_36 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_36 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_36 = "";
pub const GOBJECT_DEPRECATED_IN_2_38 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_38_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_38 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_38 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_38 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_38 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_38 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_38 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_38 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_38 = "";
pub const GOBJECT_DEPRECATED_IN_2_40 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_40_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_40 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_40 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_40 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_40 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_40 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_40 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_40 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_40 = "";
pub const GOBJECT_DEPRECATED_IN_2_42 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_42_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_42 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_42 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_42 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_42 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_42 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_42 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_42 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_42 = "";
pub const GOBJECT_DEPRECATED_IN_2_44 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_44_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_44 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_44 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_44 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_44 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_44 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_44 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_44 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_44 = "";
pub const GOBJECT_DEPRECATED_IN_2_46 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_46_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_46 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_46 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_46 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_46 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_46 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_46 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_46 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_46 = "";
pub const GOBJECT_DEPRECATED_IN_2_48 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_48_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_48 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_48 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_48 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_48 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_48 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_48 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_48 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_48 = "";
pub const GOBJECT_DEPRECATED_IN_2_50 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_50_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_50 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_50 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_50 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_50 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_50 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_50 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_50 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_50 = "";
pub const GOBJECT_DEPRECATED_IN_2_52 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_52_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_52 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_52 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_52 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_52 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_52 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_52 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_52 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_52 = "";
pub const GOBJECT_DEPRECATED_IN_2_54 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_54_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_54 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_54 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_54 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_54 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_54 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_54 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_54 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_54 = "";
pub const GOBJECT_DEPRECATED_IN_2_56 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_56_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_56 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_56 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_56 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_56 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_56 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_56 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_56 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_56 = "";
pub const GOBJECT_DEPRECATED_IN_2_58 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_58_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_58 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_58 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_58 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_58 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_58 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_58 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_58 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_58 = "";
pub const GOBJECT_DEPRECATED_IN_2_60 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_60_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_60 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_60 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_60 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_60 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_60 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_60 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_60 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_60 = "";
pub const GOBJECT_DEPRECATED_IN_2_62 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_62_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_62 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_62 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_62 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_62 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_62 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_62 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_62 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_62 = "";
pub const GOBJECT_DEPRECATED_IN_2_64 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_64_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_64 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_64 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_64 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_64 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_64 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_64 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_64 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_64 = "";
pub const GOBJECT_DEPRECATED_IN_2_66 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_66_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_66 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_66 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_66 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_66 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_66 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_66 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_66 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_66 = "";
pub const GOBJECT_DEPRECATED_IN_2_68 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_68_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_68 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_68 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_68 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_68 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_68 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_68 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_68 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_68 = "";
pub const GOBJECT_DEPRECATED_IN_2_70 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_70_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_70 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_70 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_70 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_70 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_70 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_70 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_70 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_70 = "";
pub const GOBJECT_DEPRECATED_IN_2_72 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_72_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_72 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_72 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_72 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_72 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_72 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_72 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_72 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_72 = "";
pub const GOBJECT_DEPRECATED_IN_2_74 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_74_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_74 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_74 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_74 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_74 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_74 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_74 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_74 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_74 = "";
pub const GOBJECT_DEPRECATED_IN_2_76 = GOBJECT_DEPRECATED;
pub inline fn GOBJECT_DEPRECATED_IN_2_76_FOR(f: anytype) @TypeOf(GOBJECT_DEPRECATED_FOR(f)) {
    return GOBJECT_DEPRECATED_FOR(f);
}
pub const GOBJECT_DEPRECATED_MACRO_IN_2_76 = GLIB_DEPRECATED_MACRO;
pub inline fn GOBJECT_DEPRECATED_MACRO_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GOBJECT_DEPRECATED_ENUMERATOR_IN_2_76 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GOBJECT_DEPRECATED_ENUMERATOR_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GOBJECT_DEPRECATED_TYPE_IN_2_76 = GLIB_DEPRECATED_TYPE;
pub inline fn GOBJECT_DEPRECATED_TYPE_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GOBJECT_AVAILABLE_IN_2_76 = _GOBJECT_EXTERN;
pub const GOBJECT_AVAILABLE_STATIC_INLINE_IN_2_76 = "";
pub const GOBJECT_AVAILABLE_MACRO_IN_2_76 = "";
pub const GOBJECT_AVAILABLE_ENUMERATOR_IN_2_76 = "";
pub const GOBJECT_AVAILABLE_TYPE_IN_2_76 = "";
pub inline fn G_TYPE_FUNDAMENTAL(@"type": anytype) @TypeOf(g_type_fundamental(@"type")) {
    return g_type_fundamental(@"type");
}
pub const G_TYPE_FUNDAMENTAL_MAX = @as(c_int, 255) << G_TYPE_FUNDAMENTAL_SHIFT;
pub const G_TYPE_INVALID = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 0));
pub const G_TYPE_NONE = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 1));
pub const G_TYPE_INTERFACE = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 2));
pub const G_TYPE_CHAR = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 3));
pub const G_TYPE_UCHAR = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 4));
pub const G_TYPE_BOOLEAN = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 5));
pub const G_TYPE_INT = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 6));
pub const G_TYPE_UINT = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 7));
pub const G_TYPE_LONG = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 8));
pub const G_TYPE_ULONG = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 9));
pub const G_TYPE_INT64 = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 10));
pub const G_TYPE_UINT64 = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 11));
pub const G_TYPE_ENUM = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 12));
pub const G_TYPE_FLAGS = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 13));
pub const G_TYPE_FLOAT = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 14));
pub const G_TYPE_DOUBLE = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 15));
pub const G_TYPE_STRING = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 16));
pub const G_TYPE_POINTER = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 17));
pub const G_TYPE_BOXED = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 18));
pub const G_TYPE_PARAM = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 19));
pub const G_TYPE_OBJECT = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 20));
pub const G_TYPE_VARIANT = G_TYPE_MAKE_FUNDAMENTAL(@as(c_int, 21));
pub const G_TYPE_FUNDAMENTAL_SHIFT = @as(c_int, 2);
pub inline fn G_TYPE_MAKE_FUNDAMENTAL(x: anytype) GType {
    return @import("std").zig.c_translation.cast(GType, x << G_TYPE_FUNDAMENTAL_SHIFT);
}
pub const G_TYPE_RESERVED_GLIB_FIRST = @as(c_int, 22);
pub const G_TYPE_RESERVED_GLIB_LAST = @as(c_int, 31);
pub const G_TYPE_RESERVED_BSE_FIRST = @as(c_int, 32);
pub const G_TYPE_RESERVED_BSE_LAST = @as(c_int, 48);
pub const G_TYPE_RESERVED_USER_FIRST = @as(c_int, 49);
pub inline fn G_TYPE_IS_FUNDAMENTAL(@"type": anytype) @TypeOf(@"type" <= G_TYPE_FUNDAMENTAL_MAX) {
    return @"type" <= G_TYPE_FUNDAMENTAL_MAX;
}
pub inline fn G_TYPE_IS_DERIVED(@"type": anytype) @TypeOf(@"type" > G_TYPE_FUNDAMENTAL_MAX) {
    return @"type" > G_TYPE_FUNDAMENTAL_MAX;
}
pub inline fn G_TYPE_IS_INTERFACE(@"type": anytype) @TypeOf(G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_INTERFACE) {
    return G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_INTERFACE;
}
pub inline fn G_TYPE_IS_CLASSED(@"type": anytype) @TypeOf(g_type_test_flags(@"type", G_TYPE_FLAG_CLASSED)) {
    return g_type_test_flags(@"type", G_TYPE_FLAG_CLASSED);
}
pub inline fn G_TYPE_IS_INSTANTIATABLE(@"type": anytype) @TypeOf(g_type_test_flags(@"type", G_TYPE_FLAG_INSTANTIATABLE)) {
    return g_type_test_flags(@"type", G_TYPE_FLAG_INSTANTIATABLE);
}
pub inline fn G_TYPE_IS_DERIVABLE(@"type": anytype) @TypeOf(g_type_test_flags(@"type", G_TYPE_FLAG_DERIVABLE)) {
    return g_type_test_flags(@"type", G_TYPE_FLAG_DERIVABLE);
}
pub inline fn G_TYPE_IS_DEEP_DERIVABLE(@"type": anytype) @TypeOf(g_type_test_flags(@"type", G_TYPE_FLAG_DEEP_DERIVABLE)) {
    return g_type_test_flags(@"type", G_TYPE_FLAG_DEEP_DERIVABLE);
}
pub inline fn G_TYPE_IS_ABSTRACT(@"type": anytype) @TypeOf(g_type_test_flags(@"type", G_TYPE_FLAG_ABSTRACT)) {
    return g_type_test_flags(@"type", G_TYPE_FLAG_ABSTRACT);
}
pub inline fn G_TYPE_IS_VALUE_ABSTRACT(@"type": anytype) @TypeOf(g_type_test_flags(@"type", G_TYPE_FLAG_VALUE_ABSTRACT)) {
    return g_type_test_flags(@"type", G_TYPE_FLAG_VALUE_ABSTRACT);
}
pub inline fn G_TYPE_IS_VALUE_TYPE(@"type": anytype) @TypeOf(g_type_check_is_value_type(@"type")) {
    return g_type_check_is_value_type(@"type");
}
pub inline fn G_TYPE_HAS_VALUE_TABLE(@"type": anytype) @TypeOf(g_type_value_table_peek(@"type") != NULL) {
    return g_type_value_table_peek(@"type") != NULL;
}
pub inline fn G_TYPE_IS_FINAL(@"type": anytype) @TypeOf(g_type_test_flags(@"type", G_TYPE_FLAG_FINAL) ++ GOBJECT_AVAILABLE_MACRO_IN_2_70) {
    return g_type_test_flags(@"type", G_TYPE_FLAG_FINAL) ++ GOBJECT_AVAILABLE_MACRO_IN_2_70;
}
pub inline fn G_TYPE_CHECK_INSTANCE(instance: anytype) @TypeOf(_G_TYPE_CHI(@import("std").zig.c_translation.cast([*c]GTypeInstance, instance))) {
    return _G_TYPE_CHI(@import("std").zig.c_translation.cast([*c]GTypeInstance, instance));
}
pub inline fn G_TYPE_CHECK_INSTANCE_CAST(instance: anytype, g_type: anytype, c_type: anytype) @TypeOf(_G_TYPE_CIC(instance, g_type, c_type)) {
    return _G_TYPE_CIC(instance, g_type, c_type);
}
pub inline fn G_TYPE_CHECK_INSTANCE_TYPE(instance: anytype, g_type: anytype) @TypeOf(_G_TYPE_CIT(instance, g_type)) {
    return _G_TYPE_CIT(instance, g_type);
}
pub inline fn G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE(instance: anytype, g_type: anytype) @TypeOf(_G_TYPE_CIFT(instance, g_type)) {
    return _G_TYPE_CIFT(instance, g_type);
}
pub inline fn G_TYPE_INSTANCE_GET_CLASS(instance: anytype, g_type: anytype, c_type: anytype) @TypeOf(_G_TYPE_IGC(instance, g_type, c_type)) {
    return _G_TYPE_IGC(instance, g_type, c_type);
}
pub inline fn G_TYPE_INSTANCE_GET_INTERFACE(instance: anytype, g_type: anytype, c_type: anytype) @TypeOf(_G_TYPE_IGI(instance, g_type, c_type)) {
    return _G_TYPE_IGI(instance, g_type, c_type);
}
pub inline fn G_TYPE_CHECK_CLASS_CAST(g_class: anytype, g_type: anytype, c_type: anytype) @TypeOf(_G_TYPE_CCC(g_class, g_type, c_type)) {
    return _G_TYPE_CCC(g_class, g_type, c_type);
}
pub inline fn G_TYPE_CHECK_CLASS_TYPE(g_class: anytype, g_type: anytype) @TypeOf(_G_TYPE_CCT(g_class, g_type)) {
    return _G_TYPE_CCT(g_class, g_type);
}
pub inline fn G_TYPE_CHECK_VALUE(value: anytype) @TypeOf(_G_TYPE_CHV(value)) {
    return _G_TYPE_CHV(value);
}
pub inline fn G_TYPE_CHECK_VALUE_TYPE(value: anytype, g_type: anytype) @TypeOf(_G_TYPE_CVH(value, g_type)) {
    return _G_TYPE_CVH(value, g_type);
}
pub inline fn G_TYPE_FROM_INSTANCE(instance: anytype) @TypeOf(G_TYPE_FROM_CLASS(@import("std").zig.c_translation.cast([*c]GTypeInstance, instance).*.g_class)) {
    return G_TYPE_FROM_CLASS(@import("std").zig.c_translation.cast([*c]GTypeInstance, instance).*.g_class);
}
pub inline fn G_TYPE_FROM_CLASS(g_class: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]GTypeClass, g_class).*.g_type) {
    return @import("std").zig.c_translation.cast([*c]GTypeClass, g_class).*.g_type;
}
pub inline fn G_TYPE_FROM_INTERFACE(g_iface: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]GTypeInterface, g_iface).*.g_type) {
    return @import("std").zig.c_translation.cast([*c]GTypeInterface, g_iface).*.g_type;
}
pub inline fn G_DEFINE_TYPE_WITH_PRIVATE(TN: anytype, t_n: anytype, T_P: anytype) @TypeOf(G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, @as(c_int, 0), G_ADD_PRIVATE(TN))) {
    return G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, @as(c_int, 0), G_ADD_PRIVATE(TN));
}
pub inline fn G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE(TN: anytype, t_n: anytype, T_P: anytype) @TypeOf(G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, G_ADD_PRIVATE(TN))) {
    return G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, G_ADD_PRIVATE(TN));
}
pub inline fn G_PRIVATE_FIELD_P(TypeName: anytype, inst: anytype, field_name: anytype) @TypeOf(G_STRUCT_MEMBER_P(inst, G_PRIVATE_OFFSET(TypeName, field_name))) {
    return G_STRUCT_MEMBER_P(inst, G_PRIVATE_OFFSET(TypeName, field_name));
}
pub inline fn G_PRIVATE_FIELD(TypeName: anytype, inst: anytype, field_type: anytype, field_name: anytype) @TypeOf(G_STRUCT_MEMBER(field_type, inst, G_PRIVATE_OFFSET(TypeName, field_name))) {
    return G_STRUCT_MEMBER(field_type, inst, G_PRIVATE_OFFSET(TypeName, field_name));
}
pub inline fn _G_TYPE_CHI(ip: anytype) @TypeOf(g_type_check_instance(@import("std").zig.c_translation.cast([*c]GTypeInstance, ip))) {
    return g_type_check_instance(@import("std").zig.c_translation.cast([*c]GTypeInstance, ip));
}
pub inline fn _G_TYPE_CHV(vl: anytype) @TypeOf(g_type_check_value(@import("std").zig.c_translation.cast([*c]GValue, vl))) {
    return g_type_check_value(@import("std").zig.c_translation.cast([*c]GValue, vl));
}
pub inline fn _G_TYPE_CIFT(ip: anytype, ft: anytype) @TypeOf(g_type_check_instance_is_fundamentally_a(@import("std").zig.c_translation.cast([*c]GTypeInstance, ip), ft)) {
    return g_type_check_instance_is_fundamentally_a(@import("std").zig.c_translation.cast([*c]GTypeInstance, ip), ft);
}
pub const G_TYPE_FLAG_RESERVED_ID_BIT = @import("std").zig.c_translation.cast(GType, @as(c_int, 1) << @as(c_int, 0));
pub const __G_VALUE_H__ = "";
pub inline fn G_TYPE_IS_VALUE(@"type": anytype) @TypeOf(g_type_check_is_value_type(@"type")) {
    return g_type_check_is_value_type(@"type");
}
pub inline fn G_IS_VALUE(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE(value)) {
    return G_TYPE_CHECK_VALUE(value);
}
pub inline fn G_VALUE_TYPE(value: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]GValue, value).*.g_type) {
    return @import("std").zig.c_translation.cast([*c]GValue, value).*.g_type;
}
pub inline fn G_VALUE_TYPE_NAME(value: anytype) @TypeOf(g_type_name(G_VALUE_TYPE(value))) {
    return g_type_name(G_VALUE_TYPE(value));
}
pub inline fn G_VALUE_HOLDS(value: anytype, @"type": anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, @"type")) {
    return G_TYPE_CHECK_VALUE_TYPE(value, @"type");
}
pub const G_VALUE_NOCOPY_CONTENTS = @as(c_int, 1) << @as(c_int, 27);
pub const G_VALUE_INTERNED_STRING = @as(c_int, 1) << @as(c_int, 28) ++ GOBJECT_AVAILABLE_MACRO_IN_2_66;
pub const __G_PARAM_H__ = "";
pub inline fn G_TYPE_IS_PARAM(@"type": anytype) @TypeOf(G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_PARAM) {
    return G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_PARAM;
}
pub inline fn G_PARAM_SPEC(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM, GParamSpec)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM, GParamSpec);
}
pub inline fn G_IS_PARAM_SPEC(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE(pspec, G_TYPE_PARAM)) {
    return G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE(pspec, G_TYPE_PARAM);
}
pub inline fn G_PARAM_SPEC_CLASS(pclass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(pclass, G_TYPE_PARAM, GParamSpecClass)) {
    return G_TYPE_CHECK_CLASS_CAST(pclass, G_TYPE_PARAM, GParamSpecClass);
}
pub inline fn G_IS_PARAM_SPEC_CLASS(pclass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(pclass, G_TYPE_PARAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(pclass, G_TYPE_PARAM);
}
pub inline fn G_PARAM_SPEC_GET_CLASS(pspec: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(pspec, G_TYPE_PARAM, GParamSpecClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(pspec, G_TYPE_PARAM, GParamSpecClass);
}
pub inline fn G_PARAM_SPEC_TYPE(pspec: anytype) @TypeOf(G_TYPE_FROM_INSTANCE(pspec)) {
    return G_TYPE_FROM_INSTANCE(pspec);
}
pub inline fn G_PARAM_SPEC_TYPE_NAME(pspec: anytype) @TypeOf(g_type_name(G_PARAM_SPEC_TYPE(pspec))) {
    return g_type_name(G_PARAM_SPEC_TYPE(pspec));
}
pub inline fn G_PARAM_SPEC_VALUE_TYPE(pspec: anytype) @TypeOf(G_PARAM_SPEC(pspec).*.value_type) {
    return G_PARAM_SPEC(pspec).*.value_type;
}
pub inline fn G_VALUE_HOLDS_PARAM(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_PARAM)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_PARAM);
}
pub const G_PARAM_STATIC_STRINGS = (G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK) | G_PARAM_STATIC_BLURB;
pub const G_PARAM_MASK = @as(c_int, 0x000000ff);
pub const G_PARAM_USER_SHIFT = @as(c_int, 8);
pub const __G_CLOSURE_H__ = "";
pub inline fn G_CLOSURE_NEEDS_MARSHAL(closure: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]GClosure, closure).*.marshal == NULL) {
    return @import("std").zig.c_translation.cast([*c]GClosure, closure).*.marshal == NULL;
}
pub inline fn G_CLOSURE_N_NOTIFIERS(cl: anytype) @TypeOf(((cl.*.n_guards << @as(c_long, 1)) + cl.*.n_fnotifiers) + cl.*.n_inotifiers) {
    return ((cl.*.n_guards << @as(c_long, 1)) + cl.*.n_fnotifiers) + cl.*.n_inotifiers;
}
pub inline fn G_CCLOSURE_SWAP_DATA(cclosure: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]GClosure, cclosure).*.derivative_flag) {
    return @import("std").zig.c_translation.cast([*c]GClosure, cclosure).*.derivative_flag;
}
pub inline fn G_CALLBACK(f: anytype) GCallback {
    return @import("std").zig.c_translation.cast(GCallback, f);
}
pub const __G_SIGNAL_H__ = "";
pub const __G_MARSHAL_H__ = "";
pub const g_cclosure_marshal_BOOL__FLAGS = g_cclosure_marshal_BOOLEAN__FLAGS;
pub const g_cclosure_marshal_BOOL__BOXED_BOXED = g_cclosure_marshal_BOOLEAN__BOXED_BOXED;
pub const G_SIGNAL_FLAGS_MASK = @as(c_int, 0x1ff);
pub const G_SIGNAL_MATCH_MASK = @as(c_int, 0x3f);
pub const G_SIGNAL_TYPE_STATIC_SCOPE = G_TYPE_FLAG_RESERVED_ID_BIT;
pub inline fn g_signal_connect(instance: anytype, detailed_signal: anytype, c_handler: anytype, data: anytype) @TypeOf(g_signal_connect_data(instance, detailed_signal, c_handler, data, NULL, @import("std").zig.c_translation.cast(GConnectFlags, @as(c_int, 0)))) {
    return g_signal_connect_data(instance, detailed_signal, c_handler, data, NULL, @import("std").zig.c_translation.cast(GConnectFlags, @as(c_int, 0)));
}
pub inline fn g_signal_connect_after(instance: anytype, detailed_signal: anytype, c_handler: anytype, data: anytype) @TypeOf(g_signal_connect_data(instance, detailed_signal, c_handler, data, NULL, G_CONNECT_AFTER)) {
    return g_signal_connect_data(instance, detailed_signal, c_handler, data, NULL, G_CONNECT_AFTER);
}
pub inline fn g_signal_connect_swapped(instance: anytype, detailed_signal: anytype, c_handler: anytype, data: anytype) @TypeOf(g_signal_connect_data(instance, detailed_signal, c_handler, data, NULL, G_CONNECT_SWAPPED)) {
    return g_signal_connect_data(instance, detailed_signal, c_handler, data, NULL, G_CONNECT_SWAPPED);
}
pub inline fn g_signal_handlers_disconnect_by_func(instance: anytype, func: anytype, data: anytype) @TypeOf(g_signal_handlers_disconnect_matched(instance, @import("std").zig.c_translation.cast(GSignalMatchType, G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), @as(c_int, 0), @as(c_int, 0), NULL, func, data)) {
    return g_signal_handlers_disconnect_matched(instance, @import("std").zig.c_translation.cast(GSignalMatchType, G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), @as(c_int, 0), @as(c_int, 0), NULL, func, data);
}
pub inline fn g_signal_handlers_disconnect_by_data(instance: anytype, data: anytype) @TypeOf(g_signal_handlers_disconnect_matched(instance, G_SIGNAL_MATCH_DATA, @as(c_int, 0), @as(c_int, 0), NULL, NULL, data)) {
    return g_signal_handlers_disconnect_matched(instance, G_SIGNAL_MATCH_DATA, @as(c_int, 0), @as(c_int, 0), NULL, NULL, data);
}
pub inline fn g_signal_handlers_block_by_func(instance: anytype, func: anytype, data: anytype) @TypeOf(g_signal_handlers_block_matched(instance, @import("std").zig.c_translation.cast(GSignalMatchType, G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), @as(c_int, 0), @as(c_int, 0), NULL, func, data)) {
    return g_signal_handlers_block_matched(instance, @import("std").zig.c_translation.cast(GSignalMatchType, G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), @as(c_int, 0), @as(c_int, 0), NULL, func, data);
}
pub inline fn g_signal_handlers_unblock_by_func(instance: anytype, func: anytype, data: anytype) @TypeOf(g_signal_handlers_unblock_matched(instance, @import("std").zig.c_translation.cast(GSignalMatchType, G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), @as(c_int, 0), @as(c_int, 0), NULL, func, data)) {
    return g_signal_handlers_unblock_matched(instance, @import("std").zig.c_translation.cast(GSignalMatchType, G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), @as(c_int, 0), @as(c_int, 0), NULL, func, data);
}
pub const __G_BOXED_H__ = "";
pub const __GLIB_TYPES_H__ = "";
pub const G_TYPE_DATE = g_date_get_type();
pub const G_TYPE_STRV = g_strv_get_type();
pub const G_TYPE_GSTRING = g_gstring_get_type();
pub const G_TYPE_HASH_TABLE = g_hash_table_get_type();
pub const G_TYPE_REGEX = g_regex_get_type();
pub const G_TYPE_MATCH_INFO = g_match_info_get_type();
pub const G_TYPE_ARRAY = g_array_get_type();
pub const G_TYPE_BYTE_ARRAY = g_byte_array_get_type();
pub const G_TYPE_PTR_ARRAY = g_ptr_array_get_type();
pub const G_TYPE_BYTES = g_bytes_get_type();
pub const G_TYPE_VARIANT_TYPE = g_variant_type_get_gtype();
pub const G_TYPE_ERROR = g_error_get_type();
pub const G_TYPE_DATE_TIME = g_date_time_get_type();
pub const G_TYPE_TIME_ZONE = g_time_zone_get_type();
pub const G_TYPE_IO_CHANNEL = g_io_channel_get_type();
pub const G_TYPE_IO_CONDITION = g_io_condition_get_type();
pub const G_TYPE_VARIANT_BUILDER = g_variant_builder_get_type();
pub const G_TYPE_VARIANT_DICT = g_variant_dict_get_type();
pub const G_TYPE_MAIN_LOOP = g_main_loop_get_type();
pub const G_TYPE_MAIN_CONTEXT = g_main_context_get_type();
pub const G_TYPE_SOURCE = g_source_get_type();
pub const G_TYPE_POLLFD = g_pollfd_get_type();
pub const G_TYPE_MARKUP_PARSE_CONTEXT = g_markup_parse_context_get_type();
pub const G_TYPE_KEY_FILE = g_key_file_get_type();
pub const G_TYPE_MAPPED_FILE = g_mapped_file_get_type();
pub const G_TYPE_THREAD = g_thread_get_type();
pub const G_TYPE_CHECKSUM = g_checksum_get_type();
pub const G_TYPE_OPTION_GROUP = g_option_group_get_type();
pub const G_TYPE_URI = g_uri_get_type();
pub const G_TYPE_TREE = g_tree_get_type();
pub const G_TYPE_PATTERN_SPEC = g_pattern_spec_get_type();
pub const G_TYPE_BOOKMARK_FILE = g_bookmark_file_get_type();
pub inline fn G_TYPE_IS_BOXED(@"type": anytype) @TypeOf(G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_BOXED) {
    return G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_BOXED;
}
pub inline fn G_VALUE_HOLDS_BOXED(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_BOXED)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_BOXED);
}
pub const G_TYPE_CLOSURE = g_closure_get_type();
pub const G_TYPE_VALUE = g_value_get_type();
pub inline fn G_TYPE_IS_OBJECT(@"type": anytype) @TypeOf(G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_OBJECT) {
    return G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_OBJECT;
}
pub inline fn G_OBJECT(object: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(object, G_TYPE_OBJECT, GObject)) {
    return G_TYPE_CHECK_INSTANCE_CAST(object, G_TYPE_OBJECT, GObject);
}
pub inline fn G_OBJECT_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_OBJECT, GObjectClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_OBJECT, GObjectClass);
}
pub inline fn G_IS_OBJECT(object: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE(object, G_TYPE_OBJECT)) {
    return G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE(object, G_TYPE_OBJECT);
}
pub inline fn G_IS_OBJECT_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_OBJECT)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_OBJECT);
}
pub inline fn G_OBJECT_GET_CLASS(object: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(object, G_TYPE_OBJECT, GObjectClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(object, G_TYPE_OBJECT, GObjectClass);
}
pub inline fn G_OBJECT_TYPE(object: anytype) @TypeOf(G_TYPE_FROM_INSTANCE(object)) {
    return G_TYPE_FROM_INSTANCE(object);
}
pub inline fn G_OBJECT_TYPE_NAME(object: anytype) @TypeOf(g_type_name(G_OBJECT_TYPE(object))) {
    return g_type_name(G_OBJECT_TYPE(object));
}
pub inline fn G_OBJECT_CLASS_TYPE(class: anytype) @TypeOf(G_TYPE_FROM_CLASS(class)) {
    return G_TYPE_FROM_CLASS(class);
}
pub inline fn G_OBJECT_CLASS_NAME(class: anytype) @TypeOf(g_type_name(G_OBJECT_CLASS_TYPE(class))) {
    return g_type_name(G_OBJECT_CLASS_TYPE(class));
}
pub inline fn G_VALUE_HOLDS_OBJECT(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_OBJECT)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_OBJECT);
}
pub const G_TYPE_INITIALLY_UNOWNED = g_initially_unowned_get_type();
pub inline fn G_INITIALLY_UNOWNED(object: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(object, G_TYPE_INITIALLY_UNOWNED, GInitiallyUnowned)) {
    return G_TYPE_CHECK_INSTANCE_CAST(object, G_TYPE_INITIALLY_UNOWNED, GInitiallyUnowned);
}
pub inline fn G_INITIALLY_UNOWNED_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_INITIALLY_UNOWNED, GInitiallyUnownedClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_INITIALLY_UNOWNED, GInitiallyUnownedClass);
}
pub inline fn G_IS_INITIALLY_UNOWNED(object: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(object, G_TYPE_INITIALLY_UNOWNED)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(object, G_TYPE_INITIALLY_UNOWNED);
}
pub inline fn G_IS_INITIALLY_UNOWNED_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_INITIALLY_UNOWNED)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_INITIALLY_UNOWNED);
}
pub inline fn G_INITIALLY_UNOWNED_GET_CLASS(object: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(object, G_TYPE_INITIALLY_UNOWNED, GInitiallyUnownedClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(object, G_TYPE_INITIALLY_UNOWNED, GInitiallyUnownedClass);
}
pub inline fn G_OBJECT_WARN_INVALID_PROPERTY_ID(object: anytype, property_id: anytype, pspec: anytype) @TypeOf(G_OBJECT_WARN_INVALID_PSPEC(object, "property", property_id, pspec)) {
    return G_OBJECT_WARN_INVALID_PSPEC(object, "property", property_id, pspec);
}
pub const G_TYPE_BINDING_FLAGS = g_binding_flags_get_type();
pub const G_TYPE_BINDING = g_binding_get_type();
pub inline fn G_BINDING(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_BINDING, GBinding)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_BINDING, GBinding);
}
pub inline fn G_IS_BINDING(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_BINDING)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_BINDING);
}
pub const __G_BINDING_GROUP_H__ = "";
pub inline fn G_BINDING_GROUP(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_BINDING_GROUP, GBindingGroup)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_BINDING_GROUP, GBindingGroup);
}
pub inline fn G_IS_BINDING_GROUP(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_BINDING_GROUP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_BINDING_GROUP);
}
pub const G_TYPE_BINDING_GROUP = g_binding_group_get_type();
pub const __G_ENUMS_H__ = "";
pub inline fn G_TYPE_IS_ENUM(@"type": anytype) @TypeOf(G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_ENUM) {
    return G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_ENUM;
}
pub inline fn G_ENUM_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_ENUM, GEnumClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_ENUM, GEnumClass);
}
pub inline fn G_IS_ENUM_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_ENUM)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_ENUM);
}
pub inline fn G_ENUM_CLASS_TYPE(class: anytype) @TypeOf(G_TYPE_FROM_CLASS(class)) {
    return G_TYPE_FROM_CLASS(class);
}
pub inline fn G_ENUM_CLASS_TYPE_NAME(class: anytype) @TypeOf(g_type_name(G_ENUM_CLASS_TYPE(class))) {
    return g_type_name(G_ENUM_CLASS_TYPE(class));
}
pub inline fn G_TYPE_IS_FLAGS(@"type": anytype) @TypeOf(G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_FLAGS) {
    return G_TYPE_FUNDAMENTAL(@"type") == G_TYPE_FLAGS;
}
pub inline fn G_FLAGS_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_FLAGS, GFlagsClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_FLAGS, GFlagsClass);
}
pub inline fn G_IS_FLAGS_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_FLAGS)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_FLAGS);
}
pub inline fn G_FLAGS_CLASS_TYPE(class: anytype) @TypeOf(G_TYPE_FROM_CLASS(class)) {
    return G_TYPE_FROM_CLASS(class);
}
pub inline fn G_FLAGS_CLASS_TYPE_NAME(class: anytype) @TypeOf(g_type_name(G_FLAGS_CLASS_TYPE(class))) {
    return g_type_name(G_FLAGS_CLASS_TYPE(class));
}
pub inline fn G_VALUE_HOLDS_ENUM(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_ENUM)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_ENUM);
}
pub inline fn G_VALUE_HOLDS_FLAGS(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_FLAGS)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_FLAGS);
}
pub const __GOBJECT_ENUM_TYPES_H__ = "";
pub const G_TYPE_UNICODE_TYPE = g_unicode_type_get_type();
pub const G_TYPE_UNICODE_BREAK_TYPE = g_unicode_break_type_get_type();
pub const G_TYPE_UNICODE_SCRIPT = g_unicode_script_get_type();
pub const G_TYPE_NORMALIZE_MODE = g_normalize_mode_get_type();
pub const __G_PARAMSPECS_H__ = "";
pub const G_TYPE_PARAM_CHAR = g_param_spec_types[@intCast(usize, @as(c_int, 0))];
pub inline fn G_IS_PARAM_SPEC_CHAR(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_CHAR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_CHAR);
}
pub inline fn G_PARAM_SPEC_CHAR(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_CHAR, GParamSpecChar)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_CHAR, GParamSpecChar);
}
pub const G_TYPE_PARAM_UCHAR = g_param_spec_types[@intCast(usize, @as(c_int, 1))];
pub inline fn G_IS_PARAM_SPEC_UCHAR(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UCHAR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UCHAR);
}
pub inline fn G_PARAM_SPEC_UCHAR(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UCHAR, GParamSpecUChar)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UCHAR, GParamSpecUChar);
}
pub const G_TYPE_PARAM_BOOLEAN = g_param_spec_types[@intCast(usize, @as(c_int, 2))];
pub inline fn G_IS_PARAM_SPEC_BOOLEAN(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_BOOLEAN)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_BOOLEAN);
}
pub inline fn G_PARAM_SPEC_BOOLEAN(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_BOOLEAN, GParamSpecBoolean)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_BOOLEAN, GParamSpecBoolean);
}
pub const G_TYPE_PARAM_INT = g_param_spec_types[@intCast(usize, @as(c_int, 3))];
pub inline fn G_IS_PARAM_SPEC_INT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_INT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_INT);
}
pub inline fn G_PARAM_SPEC_INT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_INT, GParamSpecInt)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_INT, GParamSpecInt);
}
pub const G_TYPE_PARAM_UINT = g_param_spec_types[@intCast(usize, @as(c_int, 4))];
pub inline fn G_IS_PARAM_SPEC_UINT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UINT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UINT);
}
pub inline fn G_PARAM_SPEC_UINT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UINT, GParamSpecUInt)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UINT, GParamSpecUInt);
}
pub const G_TYPE_PARAM_LONG = g_param_spec_types[@intCast(usize, @as(c_int, 5))];
pub inline fn G_IS_PARAM_SPEC_LONG(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_LONG)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_LONG);
}
pub inline fn G_PARAM_SPEC_LONG(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_LONG, GParamSpecLong)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_LONG, GParamSpecLong);
}
pub const G_TYPE_PARAM_ULONG = g_param_spec_types[@intCast(usize, @as(c_int, 6))];
pub inline fn G_IS_PARAM_SPEC_ULONG(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_ULONG)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_ULONG);
}
pub inline fn G_PARAM_SPEC_ULONG(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_ULONG, GParamSpecULong)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_ULONG, GParamSpecULong);
}
pub const G_TYPE_PARAM_INT64 = g_param_spec_types[@intCast(usize, @as(c_int, 7))];
pub inline fn G_IS_PARAM_SPEC_INT64(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_INT64)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_INT64);
}
pub inline fn G_PARAM_SPEC_INT64(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_INT64, GParamSpecInt64)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_INT64, GParamSpecInt64);
}
pub const G_TYPE_PARAM_UINT64 = g_param_spec_types[@intCast(usize, @as(c_int, 8))];
pub inline fn G_IS_PARAM_SPEC_UINT64(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UINT64)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UINT64);
}
pub inline fn G_PARAM_SPEC_UINT64(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UINT64, GParamSpecUInt64)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UINT64, GParamSpecUInt64);
}
pub const G_TYPE_PARAM_UNICHAR = g_param_spec_types[@intCast(usize, @as(c_int, 9))];
pub inline fn G_PARAM_SPEC_UNICHAR(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UNICHAR, GParamSpecUnichar)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_UNICHAR, GParamSpecUnichar);
}
pub inline fn G_IS_PARAM_SPEC_UNICHAR(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UNICHAR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_UNICHAR);
}
pub const G_TYPE_PARAM_ENUM = g_param_spec_types[@intCast(usize, @as(c_int, 10))];
pub inline fn G_IS_PARAM_SPEC_ENUM(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_ENUM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_ENUM);
}
pub inline fn G_PARAM_SPEC_ENUM(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_ENUM, GParamSpecEnum)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_ENUM, GParamSpecEnum);
}
pub const G_TYPE_PARAM_FLAGS = g_param_spec_types[@intCast(usize, @as(c_int, 11))];
pub inline fn G_IS_PARAM_SPEC_FLAGS(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_FLAGS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_FLAGS);
}
pub inline fn G_PARAM_SPEC_FLAGS(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_FLAGS, GParamSpecFlags)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_FLAGS, GParamSpecFlags);
}
pub const G_TYPE_PARAM_FLOAT = g_param_spec_types[@intCast(usize, @as(c_int, 12))];
pub inline fn G_IS_PARAM_SPEC_FLOAT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_FLOAT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_FLOAT);
}
pub inline fn G_PARAM_SPEC_FLOAT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_FLOAT, GParamSpecFloat)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_FLOAT, GParamSpecFloat);
}
pub const G_TYPE_PARAM_DOUBLE = g_param_spec_types[@intCast(usize, @as(c_int, 13))];
pub inline fn G_IS_PARAM_SPEC_DOUBLE(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_DOUBLE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_DOUBLE);
}
pub inline fn G_PARAM_SPEC_DOUBLE(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_DOUBLE, GParamSpecDouble)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_DOUBLE, GParamSpecDouble);
}
pub const G_TYPE_PARAM_STRING = g_param_spec_types[@intCast(usize, @as(c_int, 14))];
pub inline fn G_IS_PARAM_SPEC_STRING(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_STRING)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_STRING);
}
pub inline fn G_PARAM_SPEC_STRING(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_STRING, GParamSpecString)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_STRING, GParamSpecString);
}
pub const G_TYPE_PARAM_PARAM = g_param_spec_types[@intCast(usize, @as(c_int, 15))];
pub inline fn G_IS_PARAM_SPEC_PARAM(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_PARAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_PARAM);
}
pub inline fn G_PARAM_SPEC_PARAM(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_PARAM, GParamSpecParam)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_PARAM, GParamSpecParam);
}
pub const G_TYPE_PARAM_BOXED = g_param_spec_types[@intCast(usize, @as(c_int, 16))];
pub inline fn G_IS_PARAM_SPEC_BOXED(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_BOXED)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_BOXED);
}
pub inline fn G_PARAM_SPEC_BOXED(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_BOXED, GParamSpecBoxed)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_BOXED, GParamSpecBoxed);
}
pub const G_TYPE_PARAM_POINTER = g_param_spec_types[@intCast(usize, @as(c_int, 17))];
pub inline fn G_IS_PARAM_SPEC_POINTER(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_POINTER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_POINTER);
}
pub inline fn G_PARAM_SPEC_POINTER(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_POINTER, GParamSpecPointer)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_POINTER, GParamSpecPointer);
}
pub const G_TYPE_PARAM_VALUE_ARRAY = g_param_spec_types[@intCast(usize, @as(c_int, 18))] ++ GOBJECT_DEPRECATED_MACRO_IN_2_32;
pub inline fn G_IS_PARAM_SPEC_VALUE_ARRAY(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_VALUE_ARRAY) ++ GOBJECT_DEPRECATED_MACRO_IN_2_32) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_VALUE_ARRAY) ++ GOBJECT_DEPRECATED_MACRO_IN_2_32;
}
pub inline fn G_PARAM_SPEC_VALUE_ARRAY(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_VALUE_ARRAY, GParamSpecValueArray) ++ GOBJECT_DEPRECATED_MACRO_IN_2_32) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_VALUE_ARRAY, GParamSpecValueArray) ++ GOBJECT_DEPRECATED_MACRO_IN_2_32;
}
pub const G_TYPE_PARAM_OBJECT = g_param_spec_types[@intCast(usize, @as(c_int, 19))];
pub inline fn G_IS_PARAM_SPEC_OBJECT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_OBJECT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_OBJECT);
}
pub inline fn G_PARAM_SPEC_OBJECT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_OBJECT, GParamSpecObject)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_OBJECT, GParamSpecObject);
}
pub const G_TYPE_PARAM_OVERRIDE = g_param_spec_types[@intCast(usize, @as(c_int, 20))];
pub inline fn G_IS_PARAM_SPEC_OVERRIDE(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_OVERRIDE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_OVERRIDE);
}
pub inline fn G_PARAM_SPEC_OVERRIDE(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_OVERRIDE, GParamSpecOverride)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_OVERRIDE, GParamSpecOverride);
}
pub const G_TYPE_PARAM_GTYPE = g_param_spec_types[@intCast(usize, @as(c_int, 21))];
pub inline fn G_IS_PARAM_SPEC_GTYPE(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_GTYPE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_GTYPE);
}
pub inline fn G_PARAM_SPEC_GTYPE(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_GTYPE, GParamSpecGType)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_GTYPE, GParamSpecGType);
}
pub const G_TYPE_PARAM_VARIANT = g_param_spec_types[@intCast(usize, @as(c_int, 22))];
pub inline fn G_IS_PARAM_SPEC_VARIANT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_VARIANT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(pspec, G_TYPE_PARAM_VARIANT);
}
pub inline fn G_PARAM_SPEC_VARIANT(pspec: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_VARIANT, GParamSpecVariant)) {
    return G_TYPE_CHECK_INSTANCE_CAST(pspec, G_TYPE_PARAM_VARIANT, GParamSpecVariant);
}
pub const __G_SIGNAL_GROUP_H__ = "";
pub inline fn G_SIGNAL_GROUP(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SIGNAL_GROUP, GSignalGroup)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SIGNAL_GROUP, GSignalGroup);
}
pub inline fn G_IS_SIGNAL_GROUP(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SIGNAL_GROUP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SIGNAL_GROUP);
}
pub const G_TYPE_SIGNAL_GROUP = g_signal_group_get_type();
pub const __G_SOURCECLOSURE_H__ = "";
pub const __G_TYPE_MODULE_H__ = "";
pub const G_TYPE_TYPE_MODULE = g_type_module_get_type();
pub inline fn G_TYPE_MODULE(module: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(module, G_TYPE_TYPE_MODULE, GTypeModule)) {
    return G_TYPE_CHECK_INSTANCE_CAST(module, G_TYPE_TYPE_MODULE, GTypeModule);
}
pub inline fn G_TYPE_MODULE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TYPE_MODULE, GTypeModuleClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TYPE_MODULE, GTypeModuleClass);
}
pub inline fn G_IS_TYPE_MODULE(module: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(module, G_TYPE_TYPE_MODULE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(module, G_TYPE_TYPE_MODULE);
}
pub inline fn G_IS_TYPE_MODULE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TYPE_MODULE)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TYPE_MODULE);
}
pub inline fn G_TYPE_MODULE_GET_CLASS(module: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(module, G_TYPE_TYPE_MODULE, GTypeModuleClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(module, G_TYPE_TYPE_MODULE, GTypeModuleClass);
}
pub const __G_TYPE_PLUGIN_H__ = "";
pub const G_TYPE_TYPE_PLUGIN = g_type_plugin_get_type();
pub inline fn G_TYPE_PLUGIN(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TYPE_PLUGIN, GTypePlugin)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TYPE_PLUGIN, GTypePlugin);
}
pub inline fn G_TYPE_PLUGIN_CLASS(vtable: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(vtable, G_TYPE_TYPE_PLUGIN, GTypePluginClass)) {
    return G_TYPE_CHECK_CLASS_CAST(vtable, G_TYPE_TYPE_PLUGIN, GTypePluginClass);
}
pub inline fn G_IS_TYPE_PLUGIN(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TYPE_PLUGIN)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TYPE_PLUGIN);
}
pub inline fn G_IS_TYPE_PLUGIN_CLASS(vtable: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(vtable, G_TYPE_TYPE_PLUGIN)) {
    return G_TYPE_CHECK_CLASS_TYPE(vtable, G_TYPE_TYPE_PLUGIN);
}
pub inline fn G_TYPE_PLUGIN_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TYPE_PLUGIN, GTypePluginClass)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TYPE_PLUGIN, GTypePluginClass);
}
pub const __G_VALUE_ARRAY_H__ = "";
pub const G_TYPE_VALUE_ARRAY = (g_value_array_get_type() ++ GOBJECT_DEPRECATED_MACRO_IN_2_32_FOR)(G_TYPE_ARRAY);
pub const __G_VALUETYPES_H__ = "";
pub inline fn G_VALUE_HOLDS_CHAR(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_CHAR)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_CHAR);
}
pub inline fn G_VALUE_HOLDS_UCHAR(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_UCHAR)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_UCHAR);
}
pub inline fn G_VALUE_HOLDS_BOOLEAN(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_BOOLEAN)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_BOOLEAN);
}
pub inline fn G_VALUE_HOLDS_INT(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_INT)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_INT);
}
pub inline fn G_VALUE_HOLDS_UINT(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_UINT)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_UINT);
}
pub inline fn G_VALUE_HOLDS_LONG(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_LONG)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_LONG);
}
pub inline fn G_VALUE_HOLDS_ULONG(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_ULONG)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_ULONG);
}
pub inline fn G_VALUE_HOLDS_INT64(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_INT64)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_INT64);
}
pub inline fn G_VALUE_HOLDS_UINT64(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_UINT64)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_UINT64);
}
pub inline fn G_VALUE_HOLDS_FLOAT(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_FLOAT)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_FLOAT);
}
pub inline fn G_VALUE_HOLDS_DOUBLE(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_DOUBLE)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_DOUBLE);
}
pub inline fn G_VALUE_HOLDS_STRING(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_STRING)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_STRING);
}
pub inline fn G_VALUE_IS_INTERNED_STRING(value: anytype) @TypeOf((G_VALUE_HOLDS_STRING(value) != 0) and ((value.*.data[@intCast(usize, @as(c_int, 1))].v_uint & G_VALUE_INTERNED_STRING) != 0) ++ GOBJECT_AVAILABLE_MACRO_IN_2_66) {
    return (G_VALUE_HOLDS_STRING(value) != 0) and ((value.*.data[@intCast(usize, @as(c_int, 1))].v_uint & G_VALUE_INTERNED_STRING) != 0) ++ GOBJECT_AVAILABLE_MACRO_IN_2_66;
}
pub inline fn G_VALUE_HOLDS_POINTER(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_POINTER)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_POINTER);
}
pub const G_TYPE_GTYPE = g_gtype_get_type();
pub inline fn G_VALUE_HOLDS_GTYPE(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_GTYPE)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_GTYPE);
}
pub inline fn G_VALUE_HOLDS_VARIANT(value: anytype) @TypeOf(G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_VARIANT)) {
    return G_TYPE_CHECK_VALUE_TYPE(value, G_TYPE_VARIANT);
}
pub const __G_IO_H__ = "";
pub const __GIO_GIO_H_INSIDE__ = "";
pub const __GIO_TYPES_H__ = "";
pub const __GIO_ENUMS_H__ = "";
pub const _GIO_IMPORT = "";
pub const _GIO_API = _GIO_IMPORT;
pub const GIO_VAR = _GIO_EXTERN;
pub const GIO_AVAILABLE_IN_ALL = _GIO_EXTERN;
pub const GIO_DEPRECATED = G_DEPRECATED ++ _GIO_EXTERN;
pub inline fn GIO_UNAVAILABLE_STATIC_INLINE(maj: anytype, min: anytype) @TypeOf(G_UNAVAILABLE(maj, min)) {
    return G_UNAVAILABLE(maj, min);
}
pub const GIO_DEPRECATED_IN_2_26 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_26_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_26 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_26 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_26 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_26 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_26 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_26 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_26 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_26 = "";
pub const GIO_DEPRECATED_IN_2_28 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_28_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_28 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_28 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_28 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_28 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_28 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_28 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_28 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_28 = "";
pub const GIO_DEPRECATED_IN_2_30 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_30_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_30 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_30 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_30 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_30 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_30 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_30 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_30 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_30 = "";
pub const GIO_DEPRECATED_IN_2_32 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_32_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_32 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_32 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_32 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_32 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_32 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_32 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_32 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_32 = "";
pub const GIO_DEPRECATED_IN_2_34 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_34_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_34 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_34 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_34 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_34 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_34 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_34 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_34 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_34 = "";
pub const GIO_DEPRECATED_IN_2_36 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_36_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_36 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_36 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_36 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_36 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_36 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_36 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_36 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_36 = "";
pub const GIO_DEPRECATED_IN_2_38 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_38_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_38 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_38 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_38 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_38 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_38 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_38 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_38 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_38 = "";
pub const GIO_DEPRECATED_IN_2_40 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_40_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_40 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_40 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_40 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_40 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_40 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_40 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_40 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_40 = "";
pub const GIO_DEPRECATED_IN_2_42 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_42_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_42 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_42 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_42 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_42 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_42 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_42 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_42 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_42 = "";
pub const GIO_DEPRECATED_IN_2_44 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_44_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_44 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_44 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_44 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_44 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_44 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_44 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_44 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_44 = "";
pub const GIO_DEPRECATED_IN_2_46 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_46_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_46 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_46 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_46 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_46 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_46 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_46 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_46 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_46 = "";
pub const GIO_DEPRECATED_IN_2_48 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_48_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_48 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_48 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_48 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_48 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_48 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_48 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_48 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_48 = "";
pub const GIO_DEPRECATED_IN_2_50 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_50_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_50 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_50 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_50 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_50 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_50 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_50 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_50 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_50 = "";
pub const GIO_DEPRECATED_IN_2_52 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_52_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_52 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_52 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_52 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_52 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_52 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_52 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_52 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_52 = "";
pub const GIO_DEPRECATED_IN_2_54 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_54_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_54 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_54 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_54 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_54 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_54 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_54 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_54 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_54 = "";
pub const GIO_DEPRECATED_IN_2_56 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_56_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_56 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_56 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_56 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_56 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_56 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_56 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_56 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_56 = "";
pub const GIO_DEPRECATED_IN_2_58 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_58_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_58 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_58 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_58 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_58 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_58 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_58 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_58 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_58 = "";
pub const GIO_DEPRECATED_IN_2_60 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_60_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_60 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_60 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_60 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_60 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_60 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_60 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_60 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_60 = "";
pub const GIO_DEPRECATED_IN_2_62 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_62_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_62 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_62 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_62 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_62 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_62 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_62 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_62 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_62 = "";
pub const GIO_DEPRECATED_IN_2_64 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_64_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_64 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_64 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_64 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_64 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_64 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_64 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_64 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_64 = "";
pub const GIO_DEPRECATED_IN_2_66 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_66_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_66 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_66 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_66 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_66 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_66 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_66 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_66 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_66 = "";
pub const GIO_DEPRECATED_IN_2_68 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_68_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_68 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_68 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_68 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_68 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_68 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_68 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_68 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_68 = "";
pub const GIO_DEPRECATED_IN_2_70 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_70_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_70 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_70 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_70 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_70 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_70 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_70 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_70 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_70 = "";
pub const GIO_DEPRECATED_IN_2_72 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_72_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_72 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_72 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_72 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_72 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_72 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_72 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_72 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_72 = "";
pub const GIO_DEPRECATED_IN_2_74 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_74_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_74 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_74 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_74 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_74 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_74 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_74 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_74 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_74 = "";
pub const GIO_DEPRECATED_IN_2_76 = GIO_DEPRECATED;
pub inline fn GIO_DEPRECATED_IN_2_76_FOR(f: anytype) @TypeOf(GIO_DEPRECATED_FOR(f)) {
    return GIO_DEPRECATED_FOR(f);
}
pub const GIO_DEPRECATED_MACRO_IN_2_76 = GLIB_DEPRECATED_MACRO;
pub inline fn GIO_DEPRECATED_MACRO_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GIO_DEPRECATED_ENUMERATOR_IN_2_76 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GIO_DEPRECATED_ENUMERATOR_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GIO_DEPRECATED_TYPE_IN_2_76 = GLIB_DEPRECATED_TYPE;
pub inline fn GIO_DEPRECATED_TYPE_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GIO_AVAILABLE_IN_2_76 = _GIO_EXTERN;
pub const GIO_AVAILABLE_STATIC_INLINE_IN_2_76 = "";
pub const GIO_AVAILABLE_MACRO_IN_2_76 = "";
pub const GIO_AVAILABLE_ENUMERATOR_IN_2_76 = "";
pub const GIO_AVAILABLE_TYPE_IN_2_76 = "";
pub const __G_ACTION_H__ = "";
pub const G_TYPE_ACTION = g_action_get_type();
pub inline fn G_ACTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_ACTION, GAction)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_ACTION, GAction);
}
pub inline fn G_IS_ACTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_ACTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_ACTION);
}
pub inline fn G_ACTION_GET_IFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_ACTION, GActionInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_ACTION, GActionInterface);
}
pub const __G_ACTION_GROUP_H__ = "";
pub const G_TYPE_ACTION_GROUP = g_action_group_get_type();
pub inline fn G_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_ACTION_GROUP, GActionGroup)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_ACTION_GROUP, GActionGroup);
}
pub inline fn G_IS_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_ACTION_GROUP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_ACTION_GROUP);
}
pub inline fn G_ACTION_GROUP_GET_IFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_ACTION_GROUP, GActionGroupInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_ACTION_GROUP, GActionGroupInterface);
}
pub const __G_ACTION_GROUP_EXPORTER_H__ = "";
pub const __G_ACTION_MAP_H__ = "";
pub const G_TYPE_ACTION_MAP = g_action_map_get_type();
pub inline fn G_ACTION_MAP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_ACTION_MAP, GActionMap)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_ACTION_MAP, GActionMap);
}
pub inline fn G_IS_ACTION_MAP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_ACTION_MAP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_ACTION_MAP);
}
pub inline fn G_ACTION_MAP_GET_IFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_ACTION_MAP, GActionMapInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_ACTION_MAP, GActionMapInterface);
}
pub const __G_APP_INFO_H__ = "";
pub const G_TYPE_APP_INFO = g_app_info_get_type();
pub inline fn G_APP_INFO(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_APP_INFO, GAppInfo)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_APP_INFO, GAppInfo);
}
pub inline fn G_IS_APP_INFO(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_APP_INFO)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_APP_INFO);
}
pub inline fn G_APP_INFO_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_APP_INFO, GAppInfoIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_APP_INFO, GAppInfoIface);
}
pub const G_TYPE_APP_LAUNCH_CONTEXT = g_app_launch_context_get_type();
pub inline fn G_APP_LAUNCH_CONTEXT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContext)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContext);
}
pub inline fn G_APP_LAUNCH_CONTEXT_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContextClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContextClass);
}
pub inline fn G_IS_APP_LAUNCH_CONTEXT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_APP_LAUNCH_CONTEXT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_APP_LAUNCH_CONTEXT);
}
pub inline fn G_IS_APP_LAUNCH_CONTEXT_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_APP_LAUNCH_CONTEXT)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_APP_LAUNCH_CONTEXT);
}
pub inline fn G_APP_LAUNCH_CONTEXT_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContextClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContextClass);
}
pub const G_TYPE_APP_INFO_MONITOR = g_app_info_monitor_get_type();
pub inline fn G_APP_INFO_MONITOR(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_APP_INFO_MONITOR, GAppInfoMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_APP_INFO_MONITOR, GAppInfoMonitor);
}
pub inline fn G_IS_APP_INFO_MONITOR(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_APP_INFO_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_APP_INFO_MONITOR);
}
pub const __G_APPLICATION_H__ = "";
pub const G_TYPE_APPLICATION = g_application_get_type();
pub inline fn G_APPLICATION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_APPLICATION, GApplication)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_APPLICATION, GApplication);
}
pub inline fn G_APPLICATION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_APPLICATION, GApplicationClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_APPLICATION, GApplicationClass);
}
pub inline fn G_IS_APPLICATION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_APPLICATION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_APPLICATION);
}
pub inline fn G_IS_APPLICATION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_APPLICATION)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_APPLICATION);
}
pub inline fn G_APPLICATION_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_APPLICATION, GApplicationClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_APPLICATION, GApplicationClass);
}
pub const __G_APPLICATION_COMMAND_LINE_H__ = "";
pub const G_TYPE_APPLICATION_COMMAND_LINE = g_application_command_line_get_type();
pub inline fn G_APPLICATION_COMMAND_LINE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLine)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLine);
}
pub inline fn G_APPLICATION_COMMAND_LINE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLineClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLineClass);
}
pub inline fn G_IS_APPLICATION_COMMAND_LINE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_APPLICATION_COMMAND_LINE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_APPLICATION_COMMAND_LINE);
}
pub inline fn G_IS_APPLICATION_COMMAND_LINE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_APPLICATION_COMMAND_LINE)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_APPLICATION_COMMAND_LINE);
}
pub inline fn G_APPLICATION_COMMAND_LINE_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLineClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLineClass);
}
pub const __G_ASYNC_INITABLE_H__ = "";
pub const __G_INITABLE_H__ = "";
pub const G_TYPE_INITABLE = g_initable_get_type();
pub inline fn G_INITABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_INITABLE, GInitable)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_INITABLE, GInitable);
}
pub inline fn G_IS_INITABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_INITABLE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_INITABLE);
}
pub inline fn G_INITABLE_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_INITABLE, GInitableIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_INITABLE, GInitableIface);
}
pub inline fn G_TYPE_IS_INITABLE(@"type": anytype) @TypeOf(g_type_is_a(@"type", G_TYPE_INITABLE)) {
    return g_type_is_a(@"type", G_TYPE_INITABLE);
}
pub const G_TYPE_ASYNC_INITABLE = g_async_initable_get_type();
pub inline fn G_ASYNC_INITABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_ASYNC_INITABLE, GAsyncInitable)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_ASYNC_INITABLE, GAsyncInitable);
}
pub inline fn G_IS_ASYNC_INITABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_ASYNC_INITABLE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_ASYNC_INITABLE);
}
pub inline fn G_ASYNC_INITABLE_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_ASYNC_INITABLE, GAsyncInitableIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_ASYNC_INITABLE, GAsyncInitableIface);
}
pub inline fn G_TYPE_IS_ASYNC_INITABLE(@"type": anytype) @TypeOf(g_type_is_a(@"type", G_TYPE_ASYNC_INITABLE)) {
    return g_type_is_a(@"type", G_TYPE_ASYNC_INITABLE);
}
pub const __G_ASYNC_RESULT_H__ = "";
pub const G_TYPE_ASYNC_RESULT = g_async_result_get_type();
pub inline fn G_ASYNC_RESULT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_ASYNC_RESULT, GAsyncResult)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_ASYNC_RESULT, GAsyncResult);
}
pub inline fn G_IS_ASYNC_RESULT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_ASYNC_RESULT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_ASYNC_RESULT);
}
pub inline fn G_ASYNC_RESULT_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_ASYNC_RESULT, GAsyncResultIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_ASYNC_RESULT, GAsyncResultIface);
}
pub const __G_BUFFERED_INPUT_STREAM_H__ = "";
pub const __G_FILTER_INPUT_STREAM_H__ = "";
pub const __G_INPUT_STREAM_H__ = "";
pub const G_TYPE_INPUT_STREAM = g_input_stream_get_type();
pub inline fn G_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INPUT_STREAM, GInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INPUT_STREAM, GInputStream);
}
pub inline fn G_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INPUT_STREAM, GInputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INPUT_STREAM, GInputStreamClass);
}
pub inline fn G_IS_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INPUT_STREAM);
}
pub inline fn G_IS_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INPUT_STREAM);
}
pub inline fn G_INPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INPUT_STREAM, GInputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INPUT_STREAM, GInputStreamClass);
}
pub const G_TYPE_FILTER_INPUT_STREAM = g_filter_input_stream_get_type();
pub inline fn G_FILTER_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILTER_INPUT_STREAM, GFilterInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILTER_INPUT_STREAM, GFilterInputStream);
}
pub inline fn G_FILTER_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILTER_INPUT_STREAM, GFilterInputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILTER_INPUT_STREAM, GFilterInputStreamClass);
}
pub inline fn G_IS_FILTER_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILTER_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILTER_INPUT_STREAM);
}
pub inline fn G_IS_FILTER_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILTER_INPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILTER_INPUT_STREAM);
}
pub inline fn G_FILTER_INPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILTER_INPUT_STREAM, GFilterInputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILTER_INPUT_STREAM, GFilterInputStreamClass);
}
pub const G_TYPE_BUFFERED_INPUT_STREAM = g_buffered_input_stream_get_type();
pub inline fn G_BUFFERED_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStream);
}
pub inline fn G_BUFFERED_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStreamClass);
}
pub inline fn G_IS_BUFFERED_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_BUFFERED_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_BUFFERED_INPUT_STREAM);
}
pub inline fn G_IS_BUFFERED_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_BUFFERED_INPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_BUFFERED_INPUT_STREAM);
}
pub inline fn G_BUFFERED_INPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStreamClass);
}
pub const __G_BUFFERED_OUTPUT_STREAM_H__ = "";
pub const __G_FILTER_OUTPUT_STREAM_H__ = "";
pub const __G_OUTPUT_STREAM_H__ = "";
pub const G_TYPE_OUTPUT_STREAM = g_output_stream_get_type();
pub inline fn G_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_OUTPUT_STREAM, GOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_OUTPUT_STREAM, GOutputStream);
}
pub inline fn G_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_OUTPUT_STREAM, GOutputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_OUTPUT_STREAM, GOutputStreamClass);
}
pub inline fn G_IS_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_OUTPUT_STREAM);
}
pub inline fn G_IS_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_OUTPUT_STREAM);
}
pub inline fn G_OUTPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_OUTPUT_STREAM, GOutputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_OUTPUT_STREAM, GOutputStreamClass);
}
pub const G_TYPE_FILTER_OUTPUT_STREAM = g_filter_output_stream_get_type();
pub inline fn G_FILTER_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStream);
}
pub inline fn G_FILTER_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStreamClass);
}
pub inline fn G_IS_FILTER_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILTER_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILTER_OUTPUT_STREAM);
}
pub inline fn G_IS_FILTER_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILTER_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILTER_OUTPUT_STREAM);
}
pub inline fn G_FILTER_OUTPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStreamClass);
}
pub const G_TYPE_BUFFERED_OUTPUT_STREAM = g_buffered_output_stream_get_type();
pub inline fn G_BUFFERED_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStream);
}
pub inline fn G_BUFFERED_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStreamClass);
}
pub inline fn G_IS_BUFFERED_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_BUFFERED_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_BUFFERED_OUTPUT_STREAM);
}
pub inline fn G_IS_BUFFERED_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_BUFFERED_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_BUFFERED_OUTPUT_STREAM);
}
pub inline fn G_BUFFERED_OUTPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStreamClass);
}
pub const __G_BYTES_ICON_H__ = "";
pub const G_TYPE_BYTES_ICON = g_bytes_icon_get_type();
pub inline fn G_BYTES_ICON(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_BYTES_ICON, GBytesIcon)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_BYTES_ICON, GBytesIcon);
}
pub inline fn G_IS_BYTES_ICON(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_BYTES_ICON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_BYTES_ICON);
}
pub const __G_CANCELLABLE_H__ = "";
pub const G_TYPE_CANCELLABLE = g_cancellable_get_type();
pub inline fn G_CANCELLABLE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CANCELLABLE, GCancellable)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CANCELLABLE, GCancellable);
}
pub inline fn G_CANCELLABLE_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CANCELLABLE, GCancellableClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CANCELLABLE, GCancellableClass);
}
pub inline fn G_IS_CANCELLABLE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CANCELLABLE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CANCELLABLE);
}
pub inline fn G_IS_CANCELLABLE_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CANCELLABLE)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CANCELLABLE);
}
pub inline fn G_CANCELLABLE_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CANCELLABLE, GCancellableClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CANCELLABLE, GCancellableClass);
}
pub const __G_CHARSET_CONVERTER_H__ = "";
pub const __G_CONVERTER_H__ = "";
pub const G_TYPE_CONVERTER = g_converter_get_type();
pub inline fn G_CONVERTER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_CONVERTER, GConverter)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_CONVERTER, GConverter);
}
pub inline fn G_IS_CONVERTER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_CONVERTER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_CONVERTER);
}
pub inline fn G_CONVERTER_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_CONVERTER, GConverterIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_CONVERTER, GConverterIface);
}
pub const G_TYPE_CHARSET_CONVERTER = g_charset_converter_get_type();
pub inline fn G_CHARSET_CONVERTER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CHARSET_CONVERTER, GCharsetConverter)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CHARSET_CONVERTER, GCharsetConverter);
}
pub inline fn G_CHARSET_CONVERTER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CHARSET_CONVERTER, GCharsetConverterClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CHARSET_CONVERTER, GCharsetConverterClass);
}
pub inline fn G_IS_CHARSET_CONVERTER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CHARSET_CONVERTER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CHARSET_CONVERTER);
}
pub inline fn G_IS_CHARSET_CONVERTER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CHARSET_CONVERTER)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CHARSET_CONVERTER);
}
pub inline fn G_CHARSET_CONVERTER_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CHARSET_CONVERTER, GCharsetConverterClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CHARSET_CONVERTER, GCharsetConverterClass);
}
pub const __G_CONTENT_TYPE_H__ = "";
pub const __G_CONVERTER_INPUT_STREAM_H__ = "";
pub const G_TYPE_CONVERTER_INPUT_STREAM = g_converter_input_stream_get_type();
pub inline fn G_CONVERTER_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStream);
}
pub inline fn G_CONVERTER_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStreamClass);
}
pub inline fn G_IS_CONVERTER_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CONVERTER_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CONVERTER_INPUT_STREAM);
}
pub inline fn G_IS_CONVERTER_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CONVERTER_INPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CONVERTER_INPUT_STREAM);
}
pub inline fn G_CONVERTER_INPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStreamClass);
}
pub const __G_CONVERTER_OUTPUT_STREAM_H__ = "";
pub const G_TYPE_CONVERTER_OUTPUT_STREAM = g_converter_output_stream_get_type();
pub inline fn G_CONVERTER_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStream);
}
pub inline fn G_CONVERTER_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStreamClass);
}
pub inline fn G_IS_CONVERTER_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CONVERTER_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CONVERTER_OUTPUT_STREAM);
}
pub inline fn G_IS_CONVERTER_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CONVERTER_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CONVERTER_OUTPUT_STREAM);
}
pub inline fn G_CONVERTER_OUTPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStreamClass);
}
pub const __G_CREDENTIALS_H__ = "";
pub const _UNISTD_H = @as(c_int, 1);
pub const _POSIX_VERSION = @as(c_long, 200809);
pub const __POSIX2_THIS_VERSION = @as(c_long, 200809);
pub const _POSIX2_VERSION = __POSIX2_THIS_VERSION;
pub const _POSIX2_C_VERSION = __POSIX2_THIS_VERSION;
pub const _POSIX2_C_BIND = __POSIX2_THIS_VERSION;
pub const _POSIX2_C_DEV = __POSIX2_THIS_VERSION;
pub const _POSIX2_SW_DEV = __POSIX2_THIS_VERSION;
pub const _POSIX2_LOCALEDEF = __POSIX2_THIS_VERSION;
pub const _XOPEN_VERSION = @as(c_int, 700);
pub const _XOPEN_XCU_VERSION = @as(c_int, 4);
pub const _XOPEN_XPG2 = @as(c_int, 1);
pub const _XOPEN_XPG3 = @as(c_int, 1);
pub const _XOPEN_XPG4 = @as(c_int, 1);
pub const _XOPEN_UNIX = @as(c_int, 1);
pub const _XOPEN_ENH_I18N = @as(c_int, 1);
pub const _XOPEN_LEGACY = @as(c_int, 1);
pub const _BITS_POSIX_OPT_H = @as(c_int, 1);
pub const _POSIX_JOB_CONTROL = @as(c_int, 1);
pub const _POSIX_SAVED_IDS = @as(c_int, 1);
pub const _POSIX_PRIORITY_SCHEDULING = @as(c_long, 200809);
pub const _POSIX_SYNCHRONIZED_IO = @as(c_long, 200809);
pub const _POSIX_FSYNC = @as(c_long, 200809);
pub const _POSIX_MAPPED_FILES = @as(c_long, 200809);
pub const _POSIX_MEMLOCK = @as(c_long, 200809);
pub const _POSIX_MEMLOCK_RANGE = @as(c_long, 200809);
pub const _POSIX_MEMORY_PROTECTION = @as(c_long, 200809);
pub const _POSIX_CHOWN_RESTRICTED = @as(c_int, 0);
pub const _POSIX_VDISABLE = '\x00';
pub const _POSIX_NO_TRUNC = @as(c_int, 1);
pub const _XOPEN_REALTIME = @as(c_int, 1);
pub const _XOPEN_REALTIME_THREADS = @as(c_int, 1);
pub const _XOPEN_SHM = @as(c_int, 1);
pub const _POSIX_THREADS = @as(c_long, 200809);
pub const _POSIX_REENTRANT_FUNCTIONS = @as(c_int, 1);
pub const _POSIX_THREAD_SAFE_FUNCTIONS = @as(c_long, 200809);
pub const _POSIX_THREAD_PRIORITY_SCHEDULING = @as(c_long, 200809);
pub const _POSIX_THREAD_ATTR_STACKSIZE = @as(c_long, 200809);
pub const _POSIX_THREAD_ATTR_STACKADDR = @as(c_long, 200809);
pub const _POSIX_THREAD_PRIO_INHERIT = @as(c_long, 200809);
pub const _POSIX_THREAD_PRIO_PROTECT = @as(c_long, 200809);
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT = @as(c_long, 200809);
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT = -@as(c_int, 1);
pub const _POSIX_SEMAPHORES = @as(c_long, 200809);
pub const _POSIX_REALTIME_SIGNALS = @as(c_long, 200809);
pub const _POSIX_ASYNCHRONOUS_IO = @as(c_long, 200809);
pub const _POSIX_ASYNC_IO = @as(c_int, 1);
pub const _LFS_ASYNCHRONOUS_IO = @as(c_int, 1);
pub const _POSIX_PRIORITIZED_IO = @as(c_long, 200809);
pub const _LFS64_ASYNCHRONOUS_IO = @as(c_int, 1);
pub const _LFS_LARGEFILE = @as(c_int, 1);
pub const _LFS64_LARGEFILE = @as(c_int, 1);
pub const _LFS64_STDIO = @as(c_int, 1);
pub const _POSIX_SHARED_MEMORY_OBJECTS = @as(c_long, 200809);
pub const _POSIX_CPUTIME = @as(c_int, 0);
pub const _POSIX_THREAD_CPUTIME = @as(c_int, 0);
pub const _POSIX_REGEXP = @as(c_int, 1);
pub const _POSIX_READER_WRITER_LOCKS = @as(c_long, 200809);
pub const _POSIX_SHELL = @as(c_int, 1);
pub const _POSIX_TIMEOUTS = @as(c_long, 200809);
pub const _POSIX_SPIN_LOCKS = @as(c_long, 200809);
pub const _POSIX_SPAWN = @as(c_long, 200809);
pub const _POSIX_TIMERS = @as(c_long, 200809);
pub const _POSIX_BARRIERS = @as(c_long, 200809);
pub const _POSIX_MESSAGE_PASSING = @as(c_long, 200809);
pub const _POSIX_THREAD_PROCESS_SHARED = @as(c_long, 200809);
pub const _POSIX_MONOTONIC_CLOCK = @as(c_int, 0);
pub const _POSIX_CLOCK_SELECTION = @as(c_long, 200809);
pub const _POSIX_ADVISORY_INFO = @as(c_long, 200809);
pub const _POSIX_IPV6 = @as(c_long, 200809);
pub const _POSIX_RAW_SOCKETS = @as(c_long, 200809);
pub const _POSIX2_CHAR_TERM = @as(c_long, 200809);
pub const _POSIX_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_THREAD_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_TRACE = -@as(c_int, 1);
pub const _POSIX_TRACE_EVENT_FILTER = -@as(c_int, 1);
pub const _POSIX_TRACE_INHERIT = -@as(c_int, 1);
pub const _POSIX_TRACE_LOG = -@as(c_int, 1);
pub const _POSIX_TYPED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX_V7_LPBIG_OFFBIG = -@as(c_int, 1);
pub const _POSIX_V6_LPBIG_OFFBIG = -@as(c_int, 1);
pub const _XBS5_LPBIG_OFFBIG = -@as(c_int, 1);
pub const _POSIX_V7_LP64_OFF64 = @as(c_int, 1);
pub const _POSIX_V6_LP64_OFF64 = @as(c_int, 1);
pub const _XBS5_LP64_OFF64 = @as(c_int, 1);
pub const __ILP32_OFF32_CFLAGS = "-m32";
pub const __ILP32_OFF32_LDFLAGS = "-m32";
pub const __ILP32_OFFBIG_CFLAGS = "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";
pub const __ILP32_OFFBIG_LDFLAGS = "-m32";
pub const __LP64_OFF64_CFLAGS = "-m64";
pub const __LP64_OFF64_LDFLAGS = "-m64";
pub const STDIN_FILENO = @as(c_int, 0);
pub const STDOUT_FILENO = @as(c_int, 1);
pub const STDERR_FILENO = @as(c_int, 2);
pub const __useconds_t_defined = "";
pub const __intptr_t_defined = "";
pub const __socklen_t_defined = "";
pub const R_OK = @as(c_int, 4);
pub const W_OK = @as(c_int, 2);
pub const X_OK = @as(c_int, 1);
pub const F_OK = @as(c_int, 0);
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const L_SET = SEEK_SET;
pub const L_INCR = SEEK_CUR;
pub const L_XTND = SEEK_END;
pub const _SC_PAGE_SIZE = _SC_PAGESIZE;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = _CS_V6_WIDTH_RESTRICTED_ENVS;
pub const _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = _CS_V5_WIDTH_RESTRICTED_ENVS;
pub const _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = _CS_V7_WIDTH_RESTRICTED_ENVS;
pub const _GETOPT_POSIX_H = @as(c_int, 1);
pub const _GETOPT_CORE_H = @as(c_int, 1);
pub const F_ULOCK = @as(c_int, 0);
pub const F_LOCK = @as(c_int, 1);
pub const F_TLOCK = @as(c_int, 2);
pub const F_TEST = @as(c_int, 3);
pub const G_TYPE_CREDENTIALS = g_credentials_get_type();
pub inline fn G_CREDENTIALS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CREDENTIALS, GCredentials)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_CREDENTIALS, GCredentials);
}
pub inline fn G_CREDENTIALS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CREDENTIALS, GCredentialsClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_CREDENTIALS, GCredentialsClass);
}
pub inline fn G_CREDENTIALS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CREDENTIALS, GCredentialsClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_CREDENTIALS, GCredentialsClass);
}
pub inline fn G_IS_CREDENTIALS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CREDENTIALS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_CREDENTIALS);
}
pub inline fn G_IS_CREDENTIALS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CREDENTIALS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_CREDENTIALS);
}
pub const __G_DATAGRAM_BASED_H__ = "";
pub const G_TYPE_DATAGRAM_BASED = g_datagram_based_get_type();
pub inline fn G_DATAGRAM_BASED(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DATAGRAM_BASED, GDatagramBased)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DATAGRAM_BASED, GDatagramBased);
}
pub inline fn G_IS_DATAGRAM_BASED(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DATAGRAM_BASED)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DATAGRAM_BASED);
}
pub inline fn G_DATAGRAM_BASED_GET_IFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DATAGRAM_BASED, GDatagramBasedInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DATAGRAM_BASED, GDatagramBasedInterface);
}
pub inline fn G_TYPE_IS_DATAGRAM_BASED(@"type": anytype) @TypeOf(g_type_is_a(@"type", G_TYPE_DATAGRAM_BASED)) {
    return g_type_is_a(@"type", G_TYPE_DATAGRAM_BASED);
}
pub const __G_DATA_INPUT_STREAM_H__ = "";
pub const G_TYPE_DATA_INPUT_STREAM = g_data_input_stream_get_type();
pub inline fn G_DATA_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DATA_INPUT_STREAM, GDataInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DATA_INPUT_STREAM, GDataInputStream);
}
pub inline fn G_DATA_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DATA_INPUT_STREAM, GDataInputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DATA_INPUT_STREAM, GDataInputStreamClass);
}
pub inline fn G_IS_DATA_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DATA_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DATA_INPUT_STREAM);
}
pub inline fn G_IS_DATA_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DATA_INPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DATA_INPUT_STREAM);
}
pub inline fn G_DATA_INPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DATA_INPUT_STREAM, GDataInputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DATA_INPUT_STREAM, GDataInputStreamClass);
}
pub const __G_DATA_OUTPUT_STREAM_H__ = "";
pub const G_TYPE_DATA_OUTPUT_STREAM = g_data_output_stream_get_type();
pub inline fn G_DATA_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStream);
}
pub inline fn G_DATA_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStreamClass);
}
pub inline fn G_IS_DATA_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DATA_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DATA_OUTPUT_STREAM);
}
pub inline fn G_IS_DATA_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DATA_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DATA_OUTPUT_STREAM);
}
pub inline fn G_DATA_OUTPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStreamClass);
}
pub const __G_DBUS_ACTION_GROUP_H__ = "";
pub const G_TYPE_DBUS_ACTION_GROUP = g_dbus_action_group_get_type();
pub inline fn G_DBUS_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DBUS_ACTION_GROUP, GDBusActionGroup)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DBUS_ACTION_GROUP, GDBusActionGroup);
}
pub inline fn G_IS_DBUS_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DBUS_ACTION_GROUP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DBUS_ACTION_GROUP);
}
pub inline fn G_IS_DBUS_ACTION_GROUP_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_DBUS_ACTION_GROUP)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_DBUS_ACTION_GROUP);
}
pub const __G_DBUS_ADDRESS_H__ = "";
pub const __G_DBUS_AUTH_OBSERVER_H__ = "";
pub const G_TYPE_DBUS_AUTH_OBSERVER = g_dbus_auth_observer_get_type();
pub inline fn G_DBUS_AUTH_OBSERVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_AUTH_OBSERVER, GDBusAuthObserver)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_AUTH_OBSERVER, GDBusAuthObserver);
}
pub inline fn G_IS_DBUS_AUTH_OBSERVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_AUTH_OBSERVER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_AUTH_OBSERVER);
}
pub const __G_DBUS_CONNECTION_H__ = "";
pub const G_TYPE_DBUS_CONNECTION = g_dbus_connection_get_type();
pub inline fn G_DBUS_CONNECTION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_CONNECTION, GDBusConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_CONNECTION, GDBusConnection);
}
pub inline fn G_IS_DBUS_CONNECTION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_CONNECTION);
}
pub const __G_DBUS_ERROR_H__ = "";
pub const G_DBUS_ERROR = g_dbus_error_quark();
pub const __G_DBUS_INTERFACE_H__ = "";
pub const G_TYPE_DBUS_INTERFACE = g_dbus_interface_get_type();
pub inline fn G_DBUS_INTERFACE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_INTERFACE, GDBusInterface)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_INTERFACE, GDBusInterface);
}
pub inline fn G_IS_DBUS_INTERFACE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_INTERFACE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_INTERFACE);
}
pub inline fn G_DBUS_INTERFACE_GET_IFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DBUS_INTERFACE, GDBusInterfaceIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DBUS_INTERFACE, GDBusInterfaceIface);
}
pub const __G_DBUS_INTERFACE_SKELETON_H__ = "";
pub const G_TYPE_DBUS_INTERFACE_SKELETON = g_dbus_interface_skeleton_get_type();
pub inline fn G_DBUS_INTERFACE_SKELETON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeleton)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeleton);
}
pub inline fn G_DBUS_INTERFACE_SKELETON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeletonClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeletonClass);
}
pub inline fn G_DBUS_INTERFACE_SKELETON_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeletonClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeletonClass);
}
pub inline fn G_IS_DBUS_INTERFACE_SKELETON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_INTERFACE_SKELETON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_INTERFACE_SKELETON);
}
pub inline fn G_IS_DBUS_INTERFACE_SKELETON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_INTERFACE_SKELETON)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_INTERFACE_SKELETON);
}
pub const __G_DBUS_INTROSPECTION_H__ = "";
pub const G_TYPE_DBUS_NODE_INFO = g_dbus_node_info_get_type();
pub const G_TYPE_DBUS_INTERFACE_INFO = g_dbus_interface_info_get_type();
pub const G_TYPE_DBUS_METHOD_INFO = g_dbus_method_info_get_type();
pub const G_TYPE_DBUS_SIGNAL_INFO = g_dbus_signal_info_get_type();
pub const G_TYPE_DBUS_PROPERTY_INFO = g_dbus_property_info_get_type();
pub const G_TYPE_DBUS_ARG_INFO = g_dbus_arg_info_get_type();
pub const G_TYPE_DBUS_ANNOTATION_INFO = g_dbus_annotation_info_get_type();
pub const __G_DBUS_MENU_MODEL_H__ = "";
pub const G_TYPE_DBUS_MENU_MODEL = g_dbus_menu_model_get_type();
pub inline fn G_DBUS_MENU_MODEL(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DBUS_MENU_MODEL, GDBusMenuModel)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DBUS_MENU_MODEL, GDBusMenuModel);
}
pub inline fn G_IS_DBUS_MENU_MODEL(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DBUS_MENU_MODEL)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DBUS_MENU_MODEL);
}
pub const __G_DBUS_MESSAGE_H__ = "";
pub const G_TYPE_DBUS_MESSAGE = g_dbus_message_get_type();
pub inline fn G_DBUS_MESSAGE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_MESSAGE, GDBusMessage)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_MESSAGE, GDBusMessage);
}
pub inline fn G_IS_DBUS_MESSAGE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_MESSAGE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_MESSAGE);
}
pub const __G_DBUS_METHOD_INVOCATION_H__ = "";
pub const G_TYPE_DBUS_METHOD_INVOCATION = g_dbus_method_invocation_get_type();
pub inline fn G_DBUS_METHOD_INVOCATION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_METHOD_INVOCATION, GDBusMethodInvocation)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_METHOD_INVOCATION, GDBusMethodInvocation);
}
pub inline fn G_IS_DBUS_METHOD_INVOCATION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_METHOD_INVOCATION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_METHOD_INVOCATION);
}
pub const G_DBUS_METHOD_INVOCATION_HANDLED = TRUE ++ GIO_AVAILABLE_MACRO_IN_2_68;
pub const G_DBUS_METHOD_INVOCATION_UNHANDLED = FALSE ++ GIO_AVAILABLE_MACRO_IN_2_68;
pub const __G_DBUS_NAME_OWNING_H__ = "";
pub const __G_DBUS_NAME_WATCHING_H__ = "";
pub const __G_DBUS_OBJECT_H__ = "";
pub const G_TYPE_DBUS_OBJECT = g_dbus_object_get_type();
pub inline fn G_DBUS_OBJECT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT, GDBusObject)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT, GDBusObject);
}
pub inline fn G_IS_DBUS_OBJECT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT);
}
pub inline fn G_DBUS_OBJECT_GET_IFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DBUS_OBJECT, GDBusObjectIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DBUS_OBJECT, GDBusObjectIface);
}
pub const __G_DBUS_OBJECT_MANAGER_H__ = "";
pub const G_TYPE_DBUS_OBJECT_MANAGER = g_dbus_object_manager_get_type();
pub inline fn G_DBUS_OBJECT_MANAGER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_MANAGER, GDBusObjectManager)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_MANAGER, GDBusObjectManager);
}
pub inline fn G_IS_DBUS_OBJECT_MANAGER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_MANAGER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_MANAGER);
}
pub inline fn G_DBUS_OBJECT_MANAGER_GET_IFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DBUS_OBJECT_MANAGER, GDBusObjectManagerIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DBUS_OBJECT_MANAGER, GDBusObjectManagerIface);
}
pub const __G_DBUS_OBJECT_MANAGER_CLIENT_H__ = "";
pub const G_TYPE_DBUS_OBJECT_MANAGER_CLIENT = g_dbus_object_manager_client_get_type();
pub inline fn G_DBUS_OBJECT_MANAGER_CLIENT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClient)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClient);
}
pub inline fn G_DBUS_OBJECT_MANAGER_CLIENT_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClientClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClientClass);
}
pub inline fn G_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClientClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClientClass);
}
pub inline fn G_IS_DBUS_OBJECT_MANAGER_CLIENT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT);
}
pub inline fn G_IS_DBUS_OBJECT_MANAGER_CLIENT_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT);
}
pub const __G_DBUS_OBJECT_MANAGER_SERVER_H__ = "";
pub const G_TYPE_DBUS_OBJECT_MANAGER_SERVER = g_dbus_object_manager_server_get_type();
pub inline fn G_DBUS_OBJECT_MANAGER_SERVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServer)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServer);
}
pub inline fn G_DBUS_OBJECT_MANAGER_SERVER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServerClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServerClass);
}
pub inline fn G_DBUS_OBJECT_MANAGER_SERVER_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServerClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServerClass);
}
pub inline fn G_IS_DBUS_OBJECT_MANAGER_SERVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_MANAGER_SERVER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_MANAGER_SERVER);
}
pub inline fn G_IS_DBUS_OBJECT_MANAGER_SERVER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_MANAGER_SERVER)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_MANAGER_SERVER);
}
pub const __G_DBUS_OBJECT_PROXY_H__ = "";
pub const G_TYPE_DBUS_OBJECT_PROXY = g_dbus_object_proxy_get_type();
pub inline fn G_DBUS_OBJECT_PROXY(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxy)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxy);
}
pub inline fn G_DBUS_OBJECT_PROXY_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxyClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxyClass);
}
pub inline fn G_DBUS_OBJECT_PROXY_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxyClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxyClass);
}
pub inline fn G_IS_DBUS_OBJECT_PROXY(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_PROXY)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_PROXY);
}
pub inline fn G_IS_DBUS_OBJECT_PROXY_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_PROXY)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_PROXY);
}
pub const __G_DBUS_OBJECT_SKELETON_H__ = "";
pub const G_TYPE_DBUS_OBJECT_SKELETON = g_dbus_object_skeleton_get_type();
pub inline fn G_DBUS_OBJECT_SKELETON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeleton)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeleton);
}
pub inline fn G_DBUS_OBJECT_SKELETON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeletonClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeletonClass);
}
pub inline fn G_DBUS_OBJECT_SKELETON_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeletonClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeletonClass);
}
pub inline fn G_IS_DBUS_OBJECT_SKELETON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_SKELETON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_OBJECT_SKELETON);
}
pub inline fn G_IS_DBUS_OBJECT_SKELETON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_SKELETON)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_OBJECT_SKELETON);
}
pub const __G_DBUS_PROXY_H__ = "";
pub const G_TYPE_DBUS_PROXY = g_dbus_proxy_get_type();
pub inline fn G_DBUS_PROXY(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_PROXY, GDBusProxy)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_PROXY, GDBusProxy);
}
pub inline fn G_DBUS_PROXY_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_PROXY, GDBusProxyClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_DBUS_PROXY, GDBusProxyClass);
}
pub inline fn G_DBUS_PROXY_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_PROXY, GDBusProxyClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_DBUS_PROXY, GDBusProxyClass);
}
pub inline fn G_IS_DBUS_PROXY(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_PROXY)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_PROXY);
}
pub inline fn G_IS_DBUS_PROXY_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_PROXY)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_DBUS_PROXY);
}
pub const __G_DBUS_SERVER_H__ = "";
pub const G_TYPE_DBUS_SERVER = g_dbus_server_get_type();
pub inline fn G_DBUS_SERVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_SERVER, GDBusServer)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DBUS_SERVER, GDBusServer);
}
pub inline fn G_IS_DBUS_SERVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_SERVER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DBUS_SERVER);
}
pub const __G_DBUS_UTILS_H__ = "";
pub const __G_DEBUG_CONTROLLER_H__ = "";
pub const G_DEBUG_CONTROLLER_EXTENSION_POINT_NAME = "gio-debug-controller";
pub const G_TYPE_DEBUG_CONTROLLER = g_debug_controller_get_type();
pub inline fn G_DEBUG_CONTROLLER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DEBUG_CONTROLLER, GDebugController)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_DEBUG_CONTROLLER, GDebugController);
}
pub inline fn G_IS_DEBUG_CONTROLLER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DEBUG_CONTROLLER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_DEBUG_CONTROLLER);
}
pub inline fn G_DEBUG_CONTROLLER_GET_INTERFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DEBUG_CONTROLLER, GDebugControllerInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_DEBUG_CONTROLLER, GDebugControllerInterface);
}
pub const __G_DEBUG_CONTROLLER_DBUS_H__ = "";
pub const G_TYPE_DEBUG_CONTROLLER_DBUS = g_debug_controller_dbus_get_type();
pub const __G_DRIVE_H__ = "";
pub const G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";
pub const G_TYPE_DRIVE = g_drive_get_type();
pub inline fn G_DRIVE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_DRIVE, GDrive)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_DRIVE, GDrive);
}
pub inline fn G_IS_DRIVE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_DRIVE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_DRIVE);
}
pub inline fn G_DRIVE_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_DRIVE, GDriveIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_DRIVE, GDriveIface);
}
pub const __G_DTLS_CLIENT_CONNECTION_H__ = "";
pub const __G_DTLS_CONNECTION_H__ = "";
pub const G_TYPE_DTLS_CONNECTION = g_dtls_connection_get_type();
pub inline fn G_DTLS_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DTLS_CONNECTION, GDtlsConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DTLS_CONNECTION, GDtlsConnection);
}
pub inline fn G_IS_DTLS_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DTLS_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DTLS_CONNECTION);
}
pub inline fn G_DTLS_CONNECTION_GET_INTERFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DTLS_CONNECTION, GDtlsConnectionInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DTLS_CONNECTION, GDtlsConnectionInterface);
}
pub const G_TYPE_DTLS_CLIENT_CONNECTION = g_dtls_client_connection_get_type();
pub inline fn G_DTLS_CLIENT_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DTLS_CLIENT_CONNECTION, GDtlsClientConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DTLS_CLIENT_CONNECTION, GDtlsClientConnection);
}
pub inline fn G_IS_DTLS_CLIENT_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DTLS_CLIENT_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DTLS_CLIENT_CONNECTION);
}
pub inline fn G_DTLS_CLIENT_CONNECTION_GET_INTERFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DTLS_CLIENT_CONNECTION, GDtlsClientConnectionInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DTLS_CLIENT_CONNECTION, GDtlsClientConnectionInterface);
}
pub const __G_DTLS_SERVER_CONNECTION_H__ = "";
pub const G_TYPE_DTLS_SERVER_CONNECTION = g_dtls_server_connection_get_type();
pub inline fn G_DTLS_SERVER_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DTLS_SERVER_CONNECTION, GDtlsServerConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_DTLS_SERVER_CONNECTION, GDtlsServerConnection);
}
pub inline fn G_IS_DTLS_SERVER_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DTLS_SERVER_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_DTLS_SERVER_CONNECTION);
}
pub inline fn G_DTLS_SERVER_CONNECTION_GET_INTERFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DTLS_SERVER_CONNECTION, GDtlsServerConnectionInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_DTLS_SERVER_CONNECTION, GDtlsServerConnectionInterface);
}
pub const __G_EMBLEMED_ICON_H__ = "";
pub const __G_ICON_H__ = "";
pub const G_TYPE_ICON = g_icon_get_type();
pub inline fn G_ICON(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_ICON, GIcon)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_ICON, GIcon);
}
pub inline fn G_IS_ICON(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_ICON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_ICON);
}
pub inline fn G_ICON_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_ICON, GIconIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_ICON, GIconIface);
}
pub const __G_EMBLEM_H__ = "";
pub const G_TYPE_EMBLEM = g_emblem_get_type();
pub inline fn G_EMBLEM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_EMBLEM, GEmblem)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_EMBLEM, GEmblem);
}
pub inline fn G_EMBLEM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_EMBLEM, GEmblemClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_EMBLEM, GEmblemClass);
}
pub inline fn G_IS_EMBLEM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_EMBLEM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_EMBLEM);
}
pub inline fn G_IS_EMBLEM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_EMBLEM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_EMBLEM);
}
pub inline fn G_EMBLEM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_EMBLEM, GEmblemClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_EMBLEM, GEmblemClass);
}
pub const G_TYPE_EMBLEMED_ICON = g_emblemed_icon_get_type();
pub inline fn G_EMBLEMED_ICON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_EMBLEMED_ICON, GEmblemedIcon)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_EMBLEMED_ICON, GEmblemedIcon);
}
pub inline fn G_EMBLEMED_ICON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_EMBLEMED_ICON, GEmblemedIconClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_EMBLEMED_ICON, GEmblemedIconClass);
}
pub inline fn G_IS_EMBLEMED_ICON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_EMBLEMED_ICON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_EMBLEMED_ICON);
}
pub inline fn G_IS_EMBLEMED_ICON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_EMBLEMED_ICON)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_EMBLEMED_ICON);
}
pub inline fn G_EMBLEMED_ICON_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_EMBLEMED_ICON, GEmblemedIconClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_EMBLEMED_ICON, GEmblemedIconClass);
}
pub const __G_FILE_H__ = "";
pub const G_TYPE_FILE = g_file_get_type();
pub inline fn G_FILE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_FILE, GFile)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_FILE, GFile);
}
pub inline fn G_IS_FILE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_FILE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_FILE);
}
pub inline fn G_FILE_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_FILE, GFileIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_FILE, GFileIface);
}
pub const __G_FILE_ATTRIBUTE_H__ = "";
pub const G_TYPE_FILE_ATTRIBUTE_INFO_LIST = g_file_attribute_info_list_get_type();
pub const __G_FILE_ENUMERATOR_H__ = "";
pub const G_TYPE_FILE_ENUMERATOR = g_file_enumerator_get_type();
pub inline fn G_FILE_ENUMERATOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_ENUMERATOR, GFileEnumerator)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_ENUMERATOR, GFileEnumerator);
}
pub inline fn G_FILE_ENUMERATOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_ENUMERATOR, GFileEnumeratorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_ENUMERATOR, GFileEnumeratorClass);
}
pub inline fn G_IS_FILE_ENUMERATOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_ENUMERATOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_ENUMERATOR);
}
pub inline fn G_IS_FILE_ENUMERATOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_ENUMERATOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_ENUMERATOR);
}
pub inline fn G_FILE_ENUMERATOR_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_ENUMERATOR, GFileEnumeratorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_ENUMERATOR, GFileEnumeratorClass);
}
pub const __G_FILE_ICON_H__ = "";
pub const G_TYPE_FILE_ICON = g_file_icon_get_type();
pub inline fn G_FILE_ICON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_ICON, GFileIcon)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_ICON, GFileIcon);
}
pub inline fn G_FILE_ICON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_ICON, GFileIconClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_ICON, GFileIconClass);
}
pub inline fn G_IS_FILE_ICON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_ICON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_ICON);
}
pub inline fn G_IS_FILE_ICON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_ICON)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_ICON);
}
pub inline fn G_FILE_ICON_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_ICON, GFileIconClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_ICON, GFileIconClass);
}
pub const __G_FILE_INFO_H__ = "";
pub const G_TYPE_FILE_INFO = g_file_info_get_type();
pub inline fn G_FILE_INFO(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_INFO, GFileInfo)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_INFO, GFileInfo);
}
pub inline fn G_FILE_INFO_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_INFO, GFileInfoClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_INFO, GFileInfoClass);
}
pub inline fn G_IS_FILE_INFO(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_INFO)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_INFO);
}
pub inline fn G_IS_FILE_INFO_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_INFO)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_INFO);
}
pub inline fn G_FILE_INFO_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_INFO, GFileInfoClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_INFO, GFileInfoClass);
}
pub const G_FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = "standard::is-volatile";
pub const G_FILE_ATTRIBUTE_STANDARD_NAME = "standard::name";
pub const G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name";
pub const G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name";
pub const G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name";
pub const G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description";
pub const G_FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon";
pub const G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon";
pub const G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type";
pub const G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type";
pub const G_FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size";
pub const G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size";
pub const G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target";
pub const G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri";
pub const G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order";
pub const G_FILE_ATTRIBUTE_ETAG_VALUE = "etag::value";
pub const G_FILE_ATTRIBUTE_ID_FILE = "id::file";
pub const G_FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic";
pub const G_FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified";
pub const G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec";
pub const G_FILE_ATTRIBUTE_TIME_MODIFIED_NSEC = "time::modified-nsec";
pub const G_FILE_ATTRIBUTE_TIME_ACCESS = "time::access";
pub const G_FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec";
pub const G_FILE_ATTRIBUTE_TIME_ACCESS_NSEC = "time::access-nsec";
pub const G_FILE_ATTRIBUTE_TIME_CHANGED = "time::changed";
pub const G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec";
pub const G_FILE_ATTRIBUTE_TIME_CHANGED_NSEC = "time::changed-nsec";
pub const G_FILE_ATTRIBUTE_TIME_CREATED = "time::created";
pub const G_FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec";
pub const G_FILE_ATTRIBUTE_TIME_CREATED_NSEC = "time::created-nsec";
pub const G_FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device";
pub const G_FILE_ATTRIBUTE_UNIX_INODE = "unix::inode";
pub const G_FILE_ATTRIBUTE_UNIX_MODE = "unix::mode";
pub const G_FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink";
pub const G_FILE_ATTRIBUTE_UNIX_UID = "unix::uid";
pub const G_FILE_ATTRIBUTE_UNIX_GID = "unix::gid";
pub const G_FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev";
pub const G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size";
pub const G_FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks";
pub const G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint";
pub const G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive";
pub const G_FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system";
pub const G_FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT = "dos::is-mountpoint";
pub const G_FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG = "dos::reparse-point-tag";
pub const G_FILE_ATTRIBUTE_OWNER_USER = "owner::user";
pub const G_FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real";
pub const G_FILE_ATTRIBUTE_OWNER_GROUP = "owner::group";
pub const G_FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path";
pub const G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed";
pub const G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = "thumbnail::is-valid";
pub const G_FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE = "filesystem::remote";
pub const G_FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend";
pub const G_FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context";
pub const G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count";
pub const G_FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path";
pub const G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date";
pub const G_FILE_ATTRIBUTE_RECENT_MODIFIED = "recent::modified";
pub const G_TYPE_FILE_ATTRIBUTE_MATCHER = g_file_attribute_matcher_get_type();
pub const __G_FILE_INPUT_STREAM_H__ = "";
pub const G_TYPE_FILE_INPUT_STREAM = g_file_input_stream_get_type();
pub inline fn G_FILE_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_INPUT_STREAM, GFileInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_INPUT_STREAM, GFileInputStream);
}
pub inline fn G_FILE_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_INPUT_STREAM, GFileInputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_INPUT_STREAM, GFileInputStreamClass);
}
pub inline fn G_IS_FILE_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_INPUT_STREAM);
}
pub inline fn G_IS_FILE_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_INPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_INPUT_STREAM);
}
pub inline fn G_FILE_INPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_INPUT_STREAM, GFileInputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_INPUT_STREAM, GFileInputStreamClass);
}
pub const __G_FILE_IO_STREAM_H__ = "";
pub const __G_IO_STREAM_H__ = "";
pub const __G_IO_ERROR_H__ = "";
pub const G_IO_ERROR = g_io_error_quark();
pub const G_TYPE_IO_STREAM = g_io_stream_get_type();
pub inline fn G_IO_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_IO_STREAM, GIOStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_IO_STREAM, GIOStream);
}
pub inline fn G_IO_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_IO_STREAM, GIOStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_IO_STREAM, GIOStreamClass);
}
pub inline fn G_IS_IO_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_IO_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_IO_STREAM);
}
pub inline fn G_IS_IO_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_IO_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_IO_STREAM);
}
pub inline fn G_IO_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_IO_STREAM, GIOStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_IO_STREAM, GIOStreamClass);
}
pub const G_TYPE_FILE_IO_STREAM = g_file_io_stream_get_type();
pub inline fn G_FILE_IO_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_IO_STREAM, GFileIOStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_IO_STREAM, GFileIOStream);
}
pub inline fn G_FILE_IO_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_IO_STREAM, GFileIOStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_IO_STREAM, GFileIOStreamClass);
}
pub inline fn G_IS_FILE_IO_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_IO_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_IO_STREAM);
}
pub inline fn G_IS_FILE_IO_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_IO_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_IO_STREAM);
}
pub inline fn G_FILE_IO_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_IO_STREAM, GFileIOStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_IO_STREAM, GFileIOStreamClass);
}
pub const __G_FILE_MONITOR_H__ = "";
pub const G_TYPE_FILE_MONITOR = g_file_monitor_get_type();
pub inline fn G_FILE_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_MONITOR, GFileMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_MONITOR, GFileMonitor);
}
pub inline fn G_FILE_MONITOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_MONITOR, GFileMonitorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_MONITOR, GFileMonitorClass);
}
pub inline fn G_IS_FILE_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_MONITOR);
}
pub inline fn G_IS_FILE_MONITOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_MONITOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_MONITOR);
}
pub inline fn G_FILE_MONITOR_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_MONITOR, GFileMonitorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_MONITOR, GFileMonitorClass);
}
pub const __G_FILENAME_COMPLETER_H__ = "";
pub const G_TYPE_FILENAME_COMPLETER = g_filename_completer_get_type();
pub inline fn G_FILENAME_COMPLETER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILENAME_COMPLETER, GFilenameCompleter)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILENAME_COMPLETER, GFilenameCompleter);
}
pub inline fn G_FILENAME_COMPLETER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILENAME_COMPLETER, GFilenameCompleterClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILENAME_COMPLETER, GFilenameCompleterClass);
}
pub inline fn G_FILENAME_COMPLETER_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILENAME_COMPLETER, GFilenameCompleterClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILENAME_COMPLETER, GFilenameCompleterClass);
}
pub inline fn G_IS_FILENAME_COMPLETER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILENAME_COMPLETER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILENAME_COMPLETER);
}
pub inline fn G_IS_FILENAME_COMPLETER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILENAME_COMPLETER)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILENAME_COMPLETER);
}
pub const __G_FILE_OUTPUT_STREAM_H__ = "";
pub const G_TYPE_FILE_OUTPUT_STREAM = g_file_output_stream_get_type();
pub inline fn G_FILE_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStream);
}
pub inline fn G_FILE_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStreamClass);
}
pub inline fn G_IS_FILE_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_FILE_OUTPUT_STREAM);
}
pub inline fn G_IS_FILE_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_FILE_OUTPUT_STREAM);
}
pub inline fn G_FILE_OUTPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStreamClass);
}
pub const __G_INET_ADDRESS_H__ = "";
pub const G_TYPE_INET_ADDRESS = g_inet_address_get_type();
pub inline fn G_INET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INET_ADDRESS, GInetAddress)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INET_ADDRESS, GInetAddress);
}
pub inline fn G_INET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INET_ADDRESS, GInetAddressClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INET_ADDRESS, GInetAddressClass);
}
pub inline fn G_IS_INET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INET_ADDRESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INET_ADDRESS);
}
pub inline fn G_IS_INET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INET_ADDRESS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INET_ADDRESS);
}
pub inline fn G_INET_ADDRESS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INET_ADDRESS, GInetAddressClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INET_ADDRESS, GInetAddressClass);
}
pub const __G_INET_ADDRESS_MASK_H__ = "";
pub const G_TYPE_INET_ADDRESS_MASK = g_inet_address_mask_get_type();
pub inline fn G_INET_ADDRESS_MASK(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INET_ADDRESS_MASK, GInetAddressMask)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INET_ADDRESS_MASK, GInetAddressMask);
}
pub inline fn G_INET_ADDRESS_MASK_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INET_ADDRESS_MASK, GInetAddressMaskClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INET_ADDRESS_MASK, GInetAddressMaskClass);
}
pub inline fn G_IS_INET_ADDRESS_MASK(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INET_ADDRESS_MASK)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INET_ADDRESS_MASK);
}
pub inline fn G_IS_INET_ADDRESS_MASK_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INET_ADDRESS_MASK)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INET_ADDRESS_MASK);
}
pub inline fn G_INET_ADDRESS_MASK_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INET_ADDRESS_MASK, GInetAddressMaskClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INET_ADDRESS_MASK, GInetAddressMaskClass);
}
pub const __G_INET_SOCKET_ADDRESS_H__ = "";
pub const __G_SOCKET_ADDRESS_H__ = "";
pub const G_TYPE_SOCKET_ADDRESS = g_socket_address_get_type();
pub inline fn G_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SOCKET_ADDRESS, GSocketAddress)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SOCKET_ADDRESS, GSocketAddress);
}
pub inline fn G_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SOCKET_ADDRESS, GSocketAddressClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SOCKET_ADDRESS, GSocketAddressClass);
}
pub inline fn G_IS_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SOCKET_ADDRESS);
}
pub inline fn G_IS_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SOCKET_ADDRESS);
}
pub inline fn G_SOCKET_ADDRESS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SOCKET_ADDRESS, GSocketAddressClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SOCKET_ADDRESS, GSocketAddressClass);
}
pub const G_TYPE_INET_SOCKET_ADDRESS = g_inet_socket_address_get_type();
pub inline fn G_INET_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddress)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddress);
}
pub inline fn G_INET_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddressClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddressClass);
}
pub inline fn G_IS_INET_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INET_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_INET_SOCKET_ADDRESS);
}
pub inline fn G_IS_INET_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INET_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_INET_SOCKET_ADDRESS);
}
pub inline fn G_INET_SOCKET_ADDRESS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddressClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddressClass);
}
pub const __GIO_ENUM_TYPES_H__ = "";
pub const G_TYPE_APP_INFO_CREATE_FLAGS = g_app_info_create_flags_get_type();
pub const G_TYPE_CONVERTER_FLAGS = g_converter_flags_get_type();
pub const G_TYPE_CONVERTER_RESULT = g_converter_result_get_type();
pub const G_TYPE_DATA_STREAM_BYTE_ORDER = g_data_stream_byte_order_get_type();
pub const G_TYPE_DATA_STREAM_NEWLINE_TYPE = g_data_stream_newline_type_get_type();
pub const G_TYPE_FILE_ATTRIBUTE_TYPE = g_file_attribute_type_get_type();
pub const G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS = g_file_attribute_info_flags_get_type();
pub const G_TYPE_FILE_ATTRIBUTE_STATUS = g_file_attribute_status_get_type();
pub const G_TYPE_FILE_QUERY_INFO_FLAGS = g_file_query_info_flags_get_type();
pub const G_TYPE_FILE_CREATE_FLAGS = g_file_create_flags_get_type();
pub const G_TYPE_FILE_MEASURE_FLAGS = g_file_measure_flags_get_type();
pub const G_TYPE_MOUNT_MOUNT_FLAGS = g_mount_mount_flags_get_type();
pub const G_TYPE_MOUNT_UNMOUNT_FLAGS = g_mount_unmount_flags_get_type();
pub const G_TYPE_DRIVE_START_FLAGS = g_drive_start_flags_get_type();
pub const G_TYPE_DRIVE_START_STOP_TYPE = g_drive_start_stop_type_get_type();
pub const G_TYPE_FILE_COPY_FLAGS = g_file_copy_flags_get_type();
pub const G_TYPE_FILE_MONITOR_FLAGS = g_file_monitor_flags_get_type();
pub const G_TYPE_FILE_TYPE = g_file_type_get_type();
pub const G_TYPE_FILESYSTEM_PREVIEW_TYPE = g_filesystem_preview_type_get_type();
pub const G_TYPE_FILE_MONITOR_EVENT = g_file_monitor_event_get_type();
pub const G_TYPE_IO_ERROR_ENUM = g_io_error_enum_get_type();
pub const G_TYPE_ASK_PASSWORD_FLAGS = g_ask_password_flags_get_type();
pub const G_TYPE_PASSWORD_SAVE = g_password_save_get_type();
pub const G_TYPE_MOUNT_OPERATION_RESULT = g_mount_operation_result_get_type();
pub const G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS = g_output_stream_splice_flags_get_type();
pub const G_TYPE_IO_STREAM_SPLICE_FLAGS = g_io_stream_splice_flags_get_type();
pub const G_TYPE_EMBLEM_ORIGIN = g_emblem_origin_get_type();
pub const G_TYPE_RESOLVER_ERROR = g_resolver_error_get_type();
pub const G_TYPE_RESOLVER_RECORD_TYPE = g_resolver_record_type_get_type();
pub const G_TYPE_RESOURCE_ERROR = g_resource_error_get_type();
pub const G_TYPE_RESOURCE_FLAGS = g_resource_flags_get_type();
pub const G_TYPE_RESOURCE_LOOKUP_FLAGS = g_resource_lookup_flags_get_type();
pub const G_TYPE_SOCKET_FAMILY = g_socket_family_get_type();
pub const G_TYPE_SOCKET_TYPE = g_socket_type_get_type();
pub const G_TYPE_SOCKET_MSG_FLAGS = g_socket_msg_flags_get_type();
pub const G_TYPE_SOCKET_PROTOCOL = g_socket_protocol_get_type();
pub const G_TYPE_ZLIB_COMPRESSOR_FORMAT = g_zlib_compressor_format_get_type();
pub const G_TYPE_UNIX_SOCKET_ADDRESS_TYPE = g_unix_socket_address_type_get_type();
pub const G_TYPE_BUS_TYPE = g_bus_type_get_type();
pub const G_TYPE_BUS_NAME_OWNER_FLAGS = g_bus_name_owner_flags_get_type();
pub const G_TYPE_BUS_NAME_WATCHER_FLAGS = g_bus_name_watcher_flags_get_type();
pub const G_TYPE_DBUS_PROXY_FLAGS = g_dbus_proxy_flags_get_type();
pub const G_TYPE_DBUS_ERROR = g_dbus_error_get_type();
pub const G_TYPE_DBUS_CONNECTION_FLAGS = g_dbus_connection_flags_get_type();
pub const G_TYPE_DBUS_CAPABILITY_FLAGS = g_dbus_capability_flags_get_type();
pub const G_TYPE_DBUS_CALL_FLAGS = g_dbus_call_flags_get_type();
pub const G_TYPE_DBUS_MESSAGE_TYPE = g_dbus_message_type_get_type();
pub const G_TYPE_DBUS_MESSAGE_FLAGS = g_dbus_message_flags_get_type();
pub const G_TYPE_DBUS_MESSAGE_HEADER_FIELD = g_dbus_message_header_field_get_type();
pub const G_TYPE_DBUS_PROPERTY_INFO_FLAGS = g_dbus_property_info_flags_get_type();
pub const G_TYPE_DBUS_SUBTREE_FLAGS = g_dbus_subtree_flags_get_type();
pub const G_TYPE_DBUS_SERVER_FLAGS = g_dbus_server_flags_get_type();
pub const G_TYPE_DBUS_SIGNAL_FLAGS = g_dbus_signal_flags_get_type();
pub const G_TYPE_DBUS_SEND_MESSAGE_FLAGS = g_dbus_send_message_flags_get_type();
pub const G_TYPE_CREDENTIALS_TYPE = g_credentials_type_get_type();
pub const G_TYPE_DBUS_MESSAGE_BYTE_ORDER = g_dbus_message_byte_order_get_type();
pub const G_TYPE_APPLICATION_FLAGS = g_application_flags_get_type();
pub const G_TYPE_TLS_ERROR = g_tls_error_get_type();
pub const G_TYPE_TLS_CERTIFICATE_FLAGS = g_tls_certificate_flags_get_type();
pub const G_TYPE_TLS_AUTHENTICATION_MODE = g_tls_authentication_mode_get_type();
pub const G_TYPE_TLS_CHANNEL_BINDING_TYPE = g_tls_channel_binding_type_get_type();
pub const G_TYPE_TLS_CHANNEL_BINDING_ERROR = g_tls_channel_binding_error_get_type();
pub const G_TYPE_TLS_REHANDSHAKE_MODE = g_tls_rehandshake_mode_get_type();
pub const G_TYPE_TLS_PASSWORD_FLAGS = g_tls_password_flags_get_type();
pub const G_TYPE_TLS_INTERACTION_RESULT = g_tls_interaction_result_get_type();
pub const G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS = g_dbus_interface_skeleton_flags_get_type();
pub const G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS = g_dbus_object_manager_client_flags_get_type();
pub const G_TYPE_TLS_DATABASE_VERIFY_FLAGS = g_tls_database_verify_flags_get_type();
pub const G_TYPE_TLS_DATABASE_LOOKUP_FLAGS = g_tls_database_lookup_flags_get_type();
pub const G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS = g_tls_certificate_request_flags_get_type();
pub const G_TYPE_TLS_PROTOCOL_VERSION = g_tls_protocol_version_get_type();
pub const G_TYPE_IO_MODULE_SCOPE_FLAGS = g_io_module_scope_flags_get_type();
pub const G_TYPE_SOCKET_CLIENT_EVENT = g_socket_client_event_get_type();
pub const G_TYPE_SOCKET_LISTENER_EVENT = g_socket_listener_event_get_type();
pub const G_TYPE_TEST_DBUS_FLAGS = g_test_dbus_flags_get_type();
pub const G_TYPE_SUBPROCESS_FLAGS = g_subprocess_flags_get_type();
pub const G_TYPE_NOTIFICATION_PRIORITY = g_notification_priority_get_type();
pub const G_TYPE_NETWORK_CONNECTIVITY = g_network_connectivity_get_type();
pub const G_TYPE_POLLABLE_RETURN = g_pollable_return_get_type();
pub const G_TYPE_MEMORY_MONITOR_WARNING_LEVEL = g_memory_monitor_warning_level_get_type();
pub const G_TYPE_RESOLVER_NAME_LOOKUP_FLAGS = g_resolver_name_lookup_flags_get_type();
pub const G_TYPE_SETTINGS_BIND_FLAGS = g_settings_bind_flags_get_type();
pub const __G_IO_MODULE_H__ = "";
pub const __GMODULE_H__ = "";
pub const _GMODULE_IMPORT = "";
pub const _GMODULE_API = _GMODULE_IMPORT;
pub const GMODULE_VAR = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_IN_ALL = _GMODULE_EXTERN;
pub const GMODULE_DEPRECATED = G_DEPRECATED ++ _GMODULE_EXTERN;
pub inline fn GMODULE_UNAVAILABLE_STATIC_INLINE(maj: anytype, min: anytype) @TypeOf(G_UNAVAILABLE(maj, min)) {
    return G_UNAVAILABLE(maj, min);
}
pub const GMODULE_DEPRECATED_IN_2_26 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_26_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_26 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_26 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_26 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_26_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_26 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_26 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_26 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_26 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_26 = "";
pub const GMODULE_DEPRECATED_IN_2_28 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_28_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_28 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_28 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_28 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_28_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_28 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_28 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_28 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_28 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_28 = "";
pub const GMODULE_DEPRECATED_IN_2_30 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_30_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_30 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_30 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_30 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_30_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_30 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_30 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_30 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_30 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_30 = "";
pub const GMODULE_DEPRECATED_IN_2_32 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_32_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_32 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_32 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_32 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_32_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_32 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_32 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_32 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_32 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_32 = "";
pub const GMODULE_DEPRECATED_IN_2_34 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_34_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_34 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_34 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_34 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_34_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_34 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_34 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_34 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_34 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_34 = "";
pub const GMODULE_DEPRECATED_IN_2_36 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_36_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_36 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_36 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_36 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_36_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_36 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_36 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_36 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_36 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_36 = "";
pub const GMODULE_DEPRECATED_IN_2_38 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_38_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_38 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_38 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_38 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_38_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_38 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_38 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_38 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_38 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_38 = "";
pub const GMODULE_DEPRECATED_IN_2_40 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_40_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_40 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_40 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_40 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_40_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_40 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_40 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_40 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_40 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_40 = "";
pub const GMODULE_DEPRECATED_IN_2_42 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_42_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_42 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_42 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_42 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_42_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_42 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_42 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_42 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_42 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_42 = "";
pub const GMODULE_DEPRECATED_IN_2_44 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_44_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_44 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_44 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_44 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_44_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_44 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_44 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_44 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_44 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_44 = "";
pub const GMODULE_DEPRECATED_IN_2_46 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_46_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_46 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_46 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_46 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_46_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_46 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_46 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_46 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_46 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_46 = "";
pub const GMODULE_DEPRECATED_IN_2_48 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_48_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_48 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_48 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_48 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_48_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_48 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_48 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_48 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_48 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_48 = "";
pub const GMODULE_DEPRECATED_IN_2_50 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_50_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_50 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_50 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_50 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_50_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_50 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_50 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_50 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_50 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_50 = "";
pub const GMODULE_DEPRECATED_IN_2_52 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_52_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_52 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_52 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_52 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_52_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_52 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_52 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_52 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_52 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_52 = "";
pub const GMODULE_DEPRECATED_IN_2_54 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_54_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_54 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_54 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_54 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_54_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_54 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_54 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_54 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_54 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_54 = "";
pub const GMODULE_DEPRECATED_IN_2_56 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_56_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_56 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_56 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_56 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_56_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_56 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_56 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_56 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_56 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_56 = "";
pub const GMODULE_DEPRECATED_IN_2_58 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_58_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_58 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_58 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_58 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_58_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_58 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_58 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_58 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_58 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_58 = "";
pub const GMODULE_DEPRECATED_IN_2_60 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_60_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_60 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_60 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_60 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_60_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_60 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_60 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_60 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_60 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_60 = "";
pub const GMODULE_DEPRECATED_IN_2_62 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_62_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_62 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_62 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_62 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_62_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_62 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_62 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_62 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_62 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_62 = "";
pub const GMODULE_DEPRECATED_IN_2_64 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_64_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_64 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_64 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_64 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_64_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_64 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_64 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_64 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_64 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_64 = "";
pub const GMODULE_DEPRECATED_IN_2_66 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_66_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_66 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_66 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_66 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_66_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_66 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_66 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_66 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_66 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_66 = "";
pub const GMODULE_DEPRECATED_IN_2_68 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_68_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_68 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_68 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_68 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_68_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_68 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_68 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_68 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_68 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_68 = "";
pub const GMODULE_DEPRECATED_IN_2_70 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_70_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_70 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_70 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_70 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_70_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_70 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_70 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_70 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_70 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_70 = "";
pub const GMODULE_DEPRECATED_IN_2_72 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_72_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_72 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_72 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_72 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_72_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_72 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_72 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_72 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_72 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_72 = "";
pub const GMODULE_DEPRECATED_IN_2_74 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_74_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_74 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_74 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_74 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_74_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_74 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_74 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_74 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_74 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_74 = "";
pub const GMODULE_DEPRECATED_IN_2_76 = GMODULE_DEPRECATED;
pub inline fn GMODULE_DEPRECATED_IN_2_76_FOR(f: anytype) @TypeOf(GMODULE_DEPRECATED_FOR(f)) {
    return GMODULE_DEPRECATED_FOR(f);
}
pub const GMODULE_DEPRECATED_MACRO_IN_2_76 = GLIB_DEPRECATED_MACRO;
pub inline fn GMODULE_DEPRECATED_MACRO_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_MACRO_FOR(f)) {
    return GLIB_DEPRECATED_MACRO_FOR(f);
}
pub const GMODULE_DEPRECATED_ENUMERATOR_IN_2_76 = GLIB_DEPRECATED_ENUMERATOR;
pub inline fn GMODULE_DEPRECATED_ENUMERATOR_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_ENUMERATOR_FOR(f)) {
    return GLIB_DEPRECATED_ENUMERATOR_FOR(f);
}
pub const GMODULE_DEPRECATED_TYPE_IN_2_76 = GLIB_DEPRECATED_TYPE;
pub inline fn GMODULE_DEPRECATED_TYPE_IN_2_76_FOR(f: anytype) @TypeOf(GLIB_DEPRECATED_TYPE_FOR(f)) {
    return GLIB_DEPRECATED_TYPE_FOR(f);
}
pub const GMODULE_AVAILABLE_IN_2_76 = _GMODULE_EXTERN;
pub const GMODULE_AVAILABLE_STATIC_INLINE_IN_2_76 = "";
pub const GMODULE_AVAILABLE_MACRO_IN_2_76 = "";
pub const GMODULE_AVAILABLE_ENUMERATOR_IN_2_76 = "";
pub const GMODULE_AVAILABLE_TYPE_IN_2_76 = "";
pub const G_IO_TYPE_MODULE = g_io_module_get_type();
pub inline fn G_IO_MODULE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_IO_TYPE_MODULE, GIOModule)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_IO_TYPE_MODULE, GIOModule);
}
pub inline fn G_IO_MODULE_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_IO_TYPE_MODULE, GIOModuleClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_IO_TYPE_MODULE, GIOModuleClass);
}
pub inline fn G_IO_IS_MODULE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_IO_TYPE_MODULE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_IO_TYPE_MODULE);
}
pub inline fn G_IO_IS_MODULE_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_IO_TYPE_MODULE)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_IO_TYPE_MODULE);
}
pub inline fn G_IO_MODULE_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_IO_TYPE_MODULE, GIOModuleClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_IO_TYPE_MODULE, GIOModuleClass);
}
pub const __G_IO_SCHEDULER_H__ = "";
pub const __G_LIST_MODEL_H__ = "";
pub const G_TYPE_LIST_MODEL = g_list_model_get_type();
pub const __G_LIST_STORE_H__ = "";
pub const G_TYPE_LIST_STORE = g_list_store_get_type();
pub const __G_LOADABLE_ICON_H__ = "";
pub const G_TYPE_LOADABLE_ICON = g_loadable_icon_get_type();
pub inline fn G_LOADABLE_ICON(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_LOADABLE_ICON, GLoadableIcon)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_LOADABLE_ICON, GLoadableIcon);
}
pub inline fn G_IS_LOADABLE_ICON(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_LOADABLE_ICON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_LOADABLE_ICON);
}
pub inline fn G_LOADABLE_ICON_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_LOADABLE_ICON, GLoadableIconIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_LOADABLE_ICON, GLoadableIconIface);
}
pub const __G_MEMORY_INPUT_STREAM_H__ = "";
pub const G_TYPE_MEMORY_INPUT_STREAM = g_memory_input_stream_get_type();
pub inline fn G_MEMORY_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStream);
}
pub inline fn G_MEMORY_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStreamClass);
}
pub inline fn G_IS_MEMORY_INPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MEMORY_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MEMORY_INPUT_STREAM);
}
pub inline fn G_IS_MEMORY_INPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_MEMORY_INPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_MEMORY_INPUT_STREAM);
}
pub inline fn G_MEMORY_INPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStreamClass);
}
pub const __G_MEMORY_MONITOR_H__ = "";
pub const G_MEMORY_MONITOR_EXTENSION_POINT_NAME = "gio-memory-monitor";
pub const G_TYPE_MEMORY_MONITOR = g_memory_monitor_get_type();
pub inline fn G_MEMORY_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MEMORY_MONITOR, GMemoryMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MEMORY_MONITOR, GMemoryMonitor);
}
pub inline fn G_IS_MEMORY_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MEMORY_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MEMORY_MONITOR);
}
pub inline fn G_MEMORY_MONITOR_GET_INTERFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_MEMORY_MONITOR, GMemoryMonitorInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_MEMORY_MONITOR, GMemoryMonitorInterface);
}
pub const __G_MEMORY_OUTPUT_STREAM_H__ = "";
pub const G_TYPE_MEMORY_OUTPUT_STREAM = g_memory_output_stream_get_type();
pub inline fn G_MEMORY_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStream);
}
pub inline fn G_MEMORY_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStreamClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStreamClass);
}
pub inline fn G_IS_MEMORY_OUTPUT_STREAM(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MEMORY_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MEMORY_OUTPUT_STREAM);
}
pub inline fn G_IS_MEMORY_OUTPUT_STREAM_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_MEMORY_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_MEMORY_OUTPUT_STREAM);
}
pub inline fn G_MEMORY_OUTPUT_STREAM_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStreamClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStreamClass);
}
pub const __G_MENU_H__ = "";
pub const __G_MENU_MODEL_H__ = "";
pub const G_MENU_ATTRIBUTE_ACTION = "action";
pub const G_MENU_ATTRIBUTE_ACTION_NAMESPACE = "action-namespace";
pub const G_MENU_ATTRIBUTE_TARGET = "target";
pub const G_MENU_ATTRIBUTE_LABEL = "label";
pub const G_MENU_ATTRIBUTE_ICON = "icon";
pub const G_MENU_LINK_SUBMENU = "submenu";
pub const G_MENU_LINK_SECTION = "section";
pub const G_TYPE_MENU_MODEL = g_menu_model_get_type();
pub inline fn G_MENU_MODEL(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_MODEL, GMenuModel)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_MODEL, GMenuModel);
}
pub inline fn G_MENU_MODEL_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_MENU_MODEL, GMenuModelClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_MENU_MODEL, GMenuModelClass);
}
pub inline fn G_IS_MENU_MODEL(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_MODEL)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_MODEL);
}
pub inline fn G_IS_MENU_MODEL_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_MENU_MODEL)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_MENU_MODEL);
}
pub inline fn G_MENU_MODEL_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_MENU_MODEL, GMenuModelClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_MENU_MODEL, GMenuModelClass);
}
pub const G_TYPE_MENU_ATTRIBUTE_ITER = g_menu_attribute_iter_get_type();
pub inline fn G_MENU_ATTRIBUTE_ITER(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIter)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIter);
}
pub inline fn G_MENU_ATTRIBUTE_ITER_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIterClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIterClass);
}
pub inline fn G_IS_MENU_ATTRIBUTE_ITER(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_ATTRIBUTE_ITER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_ATTRIBUTE_ITER);
}
pub inline fn G_IS_MENU_ATTRIBUTE_ITER_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_MENU_ATTRIBUTE_ITER)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_MENU_ATTRIBUTE_ITER);
}
pub inline fn G_MENU_ATTRIBUTE_ITER_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIterClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIterClass);
}
pub const G_TYPE_MENU_LINK_ITER = g_menu_link_iter_get_type();
pub inline fn G_MENU_LINK_ITER(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_LINK_ITER, GMenuLinkIter)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_LINK_ITER, GMenuLinkIter);
}
pub inline fn G_MENU_LINK_ITER_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_MENU_LINK_ITER, GMenuLinkIterClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_MENU_LINK_ITER, GMenuLinkIterClass);
}
pub inline fn G_IS_MENU_LINK_ITER(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_LINK_ITER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_LINK_ITER);
}
pub inline fn G_IS_MENU_LINK_ITER_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_MENU_LINK_ITER)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_MENU_LINK_ITER);
}
pub inline fn G_MENU_LINK_ITER_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_MENU_LINK_ITER, GMenuLinkIterClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_MENU_LINK_ITER, GMenuLinkIterClass);
}
pub const G_TYPE_MENU = g_menu_get_type();
pub inline fn G_MENU(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU, GMenu)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU, GMenu);
}
pub inline fn G_IS_MENU(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU);
}
pub const G_TYPE_MENU_ITEM = g_menu_item_get_type();
pub inline fn G_MENU_ITEM(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_ITEM, GMenuItem)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_MENU_ITEM, GMenuItem);
}
pub inline fn G_IS_MENU_ITEM(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_ITEM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_MENU_ITEM);
}
pub const __G_MENU_EXPORTER_H__ = "";
pub const __G_MOUNT_H__ = "";
pub const G_TYPE_MOUNT = g_mount_get_type();
pub inline fn G_MOUNT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_MOUNT, GMount)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_MOUNT, GMount);
}
pub inline fn G_IS_MOUNT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_MOUNT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_MOUNT);
}
pub inline fn G_MOUNT_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_MOUNT, GMountIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_MOUNT, GMountIface);
}
pub const __G_MOUNT_OPERATION_H__ = "";
pub const G_TYPE_MOUNT_OPERATION = g_mount_operation_get_type();
pub inline fn G_MOUNT_OPERATION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MOUNT_OPERATION, GMountOperation)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_MOUNT_OPERATION, GMountOperation);
}
pub inline fn G_MOUNT_OPERATION_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_MOUNT_OPERATION, GMountOperationClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_MOUNT_OPERATION, GMountOperationClass);
}
pub inline fn G_IS_MOUNT_OPERATION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MOUNT_OPERATION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_MOUNT_OPERATION);
}
pub inline fn G_IS_MOUNT_OPERATION_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_MOUNT_OPERATION)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_MOUNT_OPERATION);
}
pub inline fn G_MOUNT_OPERATION_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_MOUNT_OPERATION, GMountOperationClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_MOUNT_OPERATION, GMountOperationClass);
}
pub const __G_NATIVE_SOCKET_ADDRESS_H__ = "";
pub const G_TYPE_NATIVE_SOCKET_ADDRESS = g_native_socket_address_get_type();
pub inline fn G_NATIVE_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddress)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddress);
}
pub inline fn G_NATIVE_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddressClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddressClass);
}
pub inline fn G_IS_NATIVE_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NATIVE_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NATIVE_SOCKET_ADDRESS);
}
pub inline fn G_IS_NATIVE_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NATIVE_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NATIVE_SOCKET_ADDRESS);
}
pub inline fn G_NATIVE_SOCKET_ADDRESS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddressClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddressClass);
}
pub const __G_NATIVE_VOLUME_MONITOR_H__ = "";
pub const __G_VOLUME_MONITOR_H__ = "";
pub const G_TYPE_VOLUME_MONITOR = g_volume_monitor_get_type();
pub inline fn G_VOLUME_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_VOLUME_MONITOR, GVolumeMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_VOLUME_MONITOR, GVolumeMonitor);
}
pub inline fn G_VOLUME_MONITOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_VOLUME_MONITOR, GVolumeMonitorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_VOLUME_MONITOR, GVolumeMonitorClass);
}
pub inline fn G_VOLUME_MONITOR_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_VOLUME_MONITOR, GVolumeMonitorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_VOLUME_MONITOR, GVolumeMonitorClass);
}
pub inline fn G_IS_VOLUME_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_VOLUME_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_VOLUME_MONITOR);
}
pub inline fn G_IS_VOLUME_MONITOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_VOLUME_MONITOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_VOLUME_MONITOR);
}
pub const G_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor";
pub const G_TYPE_NATIVE_VOLUME_MONITOR = g_native_volume_monitor_get_type();
pub inline fn G_NATIVE_VOLUME_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NATIVE_VOLUME_MONITOR, GNativeVolumeMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NATIVE_VOLUME_MONITOR, GNativeVolumeMonitor);
}
pub inline fn G_NATIVE_VOLUME_MONITOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NATIVE_VOLUME_MONITOR, GNativeVolumeMonitorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NATIVE_VOLUME_MONITOR, GNativeVolumeMonitorClass);
}
pub inline fn G_IS_NATIVE_VOLUME_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NATIVE_VOLUME_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NATIVE_VOLUME_MONITOR);
}
pub inline fn G_IS_NATIVE_VOLUME_MONITOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NATIVE_VOLUME_MONITOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NATIVE_VOLUME_MONITOR);
}
pub const G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor";
pub const __G_NETWORK_ADDRESS_H__ = "";
pub const G_TYPE_NETWORK_ADDRESS = g_network_address_get_type();
pub inline fn G_NETWORK_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NETWORK_ADDRESS, GNetworkAddress)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NETWORK_ADDRESS, GNetworkAddress);
}
pub inline fn G_NETWORK_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NETWORK_ADDRESS, GNetworkAddressClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NETWORK_ADDRESS, GNetworkAddressClass);
}
pub inline fn G_IS_NETWORK_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NETWORK_ADDRESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NETWORK_ADDRESS);
}
pub inline fn G_IS_NETWORK_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NETWORK_ADDRESS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NETWORK_ADDRESS);
}
pub inline fn G_NETWORK_ADDRESS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_NETWORK_ADDRESS, GNetworkAddressClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_NETWORK_ADDRESS, GNetworkAddressClass);
}
pub const __G_NETWORK_MONITOR_H__ = "";
pub const G_NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor";
pub const G_TYPE_NETWORK_MONITOR = g_network_monitor_get_type();
pub inline fn G_NETWORK_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NETWORK_MONITOR, GNetworkMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NETWORK_MONITOR, GNetworkMonitor);
}
pub inline fn G_IS_NETWORK_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NETWORK_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NETWORK_MONITOR);
}
pub inline fn G_NETWORK_MONITOR_GET_INTERFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_NETWORK_MONITOR, GNetworkMonitorInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_NETWORK_MONITOR, GNetworkMonitorInterface);
}
pub const __G_NETWORK_SERVICE_H__ = "";
pub const G_TYPE_NETWORK_SERVICE = g_network_service_get_type();
pub inline fn G_NETWORK_SERVICE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NETWORK_SERVICE, GNetworkService)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NETWORK_SERVICE, GNetworkService);
}
pub inline fn G_NETWORK_SERVICE_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NETWORK_SERVICE, GNetworkServiceClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_NETWORK_SERVICE, GNetworkServiceClass);
}
pub inline fn G_IS_NETWORK_SERVICE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NETWORK_SERVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NETWORK_SERVICE);
}
pub inline fn G_IS_NETWORK_SERVICE_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NETWORK_SERVICE)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_NETWORK_SERVICE);
}
pub inline fn G_NETWORK_SERVICE_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_NETWORK_SERVICE, GNetworkServiceClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_NETWORK_SERVICE, GNetworkServiceClass);
}
pub const __G_NOTIFICATION_H__ = "";
pub const G_TYPE_NOTIFICATION = g_notification_get_type();
pub inline fn G_NOTIFICATION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NOTIFICATION, GNotification)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_NOTIFICATION, GNotification);
}
pub inline fn G_IS_NOTIFICATION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NOTIFICATION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_NOTIFICATION);
}
pub const __G_PERMISSION_H__ = "";
pub const G_TYPE_PERMISSION = g_permission_get_type();
pub inline fn G_PERMISSION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_PERMISSION, GPermission)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_PERMISSION, GPermission);
}
pub inline fn G_PERMISSION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_PERMISSION, GPermissionClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_PERMISSION, GPermissionClass);
}
pub inline fn G_IS_PERMISSION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_PERMISSION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_PERMISSION);
}
pub inline fn G_IS_PERMISSION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_PERMISSION)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_PERMISSION);
}
pub inline fn G_PERMISSION_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_PERMISSION, GPermissionClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_PERMISSION, GPermissionClass);
}
pub const __G_POLLABLE_INPUT_STREAM_H__ = "";
pub const G_TYPE_POLLABLE_INPUT_STREAM = g_pollable_input_stream_get_type();
pub inline fn G_POLLABLE_INPUT_STREAM(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_POLLABLE_INPUT_STREAM, GPollableInputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_POLLABLE_INPUT_STREAM, GPollableInputStream);
}
pub inline fn G_IS_POLLABLE_INPUT_STREAM(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_POLLABLE_INPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_POLLABLE_INPUT_STREAM);
}
pub inline fn G_POLLABLE_INPUT_STREAM_GET_INTERFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_POLLABLE_INPUT_STREAM, GPollableInputStreamInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_POLLABLE_INPUT_STREAM, GPollableInputStreamInterface);
}
pub const __G_POLLABLE_OUTPUT_STREAM_H__ = "";
pub const G_TYPE_POLLABLE_OUTPUT_STREAM = g_pollable_output_stream_get_type();
pub inline fn G_POLLABLE_OUTPUT_STREAM(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_POLLABLE_OUTPUT_STREAM, GPollableOutputStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_POLLABLE_OUTPUT_STREAM, GPollableOutputStream);
}
pub inline fn G_IS_POLLABLE_OUTPUT_STREAM(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_POLLABLE_OUTPUT_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_POLLABLE_OUTPUT_STREAM);
}
pub inline fn G_POLLABLE_OUTPUT_STREAM_GET_INTERFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_POLLABLE_OUTPUT_STREAM, GPollableOutputStreamInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_POLLABLE_OUTPUT_STREAM, GPollableOutputStreamInterface);
}
pub const __G_POLLABLE_UTILS_H__ = "";
pub const __G_POWER_PROFILE_MONITOR_H__ = "";
pub const G_POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME = "gio-power-profile-monitor";
pub const G_TYPE_POWER_PROFILE_MONITOR = g_power_profile_monitor_get_type();
pub inline fn G_POWER_PROFILE_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_POWER_PROFILE_MONITOR, GPowerProfileMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_POWER_PROFILE_MONITOR, GPowerProfileMonitor);
}
pub inline fn G_IS_POWER_PROFILE_MONITOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_POWER_PROFILE_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_POWER_PROFILE_MONITOR);
}
pub inline fn G_POWER_PROFILE_MONITOR_GET_INTERFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_POWER_PROFILE_MONITOR, GPowerProfileMonitorInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_POWER_PROFILE_MONITOR, GPowerProfileMonitorInterface);
}
pub const __G_PROPERTY_ACTION_H__ = "";
pub const G_TYPE_PROPERTY_ACTION = g_property_action_get_type();
pub inline fn G_PROPERTY_ACTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_PROPERTY_ACTION, GPropertyAction)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_PROPERTY_ACTION, GPropertyAction);
}
pub inline fn G_IS_PROPERTY_ACTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_PROPERTY_ACTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_PROPERTY_ACTION);
}
pub const __G_PROXY_H__ = "";
pub const G_TYPE_PROXY = g_proxy_get_type();
pub inline fn G_PROXY(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY, GProxy)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY, GProxy);
}
pub inline fn G_IS_PROXY(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY);
}
pub inline fn G_PROXY_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_PROXY, GProxyInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_PROXY, GProxyInterface);
}
pub const G_PROXY_EXTENSION_POINT_NAME = "gio-proxy";
pub const __G_PROXY_ADDRESS_H__ = "";
pub const G_TYPE_PROXY_ADDRESS = g_proxy_address_get_type();
pub inline fn G_PROXY_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY_ADDRESS, GProxyAddress)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY_ADDRESS, GProxyAddress);
}
pub inline fn G_PROXY_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_PROXY_ADDRESS, GProxyAddressClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_PROXY_ADDRESS, GProxyAddressClass);
}
pub inline fn G_IS_PROXY_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY_ADDRESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY_ADDRESS);
}
pub inline fn G_IS_PROXY_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_PROXY_ADDRESS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_PROXY_ADDRESS);
}
pub inline fn G_PROXY_ADDRESS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_PROXY_ADDRESS, GProxyAddressClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_PROXY_ADDRESS, GProxyAddressClass);
}
pub const __G_PROXY_ADDRESS_ENUMERATOR_H__ = "";
pub const __G_SOCKET_ADDRESS_ENUMERATOR_H__ = "";
pub const G_TYPE_SOCKET_ADDRESS_ENUMERATOR = g_socket_address_enumerator_get_type();
pub inline fn G_SOCKET_ADDRESS_ENUMERATOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumerator)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumerator);
}
pub inline fn G_SOCKET_ADDRESS_ENUMERATOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumeratorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumeratorClass);
}
pub inline fn G_IS_SOCKET_ADDRESS_ENUMERATOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SOCKET_ADDRESS_ENUMERATOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SOCKET_ADDRESS_ENUMERATOR);
}
pub inline fn G_IS_SOCKET_ADDRESS_ENUMERATOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SOCKET_ADDRESS_ENUMERATOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SOCKET_ADDRESS_ENUMERATOR);
}
pub inline fn G_SOCKET_ADDRESS_ENUMERATOR_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumeratorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumeratorClass);
}
pub const G_TYPE_PROXY_ADDRESS_ENUMERATOR = g_proxy_address_enumerator_get_type();
pub inline fn G_PROXY_ADDRESS_ENUMERATOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumerator)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumerator);
}
pub inline fn G_PROXY_ADDRESS_ENUMERATOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumeratorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumeratorClass);
}
pub inline fn G_IS_PROXY_ADDRESS_ENUMERATOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY_ADDRESS_ENUMERATOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY_ADDRESS_ENUMERATOR);
}
pub inline fn G_IS_PROXY_ADDRESS_ENUMERATOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_PROXY_ADDRESS_ENUMERATOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_PROXY_ADDRESS_ENUMERATOR);
}
pub inline fn G_PROXY_ADDRESS_ENUMERATOR_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumeratorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumeratorClass);
}
pub const __G_PROXY_RESOLVER_H__ = "";
pub const G_TYPE_PROXY_RESOLVER = g_proxy_resolver_get_type();
pub inline fn G_PROXY_RESOLVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY_RESOLVER, GProxyResolver)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_PROXY_RESOLVER, GProxyResolver);
}
pub inline fn G_IS_PROXY_RESOLVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY_RESOLVER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_PROXY_RESOLVER);
}
pub inline fn G_PROXY_RESOLVER_GET_IFACE(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_PROXY_RESOLVER, GProxyResolverInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(o, G_TYPE_PROXY_RESOLVER, GProxyResolverInterface);
}
pub const G_PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver";
pub const __G_REMOTE_ACTION_GROUP_H__ = "";
pub const G_TYPE_REMOTE_ACTION_GROUP = g_remote_action_group_get_type();
pub inline fn G_REMOTE_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_REMOTE_ACTION_GROUP, GRemoteActionGroup)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_REMOTE_ACTION_GROUP, GRemoteActionGroup);
}
pub inline fn G_IS_REMOTE_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_REMOTE_ACTION_GROUP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_REMOTE_ACTION_GROUP);
}
pub inline fn G_REMOTE_ACTION_GROUP_GET_IFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_REMOTE_ACTION_GROUP, GRemoteActionGroupInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_REMOTE_ACTION_GROUP, GRemoteActionGroupInterface);
}
pub const __G_RESOLVER_H__ = "";
pub const G_TYPE_RESOLVER = g_resolver_get_type();
pub inline fn G_RESOLVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_RESOLVER, GResolver)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_RESOLVER, GResolver);
}
pub inline fn G_RESOLVER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_RESOLVER, GResolverClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_RESOLVER, GResolverClass);
}
pub inline fn G_IS_RESOLVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_RESOLVER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_RESOLVER);
}
pub inline fn G_IS_RESOLVER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_RESOLVER)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_RESOLVER);
}
pub inline fn G_RESOLVER_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_RESOLVER, GResolverClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_RESOLVER, GResolverClass);
}
pub const G_RESOLVER_ERROR = g_resolver_error_quark();
pub const __G_RESOURCE_H__ = "";
pub const G_TYPE_RESOURCE = g_resource_get_type();
pub const G_RESOURCE_ERROR = g_resource_error_quark();
pub const __G_SEEKABLE_H__ = "";
pub const G_TYPE_SEEKABLE = g_seekable_get_type();
pub inline fn G_SEEKABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SEEKABLE, GSeekable)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SEEKABLE, GSeekable);
}
pub inline fn G_IS_SEEKABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SEEKABLE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SEEKABLE);
}
pub inline fn G_SEEKABLE_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_SEEKABLE, GSeekableIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_SEEKABLE, GSeekableIface);
}
pub const __G_SETTINGS_H__ = "";
pub const __G_SETTINGS_SCHEMA_H__ = "";
pub const G_TYPE_SETTINGS_SCHEMA_SOURCE = g_settings_schema_source_get_type();
pub const G_TYPE_SETTINGS_SCHEMA = g_settings_schema_get_type();
pub const G_TYPE_SETTINGS_SCHEMA_KEY = g_settings_schema_key_get_type();
pub const G_TYPE_SETTINGS = g_settings_get_type();
pub inline fn G_SETTINGS(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SETTINGS, GSettings)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SETTINGS, GSettings);
}
pub inline fn G_SETTINGS_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SETTINGS, GSettingsClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SETTINGS, GSettingsClass);
}
pub inline fn G_IS_SETTINGS(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SETTINGS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SETTINGS);
}
pub inline fn G_IS_SETTINGS_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SETTINGS)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SETTINGS);
}
pub inline fn G_SETTINGS_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SETTINGS, GSettingsClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SETTINGS, GSettingsClass);
}
pub const __G_SIMPLE_ACTION_H__ = "";
pub const G_TYPE_SIMPLE_ACTION = g_simple_action_get_type();
pub inline fn G_SIMPLE_ACTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SIMPLE_ACTION, GSimpleAction)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SIMPLE_ACTION, GSimpleAction);
}
pub inline fn G_IS_SIMPLE_ACTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SIMPLE_ACTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SIMPLE_ACTION);
}
pub const __G_SIMPLE_ACTION_GROUP_H__ = "";
pub const G_TYPE_SIMPLE_ACTION_GROUP = g_simple_action_group_get_type();
pub inline fn G_SIMPLE_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroup)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroup);
}
pub inline fn G_SIMPLE_ACTION_GROUP_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass);
}
pub inline fn G_IS_SIMPLE_ACTION_GROUP(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SIMPLE_ACTION_GROUP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SIMPLE_ACTION_GROUP);
}
pub inline fn G_IS_SIMPLE_ACTION_GROUP_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SIMPLE_ACTION_GROUP)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SIMPLE_ACTION_GROUP);
}
pub inline fn G_SIMPLE_ACTION_GROUP_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass);
}
pub const __G_SIMPLE_ASYNC_RESULT_H__ = "";
pub const G_TYPE_SIMPLE_ASYNC_RESULT = g_simple_async_result_get_type();
pub inline fn G_SIMPLE_ASYNC_RESULT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResult)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResult);
}
pub inline fn G_SIMPLE_ASYNC_RESULT_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResultClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResultClass);
}
pub inline fn G_IS_SIMPLE_ASYNC_RESULT(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SIMPLE_ASYNC_RESULT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SIMPLE_ASYNC_RESULT);
}
pub inline fn G_IS_SIMPLE_ASYNC_RESULT_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SIMPLE_ASYNC_RESULT)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SIMPLE_ASYNC_RESULT);
}
pub inline fn G_SIMPLE_ASYNC_RESULT_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResultClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResultClass);
}
pub const __G_SIMPLE_IO_STREAM_H__ = "";
pub const G_TYPE_SIMPLE_IO_STREAM = g_simple_io_stream_get_type();
pub inline fn G_SIMPLE_IO_STREAM(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SIMPLE_IO_STREAM, GSimpleIOStream)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SIMPLE_IO_STREAM, GSimpleIOStream);
}
pub inline fn G_IS_SIMPLE_IO_STREAM(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SIMPLE_IO_STREAM)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SIMPLE_IO_STREAM);
}
pub const __G_SIMPLE_PERMISSION_H__ = "";
pub const G_TYPE_SIMPLE_PERMISSION = g_simple_permission_get_type();
pub inline fn G_SIMPLE_PERMISSION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SIMPLE_PERMISSION, GSimplePermission)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SIMPLE_PERMISSION, GSimplePermission);
}
pub inline fn G_IS_SIMPLE_PERMISSION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SIMPLE_PERMISSION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SIMPLE_PERMISSION);
}
pub const __G_SIMPLE_PROXY_RESOLVER_H__ = "";
pub const G_TYPE_SIMPLE_PROXY_RESOLVER = g_simple_proxy_resolver_get_type();
pub inline fn G_SIMPLE_PROXY_RESOLVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolver)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolver);
}
pub inline fn G_SIMPLE_PROXY_RESOLVER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolverClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolverClass);
}
pub inline fn G_IS_SIMPLE_PROXY_RESOLVER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SIMPLE_PROXY_RESOLVER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SIMPLE_PROXY_RESOLVER);
}
pub inline fn G_IS_SIMPLE_PROXY_RESOLVER_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SIMPLE_PROXY_RESOLVER)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_SIMPLE_PROXY_RESOLVER);
}
pub inline fn G_SIMPLE_PROXY_RESOLVER_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolverClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolverClass);
}
pub const __G_SOCKET_H__ = "";
pub const G_TYPE_SOCKET = g_socket_get_type();
pub inline fn G_SOCKET(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET, GSocket)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET, GSocket);
}
pub inline fn G_SOCKET_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET, GSocketClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET, GSocketClass);
}
pub inline fn G_IS_SOCKET(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET);
}
pub inline fn G_IS_SOCKET_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET);
}
pub inline fn G_SOCKET_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET, GSocketClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET, GSocketClass);
}
pub const __G_SOCKET_CLIENT_H__ = "";
pub const G_TYPE_SOCKET_CLIENT = g_socket_client_get_type();
pub inline fn G_SOCKET_CLIENT(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_CLIENT, GSocketClient)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_CLIENT, GSocketClient);
}
pub inline fn G_SOCKET_CLIENT_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_CLIENT, GSocketClientClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_CLIENT, GSocketClientClass);
}
pub inline fn G_IS_SOCKET_CLIENT(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_CLIENT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_CLIENT);
}
pub inline fn G_IS_SOCKET_CLIENT_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_CLIENT)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_CLIENT);
}
pub inline fn G_SOCKET_CLIENT_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_CLIENT, GSocketClientClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_CLIENT, GSocketClientClass);
}
pub const __G_SOCKET_CONNECTABLE_H__ = "";
pub const G_TYPE_SOCKET_CONNECTABLE = g_socket_connectable_get_type();
pub inline fn G_SOCKET_CONNECTABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SOCKET_CONNECTABLE, GSocketConnectable)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_SOCKET_CONNECTABLE, GSocketConnectable);
}
pub inline fn G_IS_SOCKET_CONNECTABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SOCKET_CONNECTABLE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_SOCKET_CONNECTABLE);
}
pub inline fn G_SOCKET_CONNECTABLE_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_SOCKET_CONNECTABLE, GSocketConnectableIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_SOCKET_CONNECTABLE, GSocketConnectableIface);
}
pub const __G_SOCKET_CONNECTION_H__ = "";
pub const G_TYPE_SOCKET_CONNECTION = g_socket_connection_get_type();
pub inline fn G_SOCKET_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_CONNECTION, GSocketConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_CONNECTION, GSocketConnection);
}
pub inline fn G_SOCKET_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_CONNECTION, GSocketConnectionClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_CONNECTION, GSocketConnectionClass);
}
pub inline fn G_IS_SOCKET_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_CONNECTION);
}
pub inline fn G_IS_SOCKET_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_CONNECTION)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_CONNECTION);
}
pub inline fn G_SOCKET_CONNECTION_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_CONNECTION, GSocketConnectionClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_CONNECTION, GSocketConnectionClass);
}
pub const __G_SOCKET_CONTROL_MESSAGE_H__ = "";
pub const G_TYPE_SOCKET_CONTROL_MESSAGE = g_socket_control_message_get_type();
pub inline fn G_SOCKET_CONTROL_MESSAGE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessage)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessage);
}
pub inline fn G_SOCKET_CONTROL_MESSAGE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessageClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessageClass);
}
pub inline fn G_IS_SOCKET_CONTROL_MESSAGE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_CONTROL_MESSAGE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_CONTROL_MESSAGE);
}
pub inline fn G_IS_SOCKET_CONTROL_MESSAGE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_CONTROL_MESSAGE)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_CONTROL_MESSAGE);
}
pub inline fn G_SOCKET_CONTROL_MESSAGE_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessageClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessageClass);
}
pub const __G_SOCKET_LISTENER_H__ = "";
pub const G_TYPE_SOCKET_LISTENER = g_socket_listener_get_type();
pub inline fn G_SOCKET_LISTENER(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_LISTENER, GSocketListener)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_LISTENER, GSocketListener);
}
pub inline fn G_SOCKET_LISTENER_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_LISTENER, GSocketListenerClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_LISTENER, GSocketListenerClass);
}
pub inline fn G_IS_SOCKET_LISTENER(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_LISTENER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_LISTENER);
}
pub inline fn G_IS_SOCKET_LISTENER_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_LISTENER)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_LISTENER);
}
pub inline fn G_SOCKET_LISTENER_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_LISTENER, GSocketListenerClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_LISTENER, GSocketListenerClass);
}
pub const __G_SOCKET_SERVICE_H__ = "";
pub const G_TYPE_SOCKET_SERVICE = g_socket_service_get_type();
pub inline fn G_SOCKET_SERVICE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_SERVICE, GSocketService)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_SOCKET_SERVICE, GSocketService);
}
pub inline fn G_SOCKET_SERVICE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_SERVICE, GSocketServiceClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_SOCKET_SERVICE, GSocketServiceClass);
}
pub inline fn G_IS_SOCKET_SERVICE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_SERVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_SOCKET_SERVICE);
}
pub inline fn G_IS_SOCKET_SERVICE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_SERVICE)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_SOCKET_SERVICE);
}
pub inline fn G_SOCKET_SERVICE_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_SERVICE, GSocketServiceClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_SOCKET_SERVICE, GSocketServiceClass);
}
pub const __G_SRV_TARGET_H__ = "";
pub const G_TYPE_SRV_TARGET = g_srv_target_get_type();
pub const __G_SUBPROCESS_H__ = "";
pub const G_TYPE_SUBPROCESS = g_subprocess_get_type();
pub inline fn G_SUBPROCESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SUBPROCESS, GSubprocess)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SUBPROCESS, GSubprocess);
}
pub inline fn G_IS_SUBPROCESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SUBPROCESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SUBPROCESS);
}
pub const __G_SUBPROCESS_LAUNCHER_H__ = "";
pub const G_TYPE_SUBPROCESS_LAUNCHER = g_subprocess_launcher_get_type();
pub inline fn G_SUBPROCESS_LAUNCHER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SUBPROCESS_LAUNCHER, GSubprocessLauncher)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_SUBPROCESS_LAUNCHER, GSubprocessLauncher);
}
pub inline fn G_IS_SUBPROCESS_LAUNCHER(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SUBPROCESS_LAUNCHER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_SUBPROCESS_LAUNCHER);
}
pub const __G_TASK_H__ = "";
pub const G_TYPE_TASK = g_task_get_type();
pub inline fn G_TASK(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_TASK, GTask)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_TASK, GTask);
}
pub inline fn G_TASK_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_TASK, GTaskClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_TASK, GTaskClass);
}
pub inline fn G_IS_TASK(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_TASK)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_TASK);
}
pub inline fn G_IS_TASK_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_TASK)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_TASK);
}
pub inline fn G_TASK_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_TASK, GTaskClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_TASK, GTaskClass);
}
pub const __G_TCP_CONNECTION_H__ = "";
pub const G_TYPE_TCP_CONNECTION = g_tcp_connection_get_type();
pub inline fn G_TCP_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TCP_CONNECTION, GTcpConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TCP_CONNECTION, GTcpConnection);
}
pub inline fn G_TCP_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TCP_CONNECTION, GTcpConnectionClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TCP_CONNECTION, GTcpConnectionClass);
}
pub inline fn G_IS_TCP_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TCP_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TCP_CONNECTION);
}
pub inline fn G_IS_TCP_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TCP_CONNECTION)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TCP_CONNECTION);
}
pub inline fn G_TCP_CONNECTION_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TCP_CONNECTION, GTcpConnectionClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TCP_CONNECTION, GTcpConnectionClass);
}
pub const __G_TCP_WRAPPER_CONNECTION_H__ = "";
pub const G_TYPE_TCP_WRAPPER_CONNECTION = g_tcp_wrapper_connection_get_type();
pub inline fn G_TCP_WRAPPER_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnection);
}
pub inline fn G_TCP_WRAPPER_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnectionClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnectionClass);
}
pub inline fn G_IS_TCP_WRAPPER_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TCP_WRAPPER_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TCP_WRAPPER_CONNECTION);
}
pub inline fn G_IS_TCP_WRAPPER_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TCP_WRAPPER_CONNECTION)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TCP_WRAPPER_CONNECTION);
}
pub inline fn G_TCP_WRAPPER_CONNECTION_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnectionClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnectionClass);
}
pub const __G_TEST_DBUS_H__ = "";
pub const G_TYPE_TEST_DBUS = g_test_dbus_get_type();
pub inline fn G_TEST_DBUS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_TEST_DBUS, GTestDBus)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_TEST_DBUS, GTestDBus);
}
pub inline fn G_IS_TEST_DBUS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_TEST_DBUS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_TEST_DBUS);
}
pub const __G_THEMED_ICON_H__ = "";
pub const G_TYPE_THEMED_ICON = g_themed_icon_get_type();
pub inline fn G_THEMED_ICON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_THEMED_ICON, GThemedIcon)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_THEMED_ICON, GThemedIcon);
}
pub inline fn G_THEMED_ICON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_THEMED_ICON, GThemedIconClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_THEMED_ICON, GThemedIconClass);
}
pub inline fn G_IS_THEMED_ICON(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_THEMED_ICON)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_THEMED_ICON);
}
pub inline fn G_IS_THEMED_ICON_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_THEMED_ICON)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_THEMED_ICON);
}
pub inline fn G_THEMED_ICON_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_THEMED_ICON, GThemedIconClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_THEMED_ICON, GThemedIconClass);
}
pub const __G_THREADED_SOCKET_SERVICE_H__ = "";
pub const G_TYPE_THREADED_SOCKET_SERVICE = g_threaded_socket_service_get_type();
pub inline fn G_THREADED_SOCKET_SERVICE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketService)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketService);
}
pub inline fn G_THREADED_SOCKET_SERVICE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketServiceClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketServiceClass);
}
pub inline fn G_IS_THREADED_SOCKET_SERVICE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_THREADED_SOCKET_SERVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_THREADED_SOCKET_SERVICE);
}
pub inline fn G_IS_THREADED_SOCKET_SERVICE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_THREADED_SOCKET_SERVICE)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_THREADED_SOCKET_SERVICE);
}
pub inline fn G_THREADED_SOCKET_SERVICE_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketServiceClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketServiceClass);
}
pub const __G_TLS_BACKEND_H__ = "";
pub const G_TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend";
pub const G_TYPE_TLS_BACKEND = g_tls_backend_get_type();
pub inline fn G_TLS_BACKEND(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_TLS_BACKEND, GTlsBackend)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_TLS_BACKEND, GTlsBackend);
}
pub inline fn G_IS_TLS_BACKEND(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_TLS_BACKEND)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_TLS_BACKEND);
}
pub inline fn G_TLS_BACKEND_GET_INTERFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_TLS_BACKEND, GTlsBackendInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_TLS_BACKEND, GTlsBackendInterface);
}
pub const __G_TLS_CERTIFICATE_H__ = "";
pub const G_TYPE_TLS_CERTIFICATE = g_tls_certificate_get_type();
pub inline fn G_TLS_CERTIFICATE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_CERTIFICATE, GTlsCertificate)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_CERTIFICATE, GTlsCertificate);
}
pub inline fn G_TLS_CERTIFICATE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TLS_CERTIFICATE, GTlsCertificateClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TLS_CERTIFICATE, GTlsCertificateClass);
}
pub inline fn G_IS_TLS_CERTIFICATE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_CERTIFICATE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_CERTIFICATE);
}
pub inline fn G_IS_TLS_CERTIFICATE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TLS_CERTIFICATE)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TLS_CERTIFICATE);
}
pub inline fn G_TLS_CERTIFICATE_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TLS_CERTIFICATE, GTlsCertificateClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TLS_CERTIFICATE, GTlsCertificateClass);
}
pub const __G_TLS_CLIENT_CONNECTION_H__ = "";
pub const __G_TLS_CONNECTION_H__ = "";
pub const G_TYPE_TLS_CONNECTION = g_tls_connection_get_type();
pub inline fn G_TLS_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_CONNECTION, GTlsConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_CONNECTION, GTlsConnection);
}
pub inline fn G_TLS_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TLS_CONNECTION, GTlsConnectionClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TLS_CONNECTION, GTlsConnectionClass);
}
pub inline fn G_IS_TLS_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_CONNECTION);
}
pub inline fn G_IS_TLS_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TLS_CONNECTION)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TLS_CONNECTION);
}
pub inline fn G_TLS_CONNECTION_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TLS_CONNECTION, GTlsConnectionClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TLS_CONNECTION, GTlsConnectionClass);
}
pub const G_TLS_ERROR = g_tls_error_quark();
pub const G_TLS_CHANNEL_BINDING_ERROR = g_tls_channel_binding_error_quark();
pub const G_TYPE_TLS_CLIENT_CONNECTION = g_tls_client_connection_get_type();
pub inline fn G_TLS_CLIENT_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_CLIENT_CONNECTION, GTlsClientConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_CLIENT_CONNECTION, GTlsClientConnection);
}
pub inline fn G_IS_TLS_CLIENT_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_CLIENT_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_CLIENT_CONNECTION);
}
pub inline fn G_TLS_CLIENT_CONNECTION_GET_INTERFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TLS_CLIENT_CONNECTION, GTlsClientConnectionInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TLS_CLIENT_CONNECTION, GTlsClientConnectionInterface);
}
pub const __G_TLS_DATABASE_H__ = "";
pub const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1";
pub const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2";
pub const G_TYPE_TLS_DATABASE = g_tls_database_get_type();
pub inline fn G_TLS_DATABASE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_DATABASE, GTlsDatabase)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_DATABASE, GTlsDatabase);
}
pub inline fn G_TLS_DATABASE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TLS_DATABASE, GTlsDatabaseClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_TLS_DATABASE, GTlsDatabaseClass);
}
pub inline fn G_IS_TLS_DATABASE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_DATABASE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_DATABASE);
}
pub inline fn G_IS_TLS_DATABASE_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TLS_DATABASE)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_TLS_DATABASE);
}
pub inline fn G_TLS_DATABASE_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TLS_DATABASE, GTlsDatabaseClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_TLS_DATABASE, GTlsDatabaseClass);
}
pub const __G_TLS_FILE_DATABASE_H__ = "";
pub const G_TYPE_TLS_FILE_DATABASE = g_tls_file_database_get_type();
pub inline fn G_TLS_FILE_DATABASE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_FILE_DATABASE, GTlsFileDatabase)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_FILE_DATABASE, GTlsFileDatabase);
}
pub inline fn G_IS_TLS_FILE_DATABASE(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_FILE_DATABASE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_FILE_DATABASE);
}
pub inline fn G_TLS_FILE_DATABASE_GET_INTERFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TLS_FILE_DATABASE, GTlsFileDatabaseInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TLS_FILE_DATABASE, GTlsFileDatabaseInterface);
}
pub const __G_TLS_INTERACTION_H__ = "";
pub const G_TYPE_TLS_INTERACTION = g_tls_interaction_get_type();
pub inline fn G_TLS_INTERACTION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_TLS_INTERACTION, GTlsInteraction)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_TLS_INTERACTION, GTlsInteraction);
}
pub inline fn G_TLS_INTERACTION_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_TLS_INTERACTION, GTlsInteractionClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_TLS_INTERACTION, GTlsInteractionClass);
}
pub inline fn G_IS_TLS_INTERACTION(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_TLS_INTERACTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_TLS_INTERACTION);
}
pub inline fn G_IS_TLS_INTERACTION_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_TLS_INTERACTION)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_TLS_INTERACTION);
}
pub inline fn G_TLS_INTERACTION_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_TLS_INTERACTION, GTlsInteractionClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_TLS_INTERACTION, GTlsInteractionClass);
}
pub const __G_TLS_PASSWORD_H__ = "";
pub const G_TYPE_TLS_PASSWORD = g_tls_password_get_type();
pub inline fn G_TLS_PASSWORD(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_TLS_PASSWORD, GTlsPassword)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_TLS_PASSWORD, GTlsPassword);
}
pub inline fn G_TLS_PASSWORD_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_TLS_PASSWORD, GTlsPasswordClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_TLS_PASSWORD, GTlsPasswordClass);
}
pub inline fn G_IS_TLS_PASSWORD(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_TLS_PASSWORD)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_TLS_PASSWORD);
}
pub inline fn G_IS_TLS_PASSWORD_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_TLS_PASSWORD)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_TLS_PASSWORD);
}
pub inline fn G_TLS_PASSWORD_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_TLS_PASSWORD, GTlsPasswordClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_TLS_PASSWORD, GTlsPasswordClass);
}
pub const __G_TLS_SERVER_CONNECTION_H__ = "";
pub const G_TYPE_TLS_SERVER_CONNECTION = g_tls_server_connection_get_type();
pub inline fn G_TLS_SERVER_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_SERVER_CONNECTION, GTlsServerConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_TLS_SERVER_CONNECTION, GTlsServerConnection);
}
pub inline fn G_IS_TLS_SERVER_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_SERVER_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_TLS_SERVER_CONNECTION);
}
pub inline fn G_TLS_SERVER_CONNECTION_GET_INTERFACE(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TLS_SERVER_CONNECTION, GTlsServerConnectionInterface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(inst, G_TYPE_TLS_SERVER_CONNECTION, GTlsServerConnectionInterface);
}
pub const __G_UNIX_CONNECTION_H__ = "";
pub const G_TYPE_UNIX_CONNECTION = g_unix_connection_get_type();
pub inline fn G_UNIX_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_UNIX_CONNECTION, GUnixConnection)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_UNIX_CONNECTION, GUnixConnection);
}
pub inline fn G_UNIX_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_UNIX_CONNECTION, GUnixConnectionClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_UNIX_CONNECTION, GUnixConnectionClass);
}
pub inline fn G_IS_UNIX_CONNECTION(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_UNIX_CONNECTION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_UNIX_CONNECTION);
}
pub inline fn G_IS_UNIX_CONNECTION_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_UNIX_CONNECTION)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_UNIX_CONNECTION);
}
pub inline fn G_UNIX_CONNECTION_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_UNIX_CONNECTION, GUnixConnectionClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_UNIX_CONNECTION, GUnixConnectionClass);
}
pub const __G_UNIX_CREDENTIALS_MESSAGE_H__ = "";
pub const G_TYPE_UNIX_CREDENTIALS_MESSAGE = g_unix_credentials_message_get_type();
pub inline fn G_UNIX_CREDENTIALS_MESSAGE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessage)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessage);
}
pub inline fn G_UNIX_CREDENTIALS_MESSAGE_CLASS(c: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(c, G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessageClass)) {
    return G_TYPE_CHECK_CLASS_CAST(c, G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessageClass);
}
pub inline fn G_IS_UNIX_CREDENTIALS_MESSAGE(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_UNIX_CREDENTIALS_MESSAGE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_UNIX_CREDENTIALS_MESSAGE);
}
pub inline fn G_IS_UNIX_CREDENTIALS_MESSAGE_CLASS(c: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(c, G_TYPE_UNIX_CREDENTIALS_MESSAGE)) {
    return G_TYPE_CHECK_CLASS_TYPE(c, G_TYPE_UNIX_CREDENTIALS_MESSAGE);
}
pub inline fn G_UNIX_CREDENTIALS_MESSAGE_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessageClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessageClass);
}
pub const __G_UNIX_FD_LIST_H__ = "";
pub const G_TYPE_UNIX_FD_LIST = g_unix_fd_list_get_type();
pub inline fn G_UNIX_FD_LIST(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_UNIX_FD_LIST, GUnixFDList)) {
    return G_TYPE_CHECK_INSTANCE_CAST(inst, G_TYPE_UNIX_FD_LIST, GUnixFDList);
}
pub inline fn G_UNIX_FD_LIST_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_UNIX_FD_LIST, GUnixFDListClass)) {
    return G_TYPE_CHECK_CLASS_CAST(class, G_TYPE_UNIX_FD_LIST, GUnixFDListClass);
}
pub inline fn G_IS_UNIX_FD_LIST(inst: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_UNIX_FD_LIST)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(inst, G_TYPE_UNIX_FD_LIST);
}
pub inline fn G_IS_UNIX_FD_LIST_CLASS(class: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_UNIX_FD_LIST)) {
    return G_TYPE_CHECK_CLASS_TYPE(class, G_TYPE_UNIX_FD_LIST);
}
pub inline fn G_UNIX_FD_LIST_GET_CLASS(inst: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_UNIX_FD_LIST, GUnixFDListClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(inst, G_TYPE_UNIX_FD_LIST, GUnixFDListClass);
}
pub const __G_UNIX_SOCKET_ADDRESS_H__ = "";
pub const G_TYPE_UNIX_SOCKET_ADDRESS = g_unix_socket_address_get_type();
pub inline fn G_UNIX_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddress)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddress);
}
pub inline fn G_UNIX_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass);
}
pub inline fn G_IS_UNIX_SOCKET_ADDRESS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_UNIX_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_UNIX_SOCKET_ADDRESS);
}
pub inline fn G_IS_UNIX_SOCKET_ADDRESS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_UNIX_SOCKET_ADDRESS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_UNIX_SOCKET_ADDRESS);
}
pub inline fn G_UNIX_SOCKET_ADDRESS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass);
}
pub const __G_VFS_H__ = "";
pub const G_TYPE_VFS = g_vfs_get_type();
pub inline fn G_VFS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_VFS, GVfs)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_VFS, GVfs);
}
pub inline fn G_VFS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_VFS, GVfsClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_VFS, GVfsClass);
}
pub inline fn G_VFS_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_VFS, GVfsClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_VFS, GVfsClass);
}
pub inline fn G_IS_VFS(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_VFS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_VFS);
}
pub inline fn G_IS_VFS_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_VFS)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_VFS);
}
pub const G_VFS_EXTENSION_POINT_NAME = "gio-vfs";
pub const __G_VOLUME_H__ = "";
pub const G_VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi" ++ GIO_DEPRECATED_MACRO_IN_2_58;
pub const G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";
pub const G_VOLUME_IDENTIFIER_KIND_LABEL = "label";
pub const G_VOLUME_IDENTIFIER_KIND_UUID = "uuid";
pub const G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount";
pub const G_VOLUME_IDENTIFIER_KIND_CLASS = "class";
pub const G_TYPE_VOLUME = g_volume_get_type();
pub inline fn G_VOLUME(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_VOLUME, GVolume)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, G_TYPE_VOLUME, GVolume);
}
pub inline fn G_IS_VOLUME(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_VOLUME)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, G_TYPE_VOLUME);
}
pub inline fn G_VOLUME_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_VOLUME, GVolumeIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, G_TYPE_VOLUME, GVolumeIface);
}
pub const __G_ZLIB_COMPRESSOR_H__ = "";
pub const G_TYPE_ZLIB_COMPRESSOR = g_zlib_compressor_get_type();
pub inline fn G_ZLIB_COMPRESSOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_ZLIB_COMPRESSOR, GZlibCompressor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_ZLIB_COMPRESSOR, GZlibCompressor);
}
pub inline fn G_ZLIB_COMPRESSOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_ZLIB_COMPRESSOR, GZlibCompressorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_ZLIB_COMPRESSOR, GZlibCompressorClass);
}
pub inline fn G_IS_ZLIB_COMPRESSOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_ZLIB_COMPRESSOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_ZLIB_COMPRESSOR);
}
pub inline fn G_IS_ZLIB_COMPRESSOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_ZLIB_COMPRESSOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_ZLIB_COMPRESSOR);
}
pub inline fn G_ZLIB_COMPRESSOR_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_ZLIB_COMPRESSOR, GZlibCompressorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_ZLIB_COMPRESSOR, GZlibCompressorClass);
}
pub const __G_ZLIB_DECOMPRESSOR_H__ = "";
pub const G_TYPE_ZLIB_DECOMPRESSOR = g_zlib_decompressor_get_type();
pub inline fn G_ZLIB_DECOMPRESSOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(o, G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressor);
}
pub inline fn G_ZLIB_DECOMPRESSOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(k, G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressorClass);
}
pub inline fn G_IS_ZLIB_DECOMPRESSOR(o: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_ZLIB_DECOMPRESSOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(o, G_TYPE_ZLIB_DECOMPRESSOR);
}
pub inline fn G_IS_ZLIB_DECOMPRESSOR_CLASS(k: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_ZLIB_DECOMPRESSOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(k, G_TYPE_ZLIB_DECOMPRESSOR);
}
pub inline fn G_ZLIB_DECOMPRESSOR_GET_CLASS(o: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(o, G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressorClass);
}
pub const __JSON_GLIB_H__ = "";
pub const __JSON_GLIB_INSIDE__ = "";
pub const __JSON_TYPES_H__ = "";
pub const __JSON_VERSION_MACROS_H__ = "";
pub const __JSON_VERSION_H__ = "";
pub const JSON_MAJOR_VERSION = @as(c_int, 1);
pub const JSON_MINOR_VERSION = @as(c_int, 7);
pub const JSON_MICRO_VERSION = @as(c_int, 1);
pub const JSON_VERSION_S = "1.7.1";
pub inline fn JSON_ENCODE_VERSION(major: anytype, minor: anytype, micro: anytype) @TypeOf(((major << @as(c_int, 24)) | (minor << @as(c_int, 16))) | (micro << @as(c_int, 8))) {
    return ((major << @as(c_int, 24)) | (minor << @as(c_int, 16))) | (micro << @as(c_int, 8));
}
pub const JSON_VERSION_HEX = JSON_ENCODE_VERSION(JSON_MAJOR_VERSION, JSON_MINOR_VERSION, JSON_MICRO_VERSION);
pub inline fn JSON_CHECK_VERSION(major: anytype, minor: anytype, micro: anytype) @TypeOf(((JSON_MAJOR_VERSION > major) or ((JSON_MAJOR_VERSION == major) and (JSON_MINOR_VERSION > minor))) or (((JSON_MAJOR_VERSION == major) and (JSON_MINOR_VERSION == minor)) and (JSON_MICRO_VERSION >= micro))) {
    return ((JSON_MAJOR_VERSION > major) or ((JSON_MAJOR_VERSION == major) and (JSON_MINOR_VERSION > minor))) or (((JSON_MAJOR_VERSION == major) and (JSON_MINOR_VERSION == minor)) and (JSON_MICRO_VERSION >= micro));
}
pub const JSON_DEPRECATED = G_DEPRECATED ++ _JSON_EXTERN;
pub const JSON_VERSION_1_0 = G_ENCODE_VERSION(@as(c_int, 1), @as(c_int, 0));
pub const JSON_VERSION_1_2 = G_ENCODE_VERSION(@as(c_int, 1), @as(c_int, 2));
pub const JSON_VERSION_1_4 = G_ENCODE_VERSION(@as(c_int, 1), @as(c_int, 4));
pub const JSON_VERSION_1_6 = G_ENCODE_VERSION(@as(c_int, 1), @as(c_int, 6));
pub const JSON_VERSION_1_8 = G_ENCODE_VERSION(@as(c_int, 1), @as(c_int, 8));
pub const JSON_VERSION_CUR_STABLE = G_ENCODE_VERSION(JSON_MAJOR_VERSION, JSON_MINOR_VERSION + @as(c_int, 1));
pub const JSON_VERSION_PREV_STABLE = G_ENCODE_VERSION(JSON_MAJOR_VERSION, JSON_MINOR_VERSION - @as(c_int, 1));
pub const JSON_VERSION_MIN_REQUIRED = JSON_VERSION_CUR_STABLE;
pub const JSON_VERSION_MAX_ALLOWED = JSON_VERSION_MIN_REQUIRED;
pub const JSON_DEPRECATED_IN_1_0 = JSON_DEPRECATED;
pub inline fn JSON_DEPRECATED_IN_1_0_FOR(f: anytype) @TypeOf(JSON_DEPRECATED_FOR(f)) {
    return JSON_DEPRECATED_FOR(f);
}
pub const JSON_AVAILABLE_IN_1_0 = _JSON_EXTERN;
pub const JSON_DEPRECATED_IN_1_2 = JSON_DEPRECATED;
pub inline fn JSON_DEPRECATED_IN_1_2_FOR(f: anytype) @TypeOf(JSON_DEPRECATED_FOR(f)) {
    return JSON_DEPRECATED_FOR(f);
}
pub const JSON_AVAILABLE_IN_1_2 = _JSON_EXTERN;
pub const JSON_DEPRECATED_IN_1_4 = JSON_DEPRECATED;
pub inline fn JSON_DEPRECATED_IN_1_4_FOR(f: anytype) @TypeOf(JSON_DEPRECATED_FOR(f)) {
    return JSON_DEPRECATED_FOR(f);
}
pub const JSON_AVAILABLE_IN_1_4 = _JSON_EXTERN;
pub const JSON_DEPRECATED_IN_1_6 = JSON_DEPRECATED;
pub inline fn JSON_DEPRECATED_IN_1_6_FOR(f: anytype) @TypeOf(JSON_DEPRECATED_FOR(f)) {
    return JSON_DEPRECATED_FOR(f);
}
pub const JSON_AVAILABLE_IN_1_6 = _JSON_EXTERN;
pub const JSON_DEPRECATED_IN_1_8 = JSON_DEPRECATED;
pub inline fn JSON_DEPRECATED_IN_1_8_FOR(f: anytype) @TypeOf(JSON_DEPRECATED_FOR(f)) {
    return JSON_DEPRECATED_FOR(f);
}
pub const JSON_AVAILABLE_IN_1_8 = _JSON_EXTERN;
pub inline fn JSON_NODE_TYPE(node: anytype) @TypeOf(json_node_get_node_type(node)) {
    return json_node_get_node_type(node);
}
pub inline fn JSON_NODE_HOLDS(node: anytype, t: anytype) @TypeOf(json_node_get_node_type(node) == t) {
    return json_node_get_node_type(node) == t;
}
pub inline fn JSON_NODE_HOLDS_VALUE(node: anytype) @TypeOf(JSON_NODE_HOLDS(node, JSON_NODE_VALUE)) {
    return JSON_NODE_HOLDS(node, JSON_NODE_VALUE);
}
pub inline fn JSON_NODE_HOLDS_OBJECT(node: anytype) @TypeOf(JSON_NODE_HOLDS(node, JSON_NODE_OBJECT)) {
    return JSON_NODE_HOLDS(node, JSON_NODE_OBJECT);
}
pub inline fn JSON_NODE_HOLDS_ARRAY(node: anytype) @TypeOf(JSON_NODE_HOLDS(node, JSON_NODE_ARRAY)) {
    return JSON_NODE_HOLDS(node, JSON_NODE_ARRAY);
}
pub inline fn JSON_NODE_HOLDS_NULL(node: anytype) @TypeOf(JSON_NODE_HOLDS(node, JSON_NODE_NULL)) {
    return JSON_NODE_HOLDS(node, JSON_NODE_NULL);
}
pub const JSON_TYPE_NODE = json_node_get_type();
pub const JSON_TYPE_OBJECT = json_object_get_type();
pub const JSON_TYPE_ARRAY = json_array_get_type();
pub const __JSON_BUILDER_H__ = "";
pub const JSON_TYPE_BUILDER = json_builder_get_type();
pub inline fn JSON_BUILDER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_BUILDER, JsonBuilder)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_BUILDER, JsonBuilder);
}
pub inline fn JSON_IS_BUILDER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_BUILDER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_BUILDER);
}
pub inline fn JSON_BUILDER_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_BUILDER, JsonBuilderClass)) {
    return G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_BUILDER, JsonBuilderClass);
}
pub inline fn JSON_IS_BUILDER_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_BUILDER)) {
    return G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_BUILDER);
}
pub inline fn JSON_BUILDER_GET_CLASS(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_BUILDER, JsonBuilderClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_BUILDER, JsonBuilderClass);
}
pub const __JSON_GENERATOR_H__ = "";
pub const JSON_TYPE_GENERATOR = json_generator_get_type();
pub inline fn JSON_GENERATOR(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_GENERATOR, JsonGenerator)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_GENERATOR, JsonGenerator);
}
pub inline fn JSON_IS_GENERATOR(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_GENERATOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_GENERATOR);
}
pub inline fn JSON_GENERATOR_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_GENERATOR, JsonGeneratorClass)) {
    return G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_GENERATOR, JsonGeneratorClass);
}
pub inline fn JSON_IS_GENERATOR_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_GENERATOR)) {
    return G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_GENERATOR);
}
pub inline fn JSON_GENERATOR_GET_CLASS(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_GENERATOR, JsonGeneratorClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_GENERATOR, JsonGeneratorClass);
}
pub const __JSON_PARSER_H__ = "";
pub const JSON_TYPE_PARSER = json_parser_get_type();
pub inline fn JSON_PARSER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_PARSER, JsonParser)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_PARSER, JsonParser);
}
pub inline fn JSON_IS_PARSER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_PARSER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_PARSER);
}
pub inline fn JSON_PARSER_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_PARSER, JsonParserClass)) {
    return G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_PARSER, JsonParserClass);
}
pub inline fn JSON_IS_PARSER_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_PARSER)) {
    return G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_PARSER);
}
pub inline fn JSON_PARSER_GET_CLASS(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_PARSER, JsonParserClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_PARSER, JsonParserClass);
}
pub const JSON_PARSER_ERROR = json_parser_error_quark();
pub const __JSON_PATH_H__ = "";
pub const JSON_TYPE_PATH = json_path_get_type();
pub inline fn JSON_PATH(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_PATH, JsonPath)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_PATH, JsonPath);
}
pub inline fn JSON_IS_PATH(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_PATH)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_PATH);
}
pub const JSON_PATH_ERROR = json_path_error_quark();
pub const __JSON_READER_H__ = "";
pub const JSON_TYPE_READER = json_reader_get_type();
pub inline fn JSON_READER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_READER, JsonReader)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_READER, JsonReader);
}
pub inline fn JSON_IS_READER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_READER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_READER);
}
pub inline fn JSON_READER_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_READER, JsonReaderClass)) {
    return G_TYPE_CHECK_CLASS_CAST(klass, JSON_TYPE_READER, JsonReaderClass);
}
pub inline fn JSON_IS_READER_CLASS(klass: anytype) @TypeOf(G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_READER)) {
    return G_TYPE_CHECK_CLASS_TYPE(klass, JSON_TYPE_READER);
}
pub inline fn JSON_READER_GET_CLASS(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_READER, JsonReaderClass)) {
    return G_TYPE_INSTANCE_GET_CLASS(obj, JSON_TYPE_READER, JsonReaderClass);
}
pub const JSON_READER_ERROR = json_reader_error_quark();
pub const __JSON_UTILS_H__ = "";
pub const __JSON_ENUM_TYPES_H__ = "";
pub const JSON_TYPE_PARSER_ERROR = json_parser_error_get_type();
pub const JSON_TYPE_PATH_ERROR = json_path_error_get_type();
pub const JSON_TYPE_READER_ERROR = json_reader_error_get_type();
pub const JSON_TYPE_NODE_TYPE = json_node_type_get_type();
pub const __JSON_GOBJECT_H__ = "";
pub const JSON_TYPE_SERIALIZABLE = json_serializable_get_type();
pub inline fn JSON_SERIALIZABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_SERIALIZABLE, JsonSerializable)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, JSON_TYPE_SERIALIZABLE, JsonSerializable);
}
pub inline fn JSON_IS_SERIALIZABLE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_SERIALIZABLE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, JSON_TYPE_SERIALIZABLE);
}
pub inline fn JSON_SERIALIZABLE_GET_IFACE(obj: anytype) @TypeOf(G_TYPE_INSTANCE_GET_INTERFACE(obj, JSON_TYPE_SERIALIZABLE, JsonSerializableIface)) {
    return G_TYPE_INSTANCE_GET_INTERFACE(obj, JSON_TYPE_SERIALIZABLE, JsonSerializableIface);
}
pub const __JSON_GVARIANT_H__ = "";
pub const FRIDA_TYPE_RUNTIME = frida_runtime_get_type();
pub const FRIDA_TYPE_DEVICE_TYPE = frida_device_type_get_type();
pub const FRIDA_TYPE_SOURCE_MAPS = frida_source_maps_get_type();
pub const FRIDA_TYPE_JS_COMPRESSION = frida_js_compression_get_type();
pub const FRIDA_TYPE_AGENT_MESSAGE_KIND = frida_agent_message_kind_get_type();
pub const FRIDA_TYPE_CHILD_ORIGIN = frida_child_origin_get_type();
pub const FRIDA_TYPE_PEER_SETUP = frida_peer_setup_get_type();
pub const FRIDA_TYPE_PORT_CONFLICT_BEHAVIOR = frida_port_conflict_behavior_get_type();
pub const FRIDA_TYPE_REALM = frida_realm_get_type();
pub const FRIDA_TYPE_RELAY_KIND = frida_relay_kind_get_type();
pub const FRIDA_TYPE_SCOPE = frida_scope_get_type();
pub const FRIDA_TYPE_SCRIPT_RUNTIME = frida_script_runtime_get_type();
pub const FRIDA_TYPE_SESSION_DETACH_REASON = frida_session_detach_reason_get_type();
pub const FRIDA_TYPE_SNAPSHOT_TRANSPORT = frida_snapshot_transport_get_type();
pub const FRIDA_TYPE_STDIO = frida_stdio_get_type();
pub const FRIDA_TYPE_STRING_TERMINATOR = frida_string_terminator_get_type();
pub const FRIDA_TYPE_UNLOAD_POLICY = frida_unload_policy_get_type();
pub const FRIDA_TYPE_WEB_SERVICE_FLAVOR = frida_web_service_flavor_get_type();
pub const FRIDA_TYPE_WEB_SERVICE_TRANSPORT = frida_web_service_transport_get_type();
pub const FRIDA_TYPE_DEVICE_MANAGER = frida_device_manager_get_type();
pub inline fn FRIDA_DEVICE_MANAGER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_DEVICE_MANAGER, FridaDeviceManager)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_DEVICE_MANAGER, FridaDeviceManager);
}
pub inline fn FRIDA_IS_DEVICE_MANAGER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_DEVICE_MANAGER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_DEVICE_MANAGER);
}
pub const FRIDA_TYPE_DEVICE_LIST = frida_device_list_get_type();
pub inline fn FRIDA_DEVICE_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_DEVICE_LIST, FridaDeviceList)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_DEVICE_LIST, FridaDeviceList);
}
pub inline fn FRIDA_IS_DEVICE_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_DEVICE_LIST)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_DEVICE_LIST);
}
pub const FRIDA_TYPE_DEVICE = frida_device_get_type();
pub inline fn FRIDA_DEVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_DEVICE, FridaDevice)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_DEVICE, FridaDevice);
}
pub inline fn FRIDA_IS_DEVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_DEVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_DEVICE);
}
pub const FRIDA_TYPE_REMOTE_DEVICE_OPTIONS = frida_remote_device_options_get_type();
pub inline fn FRIDA_REMOTE_DEVICE_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_REMOTE_DEVICE_OPTIONS, FridaRemoteDeviceOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_REMOTE_DEVICE_OPTIONS, FridaRemoteDeviceOptions);
}
pub inline fn FRIDA_IS_REMOTE_DEVICE_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_REMOTE_DEVICE_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_REMOTE_DEVICE_OPTIONS);
}
pub const FRIDA_TYPE_APPLICATION_LIST = frida_application_list_get_type();
pub inline fn FRIDA_APPLICATION_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_APPLICATION_LIST, FridaApplicationList)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_APPLICATION_LIST, FridaApplicationList);
}
pub inline fn FRIDA_IS_APPLICATION_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_APPLICATION_LIST)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_APPLICATION_LIST);
}
pub const FRIDA_TYPE_APPLICATION = frida_application_get_type();
pub inline fn FRIDA_APPLICATION(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_APPLICATION, FridaApplication)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_APPLICATION, FridaApplication);
}
pub inline fn FRIDA_IS_APPLICATION(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_APPLICATION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_APPLICATION);
}
pub const FRIDA_TYPE_PROCESS_LIST = frida_process_list_get_type();
pub inline fn FRIDA_PROCESS_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS_LIST, FridaProcessList)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS_LIST, FridaProcessList);
}
pub inline fn FRIDA_IS_PROCESS_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS_LIST)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS_LIST);
}
pub const FRIDA_TYPE_PROCESS = frida_process_get_type();
pub inline fn FRIDA_PROCESS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS, FridaProcess)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS, FridaProcess);
}
pub inline fn FRIDA_IS_PROCESS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS);
}
pub const FRIDA_TYPE_PROCESS_MATCH_OPTIONS = frida_process_match_options_get_type();
pub inline fn FRIDA_PROCESS_MATCH_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS_MATCH_OPTIONS, FridaProcessMatchOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS_MATCH_OPTIONS, FridaProcessMatchOptions);
}
pub inline fn FRIDA_IS_PROCESS_MATCH_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS_MATCH_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS_MATCH_OPTIONS);
}
pub const FRIDA_TYPE_SPAWN_OPTIONS = frida_spawn_options_get_type();
pub inline fn FRIDA_SPAWN_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SPAWN_OPTIONS, FridaSpawnOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SPAWN_OPTIONS, FridaSpawnOptions);
}
pub inline fn FRIDA_IS_SPAWN_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SPAWN_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SPAWN_OPTIONS);
}
pub const FRIDA_TYPE_FRONTMOST_QUERY_OPTIONS = frida_frontmost_query_options_get_type();
pub inline fn FRIDA_FRONTMOST_QUERY_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_FRONTMOST_QUERY_OPTIONS, FridaFrontmostQueryOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_FRONTMOST_QUERY_OPTIONS, FridaFrontmostQueryOptions);
}
pub inline fn FRIDA_IS_FRONTMOST_QUERY_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_FRONTMOST_QUERY_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_FRONTMOST_QUERY_OPTIONS);
}
pub const FRIDA_TYPE_APPLICATION_QUERY_OPTIONS = frida_application_query_options_get_type();
pub inline fn FRIDA_APPLICATION_QUERY_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_APPLICATION_QUERY_OPTIONS, FridaApplicationQueryOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_APPLICATION_QUERY_OPTIONS, FridaApplicationQueryOptions);
}
pub inline fn FRIDA_IS_APPLICATION_QUERY_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_APPLICATION_QUERY_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_APPLICATION_QUERY_OPTIONS);
}
pub const FRIDA_TYPE_PROCESS_QUERY_OPTIONS = frida_process_query_options_get_type();
pub inline fn FRIDA_PROCESS_QUERY_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS_QUERY_OPTIONS, FridaProcessQueryOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PROCESS_QUERY_OPTIONS, FridaProcessQueryOptions);
}
pub inline fn FRIDA_IS_PROCESS_QUERY_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS_QUERY_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PROCESS_QUERY_OPTIONS);
}
pub const FRIDA_TYPE_SESSION_OPTIONS = frida_session_options_get_type();
pub inline fn FRIDA_SESSION_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SESSION_OPTIONS, FridaSessionOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SESSION_OPTIONS, FridaSessionOptions);
}
pub inline fn FRIDA_IS_SESSION_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SESSION_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SESSION_OPTIONS);
}
pub const FRIDA_TYPE_SPAWN_LIST = frida_spawn_list_get_type();
pub inline fn FRIDA_SPAWN_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SPAWN_LIST, FridaSpawnList)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SPAWN_LIST, FridaSpawnList);
}
pub inline fn FRIDA_IS_SPAWN_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SPAWN_LIST)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SPAWN_LIST);
}
pub const FRIDA_TYPE_SPAWN = frida_spawn_get_type();
pub inline fn FRIDA_SPAWN(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SPAWN, FridaSpawn)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SPAWN, FridaSpawn);
}
pub inline fn FRIDA_IS_SPAWN(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SPAWN)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SPAWN);
}
pub const FRIDA_TYPE_CHILD_LIST = frida_child_list_get_type();
pub inline fn FRIDA_CHILD_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CHILD_LIST, FridaChildList)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CHILD_LIST, FridaChildList);
}
pub inline fn FRIDA_IS_CHILD_LIST(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CHILD_LIST)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CHILD_LIST);
}
pub const FRIDA_TYPE_CHILD = frida_child_get_type();
pub inline fn FRIDA_CHILD(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CHILD, FridaChild)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CHILD, FridaChild);
}
pub inline fn FRIDA_IS_CHILD(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CHILD)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CHILD);
}
pub const FRIDA_TYPE_CRASH = frida_crash_get_type();
pub inline fn FRIDA_CRASH(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CRASH, FridaCrash)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CRASH, FridaCrash);
}
pub inline fn FRIDA_IS_CRASH(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CRASH)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CRASH);
}
pub const FRIDA_TYPE_BUS = frida_bus_get_type();
pub inline fn FRIDA_BUS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_BUS, FridaBus)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_BUS, FridaBus);
}
pub inline fn FRIDA_IS_BUS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_BUS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_BUS);
}
pub const FRIDA_TYPE_SESSION = frida_session_get_type();
pub inline fn FRIDA_SESSION(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SESSION, FridaSession)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SESSION, FridaSession);
}
pub inline fn FRIDA_IS_SESSION(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SESSION)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SESSION);
}
pub const FRIDA_TYPE_SCRIPT = frida_script_get_type();
pub inline fn FRIDA_SCRIPT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SCRIPT, FridaScript)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SCRIPT, FridaScript);
}
pub inline fn FRIDA_IS_SCRIPT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SCRIPT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SCRIPT);
}
pub const FRIDA_TYPE_SNAPSHOT_OPTIONS = frida_snapshot_options_get_type();
pub inline fn FRIDA_SNAPSHOT_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SNAPSHOT_OPTIONS, FridaSnapshotOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SNAPSHOT_OPTIONS, FridaSnapshotOptions);
}
pub inline fn FRIDA_IS_SNAPSHOT_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SNAPSHOT_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SNAPSHOT_OPTIONS);
}
pub const FRIDA_TYPE_SCRIPT_OPTIONS = frida_script_options_get_type();
pub inline fn FRIDA_SCRIPT_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SCRIPT_OPTIONS, FridaScriptOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_SCRIPT_OPTIONS, FridaScriptOptions);
}
pub inline fn FRIDA_IS_SCRIPT_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SCRIPT_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_SCRIPT_OPTIONS);
}
pub const FRIDA_TYPE_PEER_OPTIONS = frida_peer_options_get_type();
pub inline fn FRIDA_PEER_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PEER_OPTIONS, FridaPeerOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PEER_OPTIONS, FridaPeerOptions);
}
pub inline fn FRIDA_IS_PEER_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PEER_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PEER_OPTIONS);
}
pub const FRIDA_TYPE_RELAY = frida_relay_get_type();
pub inline fn FRIDA_RELAY(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_RELAY, FridaRelay)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_RELAY, FridaRelay);
}
pub inline fn FRIDA_IS_RELAY(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_RELAY)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_RELAY);
}
pub const FRIDA_TYPE_PORTAL_OPTIONS = frida_portal_options_get_type();
pub inline fn FRIDA_PORTAL_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PORTAL_OPTIONS, FridaPortalOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PORTAL_OPTIONS, FridaPortalOptions);
}
pub inline fn FRIDA_IS_PORTAL_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PORTAL_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PORTAL_OPTIONS);
}
pub const FRIDA_TYPE_PORTAL_MEMBERSHIP = frida_portal_membership_get_type();
pub inline fn FRIDA_PORTAL_MEMBERSHIP(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PORTAL_MEMBERSHIP, FridaPortalMembership)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PORTAL_MEMBERSHIP, FridaPortalMembership);
}
pub inline fn FRIDA_IS_PORTAL_MEMBERSHIP(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PORTAL_MEMBERSHIP)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PORTAL_MEMBERSHIP);
}
pub const FRIDA_TYPE_RPC_CLIENT = frida_rpc_client_get_type();
pub inline fn FRIDA_RPC_CLIENT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_RPC_CLIENT, FridaRpcClient)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_RPC_CLIENT, FridaRpcClient);
}
pub inline fn FRIDA_IS_RPC_CLIENT(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_RPC_CLIENT)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_RPC_CLIENT);
}
pub const FRIDA_TYPE_RPC_PEER = frida_rpc_peer_get_type();
pub inline fn FRIDA_RPC_PEER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_RPC_PEER, FridaRpcPeer)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_RPC_PEER, FridaRpcPeer);
}
pub inline fn FRIDA_IS_RPC_PEER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_RPC_PEER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_RPC_PEER);
}
pub const FRIDA_TYPE_INJECTOR = frida_injector_get_type();
pub inline fn FRIDA_INJECTOR(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_INJECTOR, FridaInjector)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_INJECTOR, FridaInjector);
}
pub inline fn FRIDA_IS_INJECTOR(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_INJECTOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_INJECTOR);
}
pub const FRIDA_TYPE_CONTROL_SERVICE = frida_control_service_get_type();
pub inline fn FRIDA_CONTROL_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CONTROL_SERVICE, FridaControlService)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CONTROL_SERVICE, FridaControlService);
}
pub inline fn FRIDA_IS_CONTROL_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CONTROL_SERVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CONTROL_SERVICE);
}
pub const FRIDA_TYPE_CONTROL_SERVICE_OPTIONS = frida_control_service_options_get_type();
pub inline fn FRIDA_CONTROL_SERVICE_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CONTROL_SERVICE_OPTIONS, FridaControlServiceOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_CONTROL_SERVICE_OPTIONS, FridaControlServiceOptions);
}
pub inline fn FRIDA_IS_CONTROL_SERVICE_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CONTROL_SERVICE_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_CONTROL_SERVICE_OPTIONS);
}
pub const FRIDA_TYPE_PORTAL_SERVICE = frida_portal_service_get_type();
pub inline fn FRIDA_PORTAL_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PORTAL_SERVICE, FridaPortalService)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_PORTAL_SERVICE, FridaPortalService);
}
pub inline fn FRIDA_IS_PORTAL_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PORTAL_SERVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_PORTAL_SERVICE);
}
pub const FRIDA_TYPE_ENDPOINT_PARAMETERS = frida_endpoint_parameters_get_type();
pub inline fn FRIDA_ENDPOINT_PARAMETERS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_ENDPOINT_PARAMETERS, FridaEndpointParameters)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_ENDPOINT_PARAMETERS, FridaEndpointParameters);
}
pub inline fn FRIDA_IS_ENDPOINT_PARAMETERS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_ENDPOINT_PARAMETERS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_ENDPOINT_PARAMETERS);
}
pub const FRIDA_TYPE_AUTHENTICATION_SERVICE = frida_authentication_service_get_type();
pub inline fn FRIDA_AUTHENTICATION_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_AUTHENTICATION_SERVICE, FridaAuthenticationService)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_AUTHENTICATION_SERVICE, FridaAuthenticationService);
}
pub inline fn FRIDA_IS_AUTHENTICATION_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_AUTHENTICATION_SERVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_AUTHENTICATION_SERVICE);
}
pub const FRIDA_TYPE_STATIC_AUTHENTICATION_SERVICE = frida_static_authentication_service_get_type();
pub inline fn FRIDA_STATIC_AUTHENTICATION_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_STATIC_AUTHENTICATION_SERVICE, FridaStaticAuthenticationService)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_STATIC_AUTHENTICATION_SERVICE, FridaStaticAuthenticationService);
}
pub inline fn FRIDA_IS_STATIC_AUTHENTICATION_SERVICE(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_STATIC_AUTHENTICATION_SERVICE)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_STATIC_AUTHENTICATION_SERVICE);
}
pub const FRIDA_TYPE_FILE_MONITOR = frida_file_monitor_get_type();
pub inline fn FRIDA_FILE_MONITOR(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_FILE_MONITOR, FridaFileMonitor)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_FILE_MONITOR, FridaFileMonitor);
}
pub inline fn FRIDA_IS_FILE_MONITOR(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_FILE_MONITOR)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_FILE_MONITOR);
}
pub const FRIDA_TYPE_COMPILER = frida_compiler_get_type();
pub inline fn FRIDA_COMPILER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_COMPILER, FridaCompiler)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_COMPILER, FridaCompiler);
}
pub inline fn FRIDA_IS_COMPILER(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_COMPILER)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_COMPILER);
}
pub const FRIDA_TYPE_COMPILER_OPTIONS = frida_compiler_options_get_type();
pub inline fn FRIDA_COMPILER_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_COMPILER_OPTIONS, FridaCompilerOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_COMPILER_OPTIONS, FridaCompilerOptions);
}
pub inline fn FRIDA_IS_COMPILER_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_COMPILER_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_COMPILER_OPTIONS);
}
pub const FRIDA_TYPE_BUILD_OPTIONS = frida_build_options_get_type();
pub inline fn FRIDA_BUILD_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_BUILD_OPTIONS, FridaBuildOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_BUILD_OPTIONS, FridaBuildOptions);
}
pub inline fn FRIDA_IS_BUILD_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_BUILD_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_BUILD_OPTIONS);
}
pub const FRIDA_TYPE_WATCH_OPTIONS = frida_watch_options_get_type();
pub inline fn FRIDA_WATCH_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_WATCH_OPTIONS, FridaWatchOptions)) {
    return G_TYPE_CHECK_INSTANCE_CAST(obj, FRIDA_TYPE_WATCH_OPTIONS, FridaWatchOptions);
}
pub inline fn FRIDA_IS_WATCH_OPTIONS(obj: anytype) @TypeOf(G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_WATCH_OPTIONS)) {
    return G_TYPE_CHECK_INSTANCE_TYPE(obj, FRIDA_TYPE_WATCH_OPTIONS);
}
pub const FRIDA_ERROR = frida_error_quark();
pub const tm = struct_tm;
pub const timespec = struct_timespec;
pub const itimerspec = struct_itimerspec;
pub const sigval = union_sigval;
pub const sigevent = struct_sigevent;
pub const __locale_data = struct___locale_data;
pub const __locale_struct = struct___locale_struct;
pub const _GDoubleIEEE754 = union__GDoubleIEEE754;
pub const _GFloatIEEE754 = union__GFloatIEEE754;
pub const _GTimeVal = struct__GTimeVal;
pub const _GBytes = struct__GBytes;
pub const _GArray = struct__GArray;
pub const _GByteArray = struct__GByteArray;
pub const _GPtrArray = struct__GPtrArray;
pub const __va_list_tag = struct___va_list_tag;
pub const _GError = struct__GError;
pub const _GDebugKey = struct__GDebugKey;
pub const timeval = struct_timeval;
pub const __pthread_internal_list = struct___pthread_internal_list;
pub const __pthread_internal_slist = struct___pthread_internal_slist;
pub const __pthread_mutex_s = struct___pthread_mutex_s;
pub const __pthread_rwlock_arch_t = struct___pthread_rwlock_arch_t;
pub const __pthread_cond_s = struct___pthread_cond_s;
pub const random_data = struct_random_data;
pub const drand48_data = struct_drand48_data;
pub const _GThreadCallbacks = struct__GThreadCallbacks;
pub const _GThread = struct__GThread;
pub const _GMutex = union__GMutex;
pub const _GRecMutex = struct__GRecMutex;
pub const _GRWLock = struct__GRWLock;
pub const _GCond = struct__GCond;
pub const _GPrivate = struct__GPrivate;
pub const _GOnce = struct__GOnce;
pub const _GAsyncQueue = struct__GAsyncQueue;
pub const _fpx_sw_bytes = struct__fpx_sw_bytes;
pub const _fpreg = struct__fpreg;
pub const _fpxreg = struct__fpxreg;
pub const _xmmreg = struct__xmmreg;
pub const _fpstate = struct__fpstate;
pub const sigcontext = struct_sigcontext;
pub const _xsave_hdr = struct__xsave_hdr;
pub const _ymmh_state = struct__ymmh_state;
pub const _xstate = struct__xstate;
pub const _libc_fpxreg = struct__libc_fpxreg;
pub const _libc_xmmreg = struct__libc_xmmreg;
pub const _libc_fpstate = struct__libc_fpstate;
pub const _GTimeZone = struct__GTimeZone;
pub const _GDateTime = struct__GDateTime;
pub const _GBookmarkFile = struct__GBookmarkFile;
pub const _GChecksum = struct__GChecksum;
pub const _GIConv = struct__GIConv;
pub const _GData = struct__GData;
pub const _GDate = struct__GDate;
pub const dirent = struct_dirent;
pub const __dirstream = struct___dirstream;
pub const _GDir = struct__GDir;
pub const _GMemVTable = struct__GMemVTable;
pub const _GNode = struct__GNode;
pub const _GList = struct__GList;
pub const _GHashTable = struct__GHashTable;
pub const _GHashTableIter = struct__GHashTableIter;
pub const _GHmac = struct__GHmac;
pub const _GHook = struct__GHook;
pub const _GHookList = struct__GHookList;
pub const _GPollFD = struct__GPollFD;
pub const _GSList = struct__GSList;
pub const _GMainContext = struct__GMainContext;
pub const _GMainLoop = struct__GMainLoop;
pub const _GSourceCallbackFuncs = struct__GSourceCallbackFuncs;
pub const _GSourceFuncs = struct__GSourceFuncs;
pub const _GSourcePrivate = struct__GSourcePrivate;
pub const _GSource = struct__GSource;
pub const _GString = struct__GString;
pub const _GIOFuncs = struct__GIOFuncs;
pub const _GIOChannel = struct__GIOChannel;
pub const _GKeyFile = struct__GKeyFile;
pub const _GMappedFile = struct__GMappedFile;
pub const _GMarkupParseContext = struct__GMarkupParseContext;
pub const _GMarkupParser = struct__GMarkupParser;
pub const _GVariantType = struct__GVariantType;
pub const _GVariant = struct__GVariant;
pub const _GVariantIter = struct__GVariantIter;
pub const _GVariantBuilder = struct__GVariantBuilder;
pub const _GVariantDict = struct__GVariantDict;
pub const _GLogField = struct__GLogField;
pub const _GOptionContext = struct__GOptionContext;
pub const _GOptionGroup = struct__GOptionGroup;
pub const _GOptionEntry = struct__GOptionEntry;
pub const _GPatternSpec = struct__GPatternSpec;
pub const _GFDCallbacks = struct__GFDCallbacks;
pub const _GQueue = struct__GQueue;
pub const _GRand = struct__GRand;
pub const _GRegex = struct__GRegex;
pub const _GMatchInfo = struct__GMatchInfo;
pub const _GScannerConfig = struct__GScannerConfig;
pub const _GTokenValue = union__GTokenValue;
pub const _GScanner = struct__GScanner;
pub const _GSequence = struct__GSequence;
pub const _GSequenceNode = struct__GSequenceNode;
pub const _GStringChunk = struct__GStringChunk;
pub const _GStrvBuilder = struct__GStrvBuilder;
pub const _GThreadPool = struct__GThreadPool;
pub const _GTimer = struct__GTimer;
pub const _GTrashStack = struct__GTrashStack;
pub const _GTree = struct__GTree;
pub const _GTreeNode = struct__GTreeNode;
pub const _GUri = struct__GUri;
pub const _GUriParamsIter = struct__GUriParamsIter;
pub const _GAllocator = struct__GAllocator;
pub const _GMemChunk = struct__GMemChunk;
pub const _GCache = struct__GCache;
pub const _GCompletion = struct__GCompletion;
pub const _GRelation = struct__GRelation;
pub const _GTuples = struct__GTuples;
pub const _GThreadFunctions = struct__GThreadFunctions;
pub const sched_param = struct_sched_param;
pub const __jmp_buf_tag = struct___jmp_buf_tag;
pub const _pthread_cleanup_buffer = struct__pthread_cleanup_buffer;
pub const __cancel_jmp_buf_tag = struct___cancel_jmp_buf_tag;
pub const __pthread_cleanup_frame = struct___pthread_cleanup_frame;
pub const _GStaticRecMutex = struct__GStaticRecMutex;
pub const _GStaticRWLock = struct__GStaticRWLock;
pub const _GStaticPrivate = struct__GStaticPrivate;
pub const _GValue = struct__GValue;
pub const _GTypeCValue = union__GTypeCValue;
pub const _GTypePlugin = struct__GTypePlugin;
pub const _GTypeClass = struct__GTypeClass;
pub const _GTypeInterface = struct__GTypeInterface;
pub const _GTypeInstance = struct__GTypeInstance;
pub const _GTypeValueTable = struct__GTypeValueTable;
pub const _GTypeInfo = struct__GTypeInfo;
pub const _GTypeFundamentalInfo = struct__GTypeFundamentalInfo;
pub const _GInterfaceInfo = struct__GInterfaceInfo;
pub const _GTypeQuery = struct__GTypeQuery;
pub const _GParamSpec = struct__GParamSpec;
pub const _GParamSpecClass = struct__GParamSpecClass;
pub const _GParameter = struct__GParameter;
pub const _GParamSpecPool = struct__GParamSpecPool;
pub const _GParamSpecTypeInfo = struct__GParamSpecTypeInfo;
pub const _GClosure = struct__GClosure;
pub const _GClosureNotifyData = struct__GClosureNotifyData;
pub const _GCClosure = struct__GCClosure;
pub const _GSignalQuery = struct__GSignalQuery;
pub const _GSignalInvocationHint = struct__GSignalInvocationHint;
pub const _GObject = struct__GObject;
pub const _GObjectConstructParam = struct__GObjectConstructParam;
pub const _GObjectClass = struct__GObjectClass;
pub const _GBinding = struct__GBinding;
pub const _GBindingGroup = struct__GBindingGroup;
pub const _GEnumValue = struct__GEnumValue;
pub const _GEnumClass = struct__GEnumClass;
pub const _GFlagsValue = struct__GFlagsValue;
pub const _GFlagsClass = struct__GFlagsClass;
pub const _GParamSpecChar = struct__GParamSpecChar;
pub const _GParamSpecUChar = struct__GParamSpecUChar;
pub const _GParamSpecBoolean = struct__GParamSpecBoolean;
pub const _GParamSpecInt = struct__GParamSpecInt;
pub const _GParamSpecUInt = struct__GParamSpecUInt;
pub const _GParamSpecLong = struct__GParamSpecLong;
pub const _GParamSpecULong = struct__GParamSpecULong;
pub const _GParamSpecInt64 = struct__GParamSpecInt64;
pub const _GParamSpecUInt64 = struct__GParamSpecUInt64;
pub const _GParamSpecUnichar = struct__GParamSpecUnichar;
pub const _GParamSpecEnum = struct__GParamSpecEnum;
pub const _GParamSpecFlags = struct__GParamSpecFlags;
pub const _GParamSpecFloat = struct__GParamSpecFloat;
pub const _GParamSpecDouble = struct__GParamSpecDouble;
pub const _GParamSpecString = struct__GParamSpecString;
pub const _GParamSpecParam = struct__GParamSpecParam;
pub const _GParamSpecBoxed = struct__GParamSpecBoxed;
pub const _GParamSpecPointer = struct__GParamSpecPointer;
pub const _GParamSpecValueArray = struct__GParamSpecValueArray;
pub const _GParamSpecObject = struct__GParamSpecObject;
pub const _GParamSpecOverride = struct__GParamSpecOverride;
pub const _GParamSpecGType = struct__GParamSpecGType;
pub const _GParamSpecVariant = struct__GParamSpecVariant;
pub const _GSignalGroup = struct__GSignalGroup;
pub const _GTypeModule = struct__GTypeModule;
pub const _GTypeModuleClass = struct__GTypeModuleClass;
pub const _GTypePluginClass = struct__GTypePluginClass;
pub const _GValueArray = struct__GValueArray;
pub const _GTlsPasswordFlags = enum__GTlsPasswordFlags;
pub const _GAppLaunchContextPrivate = struct__GAppLaunchContextPrivate;
pub const _GAppLaunchContext = struct__GAppLaunchContext;
pub const _GAppInfo = struct__GAppInfo;
pub const _GAsyncResult = struct__GAsyncResult;
pub const _GAsyncInitable = struct__GAsyncInitable;
pub const _GInputStreamPrivate = struct__GInputStreamPrivate;
pub const _GInputStream = struct__GInputStream;
pub const _GFilterInputStream = struct__GFilterInputStream;
pub const _GBufferedInputStreamPrivate = struct__GBufferedInputStreamPrivate;
pub const _GBufferedInputStream = struct__GBufferedInputStream;
pub const _GOutputStreamPrivate = struct__GOutputStreamPrivate;
pub const _GOutputStream = struct__GOutputStream;
pub const _GFilterOutputStream = struct__GFilterOutputStream;
pub const _GBufferedOutputStreamPrivate = struct__GBufferedOutputStreamPrivate;
pub const _GBufferedOutputStream = struct__GBufferedOutputStream;
pub const _GCancellablePrivate = struct__GCancellablePrivate;
pub const _GCancellable = struct__GCancellable;
pub const _GCharsetConverter = struct__GCharsetConverter;
pub const _GConverter = struct__GConverter;
pub const _GConverterInputStreamPrivate = struct__GConverterInputStreamPrivate;
pub const _GConverterInputStream = struct__GConverterInputStream;
pub const _GConverterOutputStreamPrivate = struct__GConverterOutputStreamPrivate;
pub const _GConverterOutputStream = struct__GConverterOutputStream;
pub const _GDatagramBased = struct__GDatagramBased;
pub const _GDataInputStreamPrivate = struct__GDataInputStreamPrivate;
pub const _GDataInputStream = struct__GDataInputStream;
pub const _GSimplePermission = struct__GSimplePermission;
pub const _GZlibCompressor = struct__GZlibCompressor;
pub const _GZlibDecompressor = struct__GZlibDecompressor;
pub const _GSimpleActionGroupPrivate = struct__GSimpleActionGroupPrivate;
pub const _GSimpleActionGroup = struct__GSimpleActionGroup;
pub const _GRemoteActionGroup = struct__GRemoteActionGroup;
pub const _GDBusActionGroup = struct__GDBusActionGroup;
pub const _GActionMap = struct__GActionMap;
pub const _GActionGroup = struct__GActionGroup;
pub const _GPropertyAction = struct__GPropertyAction;
pub const _GSimpleAction = struct__GSimpleAction;
pub const _GAction = struct__GAction;
pub const _GApplicationPrivate = struct__GApplicationPrivate;
pub const _GApplication = struct__GApplication;
pub const _GApplicationCommandLinePrivate = struct__GApplicationCommandLinePrivate;
pub const _GApplicationCommandLine = struct__GApplicationCommandLine;
pub const _GSettingsBackend = struct__GSettingsBackend;
pub const _GSettingsPrivate = struct__GSettingsPrivate;
pub const _GSettings = struct__GSettings;
pub const _GPermissionPrivate = struct__GPermissionPrivate;
pub const _GPermission = struct__GPermission;
pub const _GMenuModelPrivate = struct__GMenuModelPrivate;
pub const _GMenuModel = struct__GMenuModel;
pub const _GNotification = struct__GNotification;
pub const _GDrive = struct__GDrive;
pub const _GFileEnumeratorPrivate = struct__GFileEnumeratorPrivate;
pub const _GFileEnumerator = struct__GFileEnumerator;
pub const _GFileMonitorPrivate = struct__GFileMonitorPrivate;
pub const _GFileMonitor = struct__GFileMonitor;
pub const _GFile = struct__GFile;
pub const _GFileInfo = struct__GFileInfo;
pub const _GFileAttributeMatcher = struct__GFileAttributeMatcher;
pub const _GFileAttributeInfo = struct__GFileAttributeInfo;
pub const _GFileAttributeInfoList = struct__GFileAttributeInfoList;
pub const _GFileDescriptorBased = struct__GFileDescriptorBased;
pub const _GFileInputStreamPrivate = struct__GFileInputStreamPrivate;
pub const _GFileInputStream = struct__GFileInputStream;
pub const _GFileOutputStreamPrivate = struct__GFileOutputStreamPrivate;
pub const _GFileOutputStream = struct__GFileOutputStream;
pub const _GIOStreamPrivate = struct__GIOStreamPrivate;
pub const _GIOStream = struct__GIOStream;
pub const _GFileIOStreamPrivate = struct__GFileIOStreamPrivate;
pub const _GFileIOStream = struct__GFileIOStream;
pub const _GFileIcon = struct__GFileIcon;
pub const _GFilenameCompleter = struct__GFilenameCompleter;
pub const _GIcon = struct__GIcon;
pub const _GInetAddressPrivate = struct__GInetAddressPrivate;
pub const _GInetAddress = struct__GInetAddress;
pub const _GInetAddressMaskPrivate = struct__GInetAddressMaskPrivate;
pub const _GInetAddressMask = struct__GInetAddressMask;
pub const _GSocketAddress = struct__GSocketAddress;
pub const _GInetSocketAddressPrivate = struct__GInetSocketAddressPrivate;
pub const _GInetSocketAddress = struct__GInetSocketAddress;
pub const _GNativeSocketAddressPrivate = struct__GNativeSocketAddressPrivate;
pub const _GNativeSocketAddress = struct__GNativeSocketAddress;
pub const _GInitable = struct__GInitable;
pub const _GIOModule = struct__GIOModule;
pub const _GIOExtensionPoint = struct__GIOExtensionPoint;
pub const _GIOExtension = struct__GIOExtension;
pub const _GIOSchedulerJob = struct__GIOSchedulerJob;
pub const _GIOStreamAdapter = struct__GIOStreamAdapter;
pub const _GLoadableIcon = struct__GLoadableIcon;
pub const _GBytesIcon = struct__GBytesIcon;
pub const _GMemoryInputStreamPrivate = struct__GMemoryInputStreamPrivate;
pub const _GMemoryInputStream = struct__GMemoryInputStream;
pub const _GMemoryOutputStreamPrivate = struct__GMemoryOutputStreamPrivate;
pub const _GMemoryOutputStream = struct__GMemoryOutputStream;
pub const _GMount = struct__GMount;
pub const _GMountOperationPrivate = struct__GMountOperationPrivate;
pub const _GMountOperation = struct__GMountOperation;
pub const _GNetworkAddressPrivate = struct__GNetworkAddressPrivate;
pub const _GNetworkAddress = struct__GNetworkAddress;
pub const _GNetworkMonitor = struct__GNetworkMonitor;
pub const _GNetworkServicePrivate = struct__GNetworkServicePrivate;
pub const _GNetworkService = struct__GNetworkService;
pub const _GSimpleIOStream = struct__GSimpleIOStream;
pub const _GPollableInputStream = struct__GPollableInputStream;
pub const _GPollableOutputStream = struct__GPollableOutputStream;
pub const _GResolverPrivate = struct__GResolverPrivate;
pub const _GResolver = struct__GResolver;
pub const _GResource = struct__GResource;
pub const _GSeekable = struct__GSeekable;
pub const _GSimpleAsyncResult = struct__GSimpleAsyncResult;
pub const _GSocketPrivate = struct__GSocketPrivate;
pub const _GSocket = struct__GSocket;
pub const _GSocketControlMessagePrivate = struct__GSocketControlMessagePrivate;
pub const _GSocketControlMessage = struct__GSocketControlMessage;
pub const _GSocketClientPrivate = struct__GSocketClientPrivate;
pub const _GSocketClient = struct__GSocketClient;
pub const _GSocketConnectionPrivate = struct__GSocketConnectionPrivate;
pub const _GSocketConnection = struct__GSocketConnection;
pub const _GSocketListenerPrivate = struct__GSocketListenerPrivate;
pub const _GSocketListener = struct__GSocketListener;
pub const _GSocketServicePrivate = struct__GSocketServicePrivate;
pub const _GSocketService = struct__GSocketService;
pub const _GSocketAddressEnumerator = struct__GSocketAddressEnumerator;
pub const _GSocketConnectable = struct__GSocketConnectable;
pub const _GSrvTarget = struct__GSrvTarget;
pub const _GTask = struct__GTask;
pub const _GTcpConnectionPrivate = struct__GTcpConnectionPrivate;
pub const _GTcpConnection = struct__GTcpConnection;
pub const _GTcpWrapperConnectionPrivate = struct__GTcpWrapperConnectionPrivate;
pub const _GTcpWrapperConnection = struct__GTcpWrapperConnection;
pub const _GThreadedSocketServicePrivate = struct__GThreadedSocketServicePrivate;
pub const _GThreadedSocketService = struct__GThreadedSocketService;
pub const _GDtlsConnection = struct__GDtlsConnection;
pub const _GDtlsClientConnection = struct__GDtlsClientConnection;
pub const _GDtlsServerConnection = struct__GDtlsServerConnection;
pub const _GThemedIcon = struct__GThemedIcon;
pub const _GTlsCertificatePrivate = struct__GTlsCertificatePrivate;
pub const _GTlsCertificate = struct__GTlsCertificate;
pub const _GTlsClientConnection = struct__GTlsClientConnection;
pub const _GTlsConnectionPrivate = struct__GTlsConnectionPrivate;
pub const _GTlsConnection = struct__GTlsConnection;
pub const _GTlsDatabasePrivate = struct__GTlsDatabasePrivate;
pub const _GTlsDatabase = struct__GTlsDatabase;
pub const _GTlsFileDatabase = struct__GTlsFileDatabase;
pub const _GTlsInteractionPrivate = struct__GTlsInteractionPrivate;
pub const _GTlsInteraction = struct__GTlsInteraction;
pub const _GTlsPasswordPrivate = struct__GTlsPasswordPrivate;
pub const _GTlsPassword = struct__GTlsPassword;
pub const _GTlsServerConnection = struct__GTlsServerConnection;
pub const _GVfs = struct__GVfs;
pub const _GProxyResolver = struct__GProxyResolver;
pub const _GProxy = struct__GProxy;
pub const _GProxyAddressPrivate = struct__GProxyAddressPrivate;
pub const _GProxyAddress = struct__GProxyAddress;
pub const _GProxyAddressEnumeratorPrivate = struct__GProxyAddressEnumeratorPrivate;
pub const _GProxyAddressEnumerator = struct__GProxyAddressEnumerator;
pub const _GVolume = struct__GVolume;
pub const _GVolumeMonitor = struct__GVolumeMonitor;
pub const _GInputVector = struct__GInputVector;
pub const _GInputMessage = struct__GInputMessage;
pub const _GOutputVector = struct__GOutputVector;
pub const _GOutputMessage = struct__GOutputMessage;
pub const _GCredentials = struct__GCredentials;
pub const _GUnixCredentialsMessagePrivate = struct__GUnixCredentialsMessagePrivate;
pub const _GUnixCredentialsMessage = struct__GUnixCredentialsMessage;
pub const _GUnixFDListPrivate = struct__GUnixFDListPrivate;
pub const _GUnixFDList = struct__GUnixFDList;
pub const _GDBusMessage = struct__GDBusMessage;
pub const _GDBusConnection = struct__GDBusConnection;
pub const _GDBusProxyPrivate = struct__GDBusProxyPrivate;
pub const _GDBusProxy = struct__GDBusProxy;
pub const _GDBusMethodInvocation = struct__GDBusMethodInvocation;
pub const _GDBusServer = struct__GDBusServer;
pub const _GDBusAuthObserver = struct__GDBusAuthObserver;
pub const _GDBusErrorEntry = struct__GDBusErrorEntry;
pub const _GDBusInterfaceVTable = struct__GDBusInterfaceVTable;
pub const _GDBusAnnotationInfo = struct__GDBusAnnotationInfo;
pub const _GDBusArgInfo = struct__GDBusArgInfo;
pub const _GDBusMethodInfo = struct__GDBusMethodInfo;
pub const _GDBusSignalInfo = struct__GDBusSignalInfo;
pub const _GDBusPropertyInfo = struct__GDBusPropertyInfo;
pub const _GDBusInterfaceInfo = struct__GDBusInterfaceInfo;
pub const _GDBusSubtreeVTable = struct__GDBusSubtreeVTable;
pub const _GDBusNodeInfo = struct__GDBusNodeInfo;
pub const _GDBusInterface = struct__GDBusInterface;
pub const _GDBusInterfaceSkeletonPrivate = struct__GDBusInterfaceSkeletonPrivate;
pub const _GDBusInterfaceSkeleton = struct__GDBusInterfaceSkeleton;
pub const _GDBusObject = struct__GDBusObject;
pub const _GDBusObjectSkeletonPrivate = struct__GDBusObjectSkeletonPrivate;
pub const _GDBusObjectSkeleton = struct__GDBusObjectSkeleton;
pub const _GDBusObjectProxyPrivate = struct__GDBusObjectProxyPrivate;
pub const _GDBusObjectProxy = struct__GDBusObjectProxy;
pub const _GDBusObjectManager = struct__GDBusObjectManager;
pub const _GDBusObjectManagerClientPrivate = struct__GDBusObjectManagerClientPrivate;
pub const _GDBusObjectManagerClient = struct__GDBusObjectManagerClient;
pub const _GDBusObjectManagerServerPrivate = struct__GDBusObjectManagerServerPrivate;
pub const _GDBusObjectManagerServer = struct__GDBusObjectManagerServer;
pub const _GTestDBus = struct__GTestDBus;
pub const _GSubprocess = struct__GSubprocess;
pub const _GSubprocessLauncher = struct__GSubprocessLauncher;
pub const _GActionInterface = struct__GActionInterface;
pub const _GActionGroupInterface = struct__GActionGroupInterface;
pub const _GActionMapInterface = struct__GActionMapInterface;
pub const _GActionEntry = struct__GActionEntry;
pub const _GAppLaunchContextClass = struct__GAppLaunchContextClass;
pub const _GAppInfoIface = struct__GAppInfoIface;
pub const _GAppInfoMonitor = struct__GAppInfoMonitor;
pub const _GApplicationClass = struct__GApplicationClass;
pub const _GApplicationCommandLineClass = struct__GApplicationCommandLineClass;
pub const _GInitableIface = struct__GInitableIface;
pub const _GAsyncInitableIface = struct__GAsyncInitableIface;
pub const _GAsyncResultIface = struct__GAsyncResultIface;
pub const _GInputStreamClass = struct__GInputStreamClass;
pub const _GFilterInputStreamClass = struct__GFilterInputStreamClass;
pub const _GBufferedInputStreamClass = struct__GBufferedInputStreamClass;
pub const _GOutputStreamClass = struct__GOutputStreamClass;
pub const _GFilterOutputStreamClass = struct__GFilterOutputStreamClass;
pub const _GBufferedOutputStreamClass = struct__GBufferedOutputStreamClass;
pub const _GCancellableClass = struct__GCancellableClass;
pub const _GConverterIface = struct__GConverterIface;
pub const _GCharsetConverterClass = struct__GCharsetConverterClass;
pub const _GConverterInputStreamClass = struct__GConverterInputStreamClass;
pub const _GConverterOutputStreamClass = struct__GConverterOutputStreamClass;
pub const _GCredentialsClass = struct__GCredentialsClass;
pub const _GDatagramBasedInterface = struct__GDatagramBasedInterface;
pub const _GDataInputStreamClass = struct__GDataInputStreamClass;
pub const _GDataOutputStreamPrivate = struct__GDataOutputStreamPrivate;
pub const _GDataOutputStream = struct__GDataOutputStream;
pub const _GDataOutputStreamClass = struct__GDataOutputStreamClass;
pub const _GDBusInterfaceIface = struct__GDBusInterfaceIface;
pub const _GDBusInterfaceSkeletonClass = struct__GDBusInterfaceSkeletonClass;
pub const _GDBusMenuModel = struct__GDBusMenuModel;
pub const _GDBusObjectIface = struct__GDBusObjectIface;
pub const _GDBusObjectManagerIface = struct__GDBusObjectManagerIface;
pub const _GDBusObjectManagerClientClass = struct__GDBusObjectManagerClientClass;
pub const _GDBusObjectManagerServerClass = struct__GDBusObjectManagerServerClass;
pub const _GDBusObjectProxyClass = struct__GDBusObjectProxyClass;
pub const _GDBusObjectSkeletonClass = struct__GDBusObjectSkeletonClass;
pub const _GDBusProxyClass = struct__GDBusProxyClass;
pub const _GDebugController = struct__GDebugController;
pub const _GDebugControllerInterface = struct__GDebugControllerInterface;
pub const _GDebugControllerDBus = struct__GDebugControllerDBus;
pub const _GDebugControllerDBusClass = struct__GDebugControllerDBusClass;
pub const _GDriveIface = struct__GDriveIface;
pub const _GDtlsConnectionInterface = struct__GDtlsConnectionInterface;
pub const _GDtlsClientConnectionInterface = struct__GDtlsClientConnectionInterface;
pub const _GDtlsServerConnectionInterface = struct__GDtlsServerConnectionInterface;
pub const _GIconIface = struct__GIconIface;
pub const _GEmblem = struct__GEmblem;
pub const _GEmblemClass = struct__GEmblemClass;
pub const _GEmblemedIconPrivate = struct__GEmblemedIconPrivate;
pub const _GEmblemedIcon = struct__GEmblemedIcon;
pub const _GEmblemedIconClass = struct__GEmblemedIconClass;
pub const _GFileIface = struct__GFileIface;
pub const _GFileEnumeratorClass = struct__GFileEnumeratorClass;
pub const _GFileIconClass = struct__GFileIconClass;
pub const _GFileInfoClass = struct__GFileInfoClass;
pub const _GFileInputStreamClass = struct__GFileInputStreamClass;
pub const _GIOStreamClass = struct__GIOStreamClass;
pub const _GFileIOStreamClass = struct__GFileIOStreamClass;
pub const _GFileMonitorClass = struct__GFileMonitorClass;
pub const _GFilenameCompleterClass = struct__GFilenameCompleterClass;
pub const _GFileOutputStreamClass = struct__GFileOutputStreamClass;
pub const _GInetAddressClass = struct__GInetAddressClass;
pub const _GInetAddressMaskClass = struct__GInetAddressMaskClass;
pub const _GSocketAddressClass = struct__GSocketAddressClass;
pub const _GInetSocketAddressClass = struct__GInetSocketAddressClass;
pub const _GModule = struct__GModule;
pub const _GIOModuleScope = struct__GIOModuleScope;
pub const _GIOModuleClass = struct__GIOModuleClass;
pub const _GListModel = struct__GListModel;
pub const _GListModelInterface = struct__GListModelInterface;
pub const _GListStore = struct__GListStore;
pub const _GLoadableIconIface = struct__GLoadableIconIface;
pub const _GMemoryInputStreamClass = struct__GMemoryInputStreamClass;
pub const _GMemoryMonitor = struct__GMemoryMonitor;
pub const _GMemoryMonitorInterface = struct__GMemoryMonitorInterface;
pub const _GMemoryOutputStreamClass = struct__GMemoryOutputStreamClass;
pub const _GMenuAttributeIterPrivate = struct__GMenuAttributeIterPrivate;
pub const _GMenuAttributeIter = struct__GMenuAttributeIter;
pub const _GMenuLinkIterPrivate = struct__GMenuLinkIterPrivate;
pub const _GMenuLinkIter = struct__GMenuLinkIter;
pub const _GMenuModelClass = struct__GMenuModelClass;
pub const _GMenuAttributeIterClass = struct__GMenuAttributeIterClass;
pub const _GMenuLinkIterClass = struct__GMenuLinkIterClass;
pub const _GMenuItem = struct__GMenuItem;
pub const _GMenu = struct__GMenu;
pub const _GMountIface = struct__GMountIface;
pub const _GMountOperationClass = struct__GMountOperationClass;
pub const _GNativeSocketAddressClass = struct__GNativeSocketAddressClass;
pub const _GVolumeMonitorClass = struct__GVolumeMonitorClass;
pub const _GNativeVolumeMonitor = struct__GNativeVolumeMonitor;
pub const _GNativeVolumeMonitorClass = struct__GNativeVolumeMonitorClass;
pub const _GNetworkAddressClass = struct__GNetworkAddressClass;
pub const _GNetworkMonitorInterface = struct__GNetworkMonitorInterface;
pub const _GNetworkServiceClass = struct__GNetworkServiceClass;
pub const _GPermissionClass = struct__GPermissionClass;
pub const _GPollableInputStreamInterface = struct__GPollableInputStreamInterface;
pub const _GPollableOutputStreamInterface = struct__GPollableOutputStreamInterface;
pub const _GPowerProfileMonitor = struct__GPowerProfileMonitor;
pub const _GPowerProfileMonitorInterface = struct__GPowerProfileMonitorInterface;
pub const _GProxyInterface = struct__GProxyInterface;
pub const _GProxyAddressClass = struct__GProxyAddressClass;
pub const _GSocketAddressEnumeratorClass = struct__GSocketAddressEnumeratorClass;
pub const _GProxyAddressEnumeratorClass = struct__GProxyAddressEnumeratorClass;
pub const _GProxyResolverInterface = struct__GProxyResolverInterface;
pub const _GRemoteActionGroupInterface = struct__GRemoteActionGroupInterface;
pub const _GResolverClass = struct__GResolverClass;
pub const _GStaticResource = struct__GStaticResource;
pub const _GSeekableIface = struct__GSeekableIface;
pub const _GSettingsSchemaSource = struct__GSettingsSchemaSource;
pub const _GSettingsSchema = struct__GSettingsSchema;
pub const _GSettingsSchemaKey = struct__GSettingsSchemaKey;
pub const _GSettingsClass = struct__GSettingsClass;
pub const _GSimpleActionGroupClass = struct__GSimpleActionGroupClass;
pub const _GSimpleAsyncResultClass = struct__GSimpleAsyncResultClass;
pub const _GSimpleProxyResolverPrivate = struct__GSimpleProxyResolverPrivate;
pub const _GSimpleProxyResolver = struct__GSimpleProxyResolver;
pub const _GSimpleProxyResolverClass = struct__GSimpleProxyResolverClass;
pub const _GSocketClass = struct__GSocketClass;
pub const _GSocketClientClass = struct__GSocketClientClass;
pub const _GSocketConnectableIface = struct__GSocketConnectableIface;
pub const _GSocketConnectionClass = struct__GSocketConnectionClass;
pub const _GSocketControlMessageClass = struct__GSocketControlMessageClass;
pub const _GSocketListenerClass = struct__GSocketListenerClass;
pub const _GSocketServiceClass = struct__GSocketServiceClass;
pub const _GTaskClass = struct__GTaskClass;
pub const _GTcpConnectionClass = struct__GTcpConnectionClass;
pub const _GTcpWrapperConnectionClass = struct__GTcpWrapperConnectionClass;
pub const _GThemedIconClass = struct__GThemedIconClass;
pub const _GThreadedSocketServiceClass = struct__GThreadedSocketServiceClass;
pub const _GTlsBackend = struct__GTlsBackend;
pub const _GTlsBackendInterface = struct__GTlsBackendInterface;
pub const _GTlsCertificateClass = struct__GTlsCertificateClass;
pub const _GTlsConnectionClass = struct__GTlsConnectionClass;
pub const _GTlsClientConnectionInterface = struct__GTlsClientConnectionInterface;
pub const _GTlsDatabaseClass = struct__GTlsDatabaseClass;
pub const _GTlsFileDatabaseInterface = struct__GTlsFileDatabaseInterface;
pub const _GTlsInteractionClass = struct__GTlsInteractionClass;
pub const _GTlsPasswordClass = struct__GTlsPasswordClass;
pub const _GTlsServerConnectionInterface = struct__GTlsServerConnectionInterface;
pub const _GUnixConnectionPrivate = struct__GUnixConnectionPrivate;
pub const _GUnixConnection = struct__GUnixConnection;
pub const _GUnixConnectionClass = struct__GUnixConnectionClass;
pub const _GUnixCredentialsMessageClass = struct__GUnixCredentialsMessageClass;
pub const _GUnixFDListClass = struct__GUnixFDListClass;
pub const _GUnixSocketAddressPrivate = struct__GUnixSocketAddressPrivate;
pub const _GUnixSocketAddress = struct__GUnixSocketAddress;
pub const _GUnixSocketAddressClass = struct__GUnixSocketAddressClass;
pub const _GVfsClass = struct__GVfsClass;
pub const _GVolumeIface = struct__GVolumeIface;
pub const _GZlibCompressorClass = struct__GZlibCompressorClass;
pub const _GZlibDecompressorClass = struct__GZlibDecompressorClass;
pub const _JsonNode = struct__JsonNode;
pub const _JsonObject = struct__JsonObject;
pub const _JsonArray = struct__JsonArray;
pub const _JsonBuilderPrivate = struct__JsonBuilderPrivate;
pub const _JsonBuilder = struct__JsonBuilder;
pub const _JsonBuilderClass = struct__JsonBuilderClass;
pub const _JsonGeneratorPrivate = struct__JsonGeneratorPrivate;
pub const _JsonGenerator = struct__JsonGenerator;
pub const _JsonGeneratorClass = struct__JsonGeneratorClass;
pub const _JsonParserPrivate = struct__JsonParserPrivate;
pub const _JsonParser = struct__JsonParser;
pub const _JsonParserClass = struct__JsonParserClass;
pub const _JsonPath = struct__JsonPath;
pub const _JsonPathClass = struct__JsonPathClass;
pub const _JsonReaderPrivate = struct__JsonReaderPrivate;
pub const _JsonReader = struct__JsonReader;
pub const _JsonReaderClass = struct__JsonReaderClass;
pub const _JsonSerializable = struct__JsonSerializable;
pub const _JsonSerializableIface = struct__JsonSerializableIface;
pub const _FridaDeviceManager = struct__FridaDeviceManager;
pub const _FridaDeviceList = struct__FridaDeviceList;
pub const _FridaDevice = struct__FridaDevice;
pub const _FridaRemoteDeviceOptions = struct__FridaRemoteDeviceOptions;
pub const _FridaApplicationList = struct__FridaApplicationList;
pub const _FridaApplication = struct__FridaApplication;
pub const _FridaProcessList = struct__FridaProcessList;
pub const _FridaProcess = struct__FridaProcess;
pub const _FridaProcessMatchOptions = struct__FridaProcessMatchOptions;
pub const _FridaSpawnOptions = struct__FridaSpawnOptions;
pub const _FridaFrontmostQueryOptions = struct__FridaFrontmostQueryOptions;
pub const _FridaApplicationQueryOptions = struct__FridaApplicationQueryOptions;
pub const _FridaProcessQueryOptions = struct__FridaProcessQueryOptions;
pub const _FridaSessionOptions = struct__FridaSessionOptions;
pub const _FridaSpawnList = struct__FridaSpawnList;
pub const _FridaSpawn = struct__FridaSpawn;
pub const _FridaChildList = struct__FridaChildList;
pub const _FridaChild = struct__FridaChild;
pub const _FridaCrash = struct__FridaCrash;
pub const _FridaBus = struct__FridaBus;
pub const _FridaSession = struct__FridaSession;
pub const _FridaScript = struct__FridaScript;
pub const _FridaSnapshotOptions = struct__FridaSnapshotOptions;
pub const _FridaScriptOptions = struct__FridaScriptOptions;
pub const _FridaPeerOptions = struct__FridaPeerOptions;
pub const _FridaRelay = struct__FridaRelay;
pub const _FridaPortalOptions = struct__FridaPortalOptions;
pub const _FridaPortalMembership = struct__FridaPortalMembership;
pub const _FridaRpcClient = struct__FridaRpcClient;
pub const _FridaRpcPeer = struct__FridaRpcPeer;
pub const _FridaRpcPeerIface = struct__FridaRpcPeerIface;
pub const _FridaInjector = struct__FridaInjector;
pub const _FridaControlService = struct__FridaControlService;
pub const _FridaControlServiceOptions = struct__FridaControlServiceOptions;
pub const _FridaPortalService = struct__FridaPortalService;
pub const _FridaEndpointParameters = struct__FridaEndpointParameters;
pub const _FridaAuthenticationService = struct__FridaAuthenticationService;
pub const _FridaAuthenticationServiceIface = struct__FridaAuthenticationServiceIface;
pub const _FridaStaticAuthenticationService = struct__FridaStaticAuthenticationService;
pub const _FridaFileMonitor = struct__FridaFileMonitor;
pub const _FridaCompiler = struct__FridaCompiler;
pub const _FridaCompilerOptions = struct__FridaCompilerOptions;
pub const _FridaBuildOptions = struct__FridaBuildOptions;
pub const _FridaWatchOptions = struct__FridaWatchOptions;
pub const _FridaHostSession = struct__FridaHostSession;
